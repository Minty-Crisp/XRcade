/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/external/other.js":
/*!*******************************!*\
  !*** ./src/external/other.js ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
//
//AUXL : A-Frame UX Library
//v0.3 Engine
//https://github.com/Minty-Crisp/AUXL
//
//Created by Minty-Crisp (mintycrisp.com)
//
//Third Party
//
//auxlthirdparty

//
//AUXL Third Party Showcase
//Externally built ObjGen testing example
const auxlthirdparty = AFRAME.registerComponent('auxl-third-party', {
dependencies: ['auxl'],
init: function () {
//AUXL System Connection
const auxl = document.querySelector('a-scene').systems.auxl;


//
//Testing Object Custom
auxl.TestObj = (id) => {

	let testObj = {};
	testObj.id = id;
	//Cube
	testObj.testData = {
	data:'testData',
	id:'test',
	sources: false,
	text: false,
	geometry: {primitive: 'box', depth: 0.5, width: 0.5, height: 0.5},
	material: {shader: "standard", src: auxl.pattern10, repeat: '1 1', color: "#52a539", emissive: '#52a539', emissiveIntensity: 0.25, opacity: 1},
	position: new THREE.Vector3(-1.5,2.5,-1.5),
	rotation: new THREE.Vector3(0,0,0),
	scale: new THREE.Vector3(1,1,1),
	animations: false,
	mixins: false,
	classes: ['clickable','a-ent'],
	components: {
		doorway:{zone: 'zone0', to: 'connect0'},
	},
	};
	testObj.test = auxl.Core(testObj.testData);

	const SpawnTest = () => {
		testObj.test.SpawnCore();
	}

	const DespawnTest = () => {
		testObj.test.DespawnCore();
	}

	const TestMethod = (params) => {
		console.log(params);
	}

	return {testObj, SpawnTest, DespawnTest, TestMethod};
}
//Dynamically Add to Tracker
//name of the object inside of the ObjGen
//name of the Spawn and Despawn methods, must be unique
auxl.AddObjGenToTracker('testObj', 'SpawnTest', 'DespawnTest');
auxl.test = auxl.TestObj('test');

//Build Extra Objects
auxl.buildExtra = () => {

auxl.test = auxl.TestObj('test');

}
auxl.toBeRebuilt('buildExtra');


},
});

//
//Export
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (auxlthirdparty);

/***/ }),

/***/ "./src/external/threeGradShader.js":
/*!*****************************************!*\
  !*** ./src/external/threeGradShader.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
//
//AUXL : A-Frame UX Library
//v0.3 Engine
//https://github.com/Minty-Crisp/AUXL
//
//Created by Minty-Crisp (mintycrisp.com)
//
//External
//
//threeColorGradientShader

//
//threeColorGradientShader shader - https://github.com/tlaukkan/aframe-three-color-gradient-shader
const threeColorGradientShader = AFRAME.registerShader('threeColorGradientShader', {
    schema: {
        topColor: {type: 'color', default: '1 0 0', is: 'uniform'},
        middleColor: {type: 'color', default: '0 1 0', is: 'uniform'},
        bottomColor: {type: 'color', default: '0 0 1', is: 'uniform'}
    },

    vertexShader: [
        'varying vec3 vWorldPosition;',
        'void main() {',
        ' vec4 worldPosition = modelMatrix * vec4( position, 1.0 );',
        ' vWorldPosition = worldPosition.xyz;',
        ' gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0 );',
        '}'
    ].join('\n'),

    fragmentShader: [
        'uniform vec3 bottomColor;',
        'uniform vec3 middleColor;',
        'uniform vec3 topColor;',
        'uniform float offset;',
        'varying vec3 vWorldPosition;',
        'void main() {',
        ' float h = normalize( vWorldPosition ).y;',
        ' if (h>0.0) {',
        '   gl_FragColor = vec4( mix( middleColor, topColor, max( pow( max(h, 0.0 ), 0.8 ), 0.0 ) ), 1.0 );',
        ' } else {',
        '   gl_FragColor = vec4( mix( middleColor, bottomColor, max( pow( max(-h, 0.0 ), 0.8 ), 0.0 ) ), 1.0 );',
        ' }',
        '}'
    ].join('\n')
});

//
//Export
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (threeColorGradientShader);

/***/ }),

/***/ "./src/games/arcade.js":
/*!*****************************!*\
  !*** ./src/games/arcade.js ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
//
//AUXL : A-Frame UX Library
//v0.3 Engine
//https://github.com/Minty-Crisp/AUXL
//
//Created by Minty-Crisp (mintycrisp.com)
//
//Arcade

//
//Arcade System & Games
//Unique Game system ObjGens
const arcade = AFRAME.registerComponent('arcade', {
dependencies: ['auxl'],
init: function () {
//AUXL System Connection
const auxl = document.querySelector('a-scene').systems.auxl;



//
//Game Menu
auxl.GameMenu = (gameMenuData) => {

	let gameMenu = Object.assign({}, gameMenuData);
	gameMenu.inScene = false;
	gameMenu.menuId = gameMenu.id + 'layer';
	gameMenu.state = false;
	gameMenu.sceneTimeout;
	gameMenu.title = gameMenu.game.title;
	gameMenu.instructions = gameMenu.game.instructionsText;
	gameMenu.controls = gameMenu.game.controlsText;
	gameMenu.preview = gameMenu.game.previewImage;
	//Preview Window
	gameMenu.windowText = {value:'', wrapCount: 30, color: "#FFFFFF", font: "exo2bold", zOffset: 0.005, side: 'double', align: "center", baseline: 'center', width: 0.45};
	//Window Material
	gameMenu.windowMaterial = {shader: "standard", color: "#c1664b", opacity: 1, metalness: 0.2, roughness: 0.8, emissive: "#c1664b", emissiveIntensity: 0.6, side: 'double',};
	//Preview Material
	gameMenu.previewMaterial = {shader: "standard", color: "#c1664b", opacity: 1, metalness: 0.2, roughness: 0.8, emissive: "#c1664b", emissiveIntensity: 0.6, side: 'double', src: gameMenu.preview, repeat: '1 1'};
	//Window Preview
	gameMenu.windowPreviewData = {
	data:'windowPreviewData',
	id:'windowPreview',
	sources:false,
	text: gameMenu.windowText,
	geometry: {primitive: 'plane', width: 0.5, height: 0.5,},
	material: gameMenu.previewMaterial,
	position: new THREE.Vector3(-0.25,1.5,0.25),
	rotation: new THREE.Vector3(0,0,0),
	scale: new THREE.Vector3(1,1,1),
	animations: false,
	mixins: false,
	classes: ['a-ent'],
	components: {
		//['look-at-xyz']:{match: 'camera', x:false, y:true, z:false},
		['stare']:{id: 'playerRig'},
	},
	};
	gameMenu.windowPreview = auxl.Core(gameMenu.windowPreviewData);
	//Game Title
	gameMenu.gameTitleData = {
	data:'gameTitleData',
	id:'gameTitle',
	sources:false,
	text: {value:gameMenu.title, wrapCount: 20, color: "#FFFFFF", font: "exo2bold", zOffset: 0.005, side: 'double', align: "center", baseline: 'center', width: 0.5},
	geometry: false,
	material: false,
	position: new THREE.Vector3(0,0.225,0),
	rotation: new THREE.Vector3(0,0,0),
	scale: new THREE.Vector3(1,1,1),
	animations: false,
	mixins: false,
	classes: ['a-ent'],
	components: false,
	};
	gameMenu.gameTitle = auxl.Core(gameMenu.gameTitleData);
	//Game Control Button - Play|Start|Restart
	gameMenu.gameControlButtonData = {
	data:'gameControlButtonData',
	id:'gameControlButton',
	sources:false,
	sounds: {
		click: {src: auxl.drop1, autoplay: false, loop: false, volume: 1, on: 'click'},
	},
	text: {value:'Load', wrapCount: 20, color: "#FFFFFF", font: "exo2bold", zOffset: 0.005, side: 'double', align: "center", baseline: 'center', width: 0.4},
	geometry: {primitive: 'circle', radius: 0.1, segments: 32, thetaStart: 0, thetaLength: 360},
	material: {shader: "standard", color: "#c1664b", opacity: 1, metalness: 0.2, roughness: 0.8, emissive: "#c1664b", emissiveIntensity: 0.6, side: 'double'},
	position: new THREE.Vector3(0.5,0.25,0),
	rotation: new THREE.Vector3(0,0,0),
	scale: new THREE.Vector3(1,1,1),
	animations:{
	click1:{property: 'scale', from: '1 1 1', to: '1.05 1.05 1.05', dur: 125, delay: 0, loop: '1', dir: 'alternate', easing: 'easeInOutElastic', elasticity: 400, autoplay: false, enabled: true, startEvents: 'click'},
	},
	mixins: false,
	classes: ['clickable','a-ent'],
	components: false,
	};
	gameMenu.gameControlButton = auxl.Core(gameMenu.gameControlButtonData);
	//View Instructions Button
	gameMenu.gameInstructionsButtonData = {
	data:'gameInstructionsButtonData',
	id:'gameInstructionsButton',
	sources:false,
	sounds: {
		click: {src: auxl.drop1, autoplay: false, loop: false, volume: 1, on: 'click'},
	},
	text: {value:'Instructions', wrapCount: 30, color: "#FFFFFF", font: "exo2bold", zOffset: 0.005, side: 'double', align: "center", baseline: 'center', width: 0.4},
	geometry: {primitive: 'circle', radius: 0.1, segments: 32, thetaStart: 0, thetaLength: 360},
	material: {shader: "standard", color: "#c1664b", opacity: 1, metalness: 0.2, roughness: 0.8, emissive: "#c1664b", emissiveIntensity: 0.6, side: 'double'},
	position: new THREE.Vector3(0.75,0.25,0),
	rotation: new THREE.Vector3(0,0,0),
	scale: new THREE.Vector3(1,1,1),
	animations:{
	click1:{property: 'scale', from: '1 1 1', to: '1.05 1.05 1.05', dur: 125, delay: 0, loop: '1', dir: 'alternate', easing: 'easeInOutElastic', elasticity: 400, autoplay: false, enabled: true, startEvents: 'click'},
	},
	mixins: false,
	classes: ['clickable','a-ent'],
	components: false,
	};
	gameMenu.gameInstructionsButton = auxl.Core(gameMenu.gameInstructionsButtonData);
	//View Controls Button
	gameMenu.gameControlsButtonData = {
	data:'gameControlsButtonData',
	id:'gameControlsButton',
	sources:false,
	sounds: {
		click: {src: auxl.drop1, autoplay: false, loop: false, volume: 1, on: 'click'},
	},
	text: {value:'Controls', wrapCount: 20, color: "#FFFFFF", font: "exo2bold", zOffset: 0.005, side: 'double', align: "center", baseline: 'center', width: 0.4},
	geometry: {primitive: 'circle', radius: 0.1, segments: 32, thetaStart: 0, thetaLength: 360},
	material: {shader: "standard", color: "#c1664b", opacity: 1, metalness: 0.2, roughness: 0.8, emissive: "#c1664b", emissiveIntensity: 0.6, side: 'double'},
	position: new THREE.Vector3(0.5,0,0),
	rotation: new THREE.Vector3(0,0,0),
	scale: new THREE.Vector3(1,1,1),
	animations:{
	click1:{property: 'scale', from: '1 1 1', to: '1.05 1.05 1.05', dur: 125, delay: 0, loop: '1', dir: 'alternate', easing: 'easeInOutElastic', elasticity: 400, autoplay: false, enabled: true, startEvents: 'click'},
	},
	mixins: false,
	classes: ['clickable','a-ent'],
	components: false,
	};
	gameMenu.gameControlsButton = auxl.Core(gameMenu.gameControlsButtonData);
	//View High Scores Button
	gameMenu.gameScoresButtonData = {
	data:'gameScoresButtonData',
	id:'gameScoresButton',
	sources:false,
	sounds: {
		click: {src: auxl.drop1, autoplay: false, loop: false, volume: 1, on: 'click'},
	},
	text: {value:'High Scores', wrapCount: 20, color: "#FFFFFF", font: "exo2bold", zOffset: 0.005, side: 'double', align: "center", baseline: 'center', width: 0.4},
	geometry: {primitive: 'circle', radius: 0.1, segments: 32, thetaStart: 0, thetaLength: 360},
	material: {shader: "standard", color: "#c1664b", opacity: 1, metalness: 0.2, roughness: 0.8, emissive: "#c1664b", emissiveIntensity: 0.6, side: 'double'},
	position: new THREE.Vector3(0.75,0,0),
	rotation: new THREE.Vector3(0,0,0),
	scale: new THREE.Vector3(1,1,1),
	animations:{
	click1:{property: 'scale', from: '1 1 1', to: '1.05 1.05 1.05', dur: 125, delay: 0, loop: '1', dir: 'alternate', easing: 'easeInOutElastic', elasticity: 400, autoplay: false, enabled: true, startEvents: 'click'},
	},
	mixins: false,
	classes: ['clickable','a-ent'],
	components: false,
	};
	gameMenu.gameScoresButton = auxl.Core(gameMenu.gameScoresButtonData);
	//Change Difficulty Setting Button
	gameMenu.gameSettingsButtonData = {
	data:'gameSettingsButtonData',
	id:'gameSettingsButton',
	sources:false,
	sounds: {
		click: {src: auxl.drop1, autoplay: false, loop: false, volume: 1, on: 'click'},
	},
	text: {value:'Settings', wrapCount: 20, color: "#FFFFFF", font: "exo2bold", zOffset: 0.005, side: 'double', align: "center", baseline: 'center', width: 0.4},
	geometry: {primitive: 'circle', radius: 0.1, segments: 32, thetaStart: 0, thetaLength: 360},
	material: {shader: "standard", color: "#c1664b", opacity: 1, metalness: 0.2, roughness: 0.8, emissive: "#c1664b", emissiveIntensity: 0.6, side: 'double'},
	position: new THREE.Vector3(0.5,-0.25,0),
	rotation: new THREE.Vector3(0,0,0),
	scale: new THREE.Vector3(1,1,1),
	animations:{
	click1:{property: 'scale', from: '1 1 1', to: '1.05 1.05 1.05', dur: 125, delay: 0, loop: '1', dir: 'alternate', easing: 'easeInOutElastic', elasticity: 400, autoplay: false, enabled: true, startEvents: 'click'},
	},
	mixins: false,
	classes: ['clickable','a-ent'],
	components: false,
	};
	gameMenu.gameSettingsButton = auxl.Core(gameMenu.gameSettingsButtonData);
	//Exit Game
	gameMenu.menuHideButtonData = {
	data:'menuHideButtonData',
	id:'menuHideButton',
	sources:false,
	sounds: {
		click: {src: auxl.drop1, autoplay: false, loop: false, volume: 1, on: 'click'},
	},
	text: {value:'Close', wrapCount: 20, color: "#FFFFFF", font: "exo2bold", zOffset: 0.005, side: 'double', align: "center", baseline: 'center', width: 0.4},
	geometry: {primitive: 'circle', radius: 0.1, segments: 32, thetaStart: 0, thetaLength: 360},
	material: {shader: "standard", color: "#c1664b", opacity: 1, metalness: 0.2, roughness: 0.8, emissive: "#c1664b", emissiveIntensity: 0.6, side: 'double'},
	position: new THREE.Vector3(0.75,-0.25,0),
	rotation: new THREE.Vector3(0,0,0),
	scale: new THREE.Vector3(1,1,1),
	animations:{
	click1:{property: 'scale', from: '1 1 1', to: '1.05 1.05 1.05', dur: 125, delay: 0, loop: '1', dir: 'alternate', easing: 'easeInOutElastic', elasticity: 400, autoplay: false, enabled: true, startEvents: 'click'},
	},
	mixins: false,
	classes: ['clickable','a-ent'],
	components: false,
	};
	gameMenu.menuHideButton = auxl.Core(gameMenu.menuHideButtonData);
	//Game Menu Layer
	gameMenu.gameMenuData = {
		parent: {core: gameMenu.windowPreview},
		child0: {core: gameMenu.gameTitle},
		child1: {core: gameMenu.gameControlButton},
		child2: {core: gameMenu.gameInstructionsButton},
		child3: {core: gameMenu.gameControlsButton},
		child4: {core: gameMenu.gameScoresButton},
		child5: {core: gameMenu.gameSettingsButton},
		child6: {core: gameMenu.menuHideButton},
	}
	gameMenu[gameMenu.menuId] = auxl.Layer(gameMenu.menuId, gameMenu.gameMenuData);

	//Spawn Game Menu
	const SpawnGameMenu = () => {
		if(gameMenu.inScene){}else{
			if(auxl.currentGameMenu){
				auxl[auxl.currentGameMenu].DespawnGameMenu();
			}
			gameMenu[gameMenu.menuId].SpawnLayer();
			LoadButtonEvents();
			if(gameMenu.game.inScene){
				Load();
			} else {
				Exit();
			}
			ViewPreview();
			auxl.currentGameMenu = gameMenu.id;
			gameMenu.inScene = true;
		}
	}
	//Despawn Game Menu
	const DespawnGameMenu = () => {
		if(gameMenu.inScene){
			clearTimeout(gameMenu.sceneTimeout);
			MenuState(false);
			UnloadButtonEvents();
			gameMenu[gameMenu.menuId].DespawnLayer();
			auxl.currentGameMenu = false;
			gameMenu.inScene = false;
		}
	}
	//Toggle Game Menu
	const ToggleGameMenu = () => {
		if(gameMenu.inScene){
			DespawnGameMenu();
		} else {
			SpawnGameMenu();
		}
	}
	//Menu State
	const MenuState = (state) => {
		//Old
		if(gameMenu.state === 'preview'){
			PreviewModeOff();
		} else if(gameMenu.state === 'instructions'){
			InstructionsModeOff();
		} else if(gameMenu.state === 'controls'){
			ControlsModeOff();
		} else if(gameMenu.state === 'scores'){
			ScoresModeOff();
		} else if(state === 'load'){

		} else if(state === 'exit'){

		}
		//New
		if(state === 'preview'){
			PreviewModeOn();
		} else if(state === 'instructions'){
			InstructionsModeOn();
		} else if(state === 'controls'){
			ControlsModeOn();
		} else if(state === 'scores'){
			ScoresModeOn();
		} else if(state === 'load'){

		} else if(state === 'exit'){

		}
		gameMenu.state = state;
	}
	//LoadButtonEvents
	const LoadButtonEvents = () => {
		gameMenu.gameControlButton.GetEl().addEventListener('click', MoveToGame);
		gameMenu.gameInstructionsButton.GetEl().addEventListener('click', ViewInstructions);
		gameMenu.gameControlsButton.GetEl().addEventListener('click', ViewControls);
		gameMenu.gameScoresButton.GetEl().addEventListener('click', ViewScores);
		gameMenu.menuHideButton.GetEl().addEventListener('click', DespawnGameMenu);
	}
	//UnloadButtonEvents
	const UnloadButtonEvents = () => {
		gameMenu.gameControlButton.GetEl().removeEventListener('click', MoveToGame);
		gameMenu.gameInstructionsButton.GetEl().removeEventListener('click', ViewInstructions);
		gameMenu.gameControlsButton.GetEl().removeEventListener('click', ViewControls);
		gameMenu.gameScoresButton.GetEl().removeEventListener('click', ViewScores);
		gameMenu.menuHideButton.GetEl().removeEventListener('click', DespawnGameMenu);
	}
	//Move to Game
	const MoveToGame = () => {
		auxl[gameMenu.gameZone].Change(gameMenu.gameZone, gameMenu.gameConnect);
		Load();
	}
	//Load Game World
	const Load = () => {
		gameMenu.gameControlButton.GetEl().removeEventListener('click', MoveToGame);
		gameMenu[gameMenu.menuId].ChangeParent({property: 'position', value: gameMenu.inGamePos});
		gameMenu.sceneTimeout = setTimeout(() => {
			gameMenu.gameControlButton.GetEl().addEventListener('click', MoveToHome);
			gameMenu.gameControlButton.ChangeSelf({property: 'text', value: {value: 'Return'}})
			clearTimeout(gameMenu.sceneTimeout);
		}, 500);
	}
	//Move to Home
	const MoveToHome = () => {
		auxl[gameMenu.homeZone].Change(gameMenu.homeZone, gameMenu.homeConnect);
		Exit();
	}
	//Exit Game World
	const Exit = () => {
		gameMenu.gameControlButton.GetEl().removeEventListener('click', MoveToHome);
		gameMenu.sceneTimeout = setTimeout(() => {
			gameMenu.gameControlButton.GetEl().addEventListener('click', MoveToGame);
			gameMenu[gameMenu.menuId].ChangeParent({property: 'position', value: gameMenu.outGamePos});
			gameMenu.gameControlButton.ChangeSelf({property: 'text', value: {value: 'Load'}})
			clearTimeout(gameMenu.sceneTimeout);
		}, 500);
	}
	//View Preview
	const ViewPreview = () => {
		MenuState('preview');
	}
	//Preview Mode On
	const PreviewModeOn = () => {
		gameMenu.windowText.value = '';
		gameMenu.windowPreview.ChangeSelf([{property: 'material', value: gameMenu.previewMaterial},{property: 'text', value: gameMenu.windowText}]);
	}
	//Preview Mode Off
	const PreviewModeOff = () => {

	}
	//View Instructions
	const ViewInstructions = () => {
		MenuState('instructions');
	}
	//Instructions Mode On
	const InstructionsModeOn = () => {
		gameMenu.windowText.value = gameMenu.instructions;
		gameMenu.windowPreview.ChangeSelf([{property: 'material', value: gameMenu.windowMaterial},{property: 'text', value: gameMenu.windowText}]);
		gameMenu.gameInstructionsButton.ChangeSelf({property: 'text', value: {value: 'Back'}})
		gameMenu.gameInstructionsButton.GetEl().removeEventListener('click', ViewInstructions);
		gameMenu.gameInstructionsButton.GetEl().addEventListener('click', ViewPreview);
	}
	//Instructions Mode Off
	const InstructionsModeOff = () => {
		gameMenu.gameInstructionsButton.ChangeSelf({property: 'text', value: {value: 'Instructions'}})
		gameMenu.gameInstructionsButton.GetEl().removeEventListener('click', ViewPreview);
		gameMenu.gameInstructionsButton.GetEl().addEventListener('click', ViewInstructions);
	}
	//View Controls
	const ViewControls = () => {
		MenuState('controls');
	}
	//Controls Mode On
	const ControlsModeOn = () => {
		gameMenu.windowText.value = gameMenu.controls;
		gameMenu.windowPreview.ChangeSelf([{property: 'material', value: gameMenu.windowMaterial},{property: 'text', value: gameMenu.windowText}]);
		gameMenu.gameControlsButton.ChangeSelf({property: 'text', value: {value: 'Back'}})
		gameMenu.gameControlsButton.GetEl().removeEventListener('click', ViewControls);
		gameMenu.gameControlsButton.GetEl().addEventListener('click', ViewPreview);
	}
	//Controls Mode Off
	const ControlsModeOff = () => {
		gameMenu.gameControlsButton.ChangeSelf({property: 'text', value: {value: 'Controls'}})
		gameMenu.gameControlsButton.GetEl().removeEventListener('click', ViewPreview);
		gameMenu.gameControlsButton.GetEl().addEventListener('click', ViewControls);
	}
	//View High Scores
	const ViewScores = () => {
		MenuState('scores');
	}
	//Scores Mode On
	const ScoresModeOn = () => {
		gameMenu.windowText.value = gameMenu.game.highScores.text;
		gameMenu.windowPreview.ChangeSelf([{property: 'material', value: gameMenu.windowMaterial},{property: 'text', value: gameMenu.windowText}]);
		gameMenu.gameScoresButton.ChangeSelf({property: 'text', value: {value: 'Back'}})
		gameMenu.gameScoresButton.GetEl().removeEventListener('click', ViewScores);
		gameMenu.gameScoresButton.GetEl().addEventListener('click', ViewPreview);
	}
	//Scores Mode Off
	const ScoresModeOff = () => {
		gameMenu.gameScoresButton.ChangeSelf({property: 'text', value: {value: 'High Scores'}})
		gameMenu.gameScoresButton.GetEl().removeEventListener('click', ViewPreview);
		gameMenu.gameScoresButton.GetEl().addEventListener('click', ViewScores);
	}
	//Change Difficulty
	const ChangeMode = () => {

	}

	return {gameMenu, SpawnGameMenu, DespawnGameMenu, ToggleGameMenu}
}

//
//Highscore

//Blank High Scores
const blankHighScores = (type, acc) => {
	let highScores = {};
	highScores.type = ' '+type +'\n';
	highScores.acc = acc || 0;
	highScores.score1 = 0;
	highScores.name1 = 'Null';
	highScores.score2 = 0;
	highScores.name2 = 'Null';
	highScores.score3 = 0;
	highScores.name3 = 'Null';
	highScores.score4 = 0;
	highScores.name4 = 'Null';
	highScores.score5 = 0;
	highScores.name5 = 'Null';
	//highScores.text = 'High Scores :\n1. Name : 0 '+highScores.type+'2. Name : 0 '+highScores.type+'3. Name : 0 '+highScores.type+'4. Name : 0 '+highScores.type+'5. Name : 0 '+highScores.type+'';
	highScores.text = 'High Scores :\n1| 0 '+highScores.type+'2| 0 '+highScores.type+'3|0 '+highScores.type+'4| 0 '+highScores.type+'5| 0 '+highScores.type+'';
	return highScores;
}
//Build High Score Text
const refreshHighScoreText = (highScores) => {
	//highScores.text = 'High Scores :\n' + '1. '+highScores.name1+' : '+highScores.score1.toFixed(highScores.acc)+highScores.type+'2. '+highScores.name2+' : '+highScores.score2.toFixed(highScores.acc)+highScores.type+'3. '+highScores.name3+' : '+highScores.score3.toFixed(highScores.acc)+highScores.type+'4. '+highScores.name4+' : '+highScores.score4.toFixed(highScores.acc)+highScores.type+'5. '+highScores.name5+' : '+highScores.score5.toFixed(highScores.acc)+highScores.type;
	highScores.text = 'High Scores :\n' + '1| '+highScores.score1.toFixed(highScores.acc)+highScores.type+'2| '+highScores.score2.toFixed(highScores.acc)+highScores.type+'3| '+highScores.score3.toFixed(highScores.acc)+highScores.type+'4| '+highScores.score4.toFixed(highScores.acc)+highScores.type+'5| '+highScores.score5.toFixed(highScores.acc)+highScores.type;
	return highScores.text;
}
//Check for High Score
const checkHighScore = (score, highScores) => {
	if(score > highScores.score1){
		highScores.score5 = JSON.parse(JSON.stringify(highScores.score4));
		highScores.name5 = JSON.parse(JSON.stringify(highScores.name4));
		highScores.score4 = JSON.parse(JSON.stringify(highScores.score3));
		highScores.name4 = JSON.parse(JSON.stringify(highScores.name3));
		highScores.score3 = JSON.parse(JSON.stringify(highScores.score2));
		highScores.name3 = JSON.parse(JSON.stringify(highScores.name2));
		highScores.score2 = JSON.parse(JSON.stringify(highScores.score1));
		highScores.name2 = JSON.parse(JSON.stringify(highScores.name1));
		highScores.score1 = score;
		highScores.name1 = auxl.local.profile.shortname;
		highScores.text = refreshHighScoreText(highScores);
		return highScores;
	} else if(score > highScores.score2){
		highScores.score5 = JSON.parse(JSON.stringify(highScores.score4));
		highScores.name5 = JSON.parse(JSON.stringify(highScores.name4));
		highScores.score4 = JSON.parse(JSON.stringify(highScores.score3));
		highScores.name4 = JSON.parse(JSON.stringify(highScores.name3));
		highScores.score3 = JSON.parse(JSON.stringify(highScores.score2));
		highScores.name3 = JSON.parse(JSON.stringify(highScores.name2));
		highScores.score2 = score;
		highScores.name2 = auxl.local.profile.shortname;
		highScores.text = refreshHighScoreText(highScores);
		return highScores;
	} else if(score > highScores.score3){
		highScores.score5 = JSON.parse(JSON.stringify(highScores.score4));
		highScores.name5 = JSON.parse(JSON.stringify(highScores.name4));
		highScores.score4 = JSON.parse(JSON.stringify(highScores.score3));
		highScores.name4 = JSON.parse(JSON.stringify(highScores.name3));
		highScores.score3 = score;
		highScores.name3 = auxl.local.profile.shortname;
		highScores.text = refreshHighScoreText(highScores);
		return highScores;
	} else if(score > highScores.score4){
		highScores.score5 = JSON.parse(JSON.stringify(highScores.score4));
		highScores.name5 = JSON.parse(JSON.stringify(highScores.name4));
		highScores.score4 = score;
		highScores.name4 = auxl.local.profile.shortname;
		highScores.text = refreshHighScoreText(highScores);
		return highScores;
	} else if(score > highScores.score5){
		highScores.score5 = score;
		highScores.name5 = auxl.local.profile.shortname;
		highScores.text = refreshHighScoreText(highScores);
		return highScores;
	} else {
		return highScores;
	}
}
//Check for Low Score
const checkLowScore = (score, highScores) => {
	if(score < highScores.score1){
		highScores.score5 = JSON.parse(JSON.stringify(highScores.score4));
		highScores.name5 = JSON.parse(JSON.stringify(highScores.name4));
		highScores.score4 = JSON.parse(JSON.stringify(highScores.score3));
		highScores.name4 = JSON.parse(JSON.stringify(highScores.name3));
		highScores.score3 = JSON.parse(JSON.stringify(highScores.score2));
		highScores.name3 = JSON.parse(JSON.stringify(highScores.name2));
		highScores.score2 = JSON.parse(JSON.stringify(highScores.score1));
		highScores.name2 = JSON.parse(JSON.stringify(highScores.name1));
		highScores.score1 = score;
		highScores.name1 = auxl.local.profile.shortname;
		highScores.text = refreshHighScoreText(highScores);
		return highScores;
	} else if(score < highScores.score2){
		highScores.score5 = JSON.parse(JSON.stringify(highScores.score4));
		highScores.name5 = JSON.parse(JSON.stringify(highScores.name4));
		highScores.score4 = JSON.parse(JSON.stringify(highScores.score3));
		highScores.name4 = JSON.parse(JSON.stringify(highScores.name3));
		highScores.score3 = JSON.parse(JSON.stringify(highScores.score2));
		highScores.name3 = JSON.parse(JSON.stringify(highScores.name2));
		highScores.score2 = score;
		highScores.name2 = auxl.local.profile.shortname;
		highScores.text = refreshHighScoreText(highScores);
		return highScores;
	} else if(score < highScores.score3){
		highScores.score5 = JSON.parse(JSON.stringify(highScores.score4));
		highScores.name5 = JSON.parse(JSON.stringify(highScores.name4));
		highScores.score4 = JSON.parse(JSON.stringify(highScores.score3));
		highScores.name4 = JSON.parse(JSON.stringify(highScores.name3));
		highScores.score3 = score;
		highScores.name3 = auxl.local.profile.shortname;
		highScores.text = refreshHighScoreText(highScores);
		return highScores;
	} else if(score < highScores.score4){
		highScores.score5 = JSON.parse(JSON.stringify(highScores.score4));
		highScores.name5 = JSON.parse(JSON.stringify(highScores.name4));
		highScores.score4 = score;
		highScores.name4 = auxl.local.profile.shortname;
		highScores.text = refreshHighScoreText(highScores);
		return highScores;
	} else if(score < highScores.score5){
		highScores.score5 = score;
		highScores.name5 = auxl.local.profile.shortname;
		highScores.text = refreshHighScoreText(highScores);
		return highScores;
	} else {
		return highScores;
	}
}

//
//UI Menu Layer Template
//Parent : 0
auxl.uiGameParentData = {
data:'uiGameParentData',
id:'uiGameParent',
sources: false,
text: false,
geometry: false,
material: false,
position: new THREE.Vector3(2,1.5,0),
rotation: new THREE.Vector3(0,0,0),
scale: new THREE.Vector3(1,1,1),
animations: false,
mixins: false,
classes: ['a-ent'],
components: {
['stare']:{id: 'playerRig', twist: true,},
},
};
auxl.uiGameParent = auxl.Core(auxl.uiGameParentData);
//Game Status : 1
auxl.uiGameStatusData = {
data:'uiGameStatusData',
id:'uiGameStatus',
sources: false,
text: {value:'Game Status', color: "#FFFFFF", align: "center", font: "exo2bold", zOffset: 0.0525, side: 'front', wrapCount: 30, baseline: 'center'},
geometry: {primitive: 'box', depth: 0.1, width: 0.75, height: 0.1},
material: {shader: "standard", color: "#256de0", emissive: '#256de0', emissiveIntensity: 0.25, opacity: 1},
position: new THREE.Vector3(0,0.4,0),
rotation: new THREE.Vector3(0,0,0),
scale: new THREE.Vector3(1,1,1),
animations: false,
mixins: false,
classes: ['a-ent'],
components: false,
};
auxl.uiGameStatus = auxl.Core(auxl.uiGameStatusData);
//Game Title : 2
auxl.uiGameTitleData = {
data:'uiGameTitleData',
id:'uiGameTitle',
sources: false,
text: {value:'Game Title', color: "#FFFFFF", align: "center", font: "exo2bold", zOffset: 0.0525, side: 'front', wrapCount: 30, baseline: 'center'},
geometry: {primitive: 'box', depth: 0.1, width: 0.75, height: 0.1},
material: {shader: "standard", color: "#256de0", emissive: '#256de0', emissiveIntensity: 0.25, opacity: 1},
position: new THREE.Vector3(0,-0.2,0),
rotation: new THREE.Vector3(0,0,0),
scale: new THREE.Vector3(1,1,1),
animations: false,
mixins: false,
classes: ['a-ent'],
components: false,
};
auxl.uiGameTitle = auxl.Core(auxl.uiGameTitleData);
//Current Level & Points : 3
auxl.uiGameLevelData = {
data:'uiGameLevelData',
id:'uiGameLevel',
sources: false,
text: {value:'Game Level', color: "#FFFFFF", align: "center", font: "exo2bold", zOffset: 0.0525, side: 'front', wrapCount: 12, baseline: 'center'},
geometry: {primitive: 'box', depth: 0.1, width: 0.35, height: 0.4},
material: {shader: "standard", color: "#256de0", emissive: '#256de0', emissiveIntensity: 0.25, opacity: 1},
position: new THREE.Vector3(-0.2,0.1,0),
rotation: new THREE.Vector3(0,0,0),
scale: new THREE.Vector3(1,1,1),
animations: false,
mixins: false,
classes: ['a-ent'],
components: false,
};
auxl.uiGameLevel = auxl.Core(auxl.uiGameLevelData);
//High Score Board : 4
auxl.uiGameScoresData = {
data:'uiGameScoresData',
id:'uiGameScores',
sources: false,
text: {value:'High Scores', color: "#FFFFFF", align: "center", font: "exo2bold", zOffset: 0.0525, side: 'front', wrapCount: 15, baseline: 'center'},
geometry: {primitive: 'box', depth: 0.1, width: 0.35, height: 0.4},
material: {shader: "standard", color: "#256de0", emissive: '#256de0', emissiveIntensity: 0.25, opacity: 1},
position: new THREE.Vector3(0.2,0.1,0),
rotation: new THREE.Vector3(0,0,0),
scale: new THREE.Vector3(1,1,1),
animations: false,
mixins: false,
classes: ['a-ent'],
components: false,
};
auxl.uiGameScores = auxl.Core(auxl.uiGameScoresData);
//Game Start : 5
auxl.uiGameStartData = {
data:'uiGameStartData',
id:'uiGameStart',
sources: false,
text: {value:'Start', color: "#FFFFFF", align: "center", font: "exo2bold", zOffset: 0.0525, side: 'front', wrapCount: 8, baseline: 'center'},
geometry: {primitive: 'box', depth: 0.1, width: 0.2, height: 0.2},
material: {shader: "standard", color: "#256de0", emissive: '#256de0', emissiveIntensity: 0.25, opacity: 1},
position: new THREE.Vector3(0,-0.4,0),
rotation: new THREE.Vector3(0,0,0),
scale: new THREE.Vector3(1,1,1),
animations:{
click: {property: 'scale', from: '1 1 1', to: '1.1 1.1 1.1', dur: 125, delay: 0, loop: '1', dir: 'alternate', easing: 'easeInOutElastic', elasticity: 400, autoplay: false, enabled: true, startEvents: 'click'},
},
mixins: false,
classes: ['clickable','a-ent'],
components: false,
};
auxl.uiGameStart = auxl.Core(auxl.uiGameStartData);
//Game Control : 6
auxl.uiGameControlData = {
data:'uiGameControlData',
id:'uiGameControl',
sources: false,
text: {value:'Continue', color: "#FFFFFF", align: "center", font: "exo2bold", zOffset: 0.0525, side: 'front', wrapCount: 8, baseline: 'center'},
geometry: {primitive: 'box', depth: 0.1, width: 0.2, height: 0.2},
material: {shader: "standard", color: "#256de0", emissive: '#256de0', emissiveIntensity: 0.25, opacity: 1},
position: new THREE.Vector3(-0.3,-0.4,0),
rotation: new THREE.Vector3(0,0,0),
scale: new THREE.Vector3(1,1,1),
animations:{
click: {property: 'scale', from: '1 1 1', to: '1.1 1.1 1.1', dur: 125, delay: 0, loop: '1', dir: 'alternate', easing: 'easeInOutElastic', elasticity: 400, autoplay: false, enabled: true, startEvents: 'click'},
},
mixins: false,
classes: ['clickable','a-ent'],
components: false,
};
auxl.uiGameControl = auxl.Core(auxl.uiGameControlData);
//Game Menu : 7
auxl.uiGameMenuData = {
data:'uiGameMenuData',
id:'uiGameMenu',
sources: false,
text: {value:'Menu', color: "#FFFFFF", align: "center", font: "exo2bold", zOffset: 0.0525, side: 'front', wrapCount: 8, baseline: 'center'},
geometry: {primitive: 'box', depth: 0.1, width: 0.2, height: 0.2},
material: {shader: "standard", color: "#256de0", emissive: '#256de0', emissiveIntensity: 0.25, opacity: 1},
position: new THREE.Vector3(0.3,-0.4,0),
rotation: new THREE.Vector3(0,0,0),
scale: new THREE.Vector3(1,1,1),
animations:{
click: {property: 'scale', from: '1 1 1', to: '1.1 1.1 1.1', dur: 125, delay: 0, loop: '1', dir: 'alternate', easing: 'easeInOutElastic', elasticity: 400, autoplay: false, enabled: true, startEvents: 'click'},
},
mixins: false,
classes: ['clickable','a-ent'],
components: false,
};
auxl.uiGameMenu = auxl.Core(auxl.uiGameMenuData);
//UI Game Layer
auxl.uiGameLayerData = {
	parent: {core: auxl.uiGameParent},
	child0: {core: auxl.uiGameStatus},
	child1: {core: auxl.uiGameTitle},
	child2: {core: auxl.uiGameLevel},
	child3: {core: auxl.uiGameScores},
	child4: {core: auxl.uiGameStart},
	child5: {core: auxl.uiGameControl},
	child6: {core: auxl.uiGameMenu},
}

//
//Memory Mini Game
auxl.MemoryGame = (id) => {
	let memory = {};
	memory.id = id;
	let core = 'memory';
	memory.title = 'Memory Order';
	memory.instructionsText = 'How To Play :\nWatch the sequence play.\nClick each item in the exact same sequence to continue.\nSee how far you can get!';
	memory.controlsText = 'Game Controls :\nUse the controller ray and controller click to play the game.';
	memory.previewImage = auxl.pattern01;
	memory.inScene = false;
	//Colors
	auxl.memoryGameColor = auxl.colorTheoryGen(false, 'lime');
	//High Scores
	memory.highScores = blankHighScores('Matches', 0);

	//Layered Object Generation
	let layerData = {};
	let memoryNullParentData = {
	data:'memoryParentData',
	id:'memoryParent',
	sources:false,
	text: false,
	geometry: false,
	material: false,
	position: new THREE.Vector3(0,1,-2),
	rotation: new THREE.Vector3(0,0,0),
	scale: new THREE.Vector3(1,1,1),
	animations: false,
	mixins: false,
	classes: ['nullParent','a-ent'],
	components: false,
	};
	let memoryNullParent = auxl.Core(memoryNullParentData);
	layerData['parent'] = {};
	layerData['parent'].core = memoryNullParent;
	let memoryObjData = {};
	let memoryCores = {};

	//Memory 0
	memory.memory0Data = {
	data:'0',
	id:'memory0',
	sources:false,
	text: false,
	sounds: {
		click: {src: auxl.drop1, autoplay: false, loop: false, volume: 1, on: 'click'},
		select: {src: auxl.drop1, autoplay: false, loop: false, volume: 1, on: 'select'},
		gamestart: {src: auxl.confirm4, autoplay: false, loop: false, volume: 1, on: 'gameStart'},
		gameover: {src: auxl.minimize6, autoplay: false, loop: false, volume: 1, on: 'gameOver'},
		nextlevel: {src: auxl.maximize6, autoplay: false, loop: false, volume: 1, on: 'nextLevel'},
	},
	geometry: {primitive: 'cylinder', radius: 0.45, height: 0.15, openEnded: false, segmentsHeight: 2, segmentsRadial: 3, thetaStart: 0, thetaLength: 360},
	material: {shader: "standard", color: "#3EB489", opacity: 1, metalness: 0.6, roughness: 0.4, emissive: "#3EB489", emissiveIntensity: 0.2, side: 'double'},
	position: new THREE.Vector3(-0.45,0.7,0),
	rotation: new THREE.Vector3(-90,0,0),
	scale: new THREE.Vector3(1,1,1),
	animations: {
	click1: {property: 'scale', from: '1 1 1', to: '1.1 1.1 1.1', dur: 125, delay: 0, loop: '1', dir: 'alternate', easing: 'easeInOutElastic', elasticity: 400, autoplay: false, enabled: true, startEvents: 'click, select'},
	click2: {property: 'material.emissiveIntensity', from: '0.2', to: '0.8', dur: 125, delay: 0, loop: '1', dir: 'alternate', easing: 'easeInOutElastic', elasticity: 400, autoplay: false, enabled: true, startEvents: 'click, select'},
	roundcomplete: {property: 'material.emissiveIntensity', from: '0.2', to: '0.8', dur: 250, delay: 0, loop: '6', dir: 'alternate', easing: 'easeInOutElastic', elasticity: 400, autoplay: false, enabled: true, startEvents: 'roundComplete'},
	gameover1: {property: 'material.emissiveIntensity', from: '0.2', to: '0.8', dur: 250, delay: 0, loop: 'false', dir: 'normal', easing: 'easeInOutElastic', elasticity: 400, autoplay: false, enabled: true, startEvents: 'gameOver'},
	gameover2: {property: 'material.emissiveIntensity', from: '0.8', to: '0.2', dur: 250, delay: 2000, loop: 'false', dir: 'normal', easing: 'easeInOutElastic', elasticity: 400, autoplay: false, enabled: true, startEvents: 'gameOver'},
	},
	mixins: false,
	classes: ['clickable','memory','a-ent'],
	components: {
		clickrun__click:{
			cursorObj: memory.id,
			component: 'null',
			method: 'MemoryClick',
			params: 'target',
		},
	},
	};
	//Memory 1
	memory.memory1Data = {
	data:'1',
	id:'memory1',
	sources:false,
	text: false,
	sounds: {
		click: {src: auxl.drop2, autoplay: false, loop: false, volume: 1, on: 'click'},
		select: {src: auxl.drop2, autoplay: false, loop: false, volume: 1, on: 'select'},
	},
	geometry: {primitive: 'box', width: 0.75, height: 0.75, depth: 0.15},
	material: {shader: "standard", color: "#C14B76", opacity: 1, metalness: 0.6, roughness: 0.4, emissive: "#C14B76", emissiveIntensity: 0.2, side: 'double'},
	position: new THREE.Vector3(0.45,0.85,0),
	rotation: new THREE.Vector3(0,0,0),
	scale: new THREE.Vector3(1,1,1),
	animations: {
	click1: {property: 'scale', from: '1 1 1', to: '1.1 1.1 1.1', dur: 125, delay: 0, loop: '1', dir: 'alternate', easing: 'easeInOutElastic', elasticity: 400, autoplay: false, enabled: true, startEvents: 'click, select'},
	click2: {property: 'material.emissiveIntensity', from: '0.2', to: '0.8', dur: 125, delay: 0, loop: '1', dir: 'alternate', easing: 'easeInOutElastic', elasticity: 400, autoplay: false, enabled: true, startEvents: 'click, select'},
	roundcomplete: {property: 'material.emissiveIntensity', from: '0.2', to: '0.8', dur: 250, delay: 0, loop: '6', dir: 'alternate', easing: 'easeInOutElastic', elasticity: 400, autoplay: false, enabled: true, startEvents: 'roundComplete'},
	gameover1: {property: 'material.emissiveIntensity', from: '0.2', to: '0.8', dur: 250, delay: 0, loop: 'false', dir: 'normal', easing: 'easeInOutElastic', elasticity: 400, autoplay: false, enabled: true, startEvents: 'gameOver'},
	gameover2: {property: 'material.emissiveIntensity', from: '0.8', to: '0.2', dur: 250, delay: 2000, loop: 'false', dir: 'normal', easing: 'easeInOutElastic', elasticity: 400, autoplay: false, enabled: true, startEvents: 'gameOver'},
	},
	mixins: false,
	classes: ['clickable','memory','a-ent'],
	components: {
		clickrun__click:{
			cursorObj: memory.id,
			component: 'null',
			method: 'MemoryClick',
			params: 'target',
		},
	},
	};
	//Memory 2
	memory.memory2Data = {
	data:'2',
	id:'memory2',
	sources:false,
	text: false,
	sounds: {
		click: {src: auxl.drop3, autoplay: false, loop: false, volume: 1, on: 'click'},
		select: {src: auxl.drop3, autoplay: false, loop: false, volume: 1, on: 'select'},
	},
	geometry: {primitive: 'box', width: 0.15, height: 0.75, depth: 0.15,},
	material: {shader: "standard", color: "#ce782f", opacity: 1, metalness: 0.6, roughness: 0.4, emissive: "#ce782f", emissiveIntensity: 0.2, side: 'double'},
	position: new THREE.Vector3(-0.45,0,0),
	rotation: new THREE.Vector3(0,0,45),
	scale: new THREE.Vector3(1,1,1),
	animations: {
	click1: {property: 'scale', from: '1 1 1', to: '1.1 1.1 1.1', dur: 125, delay: 0, loop: '1', dir: 'alternate', easing: 'easeInOutElastic', elasticity: 400, autoplay: false, enabled: true, startEvents: 'click, select'},
	click2: {property: 'material.emissiveIntensity', from: '0.2', to: '0.8', dur: 125, delay: 0, loop: '1', dir: 'alternate', easing: 'easeInOutElastic', elasticity: 400, autoplay: false, enabled: true, startEvents: 'click, select'},
	roundcomplete: {property: 'material.emissiveIntensity', from: '0.2', to: '0.8', dur: 250, delay: 0, loop: '6', dir: 'alternate', easing: 'easeInOutElastic', elasticity: 400, autoplay: false, enabled: true, startEvents: 'roundComplete'},
	gameover1: {property: 'material.emissiveIntensity', from: '0.2', to: '0.8', dur: 250, delay: 0, loop: 'false', dir: 'normal', easing: 'easeInOutElastic', elasticity: 400, autoplay: false, enabled: true, startEvents: 'gameOver'},
	gameover2: {property: 'material.emissiveIntensity', from: '0.8', to: '0.2', dur: 250, delay: 2000, loop: 'false', dir: 'normal', easing: 'easeInOutElastic', elasticity: 400, autoplay: false, enabled: true, startEvents: 'gameOver'},
	},
	mixins: false,
	classes: ['clickable','memory','a-ent'],
	components: {
		clickrun__click:{
			cursorObj: memory.id,
			component: 'null',
			method: 'MemoryClick',
			params: 'target',
		},
	},
	};
	//Memory 3
	memory.memory3Data = {
	data:'3',
	id:'memory3',
	sources:false,
	text: false,
	sounds: {
		click: {src: auxl.drop4, autoplay: false, loop: false, volume: 1, on: 'click'},
		select: {src: auxl.drop4, autoplay: false, loop: false, volume: 1, on: 'select'},
	},
	geometry: {primitive: 'cylinder', radius: 0.4, height: 0.15, openEnded: false, segmentsHeight: 2, segmentsRadial: 16, thetaStart: 0, thetaLength: 360},
	material: {shader: "standard", color: "#4b54c1", opacity: 1, metalness: 0.6, roughness: 0.4, emissive: "#4b54c1", emissiveIntensity: 0.2, side: 'double'},
	position: new THREE.Vector3(0.45,0,0),
	rotation: new THREE.Vector3(90,0,0),
	scale: new THREE.Vector3(1,1,1),
	animations: {
	click1: {property: 'scale', from: '1 1 1', to: '1.1 1.1 1.1', dur: 125, delay: 0, loop: '1', dir: 'alternate', easing: 'easeInOutElastic', elasticity: 400, autoplay: false, enabled: true, startEvents: 'click, select'},
	click2: {property: 'material.emissiveIntensity', from: '0.2', to: '0.8', dur: 125, delay: 0, loop: '1', dir: 'alternate', easing: 'easeInOutElastic', elasticity: 400, autoplay: false, enabled: true, startEvents: 'click, select'},
	roundcomplete: {property: 'material.emissiveIntensity', from: '0.2', to: '0.8', dur: 250, delay: 0, loop: '6', dir: 'alternate', easing: 'easeInOutElastic', elasticity: 400, autoplay: false, enabled: true, startEvents: 'roundComplete'},
	gameover1: {property: 'material.emissiveIntensity', from: '0.2', to: '0.8', dur: 250, delay: 0, loop: 'false', dir: 'normal', easing: 'easeInOutElastic', elasticity: 400, autoplay: false, enabled: true, startEvents: 'gameOver'},
	gameover2: {property: 'material.emissiveIntensity', from: '0.8', to: '0.2', dur: 250, delay: 2000, loop: 'false', dir: 'normal', easing: 'easeInOutElastic', elasticity: 400, autoplay: false, enabled: true, startEvents: 'gameOver'},
	},
	mixins: false,
	classes: ['clickable','memory','a-ent'],
	components: {
		clickrun__click:{
			cursorObj: memory.id,
			component: 'null',
			method: 'MemoryClick',
			params: 'target',
		},
	},
	};

	let data = [memory.memory0Data, memory.memory1Data, memory.memory2Data, memory.memory3Data]
	for(let each in data){
		memoryObjData = data[each];
		memoryObjData.id = 'memory' + each;
		memoryCores[each] = auxl.Core(memoryObjData);
		layerData['child'+each] = {};
		layerData['child'+each].core = memoryCores[each];
	}
	memory.layer = auxl.Layer('memory',layerData);

	//UI
	memory.memoryUIData = auxl.layerDataFromTemplate(auxl.uiGameLayerData, 'memoryUI',{position: new THREE.Vector3(1.25,1.5,-1.5)}, true);
	memory.memoryUI = auxl.Layer('memoryUI',memory.memoryUIData);
	//Parent : memoryUI0
	//Game Status : memoryUI1
	memory.memoryUI.layer.all.child0.core.core.material.color = auxl.memoryGameColor.compl;
	memory.memoryUI.layer.all.child0.core.core.material.emissive = auxl.memoryGameColor.compl;
	memory.memoryUI.layer.all.child0.core.core.text.value = 'Game Ready';
	//Game Title : memoryUI2
	memory.memoryUI.layer.all.child1.core.core.material.color = auxl.memoryGameColor.compl;
	memory.memoryUI.layer.all.child1.core.core.material.emissive = auxl.memoryGameColor.compl;
	memory.memoryUI.layer.all.child1.core.core.text.value = 'Memory Order';
	//Current Level & Points : memoryUI3
	memory.memoryUI.layer.all.child2.core.core.material.color = auxl.memoryGameColor.compl;
	memory.memoryUI.layer.all.child2.core.core.material.emissive = auxl.memoryGameColor.compl;
	memory.memoryUI.layer.all.child2.core.core.text.value = 'Sequence :\n*';
	//High Score Board : memoryUI4
	memory.memoryUI.layer.all.child3.core.core.material.color = auxl.memoryGameColor.compl;
	memory.memoryUI.layer.all.child3.core.core.material.emissive = auxl.memoryGameColor.compl;
	//Game Start : memoryUI5
	memory.memoryUI.layer.all.child4.core.core.material.color = auxl.memoryGameColor.compl;
	memory.memoryUI.layer.all.child4.core.core.material.emissive = auxl.memoryGameColor.compl;
	memory.memoryUI.layer.all.child4.core.core.components = {};
	memory.memoryUI.layer.all.child4.core.core.components.clickrun__gamemenu = {cursorObj: memory.id, component: 'null', method: 'GameMenuClick', params: 'null',};
	//Game Control : memoryUI6
	memory.memoryUI.layer.all.child5.core.core.material.color = auxl.memoryGameColor.compl;
	memory.memoryUI.layer.all.child5.core.core.material.emissive = auxl.memoryGameColor.compl;
	memory.memoryUI.layer.all.child5.core.core.components = {};
	memory.memoryUI.layer.all.child5.core.core.components.visible = false;
	//Game Menu : memoryUI7
	memory.memoryUI.layer.all.child6.core.core.material.color = auxl.memoryGameColor.compl;
	memory.memoryUI.layer.all.child6.core.core.material.emissive = auxl.memoryGameColor.compl;
	memory.memoryUI.layer.all.child6.core.core.components = {};
	memory.memoryUI.layer.all.child6.core.core.components.clickrun__menutoggle = {cursorObj: 'memoryGameMenu', component: 'null', method: 'ToggleGameMenu', params: 'null',};

	//Game Support
	let playSequenceInterval;
	let roundCompleteTimeout1;
	let roundCompleteTimeout2;
	let gameOverTimeout1;
	let gameOverTimeout2;
	let allSequence = [];
	let playerSequence = [];
	let currInSequence = 0;
	let currMaxSequence = 1;
	let sequenceRef = '*';
	let sequenceTempArray = [];
	let currentScore = 0;
	let sequenceChunk = 5;
	let pauseClick = true;
	let gameStarted = false;

	//Spawn Memory Game
	const SpawnMemGame = () => {
		if(memory.inScene){}else{
			memory.layer.SpawnLayer();
			memory.memoryUI.SpawnLayer();
			UpdateScores();
			memory.inScene = true;
		}
	}
	//Despawn Memory Game
	const DespawnMemGame = () => {
		if(memory.inScene){
			memory.layer.DespawnLayer();
			memory.memoryUI.DespawnLayer();
			memory.inScene = false;
			auxl.RemoveFromTracker(memory.id);
		}
	}
	//Update Scores
	const UpdateScores = (score) => {
		if(score){
			memory.highScores = checkHighScore(score, memory.highScores);
		}
		memory.highScores.text = refreshHighScoreText(memory.highScores);
		memory.memoryUI.GetChild('memoryUI4').ChangeSelf({property:'text',value:{value:memory.highScores.text}});
		auxl.saveToProfile({auxlObject: memory.id, type: 'memory', sub: false, name: 'highScores', data: memory.highScores});
	}
	//Handle Game Menu Click
	const GameMenuClick = () => {
			if(gameStarted){
				GameReset();
			}else{
				GameStart();
			}
	}
	//Handle Memory Clicks & Check Sequence
	const MemoryClick = (el) => {
		if(pauseClick){}else{
			let selection;
			if(el.id === 'memory0'){
				selection = 0;
			} else if(el.id === 'memory1'){
				selection = 1;
			} else if(el.id === 'memory2'){
				selection = 2;
			} else if(el.id === 'memory3'){
				selection = 3;
			}
			playerSequence.push(selection);
			CheckSequence();
		}
	}
	//Build Level Sequence
	const GenRanSequence = () => {
		for(let a = 0; a < sequenceChunk; a++){
			allSequence.push(Math.floor(Math.random()*4))
		}
		//console.log(allSequence);
	}
	//Play Level Sequence
	const PlaySequence = () => {
		//console.log('Playing Sequence');
		pauseClick = true;
		if(currMaxSequence >= allSequence.length){
			GenRanSequence();
		}
		let current = 0;
		playSequenceInterval = setInterval(function() {
			memoryCores[allSequence[current]].EmitEvent('select');
			current++;
			if(current >= currMaxSequence){
				pauseClick = false;
				clearInterval(playSequenceInterval);
			}
		}, 750);
	}
	//Check Level Sequence
	const CheckSequence = () => {
		if(playerSequence[currInSequence] === allSequence[currInSequence]){
			//console.log('Match');
			currInSequence++;
			//push selection to front of sequenceRef and remove the last item
			sequenceTempArray.unshift('X');
			sequenceTempArray.pop();
			sequenceRef = sequenceTempArray.join("");
			memory.memoryUI.GetChild('memoryUI3').ChangeSelf({property: 'text', value: {value: 'Sequence :\n'+sequenceRef}});
		} else {
			//console.log('Game Over');
			gameStarted = false;
			gameOverTimeout1 = setTimeout(() => {
				GameOver();
			}, 250);
		}
		if(currInSequence >= currMaxSequence){
			//console.log('Correct Sequence');
			currInSequence = 0;
			currMaxSequence++;
			currentScore++;
			memory.memoryUI.GetChild('memoryUI1').ChangeSelf({property: 'text', value: {value: 'Current : ' + currentScore}});
			sequenceTempArray = [];
			for(let a = 1; a <= currMaxSequence; a++){
				sequenceTempArray.push('*');
			}
			sequenceRef = sequenceTempArray.join("");
			memory.memoryUI.GetChild('memoryUI3').ChangeSelf({property: 'text', value: {value: 'Sequence :\n'+sequenceRef}});
			playerSequence = [];
			roundCompleteTimeout1 = setTimeout(() => {
				NextLevel();
				clearTimeout(roundCompleteTimeout1);
			}, 250);
		}
	}
	//Game Reset
	const GameReset = () => {
		clearInterval(playSequenceInterval);
		clearTimeout(roundCompleteTimeout1);
		clearTimeout(roundCompleteTimeout2);
		currentScore = 0;
		currInSequence = 0;
		currMaxSequence = 1;
		allSequence = [];
		playerSequence = [];
		sequenceTempArray = [];
		pauseClick = true;
		gameStarted = false;
		memory.memoryUI.GetChild('memoryUI1').ChangeSelf({property: 'text', value: {value: 'Game Over'}});
		memory.memoryUI.GetChild('memoryUI3').ChangeSelf({property: 'text', value: {value: 'Sequence :\n'}});
		memory.memoryUI.GetChild('memoryUI5').ChangeSelf({property: 'text', value: {value: 'Start'}});
	}
	//Game Start
	const GameStart = () => {
		GenRanSequence();
		gameStarted = true;
		memory.layer.GetChild('memory0').EmitEvent('gameStart');
		memory.memoryUI.GetChild('memoryUI1').ChangeSelf({property: 'text', value: {value: 'Game Started'}});
		memory.memoryUI.GetChild('memoryUI3').ChangeSelf({property: 'text', value: {value: 'Sequence :\n'+sequenceRef}});
		memory.memoryUI.GetChild('memoryUI5').ChangeSelf({property: 'text', value: {value: 'Reset'}});
		PlaySequence();
	}
	//Game Over
	const GameOver = () => {
		//Play Game Over Anim
		memory.layer.GetChild('memory0').EmitEvent('gameOver');
		for(let each in memoryCores){
			memoryCores[each].EmitEvent('gameOver');
		}
		gameOverTimeout2 = setTimeout(() => {
			UpdateScores(currentScore);
			GameReset();
			clearTimeout(gameOverTimeout2);
		}, 2000);
	}
	//Next Level
	const NextLevel = () => {
		memory.layer.GetChild('memory0').EmitEvent('nextLevel');
		for(let each in memoryCores){
			memoryCores[each].EmitEvent('roundComplete');
		}
		roundCompleteTimeout2 = setTimeout(() => {
			PlaySequence();
			clearTimeout(roundCompleteTimeout2);
		}, 1500);
	}

	return{memory, core, SpawnMemGame, DespawnMemGame, GameMenuClick, MemoryClick};
}
auxl.memory = auxl.MemoryGame('memory');
//Memory Game Menu
auxl.memoryGameMenuData = {
	id: 'memoryGameMenu',
	game: auxl.memory.memory,
	homeZone: 'xrcadeZone',
	homeConnect: 'xrcadeHome',
	gameZone: 'xrcadeZone',
	gameConnect: 'game1',
	gameCabinet: 'cadeCab1Layer',
	outGamePos: new THREE.Vector3(-8,1.5,-11.75),
	inGamePos: new THREE.Vector3(0.8,1.5,-1.25),
};
auxl.memoryGameMenu = auxl.GameMenu(auxl.memoryGameMenuData);

//
//Swipe Launch
//Intersect In/Out as many times as you can to build up a meter and click to finalize it within a time frame to launch it a distance
auxl.SwipeLaunchGame = (id) => {

	let swipeLaunch = {};
	swipeLaunch.id = id;
	let core = 'swipeLaunch';
	swipeLaunch.title = 'Swipe Launch';
	swipeLaunch.instructionsText = 'How To Play :\nClick the Ready button to start the 3 second countdown.\nOn completion, you will have 6 seconds to hover on and off the ball as many times as you can.\nBefore the timer hits 0, click the ball to launch it.\nThe more times you hover and the closer you get to 0 when clicked, the more power to launch!';
	swipeLaunch.controlsText = 'Game Controls :\nUse the controller ray and controller click to play the game.';
	swipeLaunch.previewImage = auxl.pattern01;
	swipeLaunch.inScene = false;
	//Colors
	auxl.swipeLaunchGameColor = auxl.colorTheoryGen(false, 'red');
	//High Scores
	swipeLaunch.highScores = blankHighScores('Pts', 2);
	//Main Core
	swipeLaunch.data = {
	data:'swipeLaunchData',
	id:'swipeLaunchCore',
	sources: false,
	text: false,
	sounds: {
		start: {src: auxl.confirm4, autoplay: false, loop: false, volume: 1, on: 'gameStart'},
		hover: {src: auxl.drop1, autoplay: false, loop: false, volume: 1, on: 'mouseenter'},
		launch: {src: auxl.confirm2, autoplay: false, loop: false, volume: 1, on: 'mousedown'},
		timer: {src: auxl.glass1, autoplay: false, loop: false, volume: 1, on: 'second'},
		timeout: {src: auxl.minimize6, autoplay: false, loop: false, volume: 1, on: 'timeout'},
		gameover: {src: auxl.maximize6, autoplay: false, loop: false, volume: 1, on: 'gameOver'},
	},
	geometry: {primitive: 'sphere', radius: 0.5},
	material: {shader: "standard", color: auxl.swipeLaunchGameColor.splitCompl[1], emissive: auxl.swipeLaunchGameColor.splitCompl[1], emissiveIntensity: 0.25, opacity: 1},
	position: new THREE.Vector3(0,1,-0.5),
	rotation: new THREE.Vector3(0,0,0),
	scale: new THREE.Vector3(1,1,1),
	animations: {
	hover: {property: 'material.emissiveIntensity', from: '0.25', to: '1', dur: 1, delay: 0, loop: '1', dir: 'alternate', easing: 'easeInOutElastic', elasticity: 400, autoplay: false, enabled: true, startEvents: 'mouseenter'},
	click: {property: 'material.emissiveIntensity', from: '0.25', to: '1', dur: 1000, delay: 0, loop: '1', dir: 'alternate', easing: 'easeOutElastic', elasticity: 400, autoplay: false, enabled: true, startEvents: 'mousedown'},
	},
	mixins: false,
	classes: ['a-ent'],
	components: {
		mouseenterrun__hoveron:{
			cursorObj: swipeLaunch.id,
			component: 'null',
			method: 'hoverOn',
			params: 'null',
		},
		mouseleaverun__hoveroff:{
			cursorObj: swipeLaunch.id,
			component: 'null',
			method: 'hoverOff',
			params: 'null',
		},
		mousedownrun__launch:{
			cursorObj: swipeLaunch.id,
			component: 'null',
			method: 'launch',
			params: 'null',
		},
	},
	};
	swipeLaunch.core = auxl.Core(swipeLaunch.data);
	//Launch
	let launchAnimData = {
		name: 'launch',
		property: 'scale',
		to: new THREE.Vector3(1,1,1), 
		dur: 2500,
		delay: 0, 
		loop: false, 
		dir: 'normal', 
		easing: 'easeInOutSine', 
		elasticity: 400, 
		autoplay: true, 
		enabled: true,
	};
	swipeLaunch.showData = {
	data:'swipeLaunchData',
	id:'swipeLaunchShow',
	sources: false,
	text: false,
	geometry: {primitive: 'sphere', radius: 0.5},
	material: {shader: "standard", color: auxl.swipeLaunchGameColor.splitCompl[0], emissive: auxl.swipeLaunchGameColor.splitCompl[0], emissiveIntensity: 0.25, opacity: 1},
	position: new THREE.Vector3(0,30,-45),
	rotation: new THREE.Vector3(0,0,0),
	scale: new THREE.Vector3(0.1,0.1,0.1),
	animations: false,
	mixins: false,
	classes: ['clickable','a-ent'],
	components: false,
	};
	swipeLaunch.show = auxl.Core(swipeLaunch.showData);
	//Current Time
	swipeLaunch.displayTimeData = {
	data:'displayTimeData',
	id:'displayTime',
	sources:false,
	text: {value:'Ready?', color: "#FFFFFF", align: "left", font: "exo2bold", width: 1.9, zOffset: 0.025, side: 'front', wrapCount: 75, baseline: 'center', align: 'center'},
	geometry: {primitive: 'box', depth: 0.025, width: 0.3, height: 0.3},
	material: {shader: "standard", color: "#4bb8c1", opacity: 1, metalness: 0.2, roughness: 0.8, emissive: "#4bb8c1", emissiveIntensity: 0.6},
	position: new THREE.Vector3(0,1.75,-0.5),
	rotation: new THREE.Vector3(0,0,0),
	scale: new THREE.Vector3(1,1,1),
	animations: false,
	mixins: false,
	classes: ['clickable' ,'a-ent'],
	components: false,
	};
	swipeLaunch.displayTime = auxl.Core(swipeLaunch.displayTimeData);

	//UI
	swipeLaunch.swipeLaunchUIData = auxl.layerDataFromTemplate(auxl.uiGameLayerData, 'swipeLaunchUI',{position: new THREE.Vector3(1,1.5,-0.5)}, true);
	swipeLaunch.swipeLaunchUI = auxl.Layer('swipeLaunchUI',swipeLaunch.swipeLaunchUIData);
	//Parent : swipeLaunchUI0
	//Game Status : swipeLaunchUI1
	swipeLaunch.swipeLaunchUI.layer.all.child0.core.core.material.color = auxl.swipeLaunchGameColor.compl;
	swipeLaunch.swipeLaunchUI.layer.all.child0.core.core.material.emissive = auxl.swipeLaunchGameColor.compl;
	swipeLaunch.swipeLaunchUI.layer.all.child0.core.core.text.value = 'Ready?';
	//Game Title : swipeLaunchUI2
	swipeLaunch.swipeLaunchUI.layer.all.child1.core.core.material.color = auxl.swipeLaunchGameColor.compl;
	swipeLaunch.swipeLaunchUI.layer.all.child1.core.core.material.emissive = auxl.swipeLaunchGameColor.compl;
	swipeLaunch.swipeLaunchUI.layer.all.child1.core.core.text.value = 'Swipe Launch';
	//Current Level & Points : swipeLaunchUI3
	swipeLaunch.swipeLaunchUI.layer.all.child2.core.core.material.color = auxl.swipeLaunchGameColor.compl;
	swipeLaunch.swipeLaunchUI.layer.all.child2.core.core.material.emissive = auxl.swipeLaunchGameColor.compl;
	swipeLaunch.swipeLaunchUI.layer.all.child2.core.core.text.value = '0';
	//High Score Board : swipeLaunchUI4
	swipeLaunch.swipeLaunchUI.layer.all.child3.core.core.material.color = auxl.swipeLaunchGameColor.compl;
	swipeLaunch.swipeLaunchUI.layer.all.child3.core.core.material.emissive = auxl.swipeLaunchGameColor.compl;
	//Game Start : swipeLaunchUI5
	swipeLaunch.swipeLaunchUI.layer.all.child4.core.core.material.color = auxl.swipeLaunchGameColor.compl;
	swipeLaunch.swipeLaunchUI.layer.all.child4.core.core.material.emissive = auxl.swipeLaunchGameColor.compl;
	swipeLaunch.swipeLaunchUI.layer.all.child4.core.core.components = {};
	swipeLaunch.swipeLaunchUI.layer.all.child4.core.core.components.clickrun__countdown = {cursorObj: swipeLaunch.id, component: 'null', method: 'countdownPrep', params: 'null',};
	//Game Control : swipeLaunchUI6
	swipeLaunch.swipeLaunchUI.layer.all.child5.core.core.material.color = auxl.swipeLaunchGameColor.compl;
	swipeLaunch.swipeLaunchUI.layer.all.child5.core.core.material.emissive = auxl.swipeLaunchGameColor.compl;
	swipeLaunch.swipeLaunchUI.layer.all.child5.core.core.components = {};
	swipeLaunch.swipeLaunchUI.layer.all.child5.core.core.components.visible = false;
	//Game Menu : swipeLaunchUI7
	swipeLaunch.swipeLaunchUI.layer.all.child6.core.core.material.color = auxl.swipeLaunchGameColor.compl;
	swipeLaunch.swipeLaunchUI.layer.all.child6.core.core.material.emissive = auxl.swipeLaunchGameColor.compl;
	swipeLaunch.swipeLaunchUI.layer.all.child6.core.core.components = {};
	swipeLaunch.swipeLaunchUI.layer.all.child6.core.core.components.clickrun__menutoggle = {cursorObj: 'swipeLaunchGameMenu', component: 'null', method: 'ToggleGameMenu', params: 'null',};


	//Game Var
	swipeLaunch.starting = false;
	swipeLaunch.start = false;
	swipeLaunch.time = 6000;
	swipeLaunch.timeDisplay = 6;
	swipeLaunch.countdownTimeout;
	swipeLaunch.countdownInterval;
	swipeLaunch.in = false;
	swipeLaunch.out = true;
	swipeLaunch.launch = false;
	swipeLaunch.hits = 0;
	swipeLaunch.power = 0;
	swipeLaunch.powerDisplay = 0;

	//Update Scores
	function updateScores(score){
		if(score){
			swipeLaunch.highScores = checkHighScore(score, swipeLaunch.highScores);
		}
		swipeLaunch.highScores.text = refreshHighScoreText(swipeLaunch.highScores);
		swipeLaunch.swipeLaunchUI.GetChild('swipeLaunchUI4').ChangeSelf({property:'text', value:{value:swipeLaunch.highScores.text}});
		auxl.saveToProfile({auxlObject: swipeLaunch.id, type: 'swipeLaunch', sub: false, name: 'highScores', data: swipeLaunch.highScores});
	}
	//Reset
	function reset(){
		clearTimeout(swipeLaunch.starting0);
		clearTimeout(swipeLaunch.starting1);
		clearTimeout(swipeLaunch.starting2);
		clearInterval(swipeLaunch.countdownInterval);
		clearTimeout(swipeLaunch.gameOver);
		swipeLaunch.start = false;
		swipeLaunch.time = 6000;
		swipeLaunch.timeDisplay = 6;
		swipeLaunch.countdownTimeout;
		swipeLaunch.in = false;
		swipeLaunch.out = true;
		swipeLaunch.launch = false;
		swipeLaunch.hits = 0;
		swipeLaunch.power = 0;
		swipeLaunch.powerDisplay = 0;
		swipeLaunch.show.ChangeSelf({property: 'scale', value: new THREE.Vector3(0.1,0.1,0.1)})
	};
	//Update Time Text
	function updateTimeText(text){
		swipeLaunch.swipeLaunchUI.GetChild('swipeLaunchUI1').ChangeSelf({property: 'text', value:{value:text}})
	};
	//Update Power Text
	function updatePowerText(text){
		swipeLaunch.swipeLaunchUI.GetChild('swipeLaunchUI3').ChangeSelf({property: 'text', value:{value:text}})
	};
	//Game Start Countdown
	function countdownPrep(){
		if(swipeLaunch.starting){}else{
			swipeLaunch.starting = true;
			reset();
			updateTimeText('3');
			swipeLaunch.core.EmitEvent('second');
			swipeLaunch.starting2 = setTimeout(() => {
				updateTimeText('2');
				swipeLaunch.core.EmitEvent('second');
				swipeLaunch.starting1 = setTimeout(() => {
					updateTimeText('1');
					swipeLaunch.core.EmitEvent('second');
					swipeLaunch.starting0 = setTimeout(() => {
						updateTimeText('GO');
						Start();
						clearTimeout(swipeLaunch.starting0);
						clearTimeout(swipeLaunch.starting1);
						clearTimeout(swipeLaunch.starting2);
					}, 1000);
				}, 1000);
			}, 1000);
		}
	}
	//Game Start
	function Start(time){
		swipeLaunch.start = true;
		swipeLaunch.core.EmitEvent('gameStart');
		swipeLaunch.core.GetEl().classList.toggle('clickable');
		swipeLaunch.timeDisplay = swipeLaunch.time/1000;
		swipeLaunch.countdownInterval = setInterval(() => {
			swipeLaunch.timeDisplay -= 0.01;
			swipeLaunch.time -= 10;
			if(swipeLaunch.time % 1000 === 0){
				swipeLaunch.core.EmitEvent('second');
			}
			if(swipeLaunch.timeDisplay <= 0){
				swipeLaunch.core.EmitEvent('timeout');
				if(swipeLaunch.launch){}else{
					updateTimeText('TIME!');
					swipeLaunch.start = false;
					gameOver();
				}
				clearInterval(swipeLaunch.countdownInterval);
			} else {
				updateTimeText(swipeLaunch.timeDisplay.toFixed(2));
			}
		}, 10);
	}
	//Hover On Hit
	function hoverOn(){
		if(swipeLaunch.start){
			if(swipeLaunch.in){}else{
				swipeLaunch.in = true;
				swipeLaunch.hits++;
			}
		}
	};
	//Hover Off Reset
	function hoverOff(){
		if(swipeLaunch.start){
			if(swipeLaunch.in){
				swipeLaunch.in = false;
			}
		}
	};
	//Launch
	function launch(){
		if(swipeLaunch.start){
			swipeLaunch.start = false;
			swipeLaunch.launch = true;
			swipeLaunch.core.GetEl().classList.toggle('clickable');
			clearInterval(swipeLaunch.countdownInterval);
			let exp = 1.41;
			exp = exp + (((swipeLaunch.hits*17)/swipeLaunch.time) * 0.01);
			swipeLaunch.power = Math.pow(swipeLaunch.hits, exp);
			let scale = swipeLaunch.power /10;
			launchAnimData.to = new THREE.Vector3(scale,scale,scale);

			let time = ((swipeLaunch.power * 0.975) * 10) + (((swipeLaunch.power * 0.024)/0.1) * 50) + (((swipeLaunch.power * 0.001)/0.01) * 100);
			//console.log(time)

			launchAnimData.dur = time;
			swipeLaunch.show.Animate(launchAnimData);
			displayPowerFast();
			//console.log('Launch');
			//console.log(swipeLaunch.hits);
			//console.log(swipeLaunch.power);
		}
	};
	//Display Power Fast
	function displayPowerFast(){
		//console.log('displayPowerFast');
		let addTo = 1;
		let slowTotal = swipeLaunch.power * 0.975;
		swipeLaunch.powerDisplayFastInterval = setInterval(() => {
			swipeLaunch.powerDisplay += addTo;
			updatePowerText(swipeLaunch.powerDisplay.toFixed(2));
			if(swipeLaunch.powerDisplay >= slowTotal){
				displayPowerSlow();
				clearInterval(swipeLaunch.powerDisplayFastInterval);
			}
		}, 10);
	}
	//Display Power Slow
	function displayPowerSlow(){
		//console.log('displayPowerSlow');
		let addTo = 0.1;
		let slowerTotal = swipeLaunch.power * 0.999;
		swipeLaunch.powerDisplaySlowInterval = setInterval(() => {
			swipeLaunch.powerDisplay += addTo;
			updatePowerText(swipeLaunch.powerDisplay.toFixed(2));
			if(swipeLaunch.powerDisplay >= slowerTotal){
				displayPowerSlower();
				clearInterval(swipeLaunch.powerDisplaySlowInterval);
			}
		}, 50);
	}
	//Display Power Slower
	function displayPowerSlower(){
		//console.log('displayPowerSlower');
		let addTo = 0.01;
		swipeLaunch.powerDisplaySlowerInterval = setInterval(() => {
			swipeLaunch.powerDisplay += addTo;
			if(swipeLaunch.powerDisplay >= swipeLaunch.power){
				updatePowerText(swipeLaunch.power.toFixed(2));
				gameOver();
				clearInterval(swipeLaunch.powerDisplaySlowerInterval);
			} else {
				updatePowerText(swipeLaunch.powerDisplay.toFixed(2));
			}
		}, 100);
	}
	//Game Over
	function gameOver(){
		updateScores(swipeLaunch.power);
		swipeLaunch.core.EmitEvent('gameOver');
		swipeLaunch.gameOver = setTimeout(() => {
			updateTimeText('Ready?');
			swipeLaunch.start = false;
			swipeLaunch.starting = false;
			updatePowerText('0');
			clearTimeout(swipeLaunch.gameOver);
		}, 3000);
	};
	//Spawn Game
	const SpawnSLGame = () => {
		if(swipeLaunch.inScene){}else{
			swipeLaunch.core.SpawnCore();
			swipeLaunch.show.SpawnCore();
			swipeLaunch.swipeLaunchUI.SpawnLayer();
			updateScores();
			swipeLaunch.inScene = true;
		}
	}
	//Despawn Game
	const DespawnSLGame = () => {
		if(swipeLaunch.inScene){
			reset();
			swipeLaunch.core.DespawnCore();
			swipeLaunch.show.DespawnCore();
			swipeLaunch.swipeLaunchUI.DespawnLayer();
			auxl.RemoveFromTracker(swipeLaunch.id);
			swipeLaunch.inScene = false;
			auxl.RemoveFromTracker(swipeLaunch.id);
		}
	}

	return {swipeLaunch, core, SpawnSLGame, DespawnSLGame, hoverOn, hoverOff, launch, countdownPrep};
}
auxl.swipeLaunchGame = auxl.SwipeLaunchGame('swipeLaunchGame');
//Swipe Launch Game Menu
auxl.swipeLaunchGameMenuData = {
	id: 'swipeLaunchGameMenu',
	game: auxl.swipeLaunchGame.swipeLaunch,
	homeZone: 'xrcadeZone',
	homeConnect: 'xrcadeHome',
	gameZone: 'xrcadeZone',
	gameConnect: 'game2',
	gameCabinet: 'cadeCab2Layer',
	outGamePos: new THREE.Vector3(-8,1.5,-13.75),
	inGamePos: new THREE.Vector3(0.75,1.5,-0.25),
};
auxl.swipeLaunchGameMenu = auxl.GameMenu(auxl.swipeLaunchGameMenuData);

//
//Guess Hit
//Guesstimate intersection point selection on ceiling that would match objects on floor. Like a claw machine.
auxl.GuessHitGame = (id) => {

	let guessHit = {};
	guessHit.id = id;
	let core = 'guessHit';
	guessHit.title = 'Guess Hit';
	guessHit.instructionsText = 'How To Play :\nFor each box, guess the the position by clicking on the ceiling.\nIf you hit it, it will be removed.\nIf you can hit them all within 10 tries, you move to the next level.\nMore points for better accuracy hits.';
	guessHit.controlsText = 'Game Controls :\nUse the controller ray and controller click to play the game.';
	guessHit.previewImage = auxl.pattern02;
	guessHit.inScene = false;
	//Colors
	auxl.guessHitGameColor = auxl.colorTheoryGen(false, 'yellow');
	//High Scores
	guessHit.highScores = blankHighScores('Pts', 1);

	//Fields
	//Field 1 : Circle
	//Field 2 : Rectangle
	//Field 3 : Ring
	guessHit.fieldData = {
	data:'fieldData',
	id:'field',
	sources: false,
	text: false,
	sounds: {
		hit: {src: auxl.drop4, autoplay: false, loop: false, volume: 1, on: 'hit'},
		miss: {src: auxl.switch2, autoplay: false, loop: false, volume: 1, on: 'miss'},
		gamestart: {src: auxl.confirm4, autoplay: false, loop: false, volume: 1, on: 'gameStart'},
		gameover: {src: auxl.minimize6, autoplay: false, loop: false, volume: 1, on: 'gameOver'},
		nextlevel: {src: auxl.maximize6, autoplay: false, loop: false, volume: 1, on: 'nextLevel'},
	},
	geometry: {primitive: 'circle', radius: 30},
	material: {shader: "standard", src: auxl.pattern14, repeat: '30 30', color: auxl.guessHitGameColor.splitCompl[1], emissive: auxl.guessHitGameColor.splitCompl[1], emissiveIntensity: 0.25, opacity: 1, side: 'double'},
	position: new THREE.Vector3(0,10,0),
	rotation: new THREE.Vector3(90,0,0),
	scale: new THREE.Vector3(1,1,1),
	animations: false,
	mixins: false,
	classes: ['clickable','a-ent'],
	components: false,
	};
	guessHit.field = auxl.Core(guessHit.fieldData);

	//Guessing Objects
	guessHit.hitTimeouts = [guessHit.hitTimeout1, guessHit.hitTimeout2, guessHit.hitTimeout3, guessHit.hitTimeout4];
	//Guess1
	guessHit.guessData = {
	data:'guessData',
	id:'guess1',
	sources: false,
	text: false,
	geometry: {primitive: 'cylinder', radius: 0.5, height: 0.5, openEnded: false, segmentsHeight: 2, segmentsRadial: 16, thetaStart: 0, thetaLength: 360},
	material: {shader: "standard", src: auxl.pattern78, repeat: '1 1', color: auxl.guessHitGameColor.compl, emissive: auxl.guessHitGameColor.compl, emissiveIntensity: 0.25, opacity: 1},
	position: new THREE.Vector3(0,0.25,-3),
	rotation: new THREE.Vector3(0,0,0),
	scale: new THREE.Vector3(1,1,1),
	animations: {
	hit: {property: 'scale', from: new THREE.Vector3(1,1,1), to: new THREE.Vector3(0.001,0.001,0.001), dur: 1000, delay: 0, loop: false, dir: 'normal', easing: 'easeInElastic', elasticity: 400, autoplay: false, enabled: true, startEvents: 'hit'},
	},
	mixins: false,
	classes: ['a-ent'],
	components: false,
	};
	guessHit.guess1 = auxl.Core(guessHit.guessData);
	guessHit.guessData.id = 'guess2';
	guessHit.guess2 = auxl.Core(guessHit.guessData);
	guessHit.guessData.id = 'guess3';
	guessHit.guess3 = auxl.Core(guessHit.guessData);
	guessHit.guessData.id = 'guess4';
	guessHit.guess4 = auxl.Core(guessHit.guessData);
	//Display on click
	guessHit.hitData = {
	data:'hitData',
	id:'hit',
	sources: false,
	text: false,
	geometry: {primitive: 'cylinder', radius: 1, height: 20,},
	material: {shader: "standard", src: auxl.pattern10, repeat: '10 10', color: "#ddd517", emissive: '#ddd517', emissiveIntensity: 0.25, opacity: 0.25},
	position: new THREE.Vector3(0,4,0),
	rotation: new THREE.Vector3(0,0,0),
	scale: new THREE.Vector3(1,0.01,1),
	animations: {
	spawn: {property: 'object3D.scale.y', from: 0.01, to: 1, dur: 3000, delay: 0, loop: false, dir: 'normal', easing: 'easeOutElastic', elasticity: 400, autoplay: false, enabled: true, startEvents: 'loaded'},
	},
	mixins: false,
	classes: ['a-ent'],
	components: false,
	};
	guessHit.hit = auxl.Core(guessHit.hitData);

	//UI
	guessHit.guessHitUIData = auxl.layerDataFromTemplate(auxl.uiGameLayerData, 'guessHitUI',{position: new THREE.Vector3(1,1.5,-0.5)}, true);
	guessHit.guessHitUI = auxl.Layer('guessHitUI',guessHit.guessHitUIData);

	//Parent : guessHitUI0
	//Game Status : guessHitUI1
	guessHit.guessHitUI.layer.all.child0.core.core.material.color = auxl.guessHitGameColor.compl;
	guessHit.guessHitUI.layer.all.child0.core.core.material.emissive = auxl.guessHitGameColor.compl;
	guessHit.guessHitUI.layer.all.child0.core.core.text.value = 'Game Ready';
	//Game Title : guessHitUI2
	guessHit.guessHitUI.layer.all.child1.core.core.material.color = auxl.guessHitGameColor.compl;
	guessHit.guessHitUI.layer.all.child1.core.core.material.emissive = auxl.guessHitGameColor.compl;
	guessHit.guessHitUI.layer.all.child1.core.core.text.value = 'Guess Hit';
	//Current Level & Points : guessHitUI3
	guessHit.guessHitUI.layer.all.child2.core.core.material.color = auxl.guessHitGameColor.compl;
	guessHit.guessHitUI.layer.all.child2.core.core.material.emissive = auxl.guessHitGameColor.compl;
	guessHit.guessHitUI.layer.all.child2.core.core.text.value = 'Level 1-1\n0pts';
	//High Score Board : guessHitUI4
	guessHit.guessHitUI.layer.all.child3.core.core.material.color = auxl.guessHitGameColor.compl;
	guessHit.guessHitUI.layer.all.child3.core.core.material.emissive = auxl.guessHitGameColor.compl;
	//Game Start : guessHitUI5
	guessHit.guessHitUI.layer.all.child4.core.core.material.color = auxl.guessHitGameColor.compl;
	guessHit.guessHitUI.layer.all.child4.core.core.material.emissive = auxl.guessHitGameColor.compl;
	guessHit.guessHitUI.layer.all.child4.core.core.components = {};
	guessHit.guessHitUI.layer.all.child4.core.core.components.clickrun__start = {cursorObj: guessHit.id, component: 'null', method: 'start', params: 'null',};
	//Game Control : guessHitUI6
	guessHit.guessHitUI.layer.all.child5.core.core.material.color = auxl.guessHitGameColor.compl;
	guessHit.guessHitUI.layer.all.child5.core.core.material.emissive = auxl.guessHitGameColor.compl;
	guessHit.guessHitUI.layer.all.child5.core.core.components = {};
	guessHit.guessHitUI.layer.all.child5.core.core.components.visible = false;
	guessHit.guessHitUI.layer.all.child5.core.core.components.clickrun__next = {cursorObj: guessHit.id, component: 'null', method: 'next', params: 'null',};
	//Game Menu : guessHitUI7
	guessHit.guessHitUI.layer.all.child6.core.core.material.color = auxl.guessHitGameColor.compl;
	guessHit.guessHitUI.layer.all.child6.core.core.material.emissive = auxl.guessHitGameColor.compl;
	guessHit.guessHitUI.layer.all.child6.core.core.components = {};
	guessHit.guessHitUI.layer.all.child6.core.core.components.clickrun__menutoggle = {cursorObj: 'guessHitGameMenu', component: 'null', method: 'ToggleGameMenu', params: 'null',};

	//Game Var
	guessHit.start = false;
	guessHit.hitSpawned = false;
	guessHit.points = 0;
	guessHit.type = 1;
	guessHit.level = 1;
	guessHit.clicks = 10;
	guessHit.spawnRadius = 12.5;
	guessHit.hitRadius = 1.5;
	guessHit.checkFor = [guessHit.guess1, guessHit.guess2, guessHit.guess3, guessHit.guess4];

	//Update Scores
	function updateScores(score){
		if(score){
			guessHit.highScores = checkHighScore(score, guessHit.highScores);
		}
		guessHit.highScores.text = refreshHighScoreText(guessHit.highScores);
		guessHit.guessHitUI.GetChild('guessHitUI4').ChangeSelf({property:'text',value:{value:guessHit.highScores.text}});
		auxl.saveToProfile({auxlObject: guessHit.id, type: 'guessHit', sub: false, name: 'highScores', data: guessHit.highScores});
	}
	//Reduce Decimals
	function reduceDecimal(num, x){
		return Math.round(num * Math.pow(10,x)) / Math.pow(10,x);
	}
	//Function to calculate distance between two points
	function distance(x1, y1, x2, y2) {
		//Calculating distance
		return Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2) * 1.0);
	}
	//Randomly spawn guess at XZ
	function ranPos(object, type){
		let newX;
		let newZ;
		if(type === 1){
			newX = (Math.random()*(25))-12.5;
			newZ = (Math.random()*(25))-12.5;
		} else if(type === 2){
			//Rectangle
			newX = (Math.random()*20)-10;
			newZ = (Math.random()*28)*-1;
		} else {
			//Ring
			newX = (Math.random()*60)-30;
			if(newX < 12 && newX > -12){
				if(newX > 0){
					newX += 12;
				} else {
					newX -= 12;
				}
			}
			newZ = (Math.random()*60)-30;
			if(newZ < 12 && newZ > -12){
				if(newZ > 0){
					newZ += 12;
				} else {
					newZ -= 12;
				}
			}
		}
		guessHit[object].core.position = new THREE.Vector3(newX,0.25,newZ);
	}
	//Object Hit
	function objectHit(object, timeout){
		object.EmitEvent('hit');
		guessHit.hitTimeouts[timeout] = setTimeout(() => {
			object.DespawnCore();
			clearTimeout(guessHit.hitTimeouts[timeout]);
		}, 1010);
	}
	//On click off click object, use intersection XZ to see if it is within radius
	function checkForHit(event){
		guessHit.clicks--;

		let hit = false;

		let guessPos = event.detail.intersection.point;

		spawnHit();
		guessHit.hit.ChangeSelf([{property: 'scale', value: new THREE.Vector3(1,0.01,1)},{property: 'position', value: new THREE.Vector3(guessPos.x,4,guessPos.z)}]);
		guessHit.hit.EmitEvent('loaded');

		let checkHit;
		for(let guess in guessHit.checkFor){
			updateHitColor('yellow');
			checkHit = distance(guessHit.checkFor[guess].core.position.x, guessHit.checkFor[guess].core.position.z, guessPos.x, guessPos.z);
			if(checkHit < guessHit.hitRadius){
				hit = true;
				let bonus = guessHit.hitRadius / checkHit;
				if(checkHit === 0){
					//Perfect hit, mega bonus
					bonus = 100;
				} else {
					bonus = guessHit.hitRadius / checkHit;
					bonus = reduceDecimal(bonus, 2);
					if(bonus > 10){
						bonus = 10;
					}
				}
				objectHit(guessHit.checkFor[guess], guessHit.checkFor.length);
				guessHit.checkFor.splice(guessHit.checkFor.indexOf(guessHit.checkFor[guess]), 1);
				let points = 10*bonus;
				points = reduceDecimal(points, 2);
				guessHit.points += points;
				guessHit.points = reduceDecimal(guessHit.points, 2);
				updateTotalText('Level ' + guessHit.level + '-' + guessHit.type + '\n' + guessHit.points + 'pts');
				if(guessHit.checkFor.length <= 0){
					updateCurrentText('Hit! ' + points + ' Pts | Complete! | Next?');
					guessHit.guessHitUI.GetChild('guessHitUI6').ChangeSelf({property: 'visible', value: true});
					guessHit.field.GetEl().removeEventListener('click',checkForHit);
				} else {
					updateCurrentText('Hit! ' + points + ' Pts | '+ guessHit.checkFor.length + ' Left | ' + guessHit.clicks + ' Tries');
				}
				break;
			}
		}
		if(hit){
			guessHit.field.EmitEvent('hit');
		}else{
			updateHitColor('red');
			updateCurrentText('Miss | ' + guessHit.clicks + ' Tries');
			updateCurrentText('Miss | ' + guessHit.checkFor.length + ' Left | ' + guessHit.clicks + ' Tries');
			guessHit.field.EmitEvent('miss');
		}
		if(guessHit.checkFor.length > 0){
			if(guessHit.clicks <= 0){
				gameOver();
			}
		}
	}
	//Load Objects
	function loadObjects(type){
		guessHit.checkFor = [guessHit.guess1, guessHit.guess2, guessHit.guess3, guessHit.guess4];
		ranPos('guess1', type);
		guessHit.guess1.SpawnCore();
		ranPos('guess2', type);
		guessHit.guess2.SpawnCore();
		ranPos('guess3', type);
		guessHit.guess3.SpawnCore();
		ranPos('guess4', type);
		guessHit.guess4.SpawnCore();
	}
	//Unload Objects
	function unloadObjects(){
		for(let guess in guessHit.checkFor){
			guessHit.checkFor[guess].DespawnCore();
			guessHit.checkFor.splice(guessHit.checkFor.indexOf(guessHit.checkFor[guess]), 0);
		}
	}
	//Start Game
	function start(){
		guessHit.guessHitUI.GetChild('guessHitUI5').ChangeSelf({property: 'text', value:{value:'Restart'}});
		reset();
		guessHit.field.GetEl().addEventListener('click',checkForHit);
		loadObjects(guessHit.type);
		guessHit.field.EmitEvent('gameStart');
	}
	//Game Over
	function gameOver(){
		updateScores(guessHit.points);
		updateCurrentText('Game Over');
		guessHit.field.GetEl().removeEventListener('click',checkForHit);
		unloadObjects();
		DespawnHit();
		guessHit.guessHitUI.GetChild('guessHitUI5').ChangeSelf({property: 'text', value:{value:'Start'}});
		guessHit.field.EmitEvent('gameOver');
	}
	//Spawn Hit
	function spawnHit(){
		if(guessHit.hitSpawned){}else{
			guessHit.hitSpawned = true;
			guessHit.hit.SpawnCore();
		}
	}
	//Despawn Hit
	function DespawnHit(){
		if(guessHit.hitSpawned){
			guessHit.hitSpawned = false;
			guessHit.hit.DespawnCore();
		}
	}
	//Next Type/Level
	function reset(){
		DespawnHit();
		guessHit.points = 0;
		guessHit.level = 1;
		guessHit.type = 1;
		guessHit.clicks = 10;
		guessHit.hitRadius = 1.5;
		updateField(1);
		updateCurrentText('Ready | 4 Left | 10 Tries');
		updateTotalText('Level ' + guessHit.level + '-' + guessHit.type + '\n' + guessHit.points + 'pts');
	}
	//Next Type/Level
	function next(){
		guessHit.guessHitUI.GetChild('guessHitUI6').ChangeSelf({property: 'visible', value: false});
		guessHit.type++;
		if(guessHit.type === 4){
			guessHit.level++;
			guessHit.type = 1;
		}
		if(guessHit.type === 1){
			guessHit.clicks = 10;
		} else if(guessHit.type === 2){
			guessHit.clicks = 11;
		} else if(guessHit.type === 3){
			guessHit.clicks = 12;
		}
		updateField(guessHit.type);
		updateCurrentText('Ready | 4 Left | '+guessHit.clicks+' Tries');
		updateTotalText('Level ' + guessHit.level + '-' + guessHit.type + '\n' + guessHit.points + 'pts');
		loadObjects(guessHit.type);
		//change field type
		DespawnHit();
		guessHit.field.GetEl().addEventListener('click',checkForHit);
		guessHit.field.EmitEvent('nextLevel');
	}
	//Display Current Text
	function updateCurrentText(text){
		guessHit.guessHitUI.GetChild('guessHitUI1').ChangeSelf({property: 'text', value:{value:text}})
	};
	//Display Total Score Text
	function updateTotalText(text){
		guessHit.guessHitUI.GetChild('guessHitUI3').ChangeSelf({property: 'text', value:{value:text}})
	};
	//Update Hit Color
	function updateHitColor(color){
		guessHit.hit.ChangeSelf({property: 'material', value:{color: color, emissive: color}});
	}
	//Update Field Type
	function updateField(type){
		let geo = {};
		let position = new THREE.Vector3(0,10,0);
		if(type === 1){
			geo = {primitive: 'circle', radius: 30};
			position = new THREE.Vector3(0,10,0);
		} else if(type === 2){
			geo = {primitive: 'plane', height: 30, width: 20};
			position = new THREE.Vector3(0,10,-15);
		} else {
			geo = {primitive: 'ring', radiusInner: 10, radiusOuter: 60, segmentsPhi: 8, segmentsTheta: 32, thetaStart: 0, thetaLength: 360};
			position = new THREE.Vector3(0,10,0);
		}
		guessHit.field.ChangeSelf([{property: 'geometry', value:geo},{property: 'position', value: position}]);
	}
	//Spawn Game
	const SpawnGHGame = () => {
		if(guessHit.inScene){}else{
			guessHit.field.SpawnCore();
			guessHit.guessHitUI.SpawnLayer();
			updateScores();
			guessHit.inScene = true;
		}
	}
	//Despawn Game
	const DespawnGHGame = () => {
		if(guessHit.inScene){
			guessHit.hitTimeouts.forEach(timeout => guessHit.hitTimeouts[timeout]);
			unloadObjects();
			DespawnHit();
			guessHit.guessHitUI.DespawnLayer();
			guessHit.field.DespawnCore();
			auxl.RemoveFromTracker(guessHit.id);
			guessHit.inScene = false;
			auxl.RemoveFromTracker(guessHit.id);
		}
	}

	return {guessHit, core, SpawnGHGame, DespawnGHGame, start, next};
}
auxl.guessHitGame = auxl.GuessHitGame('guessHitGame');
//Guess Hit Game Menu
auxl.guessHitGameMenuData = {
	id: 'guessHitGameMenu',
	game: auxl.guessHitGame.guessHit,
	homeZone: 'xrcadeZone',
	homeConnect: 'xrcadeHome',
	gameZone: 'xrcadeZone',
	gameConnect: 'game3',
	gameCabinet: 'cadeCab3Layer',
	outGamePos: new THREE.Vector3(-8,1.5,-15.75),
	inGamePos: new THREE.Vector3(0.75,1.5,-0.25),
};
auxl.guessHitGameMenu = auxl.GameMenu(auxl.guessHitGameMenuData);

//
//Drag Diffuse
//Drag from center to randomly spawned outward point before it times out/explodes
auxl.DragDiffuse = (id) => {

	let dragDiffuse = {};
	dragDiffuse.id = id;
	let core = 'dragDiffuse';
	dragDiffuse.title = 'Drag Diffuse';
	dragDiffuse.instructionsText = 'How To Play :\nAs each bomb pops up, drag from the center to a bomb to diffuse it.\nDiffuse each bomb before 1 blows up.';
	dragDiffuse.controlsText = 'Game Controls :\nUse the controller ray and controller click and hold to play the game.';
	dragDiffuse.previewImage = auxl.pattern04;
	dragDiffuse.inScene = false;
	//Colors
	auxl.dragDiffuseGameColor = auxl.colorTheoryGen(false, 'cyan');
	//High Scores
	dragDiffuse.highScores = blankHighScores('Pts', 2);

	//Timeout & Intervals
	dragDiffuse.levelDelay;
	dragDiffuse.startDelay;
	dragDiffuse.gameInterval;

	//Game Status
	let level = 1;
	dragDiffuse.gameStarted = false;
	dragDiffuse.level = level;
	dragDiffuse.bombsLeft = 0;
	dragDiffuse.points = 0;
	//Level Progression
	let spawnSpeed = 2000;
	let blowSpeed = 4000;
	let bombsToSpawn = 1;
	dragDiffuse.spawnSpeed = spawnSpeed;
	dragDiffuse.blowSpeed = blowSpeed;
	dragDiffuse.bombsToSpawn = bombsToSpawn;

	//UI
	dragDiffuse.dragDiffuseUIData = auxl.layerDataFromTemplate(auxl.uiGameLayerData, 'dragDiffuseUI',{position: new THREE.Vector3(1.35,1.5,-0.5)}, true);
	dragDiffuse.dragDiffuseUI = auxl.Layer('dragDiffuseUI',dragDiffuse.dragDiffuseUIData);
	//Parent : dragDiffuseUI0
	//Game Status : dragDiffuseUI1
	dragDiffuse.dragDiffuseUI.layer.all.child0.core.core.material.color = auxl.dragDiffuseGameColor.compl;
	dragDiffuse.dragDiffuseUI.layer.all.child0.core.core.material.emissive = auxl.dragDiffuseGameColor.compl;
	dragDiffuse.dragDiffuseUI.layer.all.child0.core.core.text.value = 'Game Ready';
	//Game Title : dragDiffuseUI2
	dragDiffuse.dragDiffuseUI.layer.all.child1.core.core.material.color = auxl.dragDiffuseGameColor.compl;
	dragDiffuse.dragDiffuseUI.layer.all.child1.core.core.material.emissive = auxl.dragDiffuseGameColor.compl;
	dragDiffuse.dragDiffuseUI.layer.all.child1.core.core.text.value = 'Drag Diffuse';
	//Current Level & Points : dragDiffuseUI3
	dragDiffuse.dragDiffuseUI.layer.all.child2.core.core.material.color = auxl.dragDiffuseGameColor.compl;
	dragDiffuse.dragDiffuseUI.layer.all.child2.core.core.material.emissive = auxl.dragDiffuseGameColor.compl;
	dragDiffuse.dragDiffuseUI.layer.all.child2.core.core.text.value = 'Level 1\nReady?\n0.00pts';
	//High Score Board : dragDiffuseUI4
	dragDiffuse.dragDiffuseUI.layer.all.child3.core.core.material.color = auxl.dragDiffuseGameColor.compl;
	dragDiffuse.dragDiffuseUI.layer.all.child3.core.core.material.emissive = auxl.dragDiffuseGameColor.compl;
	//Game Start : dragDiffuseUI5
	dragDiffuse.dragDiffuseUI.layer.all.child4.core.core.material.color = auxl.dragDiffuseGameColor.compl;
	dragDiffuse.dragDiffuseUI.layer.all.child4.core.core.material.emissive = auxl.dragDiffuseGameColor.compl;
	dragDiffuse.dragDiffuseUI.layer.all.child4.core.core.components = {};
	dragDiffuse.dragDiffuseUI.layer.all.child4.core.core.components.clickrun__gamestart = {cursorObj: 'dragDiffuseGame', component: 'null', method: 'GameStart', params: 'null',};;
	//Game Control : dragDiffuseUI6
	dragDiffuse.dragDiffuseUI.layer.all.child5.core.core.material.color = auxl.dragDiffuseGameColor.compl;
	dragDiffuse.dragDiffuseUI.layer.all.child5.core.core.material.emissive = auxl.dragDiffuseGameColor.compl;
	dragDiffuse.dragDiffuseUI.layer.all.child5.core.core.components = {};
	dragDiffuse.dragDiffuseUI.layer.all.child5.core.core.components.visible = false;
	dragDiffuse.dragDiffuseUI.layer.all.child5.core.core.components.clickrun__levelstart = {cursorObj: 'dragDiffuseGame', component: 'null', method: 'LevelStart', params: 'null',};;
	//Game Menu : dragDiffuseUI7
	dragDiffuse.dragDiffuseUI.layer.all.child6.core.core.material.color = auxl.dragDiffuseGameColor.compl;
	dragDiffuse.dragDiffuseUI.layer.all.child6.core.core.material.emissive = auxl.dragDiffuseGameColor.compl;
	dragDiffuse.dragDiffuseUI.layer.all.child6.core.core.components = {};
	dragDiffuse.dragDiffuseUI.layer.all.child6.core.core.components.clickrun__menutoggle = {cursorObj: 'dragDiffuseGameMenu', component: 'null', method: 'ToggleGameMenu', params: 'null',};
	//Game Parts
	dragDiffuse.gameParentData = {
	data:'gameParentData',
	id:'gameParent',
	sources:false,
	text: false,
	sounds: {
		dragstart: {src: auxl.drop2, autoplay: false, loop: false, volume: 1, on: 'mousedown'},
		spawn: {src: auxl.pluck1, autoplay: false, loop: false, volume: 1, on: 'spawn'},
		diffuse: {src: auxl.drop1, autoplay: false, loop: false, volume: 1, on: 'diffuse'},
		explode: {src: auxl.error7, autoplay: false, loop: false, volume: 1, on: 'explode'},
		gamestart: {src: auxl.confirm4, autoplay: false, loop: false, volume: 1, on: 'gameStart'},
		levelstart: {src: auxl.maximize8, autoplay: false, loop: false, volume: 1, on: 'levelStart'},
		gameover: {src: auxl.minimize6, autoplay: false, loop: false, volume: 1, on: 'gameOver'},
		nextlevel: {src: auxl.maximize6, autoplay: false, loop: false, volume: 1, on: 'nextLevel'},
	},
	geometry: {primitive: 'sphere', radius: 0.5, segmentsWidth: 36, segmentsHeight: 18, phiLength: 360, phiStart: 0, thetaLength: 360, thetaStart: 0},
	material: {shader: "standard", color: auxl.dragDiffuseGameColor.splitCompl[1], emissive: auxl.dragDiffuseGameColor.splitCompl[1], emissiveIntensity: 0.25, opacity: 1},
	position: new THREE.Vector3(0,1.25,-1),
	rotation: new THREE.Vector3(0,0,0),
	scale: new THREE.Vector3(1,1,1),
	animations: {
		levelstart: {property: 'material.emissiveIntensity', from: '0.25', to: '1', dur: 575, delay: 0, loop: 4, dir: 'alternate', easing: 'easeInOutSine', elasticity: 400, autoplay: false, enabled: true, startEvents: 'levelstart'},
		levelcomplete: {property: 'material.emissiveIntensity', from: '0.25', to: '1', dur: 125, delay: 0, loop: 8, dir: 'alternate', easing: 'easeInOutSine', elasticity: 400, autoplay: false, enabled: true, startEvents: 'levelcomplete'},
		gamefail: {property: 'material.emissiveIntensity', from: '0.25', to: '1', dur: 2000, delay: 0, loop: 1, dir: 'alternate', easing: 'easeInOutSine', elasticity: 400, autoplay: false, enabled: true, startEvents: 'gamefail'},
	},
	mixins: false,
	classes: ['a-ent'],
	components: {
		mousedownrun__start:{
			cursorObj: dragDiffuse.id,
			component: 'null',
			method: 'DragStart',
			params: 'null',
		},
		mouseuprun__fail:{
			cursorObj: dragDiffuse.id,
			component: 'null',
			method: 'DragFail',
			params: 'null',
		},
	},
	};
	dragDiffuse.gameParent = auxl.Core(dragDiffuse.gameParentData);
	//Parent
	dragDiffuse.dragParentData = {
	data:'dragParentData',
	id:'dragParent',
	sources:false,
	text: false,
	geometry: false,
	material: false,
	position: new THREE.Vector3(0,0,0),
	rotation: new THREE.Vector3(0,0,0),
	scale: new THREE.Vector3(1,1,1),
	animations: false,
	mixins: false,
	classes: ['nullParent','a-ent'],
	components: false,
	};
	dragDiffuse.dragParentData.id = 'dragParent0';
	dragDiffuse.dragParent0 = auxl.Core(dragDiffuse.dragParentData);
	//0
	dragDiffuse.dragMainData = {
	data:'dragMainData',
	id:'dragMain',
	text: false,
	geometry: {primitive: 'sphere', radius: 0.15, segmentsWidth: 36, segmentsHeight: 18, phiLength: 360, phiStart: 0, thetaLength: 360, thetaStart: 0},
	material: {shader: "standard", color: auxl.dragDiffuseGameColor.compl, emissive: auxl.dragDiffuseGameColor.compl, emissiveIntensity: 0.25, opacity: 1},
	position: new THREE.Vector3(0.8,0,0),
	rotation: new THREE.Vector3(0,0,0),
	scale: new THREE.Vector3(0.001,0.001,0.001),
	animations: {
		countdownx: {property: 'object3D.scale.x', from: 0.001, to: 0.9, dur: 500, delay: 0, loop: false, dir: 'normal', easing: 'easeOutElastic', elasticity: 400, autoplay: false, enabled: true, startEvents: 'countdown'},
		countdowny: {property: 'object3D.scale.y', from: 0.001, to: 0.9, dur: 500, delay: 0, loop: false, dir: 'normal', easing: 'easeOutElastic', elasticity: 400, autoplay: false, enabled: true, startEvents: 'countdown'},
		countdownz: {property: 'object3D.scale.z', from: 0.001, to: 0.9, dur: 500, delay: 0, loop: false, dir: 'normal', easing: 'easeOutElastic', elasticity: 400, autoplay: false, enabled: true, startEvents: 'countdown'},

		resetx: {property: 'object3D.scale.x', from: 0.9, to: 0.001, dur: 500, delay: 0, loop: false, dir: 'normal', easing: 'easeInElastic', elasticity: 400, autoplay: false, enabled: true, startEvents: 'reset'},
		resety: {property: 'object3D.scale.y', from: 0.9, to: 0.001, dur: 500, delay: 0, loop: false, dir: 'normal', easing: 'easeInElastic', elasticity: 400, autoplay: false, enabled: true, startEvents: 'reset'},
		resetz: {property: 'object3D.scale.z', from: 0.9, to: 0.001, dur: 500, delay: 0, loop: false, dir: 'normal', easing: 'easeInElastic', elasticity: 400, autoplay: false, enabled: true, startEvents: 'reset'},

		blowupx: {property: 'object3D.scale.x', from: 0.9, to: 100, dur: 1250, delay: 0, loop: false, dir: 'normal', easing: 'easeOutElastic', elasticity: 400, autoplay: false, enabled: true, startEvents: 'blow'},
		blowupy: {property: 'object3D.scale.y', from: 0.9, to: 100, dur: 1250, delay: 0, loop: false, dir: 'normal', easing: 'easeOutElastic', elasticity: 400, autoplay: false, enabled: true, startEvents: 'blow'},
		blowupz: {property: 'object3D.scale.z', from: 0.9, to: 100, dur: 1250, delay: 0, loop: false, dir: 'normal', easing: 'easeOutElastic', elasticity: 400, autoplay: false, enabled: true, startEvents: 'blow'},

		blowbackx: {property: 'object3D.scale.x', from: 100, to: 0.001, dur: 750, delay: 0, loop: false, dir: 'normal', easing: 'easeInElastic', elasticity: 400, autoplay: false, enabled: true, startEvents: 'animationcomplete__blowupx'},
		blowbacky: {property: 'object3D.scale.y', from: 100, to: 0.001, dur: 750, delay: 0, loop: false, dir: 'normal', easing: 'easeInElastic', elasticity: 400, autoplay: false, enabled: true, startEvents: 'animationcomplete__blowupy'},
		blowbackz: {property: 'object3D.scale.z', from: 100, to: 0.001, dur: 750, delay: 0, loop: false, dir: 'normal', easing: 'easeInElastic', elasticity: 400, autoplay: false, enabled: true, startEvents: 'animationcomplete__blowupz'},
	},
	mixins: false,
	classes: ['clickable','a-ent'],
	components: {
		mousedownrun__stop:{
			cursorObj: dragDiffuse.id,
			component: 'null',
			method: 'StopBombBubbling',
			params: 'null',
		},
		mouseenterrun__end:{
			cursorObj: dragDiffuse.id,
			component: 'null',
			method: 'DragEnd',
			params: 'target',
		},
	},
	};
	dragDiffuse.dragMainData.id = 'dragMain0';
	dragDiffuse.dragMain0 = auxl.Core(dragDiffuse.dragMainData);
	dragDiffuse.dragOuterData = {
	data:'dragOuterData',
	id:'dragOuter',
	text: false,
	geometry: {primitive: 'ring', radiusInner: 0.175, radiusOuter: 0.25, thetaLength: 0},
	material: {shader: "standard", color: auxl.dragDiffuseGameColor.base, emissive: auxl.dragDiffuseGameColor.base, emissiveIntensity: 0.25, opacity: 1},
	position: new THREE.Vector3(0.8,0,0),
	rotation: new THREE.Vector3(0,0,0),
	scale: new THREE.Vector3(1,1,1),
	animations: {
		countdown: {property: 'geometry.thetaLength', from: 0, to: 360, dur: dragDiffuse.blowSpeed, delay: 0, loop: 'false', dir: 'normal', easing: 'linear', elasticity: 400, autoplay: false, enabled: true, startEvents: 'countdown', pauseEvents: 'reset'},
		reset: {property: 'geometry.thetaLength', to: 0, dur: 250, delay: 0, loop: 'false', dir: 'normal', easing: 'linear', elasticity: 400, autoplay: false, enabled: true, startEvents: 'reset',},
	},
	mixins: false,
	classes: ['a-ent'],
	components: {
		oneventrun__blow:{
			event: 'animationcomplete__countdown',
			cursorObj: 'dragDiffuseGame',
			component: 'null',
			method: 'Blow',
			params: 'null',
		},
	},
	};
	dragDiffuse.dragOuterData.id = 'dragOuter0';
	dragDiffuse.dragOuterData.components.oneventrun__blow.params = '0';
	dragDiffuse.dragOuter0 = auxl.Core(dragDiffuse.dragOuterData);
	//1
	dragDiffuse.dragParentData.id = 'dragParent1';
	dragDiffuse.dragParentData.rotation = new THREE.Vector3(0,0,-45);
	dragDiffuse.dragParent1 = auxl.Core(dragDiffuse.dragParentData);
	dragDiffuse.dragMainData.id = 'dragMain1';
	dragDiffuse.dragMain1 = auxl.Core(dragDiffuse.dragMainData);
	dragDiffuse.dragOuterData.id = 'dragOuter1';
	dragDiffuse.dragOuterData.components.oneventrun__blow.params = '1';
	dragDiffuse.dragOuter1 = auxl.Core(dragDiffuse.dragOuterData);
	//2
	dragDiffuse.dragParentData.id = 'dragParent2';
	dragDiffuse.dragParentData.rotation = new THREE.Vector3(0,0,-90);
	dragDiffuse.dragParent2 = auxl.Core(dragDiffuse.dragParentData);
	dragDiffuse.dragMainData.id = 'dragMain2';
	dragDiffuse.dragMain2 = auxl.Core(dragDiffuse.dragMainData);
	dragDiffuse.dragOuterData.id = 'dragOuter2';
	dragDiffuse.dragOuterData.components.oneventrun__blow.params = '2';
	dragDiffuse.dragOuter2 = auxl.Core(dragDiffuse.dragOuterData);
	//3
	dragDiffuse.dragParentData.id = 'dragParent3';
	dragDiffuse.dragParentData.rotation = new THREE.Vector3(0,0,-135);
	dragDiffuse.dragParent3 = auxl.Core(dragDiffuse.dragParentData);
	dragDiffuse.dragMainData.id = 'dragMain3';
	dragDiffuse.dragMain3 = auxl.Core(dragDiffuse.dragMainData);
	dragDiffuse.dragOuterData.id = 'dragOuter3';
	dragDiffuse.dragOuterData.components.oneventrun__blow.params = '3';
	dragDiffuse.dragOuter3 = auxl.Core(dragDiffuse.dragOuterData);
	//4
	dragDiffuse.dragParentData.id = 'dragParent4';
	dragDiffuse.dragParentData.rotation = new THREE.Vector3(0,0,-180);
	dragDiffuse.dragParent4 = auxl.Core(dragDiffuse.dragParentData);
	dragDiffuse.dragMainData.id = 'dragMain4';
	dragDiffuse.dragMain4 = auxl.Core(dragDiffuse.dragMainData);
	dragDiffuse.dragOuterData.id = 'dragOuter4';
	dragDiffuse.dragOuterData.components.oneventrun__blow.params = '4';
	dragDiffuse.dragOuter4 = auxl.Core(dragDiffuse.dragOuterData);
	//5
	dragDiffuse.dragParentData.id = 'dragParent5';
	dragDiffuse.dragParentData.rotation = new THREE.Vector3(0,0,-225);
	dragDiffuse.dragParent5 = auxl.Core(dragDiffuse.dragParentData);
	dragDiffuse.dragMainData.id = 'dragMain5';
	dragDiffuse.dragMain5 = auxl.Core(dragDiffuse.dragMainData);
	dragDiffuse.dragOuterData.id = 'dragOuter5';
	dragDiffuse.dragOuterData.components.oneventrun__blow.params = '5';
	dragDiffuse.dragOuter5 = auxl.Core(dragDiffuse.dragOuterData);
	//6
	dragDiffuse.dragParentData.id = 'dragParent6';
	dragDiffuse.dragParentData.rotation = new THREE.Vector3(0,0,-270);
	dragDiffuse.dragParent6 = auxl.Core(dragDiffuse.dragParentData);
	dragDiffuse.dragMainData.id = 'dragMain6';
	dragDiffuse.dragMain6 = auxl.Core(dragDiffuse.dragMainData);
	dragDiffuse.dragOuterData.id = 'dragOuter6';
	dragDiffuse.dragOuterData.components.oneventrun__blow.params = '6';
	dragDiffuse.dragOuter6 = auxl.Core(dragDiffuse.dragOuterData);
	//7
	dragDiffuse.dragParentData.id = 'dragParent7';
	dragDiffuse.dragParentData.rotation = new THREE.Vector3(0,0,-315);
	dragDiffuse.dragParent7 = auxl.Core(dragDiffuse.dragParentData);
	dragDiffuse.dragMainData.id = 'dragMain7';
	dragDiffuse.dragMain7 = auxl.Core(dragDiffuse.dragMainData);
	dragDiffuse.dragOuterData.id = 'dragOuter7';
	dragDiffuse.dragOuterData.components.oneventrun__blow.params = '7';
	dragDiffuse.dragOuter7 = auxl.Core(dragDiffuse.dragOuterData);
	//Layer
	dragDiffuse.gameAllData = {
		parent: {core: dragDiffuse.gameParent},
		child0: {
			parent: {core: dragDiffuse.dragParent0},
			child0: {core: dragDiffuse.dragMain0},
			child1: {core: dragDiffuse.dragOuter0},
		},
		child1: {
			parent: {core: dragDiffuse.dragParent1},
			child0: {core: dragDiffuse.dragMain1},
			child1: {core: dragDiffuse.dragOuter1},
		},
		child2: {
			parent: {core: dragDiffuse.dragParent2},
			child0: {core: dragDiffuse.dragMain2},
			child1: {core: dragDiffuse.dragOuter2},
		},
		child3: {
			parent: {core: dragDiffuse.dragParent3},
			child0: {core: dragDiffuse.dragMain3},
			child1: {core: dragDiffuse.dragOuter3},
		},
		child4: {
			parent: {core: dragDiffuse.dragParent4},
			child0: {core: dragDiffuse.dragMain4},
			child1: {core: dragDiffuse.dragOuter4},
		},
		child5: {
			parent: {core: dragDiffuse.dragParent5},
			child0: {core: dragDiffuse.dragMain5},
			child1: {core: dragDiffuse.dragOuter5},
		},
		child6: {
			parent: {core: dragDiffuse.dragParent6},
			child0: {core: dragDiffuse.dragMain6},
			child1: {core: dragDiffuse.dragOuter6},
		},
		child7: {
			parent: {core: dragDiffuse.dragParent7},
			child0: {core: dragDiffuse.dragMain7},
			child1: {core: dragDiffuse.dragOuter7},
		},
	}
	dragDiffuse.gameAll = auxl.Layer('gameAll', dragDiffuse.gameAllData);
	//Main & Outer Name References
	let mainsAll = ['dragMain0','dragMain1','dragMain2','dragMain3','dragMain4','dragMain5','dragMain6','dragMain7'];
	let outersAll = ['dragOuter0','dragOuter1','dragOuter2','dragOuter3','dragOuter4','dragOuter5','dragOuter6','dragOuter7'];
	//Array of Outer Cores
	let allOuter = [
		dragDiffuse.dragOuter0,
		dragDiffuse.dragOuter1,
		dragDiffuse.dragOuter2,
		dragDiffuse.dragOuter3,
		dragDiffuse.dragOuter4,
		dragDiffuse.dragOuter5,
		dragDiffuse.dragOuter6,
		dragDiffuse.dragOuter7,
	];
	//Drag Gameplay
	let dragStarted = false;
	let fuseStart = Array.from(mainsAll);
	//Update Scores
	const UpdateScores = (score) => {
		if(score){
			dragDiffuse.highScores = checkHighScore(score, dragDiffuse.highScores);
		}
		dragDiffuse.highScores.text = refreshHighScoreText(dragDiffuse.highScores);
		dragDiffuse.dragDiffuseUI.GetChild('dragDiffuseUI4').ChangeSelf({property:'text',value:{value:dragDiffuse.highScores.text}});
		auxl.saveToProfile({auxlObject: dragDiffuse.id, type: 'dragDiffuse', sub: false, name: 'highScores', data: dragDiffuse.highScores});
	}
	//System Reset
	const Reset = () => {
		clearTimeout(dragDiffuse.levelDelay)
		clearTimeout(dragDiffuse.startDelay)
		clearInterval(dragDiffuse.gameInterval)
		Dragged();
		fuseStart = Array.from(mainsAll);
	}
	//Game Start
	const GameStart = () => {
		if(dragDiffuse.gameStarted){
			//Reset
			GameOver();
		} else {
			dragDiffuse.dragDiffuseUI.GetChild('dragDiffuseUI5').ChangeSelf({property: 'visible', value: false});
			dragDiffuse.gameStarted = true;
			dragDiffuse.points = 0;
			dragDiffuse.level = level;
			dragDiffuse.spawnSpeed = spawnSpeed;
			dragDiffuse.blowSpeed = blowSpeed;
			allOuter.forEach(outer => outer.Animate({name: 'countdown', property: 'geometry.thetaLength', from: 0, to: 360, dur: dragDiffuse.blowSpeed, delay: 0, loop: 'false', dir: 'normal', easing: 'linear', elasticity: 400, autoplay: false, enabled: true, startEvents: 'countdown', pauseEvents: 'reset'}));
			dragDiffuse.bombsToSpawn = bombsToSpawn;
			LevelStart();
		}
	};
	//Level Start
	const LevelStart = () => {
		dragDiffuse.gameParent.EmitEvent('gameStart');
		dragDiffuse.gameParent.GetEl().classList.toggle('clickable');
		dragDiffuse.gameAll.EmitEventParent('levelstart');
		dragDiffuse.dragDiffuseUI.GetChild('dragDiffuseUI6').ChangeSelf({property:'visible', value: false});
		dragDiffuse.diffuseTotal = 4 + (dragDiffuse.level*2);
		UpdateStatus('Fusing | ' + dragDiffuse.bombsToSpawn +' Bombs | ' + dragDiffuse.diffuseTotal + ' Bombs Left');
		UpdateCurrent('Level ' + dragDiffuse.level + '\n' + 'Get Ready\n' + dragDiffuse.points.toFixed(2) + ' Pts');
		dragDiffuse.startDelay = setTimeout(() => {
			dragDiffuse.gameParent.EmitEvent('levelStart');
			dragDiffuse.gameInterval = setInterval(() => {
				for(let a = 0; a < dragDiffuse.bombsToSpawn; a++){
					CountdownRandom();
				}
			}, dragDiffuse.spawnSpeed);
		}, 2250);
	};
	//Level Complete
	const LevelComplete = () => {
		dragDiffuse.gameParent.EmitEvent('nextLevel');
		ResetBombs();
		dragDiffuse.gameAll.EmitEventParent('levelcomplete');
		dragDiffuse.level++;
		UpdateStatus('Complete | ' + dragDiffuse.bombsToSpawn +' Bombs | ' + dragDiffuse.diffuseTotal + ' Bombs Left');
		//Increase Difficulty
		if(dragDiffuse.level === 5 || dragDiffuse.level === 15 || dragDiffuse.level === 25){
			dragDiffuse.bombsToSpawn += 1;//1->4
			dragDiffuse.spawnSpeed = spawnSpeed;//2500
			dragDiffuse.blowSpeed = blowSpeed;//5000
			allOuter.forEach(outer => outer.Animate({name: 'countdown', property: 'geometry.thetaLength', from: 0, to: 360, dur: dragDiffuse.blowSpeed, delay: 0, loop: 'false', dir: 'normal', easing: 'linear', elasticity: 400, autoplay: false, enabled: true, startEvents: 'countdown', pauseEvents: 'reset'}));
		} else if(dragDiffuse.level < 57 && dragDiffuse.level % 2 === 0){
			dragDiffuse.spawnSpeed -= 100;//2000->500
			dragDiffuse.blowSpeed -= 200;//4000->1000
			allOuter.forEach(outer => outer.Animate({name: 'countdown', property: 'geometry.thetaLength', from: 0, to: 360, dur: dragDiffuse.blowSpeed, delay: 0, loop: 'false', dir: 'normal', easing: 'linear', elasticity: 400, autoplay: false, enabled: true, startEvents: 'countdown', pauseEvents: 'reset'}));
		}
//console.log({level: dragDiffuse.level, bombs: dragDiffuse.bombsToSpawn, spawn: dragDiffuse.spawnSpeed, blow: dragDiffuse.blowSpeed,})
		dragDiffuse.points += (dragDiffuse.level*10);
		Reset();
		dragDiffuse.levelDelay = setTimeout(() => {
			dragDiffuse.dragDiffuseUI.GetChild('dragDiffuseUI6').ChangeSelf({property:'visible',value: true});
			dragDiffuse.gameParent.GetEl().classList.toggle('clickable');
		}, 1000);
	}
	//Random Drag Selection Countdown
	const CountdownRandom = () => {
		if(fuseStart.length > 0){
			let select = Math.floor(Math.random()*fuseStart.length);
			let drag = mainsAll.indexOf(fuseStart[select]);
			dragDiffuse[mainsAll[drag]].EmitEvent('countdown');
			dragDiffuse[outersAll[drag]].EmitEvent('countdown');
			fuseStart.splice(select, 1);
			dragDiffuse.gameParent.EmitEvent('spawn');
		}
	}
	//Drag Start
	const DragStart = () => {
		if(dragStarted){}else{
			dragStarted = true;
			dragDiffuse.gameParent.ChangeSelf({property: 'material', value: {emissiveIntensity: 1}})
		}
	}
	//Dragged
	const Dragged = () => {
		dragStarted = false;
		dragDiffuse.gameParent.ChangeSelf({property: 'material', value: {emissiveIntensity: 0.25}})
	}
	//Drag Fail
	const DragFail = () => {
		if(dragStarted){
			Dragged();
		}
	}
	//Drag Complete
	const DragEnd = (target) => {
		if(dragStarted){
			for(let main in mainsAll){
				if(target.id === mainsAll[main]){
					dragDiffuse.gameParent.EmitEvent('diffuse');
					Dragged();
					let bonus = ((dragDiffuse.blowSpeed - dragDiffuse[outersAll[main]].GetEl().components.animation__countdown.time) / dragDiffuse.blowSpeed) + 1;
					dragDiffuse[outersAll[main]].EmitEvent('reset');
					dragDiffuse[mainsAll[main]].EmitEvent('reset');
					fuseStart.push(target.id);
					dragDiffuse.diffuseTotal--;
					let pts = dragDiffuse.level * bonus;
					dragDiffuse.points += pts;
					UpdateStatus('Fusing | ' + dragDiffuse.bombsToSpawn +' Bombs | ' + dragDiffuse.diffuseTotal + ' Bombs Left');
					UpdateCurrent('Level ' + dragDiffuse.level + '\n' + pts.toFixed(2)+' Pts\n' + dragDiffuse.points.toFixed(2) + ' Pts');
					if(dragDiffuse.diffuseTotal <= 0){
						LevelComplete();
					}
				}
			}
		}
	}
	//Blow Up
	const Blow = (bomb) => {
		dragDiffuse.gameParent.EmitEvent('explode');
		dragDiffuse[mainsAll[bomb]].EmitEvent('blow');
		dragDiffuse[outersAll[bomb]].EmitEvent('reset');
		//pause all current animations
		for(let main in mainsAll){
			if(main === bomb){} else {
				dragDiffuse[outersAll[main]].EmitEvent('reset');
				dragDiffuse[mainsAll[main]].EmitEvent('reset');
			}
		}
		GameOver();
	}
	//Reset Remaining Bombs
	const ResetBombs = () => {
		for(let main in mainsAll){
			dragDiffuse[outersAll[main]].EmitEvent('reset');
			dragDiffuse[mainsAll[main]].EmitEvent('reset');
		}
	}
	//Update Game Status
	const UpdateStatus = (text) => {
		dragDiffuse.dragDiffuseUI.GetChild('dragDiffuseUI1').ChangeSelf({property:'text', value:{value:text}});
	}
	//Update Game Current
	const UpdateCurrent = (text) => {
		dragDiffuse.dragDiffuseUI.GetChild('dragDiffuseUI3').ChangeSelf({property:'text', value:{value:text}});
	}
	//Game Over
	const GameOver = () => {
		dragDiffuse.gameParent.EmitEvent('gameOver');
		UpdateStatus('Game Over | Exploded! | Try Again?');
		UpdateScores(dragDiffuse.points);
		dragDiffuse.dragDiffuseUI.GetChild('dragDiffuseUI5').ChangeSelf({property: 'visible', value: true})
		dragDiffuse.gameParent.GetEl().classList.toggle('clickable');
		dragDiffuse.gameStarted = false;
		Reset();
	}
	//Stop Bomb Bubbling
	const StopBombBubbling = (event) => {
		event.stopPropagation();
	}
	//Spawn Game
	const SpawnDDGame = () => {
		if(dragDiffuse.inScene){} else {
			dragDiffuse.gameAll.SpawnLayer();
			dragDiffuse.dragDiffuseUI.SpawnLayer();
			UpdateScores();
			dragDiffuse.inScene = true;
		}
	}
	//Despawn Game
	const DespawnDDGame = () => {
		if(dragDiffuse.inScene){
			Reset();
			dragDiffuse.gameAll.DespawnLayer();
			dragDiffuse.dragDiffuseUI.DespawnLayer();
			auxl.RemoveFromTracker(dragDiffuse.id);
			dragDiffuse.inScene = false;
			auxl.RemoveFromTracker(dragDiffuse.id);
		}
	}

	return {dragDiffuse, core, SpawnDDGame, DespawnDDGame, Blow, GameStart, LevelStart, DragStart, DragFail, StopBombBubbling, DragEnd}
}
auxl.dragDiffuseGame = auxl.DragDiffuse('dragDiffuseGame');
//Guess Hit Game Menu
auxl.dragDiffuseGameMenuData = {
	id: 'dragDiffuseGameMenu',
	game: auxl.dragDiffuseGame.dragDiffuse,
	homeZone: 'xrcadeZone',
	homeConnect: 'xrcadeHome',
	gameZone: 'xrcadeZone',
	gameConnect: 'game4',
	gameCabinet: 'cadeCab4Layer',
	outGamePos: new THREE.Vector3(-8,1.5,-17.75),
	inGamePos: new THREE.Vector3(1,1.5,-0.25),
};
auxl.dragDiffuseGameMenu = auxl.GameMenu(auxl.dragDiffuseGameMenuData);

//
//Sharp Shooter
//Keep shooting a single object that moves on every hit farther away with diminishing time adds
auxl.SharpShooter = (id) => {

	let sharpShooter = {};
	sharpShooter.id = id;
	let core = 'sharpShooter';
	sharpShooter.title = 'Sharp Shooter';
	sharpShooter.instructionsText = 'How To Play :\nShoot the target before the countdown hits 0.\nOn each hit,it will respawn farther away.\nThe quicker you are and more hits you make, the more points you will earn.';
	sharpShooter.controlsText = 'Game Controls :\nUse the controller ray and controller click to play the game.';
	sharpShooter.previewImage = auxl.pattern01;
	sharpShooter.inScene = false;
	//Colors
	auxl.sharpShooterGameColor = auxl.colorTheoryGen('#00ebff');
	//High Scores
	sharpShooter.highScores = blankHighScores('Pts', 2);

	let timer = 3000;
	let respawnTime = 500;
	let timeBonus = 2000;
	sharpShooter.timer = timer;
	sharpShooter.respawnTime = respawnTime;
	sharpShooter.timeBonus = timeBonus;
	sharpShooter.ptsBonus = 0;
	sharpShooter.seconds = 1000;
	sharpShooter.timeout;
	sharpShooter.hitDelay;
	sharpShooter.spawnDelay;
	sharpShooter.countdown2;
	sharpShooter.countdown1;
	sharpShooter.countdown0;
	sharpShooter.countdownInterval;
	sharpShooter.hits = 0;
	sharpShooter.pts = 0;
	sharpShooter.pos = new THREE.Vector3(0,0,0);

	//Target
	sharpShooter.targetData = {
		data:'targetData',
		id:'target',
		sources: false,
		text: false,
		sounds: {
			hover: {src: auxl.drop1, autoplay: false, loop: false, volume: 1, on: 'mouseenter'},
			hit: {src: auxl.confirm2, autoplay: false, loop: false, volume: 1, on: 'mousedown'},
			spawn: {src: auxl.confirm3, autoplay: false, loop: false, volume: 1, on: 'spawn'},
		},
		geometry: {primitive: 'box', depth: 1, width: 1, height: 1},
		material: {shader: "standard", color: auxl.sharpShooterGameColor.compl, emissive: auxl.sharpShooterGameColor.compl, emissiveIntensity: 0.1, opacity: 1},
		position: new THREE.Vector3(0,2,-2),
		rotation: new THREE.Vector3(0,0,0),
		scale: new THREE.Vector3(0.001,0.001,0.001),
		animations:{
			spawnin: {property: 'scale', from: '0.001 0.001 0.001', to: '1 1 1', dur: 200, delay: 0, loop: false, dir: 'normal', easing: 'easeOutElastic', elasticity: 400, autoplay: false, enabled: true, startEvents: 'spawn'}, 
			hoveron: {property: 'material.emissiveIntensity', from: '0.1', to: '1', dur: 200, delay: 0, loop: false, dir: 'normal', easing: 'easeInOutSine', elasticity: 400, autoplay: false, enabled: true, startEvents: 'mouseenter'},
			hoveroff: {property: 'material.emissiveIntensity', from: '1', to: '0.1', dur: 200, delay: 0, loop: false, dir: 'normal', easing: 'easeInOutSine', elasticity: 400, autoplay: false, enabled: true, startEvents: 'mouseleave'}, 
			spawnout: {property: 'scale', from: '1 1 1', to: '0.001 0.001 0.001', dur: 200, delay: 0, loop: false, dir: 'normal', easing: 'easeInElastic', elasticity: 400, autoplay: false, enabled: true, startEvents: 'mousedown'}, 
		},
		mixins: false,
		classes: ['a-ent'],
		components: {
			mousedownrun__hit:{
				cursorObj: sharpShooter.id,
				component: 'null',
				method: 'TargetHit',
				params: 'null',
			},
		},
	};
	sharpShooter.target = auxl.Core(sharpShooter.targetData);
	//Sound Controller
	sharpShooter.gameSoundData = {
		data:'gameSoundData',
		id:'gameSound',
		sources: false,
		text: false,
		sounds: {
			start: {src: auxl.confirm4, autoplay: false, loop: false, volume: 1, on: 'gameStart'},
			begin: {src: auxl.confirm4, autoplay: false, loop: false, volume: 1, on: 'begin'},
			timer: {src: auxl.glass1, autoplay: false, loop: false, volume: 1, on: 'second'},
			gameover: {src: auxl.maximize6, autoplay: false, loop: false, volume: 1, on: 'gameOver'},
		},
		geometry: false,
		material: false,
		position: new THREE.Vector3(0,0,0),
		rotation: new THREE.Vector3(0,0,0),
		scale: new THREE.Vector3(1,1,1),
		animations: false,
		mixins: false,
		classes: ['a-ent'],
		components: false,
	};
	sharpShooter.gameSound = auxl.Core(sharpShooter.gameSoundData);

	//UI
	sharpShooter.sharpShooterUIData = auxl.layerDataFromTemplate(auxl.uiGameLayerData, 'sharpShooterUI',{position: new THREE.Vector3(1,1.5,0.5)}, true);
	sharpShooter.sharpShooterUI = auxl.Layer('sharpShooterUI',sharpShooter.sharpShooterUIData);
	//Parent : sharpShooterUI0
	//Game Status : sharpShooterUI1
	sharpShooter.sharpShooterUI.layer.all.child0.core.core.material.color = auxl.sharpShooterGameColor.compl;
	sharpShooter.sharpShooterUI.layer.all.child0.core.core.material.emissive = auxl.sharpShooterGameColor.compl;
	sharpShooter.sharpShooterUI.layer.all.child0.core.core.text.value = 'Game Ready';
	//Game Title : sharpShooterUI2
	sharpShooter.sharpShooterUI.layer.all.child1.core.core.material.color = auxl.sharpShooterGameColor.compl;
	sharpShooter.sharpShooterUI.layer.all.child1.core.core.material.emissive = auxl.sharpShooterGameColor.compl;
	sharpShooter.sharpShooterUI.layer.all.child1.core.core.text.value = 'Sharp Shooter';
	//Current Level & Points : sharpShooterUI3
	sharpShooter.sharpShooterUI.layer.all.child2.core.core.material.color = auxl.sharpShooterGameColor.compl;
	sharpShooter.sharpShooterUI.layer.all.child2.core.core.material.emissive = auxl.sharpShooterGameColor.compl;
	sharpShooter.sharpShooterUI.layer.all.child2.core.core.text.value = 'Hits : 0\nPts : 0';
	//High Score Board : sharpShooterUI4
	sharpShooter.sharpShooterUI.layer.all.child3.core.core.material.color = auxl.sharpShooterGameColor.compl;
	sharpShooter.sharpShooterUI.layer.all.child3.core.core.material.emissive = auxl.sharpShooterGameColor.compl;
	//Game Start : sharpShooterUI5
	sharpShooter.sharpShooterUI.layer.all.child4.core.core.material.color = auxl.sharpShooterGameColor.compl;
	sharpShooter.sharpShooterUI.layer.all.child4.core.core.material.emissive = auxl.sharpShooterGameColor.compl;
	sharpShooter.sharpShooterUI.layer.all.child4.core.core.components = {};
	sharpShooter.sharpShooterUI.layer.all.child4.core.core.components.clickrun__gamestart = {cursorObj: sharpShooter.id, component: 'null', method: 'GameStart', params: 'null',};
	//Game Control : sharpShooterUI6
	sharpShooter.sharpShooterUI.layer.all.child5.core.core.material.color = auxl.sharpShooterGameColor.compl;
	sharpShooter.sharpShooterUI.layer.all.child5.core.core.material.emissive = auxl.sharpShooterGameColor.compl;
	sharpShooter.sharpShooterUI.layer.all.child5.core.core.components = {};
	sharpShooter.sharpShooterUI.layer.all.child5.core.core.components.visible = false;
	//Game Menu : sharpShooterUI7
	sharpShooter.sharpShooterUI.layer.all.child6.core.core.material.color = auxl.sharpShooterGameColor.compl;
	sharpShooter.sharpShooterUI.layer.all.child6.core.core.material.emissive = auxl.sharpShooterGameColor.compl;
	sharpShooter.sharpShooterUI.layer.all.child6.core.core.components = {};
	sharpShooter.sharpShooterUI.layer.all.child6.core.core.components.clickrun__menutoggle = {cursorObj: 'sharpShooterGameMenu', component: 'null', method: 'ToggleGameMenu', params: 'null',};

	//Update Scores
	const UpdateScores = (score) => {
		if(score){
			sharpShooter.highScores = checkHighScore(score, sharpShooter.highScores);
		}
		sharpShooter.highScores.text = refreshHighScoreText(sharpShooter.highScores);
		sharpShooter.sharpShooterUI.GetChild('sharpShooterUI4').ChangeSelf({property:'text',value:{value:sharpShooter.highScores.text}});
		auxl.saveToProfile({auxlObject: sharpShooter.id, type: 'sharpShooter', sub: false, name: 'highScores', data: sharpShooter.highScores});
	}
	//Game Start
	const GameStart = () => {
		sharpShooter.target.position = TargetPosition();
		sharpShooter.target.SpawnCore();
		//Update UI
		sharpShooter.sharpShooterUI.GetChild('sharpShooterUI3').ChangeSelf({property:'text',value:{value: 'Hits : '+sharpShooter.hits+'\nPts : '+sharpShooter.pts}});
		//3 Second Countdown to prepare
		sharpShooter.gameSound.EmitEvent('gameStart');
		sharpShooter.sharpShooterUI.GetChild('sharpShooterUI1').ChangeSelf({property:'text',value:{value: 'Starting in 3...'}});
		sharpShooter.countdown2 = setTimeout(() => {
			//2 Seconds
			sharpShooter.gameSound.EmitEvent('second');
			sharpShooter.sharpShooterUI.GetChild('sharpShooterUI1').ChangeSelf({property:'text',value:{value: '2..'}});
			sharpShooter.countdown1 = setTimeout(() => {
				//1 Seconds
				sharpShooter.gameSound.EmitEvent('second');
				sharpShooter.sharpShooterUI.GetChild('sharpShooterUI1').ChangeSelf({property:'text',value:{value: '1.'}});
				sharpShooter.countdown0 = setTimeout(() => {
					//0 Seconds
					sharpShooter.gameSound.EmitEvent('begin');
					sharpShooter.sharpShooterUI.GetChild('sharpShooterUI1').ChangeSelf({property:'text',value:{value: 'SHOOT!'}});
					TargetSpawn();
					UpdateTimer(sharpShooter.timer);
				}, 1000);
			}, 1000);
		}, 1000);
	}
	//Game Over
	const GameOver = () => {
		sharpShooter.gameSound.EmitEvent('gameOver');
		sharpShooter.sharpShooterUI.GetChild('sharpShooterUI1').ChangeSelf({property:'text',value:{value: 'Game Over'}});
		UpdateScores(sharpShooter.pts);
		Reset();
	}
	//Reset
	const Reset = () => {
		clearTimeout(sharpShooter.hitDelay);
		clearTimeout(sharpShooter.timeout);
		clearTimeout(sharpShooter.spawnDelay);
		clearTimeout(sharpShooter.countdown2);
		clearTimeout(sharpShooter.countdown1);
		clearTimeout(sharpShooter.countdown0);
		clearInterval(sharpShooter.countdownInterval);
		sharpShooter.timer = timer;
		sharpShooter.respawnTime = respawnTime;
		sharpShooter.timeBonus = timeBonus;
		sharpShooter.hits = 0;
		sharpShooter.pts = 0;
		sharpShooter.seconds = 1000;
		if(sharpShooter.target.core.inScene){
			sharpShooter.target.DespawnCore();
		}
	}
	//Target Hit
	const TargetHit = () => {
		sharpShooter.target.GetEl().classList.toggle('clickable', false);
		sharpShooter.hits++;
		sharpShooter.pts += ((sharpShooter.timer/1000) * sharpShooter.hits);
		sharpShooter.timer += sharpShooter.respawnTime;
		if(sharpShooter.timeBonus > 800){
			sharpShooter.timeBonus -= 100;
		}
		sharpShooter.timer += sharpShooter.timeBonus;
		UpdateTimer(sharpShooter.timer);
		//Respawn
		sharpShooter.hitDelay = setTimeout(() => {
			TargetRespawn();
		}, 300);
		//Update UI
		sharpShooter.sharpShooterUI.GetChild('sharpShooterUI3').ChangeSelf({property:'text',value:{value: 'Hits : '+sharpShooter.hits+'\nPts : '+sharpShooter.pts.toFixed(2)}});
	}
	//UpdateTimer
	const UpdateTimer = (timer) => {
		clearTimeout(sharpShooter.timeout);
		clearInterval(sharpShooter.countdownInterval);
		//Countdown
		let counter = 0;
		sharpShooter.countdownInterval = setInterval(() => {
			counter++;
			let time = (timer-(counter*100))/1000;
			sharpShooter.timer -= 100;
			sharpShooter.seconds -= 100;
			if(sharpShooter.seconds <= 0){
				sharpShooter.gameSound.EmitEvent('second');
				sharpShooter.seconds = 1000;
			}
			sharpShooter.sharpShooterUI.GetChild('sharpShooterUI1').ChangeSelf({property:'text',value:{value: time.toFixed(2)}});
		}, 100);
		//Game Over Timer
		sharpShooter.timeout = setTimeout(() => {
			GameOver();
		}, timer);
	}
	//Target Position
	const TargetPosition = () => {
		let x = Math.floor((Math.random()*sharpShooter.hits*-2) + sharpShooter.hits*0.5);
		let y = Math.floor(Math.random()*sharpShooter.hits)+0.5;
		let z = (sharpShooter.hits*-1)-1;
		return new THREE.Vector3(x,y,z);
	}
	//Target Spawn
	const TargetSpawn = () => {
		sharpShooter.spawnDelay = setTimeout(() => {
			sharpShooter.target.EmitEvent('spawn');
			sharpShooter.target.GetEl().classList.toggle('clickable', true);
			clearTimeout(sharpShooter.spawnDelay)
		}, 50);
	}
	//Target Respawn
	const TargetRespawn = () => {
		sharpShooter.target.ChangeSelf({property:'position', value: TargetPosition()});
		TargetSpawn();
	}
	//Spawn Sharp Shooter
	const SpawnSSGame = () => {
		if(sharpShooter.inScene){}else{
			sharpShooter.sharpShooterUI.SpawnLayer();
			sharpShooter.gameSound.SpawnCore();
			UpdateScores();
			sharpShooter.inScene = true;
		}
	}
	//Despawn Sharp Shooter
	const DespawnSSGame = () => {
		if(sharpShooter.inScene){
			Reset();
			sharpShooter.gameSound.DespawnCore();
			sharpShooter.sharpShooterUI.DespawnLayer();
			sharpShooter.inScene = false;
			auxl.RemoveFromTracker(sharpShooter.id);
		}
	}

	return {sharpShooter, core, SpawnSSGame, DespawnSSGame, GameStart, TargetHit};

}
auxl.sharpShooterGame = auxl.SharpShooter('sharpShooterGame');
//Sharp Shooter Game Menu
auxl.sharpShooterGameMenuData = {
	id: 'sharpShooterGameMenu',
	game: auxl.sharpShooterGame.sharpShooter,
	homeZone: 'xrcadeZone',
	homeConnect: 'xrcadeHome',
	gameZone: 'xrcadeZone',
	gameConnect: 'game5',
	gameCabinet: 'cadeCab5Layer',
	outGamePos: new THREE.Vector3(-8,1.5,-19.75),
	inGamePos: new THREE.Vector3(0.75,1.5,0.75),
};
auxl.sharpShooterGameMenu = auxl.GameMenu(auxl.sharpShooterGameMenuData);


//
//Perfect Scale
//Adjust 3 Shapes to be as close to 1 1 1 scale as possible
auxl.PerfectScale = (id) => {

	let perfectScale = {};
	perfectScale.id = id;
	let core = 'perfectScale';
	perfectScale.title = 'Perfect Scale';
	perfectScale.instructionsText = 'How To Play :\nAdjust the scale of each shape in attempt to make each one a perfect size.\n The closer you get to exact scale within the fewest clicks, the more points you will earn.';
	perfectScale.controlsText = 'Game Controls :\nUse the controller ray and controller click to play the game.';
	perfectScale.previewImage = auxl.pattern01;
	perfectScale.inScene = false;
	//Colors
	auxl.perfectScaleGameColor = auxl.colorTheoryGen('#eb21a5');
	//High Scores
	perfectScale.highScores = blankHighScores('Pts', 2);
	//Game Vars
	perfectScale.gameStarted = false;
	perfectScale.levelDelay;
	perfectScale.despawnDelay;
	perfectScale.scaleDelay;
	perfectScale.bonusDelay;
	perfectScale.level = 0;
	perfectScale.levelClicks = 0;
	perfectScale.clicks = 0;
	perfectScale.pts = 0;
	perfectScale.levelScaleAmount = 0.1;
	perfectScale.startingScale = new THREE.Vector3(0,0,0);
	perfectScale.levelScalers = ['Cube', 'Pyramid', 'Sphere', 'Cylinder'];
	perfectScale.axis = false;
	perfectScale.scaler = false;
	//Scale 1 Cube
	perfectScale.scale1Data = {
	data:'scale1Data',
	id:'scale1',
	sources: false,
	text: false,
	sounds: false,
	geometry: {primitive: 'box', depth: 1, width: 1, height: 1},
	material: {shader: "standard", color: 'red', emissive: 'red', emissiveIntensity: 0.1, opacity: 1},
	position: new THREE.Vector3(0,5,0),
	rotation: new THREE.Vector3(0,0,0),
	scale: new THREE.Vector3(0.001,0.001,0.001),
	animations: {
		spawn: {property: 'material.opacity', from: '0', to: '1', dur: 3000, delay: 0, loop: false, dir: 'normal', easing: 'easeInOutSine', elasticity: 400, autoplay: true, enabled: true,},
		despawn: {property: 'material.opacity', from: '1', to: '0', dur: 2000, delay: 0, loop: false, dir: 'normal', easing: 'easeInOutSine', elasticity: 400, autoplay: false, enabled: true, startEvents: 'despawn'},
		hoveron: {property: 'material.emissiveIntensity', from: '0.25', to: '0.5', dur: 1, delay: 0, loop: false, dir: 'normal', easing: 'easeInOutSine', elasticity: 400, autoplay: false, enabled: true, startEvents: 'mouseenter'},
		hoveroff: {property: 'material.emissiveIntensity', from: '0.5', to: '0.25', dur: 1, delay: 0, loop: false, dir: 'normal', easing: 'easeInOutSine', elasticity: 400, autoplay: false, enabled: true, startEvents: 'mouseleave'},
		spinx: {property: 'object3D.rotation.y', from: '0', to: '360', dur: 3000, delay: 0, loop: false, dir: 'normal', easing: 'easeInOutSine', elasticity: 400, autoplay: false, enabled: true, startEvents: 'spinX'},
		spiny: {property: 'object3D.rotation.z', from: '0', to: '360', dur: 3000, delay: 0, loop: false, dir: 'normal', easing: 'easeInOutSine', elasticity: 400, autoplay: false, enabled: true, startEvents: 'spinY'},
		spinz: {property: 'object3D.rotation.x', from: '0', to: '360', dur: 3000, delay: 0, loop: false, dir: 'normal', easing: 'easeInOutSine', elasticity: 400, autoplay: false, enabled: true, startEvents: 'spinZ'},
	},
	mixins: false,
	classes: ['a-ent'],
	components: false,
	};
	perfectScale.scale1 = auxl.Core(perfectScale.scale1Data);
	//Scale 2 Pyramid
	//Scale2a
	perfectScale.scale2ParentData = {
	data:'scale2ParentData',
	id:'scale2Parent',
	sources: false,
	text: false,
	sounds: false,
	geometry: false,
	material: false,
	position: new THREE.Vector3(0,3.5,0),
	rotation: new THREE.Vector3(0,45,0),
	scale: new THREE.Vector3(0.001,0.001,0.001),
	animations: {
		spinx: {property: 'object3D.rotation.y', from: '45', to: '405', dur: 3000, delay: 0, loop: false, dir: 'normal', easing: 'easeInOutSine', elasticity: 400, autoplay: false, enabled: true, startEvents: 'spinX'},
		spiny: {property: 'object3D.rotation.z', from: '0', to: '360', dur: 3000, delay: 0, loop: false, dir: 'normal', easing: 'easeInOutSine', elasticity: 400, autoplay: false, enabled: true, startEvents: 'spinY'},
		spinz: {property: 'object3D.rotation.x', from: '0', to: '360', dur: 3000, delay: 0, loop: false, dir: 'normal', easing: 'easeInOutSine', elasticity: 400, autoplay: false, enabled: true, startEvents: 'spinZ'},
	},
	mixins: false,
	classes: ['a-ent'],
	components: false,
	};
	perfectScale.scale2Parent = auxl.Core(perfectScale.scale2ParentData);
	//Scale2a
	perfectScale.scale2aData = {
	data:'scale2aData',
	id:'scale2a',
	sources: false,
	text: false,
	sounds: false,
	geometry: {primitive: 'triangle', vertexA: '0 1 0', vertexB: '-0.5 0 0.5', vertexC: '0.5 0 0.5'},
	material: {shader: "standard", color: 'yellow', emissive: 'yellow', emissiveIntensity: 0.1, opacity: 1, side: 'double'},
	position: new THREE.Vector3(0,0,0),
	rotation: new THREE.Vector3(0,0,0),
	scale: new THREE.Vector3(1,1,1),
	animations: {
		spawn: {property: 'material.opacity', from: '0', to: '1', dur: 3000, delay: 0, loop: false, dir: 'normal', easing: 'easeInOutSine', elasticity: 400, autoplay: true, enabled: true,},
		despawn: {property: 'material.opacity', from: '1', to: '0', dur: 2000, delay: 0, loop: false, dir: 'normal', easing: 'easeInOutSine', elasticity: 400, autoplay: false, enabled: true, startEvents: 'despawn'},
		hoveron: {property: 'material.emissiveIntensity', from: '0.25', to: '0.5', dur: 1, delay: 0, loop: false, dir: 'normal', easing: 'easeInOutSine', elasticity: 400, autoplay: false, enabled: true, startEvents: 'mouseenter'},
		hoveroff: {property: 'material.emissiveIntensity', from: '0.5', to: '0.25', dur: 1, delay: 0, loop: false, dir: 'normal', easing: 'easeInOutSine', elasticity: 400, autoplay: false, enabled: true, startEvents: 'mouseleave'},
	},
	mixins: false,
	classes: ['a-ent'],
	components: false,
	};
	perfectScale.scale2a = auxl.Core(perfectScale.scale2aData);
	//Scale2b
	perfectScale.scale2bData = {
	data:'scale2bData',
	id:'scale2b',
	sources: false,
	text: false,
	sounds: false,
	geometry: {primitive: 'triangle', vertexA: '0 1 0', vertexB: '-0.5 0 0.5', vertexC: '-0.5 0 -0.5'},
	material: {shader: "standard", color: 'yellow', emissive: 'yellow', emissiveIntensity: 0.1, opacity: 1, side: 'double'},
	position: new THREE.Vector3(0,0,0),
	rotation: new THREE.Vector3(0,0,0),
	scale: new THREE.Vector3(1,1,1),
	animations: {
		spawn: {property: 'material.opacity', from: '0', to: '1', dur: 3000, delay: 0, loop: false, dir: 'normal', easing: 'easeInOutSine', elasticity: 400, autoplay: true, enabled: true,},
		despawn: {property: 'material.opacity', from: '1', to: '0', dur: 2000, delay: 0, loop: false, dir: 'normal', easing: 'easeInOutSine', elasticity: 400, autoplay: false, enabled: true, startEvents: 'despawn'},
		hoveron: {property: 'material.emissiveIntensity', from: '0.25', to: '0.5', dur: 1, delay: 0, loop: false, dir: 'normal', easing: 'easeInOutSine', elasticity: 400, autoplay: false, enabled: true, startEvents: 'mouseenter'},
		hoveroff: {property: 'material.emissiveIntensity', from: '0.5', to: '0.25', dur: 1, delay: 0, loop: false, dir: 'normal', easing: 'easeInOutSine', elasticity: 400, autoplay: false, enabled: true, startEvents: 'mouseleave'},
	},
	mixins: false,
	classes: ['a-ent'],
	components: false,
	};
	perfectScale.scale2b = auxl.Core(perfectScale.scale2bData);
	//Scale2c
	perfectScale.scale2cData = {
	data:'scale2cData',
	id:'scale2c',
	sources: false,
	text: false,
	sounds: false,
	geometry: {primitive: 'triangle', vertexA: '0 1 0', vertexB: '-0.5 0 -0.5', vertexC: '0.5 0 -0.5'},
	material: {shader: "standard", color: 'yellow', emissive: 'yellow', emissiveIntensity: 0.1, opacity: 1, side: 'double'},
	position: new THREE.Vector3(0,0,0),
	rotation: new THREE.Vector3(0,0,0),
	scale: new THREE.Vector3(1,1,1),
	animations: {
		spawn: {property: 'material.opacity', from: '0', to: '1', dur: 3000, delay: 0, loop: false, dir: 'normal', easing: 'easeInOutSine', elasticity: 400, autoplay: true, enabled: true,},
		despawn: {property: 'material.opacity', from: '1', to: '0', dur: 2000, delay: 0, loop: false, dir: 'normal', easing: 'easeInOutSine', elasticity: 400, autoplay: false, enabled: true, startEvents: 'despawn'},
		hoveron: {property: 'material.emissiveIntensity', from: '0.25', to: '0.5', dur: 1, delay: 0, loop: false, dir: 'normal', easing: 'easeInOutSine', elasticity: 400, autoplay: false, enabled: true, startEvents: 'mouseenter'},
		hoveroff: {property: 'material.emissiveIntensity', from: '0.5', to: '0.25', dur: 1, delay: 0, loop: false, dir: 'normal', easing: 'easeInOutSine', elasticity: 400, autoplay: false, enabled: true, startEvents: 'mouseleave'},
	},
	mixins: false,
	classes: ['a-ent'],
	components: false,
	};
	perfectScale.scale2c = auxl.Core(perfectScale.scale2cData);
	//Scale2d
	perfectScale.scale2dData = {
	data:'scale2dData',
	id:'scale2d',
	sources: false,
	text: false,
	sounds: false,
	geometry: {primitive: 'triangle', vertexA: '0 1 0', vertexB: '0.5 0 -0.5', vertexC: '0.5 0 0.5'},
	material: {shader: "standard", color: 'yellow', emissive: 'yellow', emissiveIntensity: 0.1, opacity: 1, side: 'double'},
	position: new THREE.Vector3(0,0,0),
	rotation: new THREE.Vector3(0,0,0),
	scale: new THREE.Vector3(1,1,1),
	animations: {
		spawn: {property: 'material.opacity', from: '0', to: '1', dur: 3000, delay: 0, loop: false, dir: 'normal', easing: 'easeInOutSine', elasticity: 400, autoplay: true, enabled: true,},
		despawn: {property: 'material.opacity', from: '1', to: '0', dur: 2000, delay: 0, loop: false, dir: 'normal', easing: 'easeInOutSine', elasticity: 400, autoplay: false, enabled: true, startEvents: 'despawn'},
		hoveron: {property: 'material.emissiveIntensity', from: '0.25', to: '0.5', dur: 1, delay: 0, loop: false, dir: 'normal', easing: 'easeInOutSine', elasticity: 400, autoplay: false, enabled: true, startEvents: 'mouseenter'},
		hoveroff: {property: 'material.emissiveIntensity', from: '0.5', to: '0.25', dur: 1, delay: 0, loop: false, dir: 'normal', easing: 'easeInOutSine', elasticity: 400, autoplay: false, enabled: true, startEvents: 'mouseleave'},
	},
	mixins: false,
	classes: ['a-ent'],
	components: false,
	};
	perfectScale.scale2d = auxl.Core(perfectScale.scale2dData);
	//Scale2e
	perfectScale.scale2eData = {
	data:'scale2eData',
	id:'scale2e',
	sources: false,
	text: false,
	sounds: false,
	geometry: {primitive: 'plane', height: 1, width: 1},
	material: {shader: "standard", color: 'yellow', emissive: 'yellow', emissiveIntensity: 0.1, opacity: 1, side: 'double'},
	position: new THREE.Vector3(0,0,0),
	rotation: new THREE.Vector3(90,0,0),
	scale: new THREE.Vector3(1,1,1),
	animations: {
		spawn: {property: 'material.opacity', from: '0', to: '1', dur: 3000, delay: 0, loop: false, dir: 'normal', easing: 'easeInOutSine', elasticity: 400, autoplay: true, enabled: true,},
		despawn: {property: 'material.opacity', from: '1', to: '0', dur: 2000, delay: 0, loop: false, dir: 'normal', easing: 'easeInOutSine', elasticity: 400, autoplay: false, enabled: true, startEvents: 'despawn'},
		hoveron: {property: 'material.emissiveIntensity', from: '0.25', to: '0.5', dur: 1, delay: 0, loop: false, dir: 'normal', easing: 'easeInOutSine', elasticity: 400, autoplay: false, enabled: true, startEvents: 'mouseenter'},
		hoveroff: {property: 'material.emissiveIntensity', from: '0.5', to: '0.25', dur: 1, delay: 0, loop: false, dir: 'normal', easing: 'easeInOutSine', elasticity: 400, autoplay: false, enabled: true, startEvents: 'mouseleave'},
	},
	mixins: false,
	classes: ['a-ent'],
	components: false,
	};
	perfectScale.scale2e = auxl.Core(perfectScale.scale2eData);
	//Scale 2 Layer
	perfectScale.scale2Data = {
		parent: {core: perfectScale.scale2Parent}, 
		child0: {core: perfectScale.scale2a}, 
		child1: {core: perfectScale.scale2b},
		child2: {core: perfectScale.scale2c},
		child3: {core: perfectScale.scale2d},
		child4: {core: perfectScale.scale2e},
	}
	perfectScale.scale2 = auxl.Layer('scale2',perfectScale.scale2Data);
	//Scale 3 Sphere
	perfectScale.scale3Data = {
	data:'scale3Data',
	id:'scale3',
	sources: false,
	text: false,
	sounds: false,
	geometry: {primitive: 'sphere', radius: 1,},
	material: {shader: "standard", color: 'blue', emissive: 'blue', emissiveIntensity: 0.1, opacity: 1},
	position: new THREE.Vector3(0,5,0),
	rotation: new THREE.Vector3(0,0,0),
	scale: new THREE.Vector3(0.001,0.001,0.001),
	animations: {
		spawn: {property: 'material.opacity', from: '0', to: '1', dur: 3000, delay: 0, loop: false, dir: 'normal', easing: 'easeInOutSine', elasticity: 400, autoplay: true, enabled: true,},
		despawn: {property: 'material.opacity', from: '1', to: '0', dur: 2000, delay: 0, loop: false, dir: 'normal', easing: 'easeInOutSine', elasticity: 400, autoplay: false, enabled: true, startEvents: 'despawn'},
		hoveron: {property: 'material.emissiveIntensity', from: '0.25', to: '0.5', dur: 1, delay: 0, loop: false, dir: 'normal', easing: 'easeInOutSine', elasticity: 400, autoplay: false, enabled: true, startEvents: 'mouseenter'},
		hoveroff: {property: 'material.emissiveIntensity', from: '0.5', to: '0.25', dur: 1, delay: 0, loop: false, dir: 'normal', easing: 'easeInOutSine', elasticity: 400, autoplay: false, enabled: true, startEvents: 'mouseleave'},
		spinx: {property: 'object3D.rotation.y', from: '0', to: '360', dur: 3000, delay: 0, loop: false, dir: 'normal', easing: 'easeInOutSine', elasticity: 400, autoplay: false, enabled: true, startEvents: 'spinX'},
		spiny: {property: 'object3D.rotation.z', from: '0', to: '360', dur: 3000, delay: 0, loop: false, dir: 'normal', easing: 'easeInOutSine', elasticity: 400, autoplay: false, enabled: true, startEvents: 'spinY'},
		spinz: {property: 'object3D.rotation.x', from: '0', to: '360', dur: 3000, delay: 0, loop: false, dir: 'normal', easing: 'easeInOutSine', elasticity: 400, autoplay: false, enabled: true, startEvents: 'spinZ'},
	},
	mixins: false,
	classes: ['a-ent'],
	components: false,
	};
	perfectScale.scale3 = auxl.Core(perfectScale.scale3Data);
	//Scale 4 Cylinder
	perfectScale.scale4Data = {
	data:'scale4Data',
	id:'scale4',
	sources: false,
	text: false,
	sounds: false,
	geometry: {primitive: 'cylinder', radius: 0.5, height: 0.5, openEnded: false, segmentsHeight: 4, segmentsRadial: 16, thetaStart: 0, thetaLength: 360},
	material: {shader: "standard", color: 'green', emissive: 'green', emissiveIntensity: 0.1, opacity: 1},
	position: new THREE.Vector3(0,5,0),
	rotation: new THREE.Vector3(0,0,0),
	scale: new THREE.Vector3(0.001,0.001,0.001),
	animations: {
		spawn: {property: 'material.opacity', from: '0', to: '1', dur: 3000, delay: 0, loop: false, dir: 'normal', easing: 'easeInOutSine', elasticity: 400, autoplay: true, enabled: true,},
		despawn: {property: 'material.opacity', from: '1', to: '0', dur: 2000, delay: 0, loop: false, dir: 'normal', easing: 'easeInOutSine', elasticity: 400, autoplay: false, enabled: true, startEvents: 'despawn'},
		hoveron: {property: 'material.emissiveIntensity', from: '0.25', to: '0.5', dur: 1, delay: 0, loop: false, dir: 'normal', easing: 'easeInOutSine', elasticity: 400, autoplay: false, enabled: true, startEvents: 'mouseenter'},
		hoveroff: {property: 'material.emissiveIntensity', from: '0.5', to: '0.25', dur: 1, delay: 0, loop: false, dir: 'normal', easing: 'easeInOutSine', elasticity: 400, autoplay: false, enabled: true, startEvents: 'mouseleave'},
		spinx: {property: 'object3D.rotation.y', from: '0', to: '360', dur: 3000, delay: 0, loop: false, dir: 'normal', easing: 'easeInOutSine', elasticity: 400, autoplay: false, enabled: true, startEvents: 'spinX'},
		spiny: {property: 'object3D.rotation.z', from: '0', to: '360', dur: 3000, delay: 0, loop: false, dir: 'normal', easing: 'easeInOutSine', elasticity: 400, autoplay: false, enabled: true, startEvents: 'spinY'},
		spinz: {property: 'object3D.rotation.x', from: '0', to: '360', dur: 3000, delay: 0, loop: false, dir: 'normal', easing: 'easeInOutSine', elasticity: 400, autoplay: false, enabled: true, startEvents: 'spinZ'},
	},
	mixins: false,
	classes: ['a-ent'],
	components: false,
	};
	perfectScale.scale4 = auxl.Core(perfectScale.scale4Data);

	//UI
	perfectScale.perfectScaleUIData = auxl.layerDataFromTemplate(auxl.uiGameLayerData, 'perfectScaleUI',{position: new THREE.Vector3(1.5,1.5,8)}, true);
	perfectScale.perfectScaleUI = auxl.Layer('perfectScaleUI',perfectScale.perfectScaleUIData);
	//Parent : perfectScaleUI0
	//Game Status : perfectScaleUI1
	perfectScale.perfectScaleUI.layer.all.child0.core.core.material.color = auxl.perfectScaleGameColor.compl;
	perfectScale.perfectScaleUI.layer.all.child0.core.core.material.emissive = auxl.perfectScaleGameColor.compl;
	perfectScale.perfectScaleUI.layer.all.child0.core.core.text.value = 'Game Ready';
	//Game Title : perfectScaleUI2
	perfectScale.perfectScaleUI.layer.all.child1.core.core.material.color = auxl.perfectScaleGameColor.compl;
	perfectScale.perfectScaleUI.layer.all.child1.core.core.material.emissive = auxl.perfectScaleGameColor.compl;
	perfectScale.perfectScaleUI.layer.all.child1.core.core.text.value = 'Perfect Scale';
	//Current Level & Points : perfectScaleUI3
	perfectScale.perfectScaleUI.layer.all.child2.core.core.material.color = auxl.perfectScaleGameColor.compl;
	perfectScale.perfectScaleUI.layer.all.child2.core.core.material.emissive = auxl.perfectScaleGameColor.compl;
	perfectScale.perfectScaleUI.layer.all.child2.core.core.text.value = 'Pts : 0';
	//High Score Board : perfectScaleUI4
	perfectScale.perfectScaleUI.layer.all.child3.core.core.material.color = auxl.perfectScaleGameColor.compl;
	perfectScale.perfectScaleUI.layer.all.child3.core.core.material.emissive = auxl.perfectScaleGameColor.compl;
	//Game Start : perfectScaleUI5
	perfectScale.perfectScaleUI.layer.all.child4.core.core.material.color = auxl.perfectScaleGameColor.compl;
	perfectScale.perfectScaleUI.layer.all.child4.core.core.material.emissive = auxl.perfectScaleGameColor.compl;
	perfectScale.perfectScaleUI.layer.all.child4.core.core.components = {};
	perfectScale.perfectScaleUI.layer.all.child4.core.core.components.clickrun__gamestart = {cursorObj: perfectScale.id, component: 'null', method: 'GameStart', params: 'null',};
	//Game Control : perfectScaleUI6
	perfectScale.perfectScaleUI.layer.all.child5.core.core.material.color = auxl.perfectScaleGameColor.compl;
	perfectScale.perfectScaleUI.layer.all.child5.core.core.material.emissive = auxl.perfectScaleGameColor.compl;
	perfectScale.perfectScaleUI.layer.all.child5.core.core.text.value = 'Confirm';
	perfectScale.perfectScaleUI.layer.all.child5.core.core.components = {};
	perfectScale.perfectScaleUI.layer.all.child5.core.core.components.clickrun__confirm = {cursorObj: perfectScale.id, component: 'null', method: 'Confirm', params: 'null',};
	perfectScale.perfectScaleUI.layer.all.child5.core.core.components.visible = false;
	//Game Menu : perfectScaleUI7
	perfectScale.perfectScaleUI.layer.all.child6.core.core.material.color = auxl.perfectScaleGameColor.compl;
	perfectScale.perfectScaleUI.layer.all.child6.core.core.material.emissive = auxl.perfectScaleGameColor.compl;
	perfectScale.perfectScaleUI.layer.all.child6.core.core.components = {};
	perfectScale.perfectScaleUI.layer.all.child6.core.core.components.clickrun__menutoggle = {cursorObj: 'perfectScaleGameMenu', component: 'null', method: 'ToggleGameMenu', params: 'null',};

	//Scaling UI
	perfectScale.scalingUIParentData = {
		data:'scalingUIParentData',
		id:'scalingUIParent',
		sources: false,
		text: false,
		sounds: false,
		geometry: false,
		material: false,
		position: new THREE.Vector3(0.175,0.25,0),
		rotation: new THREE.Vector3(0,0,0),
		scale: new THREE.Vector3(1,1,1),
		animations: false,
		mixins: false,
		classes: ['a-ent'],
		components: {
			['look-at-xyz']:{buffer: 0.65, drag: 0.25, match: 'camera', x:false, y:true, z:false},
		},
	};
	perfectScale.scalingUIParent = auxl.Core(perfectScale.scalingUIParentData);
	//Scaling UI
	perfectScale.scalingUIHolderData = {
		data:'scalingUIHolderData',
		id:'scalingUIHolder',
		sources: false,
		text: false,
		sounds: false,
		geometry: false,
		material: false,
		position: new THREE.Vector3(0,0,-1),
		rotation: new THREE.Vector3(-15,0,0),
		scale: new THREE.Vector3(1,1,1),
		animations: false,
		mixins: false,
		classes: ['a-ent'],
		components: false,
	};
	perfectScale.scalingUIHolder = auxl.Core(perfectScale.scalingUIHolderData);
	//Scale Up
	perfectScale.scaleUpData = {
	data:'scaleUpData',
	id:'scaleUp',
	sources: false,
	text: false,
	sounds: false,
	geometry: {primitive: 'cylinder', radius: 0.125, height: 0.05, openEnded: false, segmentsHeight: 2, segmentsRadial: 3, thetaStart: 0, thetaLength: 360},
	material: {shader: "standard", color: '#ff8900', emissive: '#ff8900', emissiveIntensity: 0.1, opacity: 1},
	position: new THREE.Vector3(0,1.15,0),
	rotation: new THREE.Vector3(-90,0,0),
	scale: new THREE.Vector3(1,1,1),
	animations: {
		hoveron: {property: 'material.emissiveIntensity', from: '0.25', to: '0.5', dur: 1, delay: 0, loop: false, dir: 'normal', easing: 'easeInOutSine', elasticity: 400, autoplay: false, enabled: true, startEvents: 'mouseenter'},
		hoveroff: {property: 'material.emissiveIntensity', from: '0.5', to: '0.25', dur: 1, delay: 0, loop: false, dir: 'normal', easing: 'easeInOutSine', elasticity: 400, autoplay: false, enabled: true, startEvents: 'mouseleave'},
		click: {property: 'material.emissiveIntensity', from: '0.5', to: '1', dur: 125, delay: 0, loop: 1, dir: 'alternate', easing: 'easeOutElastic', elasticity: 400, autoplay: false, enabled: true, startEvents: 'mousedown'},
	},
	mixins: false,
	classes: ['clickable', 'a-ent'],
	components: {
		clickrun__scaleup:{
		cursorObj: perfectScale.id,
		component: 'null',
		method: 'ScaleUp',
		params: 'null',},
	},
	};
	perfectScale.scaleUp = auxl.Core(perfectScale.scaleUpData);
	//Scale Down
	perfectScale.scaleDownData = {
	data:'scaleDownData',
	id:'scaleDown',
	sources: false,
	text: false,
	sounds: false,
	geometry: {primitive: 'cylinder', radius: 0.125, height: 0.05, openEnded: false, segmentsHeight: 2, segmentsRadial: 3, thetaStart: 0, thetaLength: 360},
	material: {shader: "standard", color: '#ff8900', emissive: '#ff8900', emissiveIntensity: 0.1, opacity: 1},
	position: new THREE.Vector3(0,0.95,0),
	rotation: new THREE.Vector3(90,0,0),
	scale: new THREE.Vector3(1,1,1),
	animations: {
		hoveron: {property: 'material.emissiveIntensity', from: '0.25', to: '0.5', dur: 1, delay: 0, loop: false, dir: 'normal', easing: 'easeInOutSine', elasticity: 400, autoplay: false, enabled: true, startEvents: 'mouseenter'},
		hoveroff: {property: 'material.emissiveIntensity', from: '0.5', to: '0.25', dur: 1, delay: 0, loop: false, dir: 'normal', easing: 'easeInOutSine', elasticity: 400, autoplay: false, enabled: true, startEvents: 'mouseleave'},
		click: {property: 'material.emissiveIntensity', from: '0.5', to: '1', dur: 125, delay: 0, loop: 1, dir: 'alternate', easing: 'easeOutElastic', elasticity: 400, autoplay: false, enabled: true, startEvents: 'mousedown'},
	},
	mixins: false,
	classes: ['clickable', 'a-ent'],
	components: {
		clickrun__scaleup:{
		cursorObj: perfectScale.id,
		component: 'null',
		method: 'ScaleDown',
		params: 'null',},
	},
	};
	perfectScale.scaleDown = auxl.Core(perfectScale.scaleDownData);
	//Selection
	perfectScale.confirmData = {
	data:'confirmData',
	id: 'confirm',
	sources: false,
	text: {value:'Confirm', color: "#FFFFFF", align: "center", font: "exo2bold", xOffset: 0.01, zOffset: 0.0251, side: 'front', wrapCount: 10, baseline: 'center'},
	geometry: {primitive: 'box', depth: 0.05, width: 0.4, height: 0.1},
	material: {shader: "standard", color: auxl.perfectScaleGameColor.base, emissive: auxl.perfectScaleGameColor.base, emissiveIntensity: 0.25, opacity: 1},
	position: new THREE.Vector3(0,0.75,0),
	rotation: new THREE.Vector3(0,0,0),
	scale: new THREE.Vector3(1,1,1),
	animations: false,
	mixins: false,
	classes: ['clickable', 'a-ent'],
	components: {
		clickrun__confirm:{
			cursorObj: perfectScale.id,
			component: 'null',
			method: 'Confirm',
			params: 'null',
		},
	},
	};
	perfectScale.confirm = auxl.Core(perfectScale.confirmData);
	//Axis X
	perfectScale.axisXData = {
	data:'axisXData',
	id: 'axisX',
	sources: false,
	text: {value:'X', color: "#FFFFFF", align: "center", font: "exo2bold", zOffset: 0.0251, side: 'front', wrapCount: 2, baseline: 'center'},
	geometry: {primitive: 'box', depth: 0.05, width: 0.2, height: 0.2},
	material: {shader: "standard", color: auxl.perfectScaleGameColor.base, emissive: auxl.perfectScaleGameColor.base, emissiveIntensity: 0.25, opacity: 1},
	position: new THREE.Vector3(-0.5,1.2,0),
	rotation: new THREE.Vector3(0,0,0),
	scale: new THREE.Vector3(1,1,1),
	animations: {
		hoveron: {property: 'material.emissiveIntensity', from: '0.25', to: '0.5', dur: 1, delay: 0, loop: false, dir: 'normal', easing: 'easeInOutSine', elasticity: 400, autoplay: false, enabled: true, startEvents: 'mouseenter'},
		hoveroff: {property: 'material.emissiveIntensity', from: '0.5', to: '0.25', dur: 1, delay: 0, loop: false, dir: 'normal', easing: 'easeInOutSine', elasticity: 400, autoplay: false, enabled: true, startEvents: 'mouseleave'},
	},
	mixins: false,
	classes: ['clickable','a-ent'],
	components: {
		clickrun:{
			cursorObj: perfectScale.id,
			component: 'null',
			method: 'ChangeAxis',
			params: 'x',
		},
	},
	};
	perfectScale.axisX = auxl.Core(perfectScale.axisXData);
	//Axis Y
	perfectScale.axisYData = {
	data:'axisYData',
	id: 'axisY',
	sources: false,
	text: {value:'Y', color: "#FFFFFF", align: "center", font: "exo2bold", zOffset: 0.0251, side: 'front', wrapCount: 2, baseline: 'center'},
	geometry: {primitive: 'box', depth: 0.05, width: 0.2, height: 0.2},
	material: {shader: "standard", color: auxl.perfectScaleGameColor.base, emissive: auxl.perfectScaleGameColor.base, emissiveIntensity: 0.25, opacity: 1},
	position: new THREE.Vector3(-0.5,1,0),
	rotation: new THREE.Vector3(0,0,0),
	scale: new THREE.Vector3(1,1,1),
	animations: {
		hoveron: {property: 'material.emissiveIntensity', from: '0.25', to: '0.5', dur: 1, delay: 0, loop: false, dir: 'normal', easing: 'easeInOutSine', elasticity: 400, autoplay: false, enabled: true, startEvents: 'mouseenter'},
		hoveroff: {property: 'material.emissiveIntensity', from: '0.5', to: '0.25', dur: 1, delay: 0, loop: false, dir: 'normal', easing: 'easeInOutSine', elasticity: 400, autoplay: false, enabled: true, startEvents: 'mouseleave'},
	},
	mixins: false,
	classes: ['clickable','a-ent'],
	components: {
		clickrun:{
			cursorObj: perfectScale.id,
			component: 'null',
			method: 'ChangeAxis',
			params: 'y',
		},
	},
	};
	perfectScale.axisY = auxl.Core(perfectScale.axisYData);
	//Axis Z
	perfectScale.axisZData = {
	data:'axisZData',
	id: 'axisZ',
	sources: false,
	text: {value:'Z', color: "#FFFFFF", align: "center", font: "exo2bold", zOffset: 0.0251, side: 'front', wrapCount: 2, baseline: 'center'},
	geometry: {primitive: 'box', depth: 0.05, width: 0.2, height: 0.2},
	material: {shader: "standard", color: auxl.perfectScaleGameColor.base, emissive: auxl.perfectScaleGameColor.base, emissiveIntensity: 0.25, opacity: 1},
	position: new THREE.Vector3(-0.5,0.8,0),
	rotation: new THREE.Vector3(0,0,0),
	scale: new THREE.Vector3(1,1,1),
	animations: {
		hoveron: {property: 'material.emissiveIntensity', from: '0.25', to: '0.5', dur: 1, delay: 0, loop: false, dir: 'normal', easing: 'easeInOutSine', elasticity: 400, autoplay: false, enabled: true, startEvents: 'mouseenter'},
		hoveroff: {property: 'material.emissiveIntensity', from: '0.5', to: '0.25', dur: 1, delay: 0, loop: false, dir: 'normal', easing: 'easeInOutSine', elasticity: 400, autoplay: false, enabled: true, startEvents: 'mouseleave'},
	},
	mixins: false,
	classes: ['clickable','a-ent'],
	components: {
		clickrun:{
			cursorObj: perfectScale.id,
			component: 'null',
			method: 'ChangeAxis',
			params: 'z',
		},
	},
	};
	perfectScale.axisZ = auxl.Core(perfectScale.axisZData);
	//Spin
	perfectScale.spinData = {
	data:'spinData',
	id: 'spin',
	sources: false,
	text: {value:'Spin', color: "#FFFFFF", align: "center", font: "exo2bold", zOffset: 0.0251, side: 'front', wrapCount: 5, baseline: 'center'},
	geometry: {primitive: 'box', depth: 0.05, width: 0.2, height: 0.2},
	material: {shader: "standard", color: auxl.perfectScaleGameColor.base, emissive: auxl.perfectScaleGameColor.base, emissiveIntensity: 0.25, opacity: 1},
	position: new THREE.Vector3(-0.3,1,0),
	rotation: new THREE.Vector3(0,0,0),
	scale: new THREE.Vector3(1,1,1),
	animations: {
		hoveron: {property: 'material.emissiveIntensity', from: '0.25', to: '0.5', dur: 1, delay: 0, loop: false, dir: 'normal', easing: 'easeInOutSine', elasticity: 400, autoplay: false, enabled: true, startEvents: 'mouseenter'},
		hoveroff: {property: 'material.emissiveIntensity', from: '0.5', to: '0.25', dur: 1, delay: 0, loop: false, dir: 'normal', easing: 'easeInOutSine', elasticity: 400, autoplay: false, enabled: true, startEvents: 'mouseleave'},
		click: {property: 'scale', from: '1 1 1', to: '1.1 1.1 1.1', dur: 250, delay: 0, loop: 1, dir: 'alternate', easing: 'easeInOutSine', elasticity: 400, autoplay: false, enabled: true, startEvents: 'click'},
	},
	mixins: false,
	classes: ['clickable','a-ent'],
	components: {
		clickrun:{
			cursorObj: perfectScale.id,
			component: 'null',
			method: 'Spin',
			params: 'null',
		},
	},
	};
	perfectScale.spin = auxl.Core(perfectScale.spinData);
	//Scaling UI Layer
	perfectScale.scalingUIData = {
		parent: {core: perfectScale.scalingUIParent}, 
		child0: {
			parent: {core: perfectScale.scalingUIHolder}, 
			child0: {core: perfectScale.confirm}, 
			child1: {core: perfectScale.scaleUp}, 
			child2: {core: perfectScale.scaleDown},
			child3: {core: perfectScale.axisX},
			child4: {core: perfectScale.axisY},
			child5: {core: perfectScale.axisZ},
			child6: {core: perfectScale.spin},
		}, 
	}
	perfectScale.scalingUI = auxl.Layer('scalingUI',perfectScale.scalingUIData);

	//Update Scores
	const UpdateScores = (score) => {
		if(score){
			perfectScale.highScores = checkHighScore(score, perfectScale.highScores);
		}
		perfectScale.highScores.text = refreshHighScoreText(perfectScale.highScores);
		perfectScale.perfectScaleUI.GetChild('perfectScaleUI4').ChangeSelf({property:'text',value:{value:perfectScale.highScores.text}});
		auxl.saveToProfile({auxlObject: perfectScale.id, type: 'perfectScale', sub: false, name: 'highScores', data: perfectScale.highScores});
	}
	//Reset
	const Reset = () => {
		clearTimeout(perfectScale.levelDelay)
		clearTimeout(perfectScale.despawnDelay)
		clearTimeout(perfectScale.scaleDelay)
		clearTimeout(perfectScale.bonusDelay)
		perfectScale.level = 0;
		perfectScale.levelClicks = 0;
		perfectScale.clicks = 0;
		perfectScale.pts = 0;
		perfectScale.startingScale = new THREE.Vector3(0,0,0);
		perfectScale.scaler = false;
		perfectScale.axis = false;
		ResetAxisButtons();
		perfectScale.perfectScaleUI.GetChild('perfectScaleUI3').ChangeSelf({property:'text',value:{value:'0 Pts\nTotal 0 Pts'}});
	}
	//Spawn Scalers
	const SpawnScaler = (type) => {
		perfectScale.scaler = type;
		if(type === 'Cube'){
			perfectScale.scale1.SpawnCore();
		} else if(type === 'Pyramid'){
			perfectScale.scale2.SpawnLayer();
		} else if(type === 'Sphere'){
			perfectScale.scale3.SpawnCore();
		} else if(type === 'Cylinder'){
			perfectScale.scale4.SpawnCore();
		}

	}
	//Despawn Scalers
	const DespawnScaler = () => {
		if(perfectScale.scale1.core.inScene){
			perfectScale.scale1.EmitEvent('despawn');
			perfectScale.despawnDelay = setTimeout(() => {
				perfectScale.scale1.DespawnCore();
			}, 2000);
		}
		if(perfectScale.scale2.layer.inScene){
			perfectScale.scale2.EmitEventAll('despawn');
			perfectScale.despawnDelay = setTimeout(() => {
				perfectScale.scale2.DespawnLayer();
			}, 2000);
		}
		if(perfectScale.scale3.core.inScene){
			perfectScale.scale3.EmitEvent('despawn');
			perfectScale.despawnDelay = setTimeout(() => {
				perfectScale.scale3.DespawnCore();
			}, 2000);
		}
		if(perfectScale.scale4.core.inScene){
			perfectScale.scale4.EmitEvent('despawn');
			perfectScale.despawnDelay = setTimeout(() => {
				perfectScale.scale4.DespawnCore();
			}, 2000);
		}
	}
	//Spin
	const Spin = () => {
		//Spin current scaler upons currently selected axis
		if(perfectScale.scaler === 'Cube'){
			perfectScale.scale1.EmitEvent('spin' + perfectScale.axis.toUpperCase());
		} else if(perfectScale.scaler === 'Pyramid'){
			perfectScale.scale2.EmitEventParent('spin' + perfectScale.axis.toUpperCase());
		} else if(perfectScale.scaler === 'Sphere'){
			perfectScale.scale3.EmitEvent('spin' + perfectScale.axis.toUpperCase());
		} else if(perfectScale.scaler === 'Cylinder'){
			perfectScale.scale4.EmitEvent('spin' + perfectScale.axis.toUpperCase());
		}
	}
	//Change Axis
	const ChangeAxis = (axis) => {
		//Select new Axis
		perfectScale.axis = axis;
		//Reset all Axis Buttons
		ResetAxisButtons();
		//Update Selected Axis Button
		if(axis === 'x'){
			perfectScale.axisX.ChangeSelf({property: 'material', value:{emissive: auxl.perfectScaleGameColor.compl}})
		} else if(axis === 'y'){
			perfectScale.axisY.ChangeSelf({property: 'material', value:{emissive: auxl.perfectScaleGameColor.compl}})
		} else if(axis === 'z'){
			perfectScale.axisZ.ChangeSelf({property: 'material', value:{emissive: auxl.perfectScaleGameColor.compl}})
		}
	}
	//Reset Axis Buttons
	const ResetAxisButtons = () => {
		perfectScale.axisX.ChangeSelf({property: 'material', value:{emissive: auxl.perfectScaleGameColor.base}})
		perfectScale.axisY.ChangeSelf({property: 'material', value:{emissive: auxl.perfectScaleGameColor.base}})
		perfectScale.axisZ.ChangeSelf({property: 'material', value:{emissive: auxl.perfectScaleGameColor.base}})
	}
	//Scale Up
	const ScaleUp = () => {
		if(perfectScale.axis){
			let scale = new THREE.Vector3(0,0,0);
			if(perfectScale.scaler === 'Cube'){
				scale = perfectScale.scale1.GetEl().getAttribute('scale');
			} else if(perfectScale.scaler === 'Pyramid'){
				scale = perfectScale.scale2.GetParentEl().getAttribute('scale');
			} else if(perfectScale.scaler === 'Sphere'){
				scale = perfectScale.scale3.GetEl().getAttribute('scale');
			} else if(perfectScale.scaler === 'Cylinder'){
				scale = perfectScale.scale4.GetEl().getAttribute('scale');
			}
			if(scale[perfectScale.axis] + perfectScale.levelScaleAmount < perfectScale.startingScale[perfectScale.axis] + (perfectScale.level)+1){
				perfectScale.clicks++;
				scale[perfectScale.axis] += perfectScale.levelScaleAmount;
			}
		}
	}
	//Scale Down
	const ScaleDown = () => {
		if(perfectScale.axis){
			let scale = new THREE.Vector3(0,0,0);
			if(perfectScale.scaler === 'Cube'){
				scale = perfectScale.scale1.GetEl().getAttribute('scale');
			} else if(perfectScale.scaler === 'Pyramid'){
				scale = perfectScale.scale2.GetParentEl().getAttribute('scale');
			} else if(perfectScale.scaler === 'Sphere'){
				scale = perfectScale.scale3.GetEl().getAttribute('scale');
			} else if(perfectScale.scaler === 'Cylinder'){
				scale = perfectScale.scale4.GetEl().getAttribute('scale');
			}
			if(scale[perfectScale.axis] - perfectScale.levelScaleAmount > perfectScale.startingScale[perfectScale.axis] - (perfectScale.level+1)){
				perfectScale.clicks++;
				scale[perfectScale.axis] -= perfectScale.levelScaleAmount;
			}
		}
	}
	//Confirm
	const Confirm = () => {
		//UI Text
		let text = '';
		//Get Object Scale & Despawn
		let confirmScale = new THREE.Vector3(0,0,0);
		if(perfectScale.scale1.core.inScene){
			confirmScale.copy(perfectScale.scale1.GetEl().getAttribute('scale'));
		}
		if(perfectScale.scale2.layer.inScene){
			confirmScale.copy(perfectScale.scale2.GetParentEl().getAttribute('scale'));
		}
		if(perfectScale.scale3.core.inScene){
			confirmScale.copy(perfectScale.scale3.GetEl().getAttribute('scale'));
		}
		if(perfectScale.scale4.core.inScene){
			confirmScale.copy(perfectScale.scale4.GetEl().getAttribute('scale'));
		}
		DespawnScaler();
		//Round to single decimal
		let compareX = Decimal(confirmScale.x);
		let compareY = Decimal(confirmScale.y);
		let compareZ = Decimal(confirmScale.z);
		//Compare Scale
		let compare = [compareX, compareY, compareZ];
		//Sort from low to high
		compare.sort(function(a, b){return a - b});
		//Get differences
		function diff(a,b){
			return Decimal(Math.abs(a-b));
		}
		let diff1 = diff(compare[0], compare[1]);
		let diff2 = diff(compare[1], compare[2]);
		//Accuracy Bonus
		let score = 0;
		let score1 = 0;
		let score2 = 0;
		//Perfect Bonus
		if(diff1 === 0 && diff2 === 0){
			//console.log('Perfect Scale!')
			score += (perfectScale.level*100);
			text += 'Perfect! ';
		} else {
			if(diff1 === 0){
				score1 = (perfectScale.level*25);
				text += 'Great! ';
			} else {
				score1 = (Math.floor(diff1/0.1) * (perfectScale.level*2))*-1;
			}
			if(diff2 === 0){
				score2 = (perfectScale.level*25);
				text += 'Great! ';
			} else {
				score2 = (Math.floor(diff2/0.1) * (perfectScale.level*2))*-1;
			}
		}
		let score3 = (perfectScale.level*50) + score1 + score2;
		if(score3 > 0){
			score += score3;
		}
		//Click Bonus
		let clickBonus = diff(perfectScale.clicks, perfectScale.levelClicks);
		if(perfectScale.clicks === perfectScale.levelClicks){
			score += (perfectScale.levelClicks*2);
		} else if(perfectScale.clicks > (perfectScale.levelClicks*0.69) && perfectScale.clicks < perfectScale.levelClicks){
			score += (clickBonus*3);
		} else if(perfectScale.clicks > perfectScale.levelClicks && perfectScale.clicks < (perfectScale.levelClicks*1.5)) {
			score += (clickBonus*2);
		} else if(perfectScale.clicks > (perfectScale.levelClicks*1.5) && perfectScale.clicks < (perfectScale.levelClicks*2)) {
			score += clickBonus;
		}
		//Apply Total Score
		perfectScale.pts += score;
		text += score;
		//Update UI
		perfectScale.perfectScaleUI.GetChild('perfectScaleUI3').ChangeSelf({property:'text',value:{value:text + ' Pts\nTotal '+perfectScale.pts+' Pts'}});

		//Testing
		//console.log({confirmScale, compareX, compareY, compareZ, diff1, diff2, clicks: perfectScale.clicks, levelClicks: perfectScale.levelClicks, clickBonus, score, score1, score2, score3, pts: perfectScale.pts});

		//Remove Confirm Buttons
		perfectScale.scalingUI.GetChild('confirm').ChangeSelf({property:'visible',value: false});
		perfectScale.perfectScaleUI.GetChild('perfectScaleUI6').ChangeSelf({property:'visible',value: false});

		//Start Next Level
		perfectScale.levelDelay = setTimeout(() => {
			LevelStart();
		}, 2100);

	}
	//Game Start
	const GameStart = () => {
		Reset();
		LevelStart();
		perfectScale.perfectScaleUI.GetChild('perfectScaleUI5').ChangeSelf({property:'text',value: {value: 'Restart'}});
		perfectScale.gameStarted = true;
	}
	//Game Complete
	const GameComplete = () => {
		UpdateScores(perfectScale.pts);
		perfectScale.perfectScaleUI.GetChild('perfectScaleUI1').ChangeSelf({property:'text',value:{value:'Game Complete!'}});
		perfectScale.scalingUI.GetChild('confirm').ChangeSelf({property:'visible',value: false});
		perfectScale.perfectScaleUI.GetChild('perfectScaleUI5').ChangeSelf({property:'text',value: {value: 'Start'}});
		perfectScale.gameStarted = false;
	}
	//Level Start
	const LevelStart = () => {
		perfectScale.level++;
		if(perfectScale.level > perfectScale.levelScalers.length){
			GameComplete();
			return;
		}
		perfectScale.clicks = 0;
		SpawnScaler(perfectScale.levelScalers[perfectScale.level-1]);
		RandomizeScaler();

		perfectScale.perfectScaleUI.GetChild('perfectScaleUI1').ChangeSelf({property:'text',value:{value:'Level : '+perfectScale.level+' | Shape : ' + perfectScale.scaler}});
		perfectScale.scalingUI.GetChild('confirm').ChangeSelf({property:'visible',value: true});
		perfectScale.perfectScaleUI.GetChild('perfectScaleUI6').ChangeSelf({property:'visible',value: true});

	}
	//Single Place Decimal Number
	const Decimal = (num) => {
		return Math.round(num*10)/10;
	}
	//Randomize Scalers
	const RandomizeScaler = () => {
		perfectScale.scaleDelay = setTimeout(() => {
			if(perfectScale.scale1.core.inScene){
				perfectScale.scale1.ChangeSelf({property: 'scale', value: RanScale(1)});
			}
			if(perfectScale.scale2.layer.inScene){
				perfectScale.scale2.ChangeParent({property: 'scale', value: RanScale(1)});
			}
			if(perfectScale.scale3.core.inScene){
				perfectScale.scale3.ChangeSelf({property: 'scale', value: RanScale(1)});
			}
			if(perfectScale.scale4.core.inScene){
				perfectScale.scale4.ChangeSelf({property: 'scale', value: RanScale(1)});
			}
		}, 50);
	}
	//Random Scale
	const RanScale = (level) => {
		perfectScale.levelClicks = Math.floor(Math.random()*(perfectScale.level*5))+(perfectScale.level*2)+5;
		let mean = Decimal(Math.random()*perfectScale.level+2);
		let low = Decimal(Math.floor(perfectScale.levelClicks/3)*0.1);
		let high = Decimal((perfectScale.levelClicks - Math.floor(perfectScale.levelClicks/3))*0.1);
		let x = false;
		let y = false;
		let z = false;
		let order = Math.random();
		let alternate = Math.floor(Math.random()*2-1);
		if(order >= 0.67){
			x = mean;
		} else if(order < 0.67 && order > 0.33){
			y = mean;
		} else {
			z = mean;
		}
		if(Math.random() > 0.5){
			low *= -1;
		} else {
			high *= -1;
		}
		if(x){
			if(alternate > 0){
				y = mean + low;
				z = mean + high;
			} else {
				y = mean + high;
				z = mean + low;
			}
		} else if(y){
			if(alternate > 0){
				x = mean + low;
				z = mean + high;
			} else {
				x = mean + high;
				z = mean + low;
			}
		} else if(z){
			if(alternate > 0){
				x = mean + low;
				y = mean + high;
			} else {
				x = mean + high;
				y = mean + low;
			}
		}
		//console.log({clicks: perfectScale.levelClicks, low, mean, high, x:Decimal(x), y:Decimal(y), z:Decimal(z)})
		let newScale = new THREE.Vector3(Decimal(x),Decimal(y),Decimal(z));
		perfectScale.startingScale.copy(newScale);
		return newScale;
	}
	//Spawn Perfect Scale
	const SpawnPSGame = () => {
		if(perfectScale.inScene){}else{
			perfectScale.perfectScaleUI.SpawnLayer();
			perfectScale.scalingUI.SpawnLayer(auxl.playerBody);
			UpdateScores();
			perfectScale.inScene = true;
		}
	}
	//Despawn Perfect Scale
	const DespawnPSGame = () => {
		if(perfectScale.inScene){
			Reset();
			perfectScale.scalingUI.DespawnLayer();
			DespawnScaler();
			perfectScale.perfectScaleUI.DespawnLayer();
			perfectScale.inScene = false;
			auxl.RemoveFromTracker(perfectScale.id);
		}
	}

	return {perfectScale, core, SpawnPSGame, DespawnPSGame, GameStart, Confirm, Spin, ChangeAxis, ScaleUp, ScaleDown}

}
auxl.perfectScaleGame = auxl.PerfectScale('perfectScaleGame');
//Sharp Shooter Game Menu
auxl.perfectScaleGameMenuData = {
	id: 'perfectScaleGameMenu',
	game: auxl.perfectScaleGame.perfectScale,
	homeZone: 'xrcadeZone',
	homeConnect: 'xrcadeHome',
	gameZone: 'xrcadeZone',
	gameConnect: 'game6',
	gameCabinet: 'cadeCab6Layer',
	outGamePos: new THREE.Vector3(-8,1.5,-21.75),
	inGamePos: new THREE.Vector3(1,1.5,8.5),
};
auxl.perfectScaleGameMenu = auxl.GameMenu(auxl.perfectScaleGameMenuData);

//
//Reflex 7
//7 consecitive hit prompts to test your reflexes
auxl.Reflex7 = (id) => {

	let reflex7 = {};
	reflex7.id = id;
	let core = 'reflex7';
	reflex7.title = 'Reflex 7';
	reflex7.instructionsText = 'How To Play :\nWait for 1 of 7 consecitive prompts via Color, Rotation and Sound to click on the object as fast as you can once you notice the prompt.\nThe quicker you are, the more points you will earn.';
	reflex7.controlsText = 'Game Controls :\nUse the controller ray and controller click to play the game.';
	reflex7.previewImage = auxl.pattern01;
	reflex7.inScene = false;
	//Colors
	auxl.reflex7GameColor = auxl.colorTheoryGen('#9e22a2');
	//High Scores
	reflex7.highScores = blankHighScores('ms', 2);
	//Game Vars
	reflex7.gameStarted = false;
	reflex7.hits = 7;
	reflex7.times = [];
	reflex7.currentTime = 0;
	reflex7.avgTime = 0;
	reflex7.bestTime = 0;
	reflex7.hitTimeout;
	reflex7.fireTimeout;
	reflex7.prematureTimeout;
	reflex7.fired = false;
	reflex7.hitDelay = (Math.random()*4000)+3000;
	//Target
	reflex7.targetData = {
		data:'targetData',
		id:'target',
		sources: false,
		text: false,
		sounds: {
			fire: {src: auxl.confirm1, autoplay: false, loop: false, volume: 1, on: 'fire'},
			hit: {src: auxl.confirm2, autoplay: false, loop: false, volume: 1, on: 'mousedown'},
		},
		geometry: {primitive: 'box', depth: 1, width: 1, height: 1},
		material: {shader: "standard", color: auxl.reflex7GameColor.compl, emissive: auxl.reflex7GameColor.compl, emissiveIntensity: 0.25, opacity: 0.5},
		position: new THREE.Vector3(0,1.95,-4),
		rotation: new THREE.Vector3(0,45,0),
		scale: new THREE.Vector3(3,3,3),
		animations:{
			onload: {property: 'object3D.position.y', to: 1.95, dur: 1, delay: 0, loop: false, dir: 'normal', easing: 'linear', elasticity: 400, autoplay: true, enabled: true,},
			anticipation: {property: 'object3D.position.y', from: 1.95, to: 2.05, dur: 3000, delay: 0, loop: true, dir: 'alternate', easing: 'easeInOutSine', elasticity: 400, autoplay: true, enabled: true, startEvents: 'animationcomplete__onload, click', pauseEvents: 'fire'},
			spin: {property: 'object3D.rotation.y', from: 45, to: 405, dur: 1000, delay: 0, loop: false, dir: 'normal', easing: 'easeInOutElastic', elasticity: 400, autoplay: false, enabled: true, startEvents: 'mousedown'},
			fire0: {property: 'material.opacity', to: 1, dur: 1, delay: 0, loop: false, dir: 'normal', easing: 'linear', elasticity: 400, autoplay: false, enabled: true, startEvents: 'fire'},
			fire1: {property: 'material.opacity', from: 1, to: 0.5, dur: 2000, delay: 0, loop: false, dir: 'normal', easing: 'linear', elasticity: 400, autoplay: false, enabled: true, startEvents: 'fire',},
			clickx: {property: 'object3D.scale.x', from: 3, to: 3.5, dur: 75, delay: 0, loop: 1, dir: 'alternate', easing: 'easeInOutElastic', elasticity: 400, autoplay: false, enabled: true, startEvents: 'mousedown'},
			clicky: {property: 'object3D.scale.y', from: 3, to: 3.5, dur: 75, delay: 0, loop: 1, dir: 'alternate', easing: 'easeInOutElastic', elasticity: 400, autoplay: false, enabled: true, startEvents: 'mousedown'},
			clickz: {property: 'object3D.scale.z', from: 3, to: 3.5, dur: 75, delay: 0, loop: 1, dir: 'alternate', easing: 'easeInOutElastic', elasticity: 400, autoplay: false, enabled: true, startEvents: 'mousedown'},
		},
		mixins: false,
		classes: ['a-ent'],
		components: {
			mousedownrun__hit:{
				cursorObj: reflex7.id,
				component: 'null',
				method: 'TargetHit',
				params: 'null',
			},
		},
	};
	reflex7.target = auxl.Core(reflex7.targetData);
	//UI
	reflex7.reflex7UIData = auxl.layerDataFromTemplate(auxl.uiGameLayerData, 'reflex7UI',{position: new THREE.Vector3(1.5,1.5,0)}, true);
	reflex7.reflex7UI = auxl.Layer('reflex7UI',reflex7.reflex7UIData);
	//Parent : reflex7UI0
	//Game Status : reflex7UI1
	reflex7.reflex7UI.layer.all.child0.core.core.material.color = auxl.reflex7GameColor.compl;
	reflex7.reflex7UI.layer.all.child0.core.core.material.emissive = auxl.reflex7GameColor.compl;
	reflex7.reflex7UI.layer.all.child0.core.core.text.value = 'Game Ready';
	//Game Title : reflex7UI2
	reflex7.reflex7UI.layer.all.child1.core.core.material.color = auxl.reflex7GameColor.compl;
	reflex7.reflex7UI.layer.all.child1.core.core.material.emissive = auxl.reflex7GameColor.compl;
	reflex7.reflex7UI.layer.all.child1.core.core.text.value = 'Reflex 7';
	//Current Level & Points : reflex7UI3
	reflex7.reflex7UI.layer.all.child2.core.core.material.color = auxl.reflex7GameColor.compl;
	reflex7.reflex7UI.layer.all.child2.core.core.material.emissive = auxl.reflex7GameColor.compl;
	reflex7.reflex7UI.layer.all.child2.core.core.text.wrapCount = 15;
	reflex7.reflex7UI.layer.all.child2.core.core.text.value = 'Time : 0.00ms\nAvg : 0.00ms\nBest : 0.00ms';
	//High Score Board : reflex7UI4
	reflex7.reflex7UI.layer.all.child3.core.core.material.color = auxl.reflex7GameColor.compl;
	reflex7.reflex7UI.layer.all.child3.core.core.material.emissive = auxl.reflex7GameColor.compl;
	//Game Start : reflex7UI5
	reflex7.reflex7UI.layer.all.child4.core.core.material.color = auxl.reflex7GameColor.compl;
	reflex7.reflex7UI.layer.all.child4.core.core.material.emissive = auxl.reflex7GameColor.compl;
	reflex7.reflex7UI.layer.all.child4.core.core.components = {};
	reflex7.reflex7UI.layer.all.child4.core.core.components.clickrun__gamestart = {cursorObj: reflex7.id, component: 'null', method: 'GameStart', params: 'null',};
	//Game Control : reflex7UI6
	reflex7.reflex7UI.layer.all.child5.core.core.material.color = auxl.reflex7GameColor.compl;
	reflex7.reflex7UI.layer.all.child5.core.core.material.emissive = auxl.reflex7GameColor.compl;
	reflex7.reflex7UI.layer.all.child5.core.core.text.value = 'Give Up';
	reflex7.reflex7UI.layer.all.child5.core.core.components = {};
	reflex7.reflex7UI.layer.all.child5.core.core.components.visible = false;
	//Game Menu : reflex7UI7
	reflex7.reflex7UI.layer.all.child6.core.core.material.color = auxl.reflex7GameColor.compl;
	reflex7.reflex7UI.layer.all.child6.core.core.material.emissive = auxl.reflex7GameColor.compl;
	reflex7.reflex7UI.layer.all.child6.core.core.components = {};
	reflex7.reflex7UI.layer.all.child6.core.core.components.clickrun__menutoggle = {cursorObj: 'reflex7GameMenu', component: 'null', method: 'ToggleGameMenu', params: 'null',};

	//Update Scores
	const UpdateScores = (score) => {
		if(score){
			reflex7.highScores = checkLowScore(score, reflex7.highScores);
		}
		reflex7.highScores.text = refreshHighScoreText(reflex7.highScores);
		reflex7.reflex7UI.GetChild('reflex7UI4').ChangeSelf({property:'text',value:{value:reflex7.highScores.text}});
		auxl.saveToProfile({auxlObject: reflex7.id, type: 'reflex7', sub: false, name: 'highScores', data: reflex7.highScores});
	}
	//Reset
	const Reset = () => {
		reflex7.hits = 7;
		reflex7.times = [];
		reflex7.currentTime = 0;
		reflex7.avgTime = 0;
		reflex7.bestTime = 0;
		reflex7.hitDelay = (Math.random()*4000)+3000;
		reflex7.fired = false;
		clearTimeout(reflex7.hitTimeout);
		clearTimeout(reflex7.fireTimeout);
		clearTimeout(reflex7.prematureTimeout);

	}
	//Game Start
	const GameStart = () => {
		Reset();
		reflex7.target.GetEl().classList.toggle('clickable', true);
		reflex7.reflex7UI.GetChild('reflex7UI1').ChangeSelf({property:'text',value:{value: 'Get Ready!'}});
		reflex7.gameStarted = true;
		GameLoop(reflex7.hits);
	}
	//Game Complete
	const GameComplete = () => {
		reflex7.target.GetEl().classList.toggle('clickable', false);
		reflex7.reflex7UI.GetChild('reflex7UI1').ChangeSelf({property:'text',value:{value: 'Game Completed!'}});
		UpdateScores(reflex7.avgTime);
		reflex7.gameStarted = false;
	}
	//Game Loop
	const GameLoop = (loop) => {
		clearTimeout(reflex7.hitTimeout);
		if(loop > 1){
			reflex7.fired = false;
			reflex7.hitDelay = (Math.random()*4000)+3000;
			reflex7.hitTimeout = setTimeout(() => {
				reflex7.target.EmitEvent('fire');
				reflex7.fired = true;
				HitTimer();

			}, reflex7.hitDelay);
		} else {
			GameComplete();
		}
	}
	//Hit Timer
	const HitTimer = () => {
		clearTimeout(reflex7.fireTimeout);
		reflex7.currentTime = 0;
		reflex7.fireTimeout = setTimeout(() => {
			TimerFail();
			clearTimeout(reflex7.fireTimeout);
		}, 2000);

	}
	//Timer Fail
	const TimerFail = () => {
		reflex7.currentTime = 2000;
		UpdateAvgTime(reflex7.currentTime);
		GameLoop(reflex7.hits--);
	}
	//Target Hit
	const TargetHit = () => {
		if(reflex7.fired){
			clearTimeout(reflex7.fireTimeout);
			reflex7.currentTime = reflex7.target.GetEl().components.animation__fire1.time;
			UpdateAvgTime(reflex7.currentTime);
			GameLoop(reflex7.hits--);
		} else {
			reflex7.target.GetEl().classList.toggle('clickable', false);
			auxl.player.Notification({message: 'Too Soon!', time: 1250});
			reflex7.prematureTimeout = setTimeout(() => {
				reflex7.target.GetEl().classList.toggle('clickable', true);
				clearTimeout(reflex7.prematureTimeout);
			}, 1250);
		}
	}

	//Average Hit Time
	const UpdateAvgTime = (time) => {
		reflex7.times.push(time);
		reflex7.avgTime = reflex7.times.reduce((a, b) => a + b, 0);
		reflex7.avgTime /= reflex7.times.length;
		let bestTime = [...reflex7.times];
		bestTime.sort(function(a, b){return a - b}); 
		reflex7.bestTime = bestTime[0];
		//Update UI
		reflex7.reflex7UI.GetChild('reflex7UI3').ChangeSelf({property:'text',value:{value:'Time : '+reflex7.currentTime.toFixed(2)+' ms\nAvg : '+reflex7.avgTime.toFixed(2)+' ms\nBest : '+ reflex7.bestTime.toFixed(2)+' ms'}});
		reflex7.reflex7UI.GetChild('reflex7UI1').ChangeSelf({property:'text',value:{value: reflex7.hits + ' Chances Left'}});
	}


	//Spawn Reflex 7
	const SpawnR7Game = () => {
		if(reflex7.inScene){}else{
			reflex7.target.SpawnCore();
			reflex7.reflex7UI.SpawnLayer();
			UpdateScores();
			reflex7.inScene = true;
		}
	}
	//Despawn Reflex 7
	const DespawnR7Game = () => {
		if(reflex7.inScene){
			Reset();
			reflex7.target.DespawnCore();
			reflex7.reflex7UI.DespawnLayer();
			reflex7.inScene = false;
			auxl.RemoveFromTracker(reflex7.id);
		}
	}

	return {reflex7, core, SpawnR7Game, DespawnR7Game, GameStart, TargetHit}
}
auxl.reflex7Game = auxl.Reflex7('reflex7Game');
//Reflex 7 Game Menu
auxl.reflex7GameMenuData = {
	id: 'reflex7GameMenu',
	game: auxl.reflex7Game.reflex7,
	homeZone: 'xrcadeZone',
	homeConnect: 'xrcadeHome',
	gameZone: 'xrcadeZone',
	gameConnect: 'game7',
	gameCabinet: 'cadeCab7Layer',
	outGamePos: new THREE.Vector3(-8,1.5,-23.75),
	inGamePos: new THREE.Vector3(0.75,1.5,0.5),
};
auxl.reflex7GameMenu = auxl.GameMenu(auxl.reflex7GameMenuData);

//
//Tap It
//Watch for callouts to do 1 of 4 mechanics within an ever increasing timer.
auxl.TapIt = (id) => {

	let tapIt = {};
	tapIt.id = id;
	let core = 'tapIt';
	tapIt.title = 'Tap It';
	tapIt.instructionsText = 'How To Play :\n';
	tapIt.controlsText = 'Game Controls :\nUse the controller ray and controller click to play the game.';
	tapIt.previewImage = auxl.pattern01;
	tapIt.inScene = false;
	//Colors
	auxl.tapItGameColor = auxl.colorTheoryGen('#e02020');
	//High Scores
	tapIt.highScores = blankHighScores('Hits', 0);

	//Game Vars
	tapIt.gameStarted = false;
	tapIt.hits = 0;
	tapIt.startTimeout;
	tapIt.hitTimer;
	tapIt.hitTimerDelay = 3100;
	tapIt.correct = false;
	tapIt.current = false;
	tapIt.objectives = ['tap','doubleTap','hover','drag'];
	tapIt.objectivesText = ['Tap It!','Double Tap It!','Hover It!','Drag It!'];
	tapIt.dragStart = false;
	tapIt.doubleTapStart = false;

	//Tap
	tapIt.tapData = {
	data:'tapData',
	id:'tap',
	sources: false,
	text: false,
	sounds: false,
	geometry: {primitive: 'cylinder', radius: 0.45, height: 0.15, openEnded: false, segmentsHeight: 2, segmentsRadial: 3, thetaStart: 0, thetaLength: 360},
	material: {shader: "standard", color: '#b967ff', emissive: '#b967ff', emissiveIntensity: 0.2, opacity: 1},
	position: new THREE.Vector3(0,2,-1),
	rotation: new THREE.Vector3(-90,0,0),
	scale: new THREE.Vector3(1,1,1),
	animations: {
		gamestart: {property: 'material.emissiveIntensity', from: '0.2', to: '0.8', dur: 500, delay: 0, loop: '6', dir: 'alternate', easing: 'easeInOutElastic', elasticity: 400, autoplay: false, enabled: true, startEvents: 'gameStart'},
		click1: {property: 'scale', from: '1 1 1', to: '1.1 1.1 1.1', dur: 125, delay: 0, loop: '1', dir: 'alternate', easing: 'easeInOutElastic', elasticity: 400, autoplay: false, enabled: true, startEvents: 'mousedown, select'},
		click2: {property: 'material.emissiveIntensity', from: '0.2', to: '0.8', dur: 125, delay: 0, loop: '1', dir: 'alternate', easing: 'easeInOutElastic', elasticity: 400, autoplay: false, enabled: true, startEvents: 'mousedown, select'},
		gameover1: {property: 'material.emissiveIntensity', from: '0.2', to: '0.8', dur: 250, delay: 0, loop: 'false', dir: 'normal', easing: 'easeInOutElastic', elasticity: 400, autoplay: false, enabled: true, startEvents: 'gameOver'},
		gameover2: {property: 'material.emissiveIntensity', from: '0.8', to: '0.2', dur: 250, delay: 2000, loop: 'false', dir: 'normal', easing: 'easeInOutElastic', elasticity: 400, autoplay: false, enabled: true, startEvents: 'gameOver'},
	},
	mixins: false,
	classes: ['a-ent'],
	components: {
		mousedownrun__tap:{
			cursorObj: tapIt.id,
			component: 'null',
			method: 'Tap',
			params: 'null',
		},
	},
	};
	tapIt.tap = auxl.Core(tapIt.tapData);
	//Double Tap
	tapIt.doubleTapData = {
	data:'doubleTapData',
	id:'doubleTap',
	sources: false,
	text: false,
	sounds: false,
	geometry: {primitive: 'box', depth: 0.15, width: 0.75, height: 0.75},
	material: {shader: "standard", color: '#01cdfe', emissive: '#01cdfe', emissiveIntensity: 0.2, opacity: 1},
	position: new THREE.Vector3(0,0.5,-1),
	rotation: new THREE.Vector3(0,0,0),
	scale: new THREE.Vector3(1,1,1),
	animations: {
		gamestart: {property: 'material.emissiveIntensity', from: '0.2', to: '0.8', dur: 500, delay: 0, loop: '6', dir: 'alternate', easing: 'easeInOutElastic', elasticity: 400, autoplay: false, enabled: true, startEvents: 'gameStart'},
		click1: {property: 'scale', from: '1 1 1', to: '1.1 1.1 1.1', dur: 125, delay: 0, loop: '1', dir: 'alternate', easing: 'easeInOutElastic', elasticity: 400, autoplay: false, enabled: true, startEvents: 'mousedown'},
		click2: {property: 'material.emissiveIntensity', from: '0.2', to: '0.8', dur: 125, delay: 0, loop: '1', dir: 'alternate', easing: 'easeInOutElastic', elasticity: 400, autoplay: false, enabled: true, startEvents: 'mousedown'},
		click1select: {property: 'scale', from: '1 1 1', to: '1.1 1.1 1.1', dur: 125, delay: 0, loop: '4', dir: 'alternate', easing: 'easeInOutElastic', elasticity: 400, autoplay: false, enabled: true, startEvents: 'select'},
		click2select: {property: 'material.emissiveIntensity', from: '0.2', to: '0.8', dur: 125, delay: 0, loop: '4', dir: 'alternate', easing: 'easeInOutElastic', elasticity: 400, autoplay: false, enabled: true, startEvents: 'select'},
		gameover1: {property: 'material.emissiveIntensity', from: '0.2', to: '0.8', dur: 250, delay: 0, loop: 'false', dir: 'normal', easing: 'easeInOutElastic', elasticity: 400, autoplay: false, enabled: true, startEvents: 'gameOver'},
		gameover2: {property: 'material.emissiveIntensity', from: '0.8', to: '0.2', dur: 250, delay: 2000, loop: 'false', dir: 'normal', easing: 'easeInOutElastic', elasticity: 400, autoplay: false, enabled: true, startEvents: 'gameOver'},
	},
	mixins: false,
	classes: ['a-ent'],
	components: {
		mousedownrun__doubletap:{
			cursorObj: tapIt.id,
			component: 'null',
			method: 'DoubleTap',
			params: 'null',
		},
	},
	};
	tapIt.doubleTap = auxl.Core(tapIt.doubleTapData);
	//Hover
	tapIt.hoverData = {
	data:'hoverData',
	id:'hover',
	sources: false,
	text: false,
	sounds: false,
	geometry: {primitive: 'cylinder', radius: 0.35, height: 0.15, openEnded: false, segmentsHeight: 2, segmentsRadial: 16, thetaStart: 0, thetaLength: 360},
	material: {shader: "standard", color: '#05ffa1', emissive: '#05ffa1', emissiveIntensity: 0.2, opacity: 1},
	position: new THREE.Vector3(1,1.35,-1),
	rotation: new THREE.Vector3(-90,0,0),
	scale: new THREE.Vector3(1,1,1),
	animations: {
		gamestart: {property: 'material.emissiveIntensity', from: '0.2', to: '0.8', dur: 500, delay: 0, loop: '6', dir: 'alternate', easing: 'easeInOutElastic', elasticity: 400, autoplay: false, enabled: true, startEvents: 'gameStart'},
		click1: {property: 'scale', from: '1 1 1', to: '1.1 1.1 1.1', dur: 125, delay: 0, loop: '1', dir: 'alternate', easing: 'easeInOutElastic', elasticity: 400, autoplay: false, enabled: true, startEvents: 'mouseenter, select'},
		click2: {property: 'material.emissiveIntensity', from: '0.2', to: '0.8', dur: 125, delay: 0, loop: '1', dir: 'alternate', easing: 'easeInOutElastic', elasticity: 400, autoplay: false, enabled: true, startEvents: 'mouseenter, select'},
		gameover1: {property: 'material.emissiveIntensity', from: '0.2', to: '0.8', dur: 250, delay: 0, loop: 'false', dir: 'normal', easing: 'easeInOutElastic', elasticity: 400, autoplay: false, enabled: true, startEvents: 'gameOver'},
		gameover2: {property: 'material.emissiveIntensity', from: '0.8', to: '0.2', dur: 250, delay: 2000, loop: 'false', dir: 'normal', easing: 'easeInOutElastic', elasticity: 400, autoplay: false, enabled: true, startEvents: 'gameOver'},
	},
	mixins: false,
	classes: ['a-ent'],
	components: {
		mouseenterrun__hover:{
			cursorObj: tapIt.id,
			component: 'null',
			method: 'Hover',
			params: 'null',
		},
	},
	};
	tapIt.hover = auxl.Core(tapIt.hoverData);
	//Drag 1
	tapIt.drag1Data = {
	data:'drag1Data',
	id:'drag1',
	sources: false,
	text: false,
	sounds: false,
	geometry: {primitive: 'cylinder', radius: 0.45, height: 0.15, openEnded: false, segmentsHeight: 2, segmentsRadial: 3, thetaStart: 0, thetaLength: 360},
	material: {shader: "standard", color: '#ff71ce', emissive: '#ff71ce', emissiveIntensity: 0.2, opacity: 1},
	position: new THREE.Vector3(-0.85,1.25,-1),
	rotation: new THREE.Vector3(-90,0,0),
	scale: new THREE.Vector3(1,1,1),
	animations: {
		gamestart: {property: 'material.emissiveIntensity', from: '0.2', to: '0.8', dur: 500, delay: 0, loop: '6', dir: 'alternate', easing: 'easeInOutElastic', elasticity: 400, autoplay: false, enabled: true, startEvents: 'gameStart'},
		click1: {property: 'scale', from: '1 1 1', to: '1.1 1.1 1.1', dur: 125, delay: 0, loop: '1', dir: 'alternate', easing: 'easeInOutElastic', elasticity: 400, autoplay: false, enabled: true, startEvents: 'mousedown, select'},
		click2: {property: 'material.emissiveIntensity', from: '0.2', to: '0.8', dur: 125, delay: 0, loop: '1', dir: 'alternate', easing: 'easeInOutElastic', elasticity: 400, autoplay: false, enabled: true, startEvents: 'mousedown, select'},
		gameover1: {property: 'material.emissiveIntensity', from: '0.2', to: '0.8', dur: 250, delay: 0, loop: 'false', dir: 'normal', easing: 'easeInOutElastic', elasticity: 400, autoplay: false, enabled: true, startEvents: 'gameOver'},
		gameover2: {property: 'material.emissiveIntensity', from: '0.8', to: '0.2', dur: 250, delay: 2000, loop: 'false', dir: 'normal', easing: 'easeInOutElastic', elasticity: 400, autoplay: false, enabled: true, startEvents: 'gameOver'},
	},
	mixins: false,
	classes: ['a-ent'],
	components: {
		mousedownrun__dragstart:{
			cursorObj: tapIt.id,
			component: 'null',
			method: 'DragStart',
			params: 'null',
		},
	},
	};
	tapIt.drag1 = auxl.Core(tapIt.drag1Data);
	//Drag 2
	tapIt.drag2Data = {
	data:'drag2Data',
	id:'drag2',
	sources: false,
	text: false,
	sounds: false,
	geometry: {primitive: 'cylinder', radius: 0.35, height: 0.15, openEnded: false, segmentsHeight: 2, segmentsRadial: 16, thetaStart: 0, thetaLength: 360},
	material: {shader: "standard", color: '#fffb96', emissive: '#fffb96', emissiveIntensity: 0.1, opacity: 1},
	position: new THREE.Vector3(-1.5,1.35,-1),
	rotation: new THREE.Vector3(-90,0,0),
	scale: new THREE.Vector3(1,1,1),
	animations: {
		gamestart: {property: 'material.emissiveIntensity', from: '0.2', to: '0.8', dur: 500, delay: 0, loop: '6', dir: 'alternate', easing: 'easeInOutElastic', elasticity: 400, autoplay: false, enabled: true, startEvents: 'gameStart'},
		click1: {property: 'scale', from: '1 1 1', to: '1.1 1.1 1.1', dur: 125, delay: 0, loop: '1', dir: 'alternate', easing: 'easeInOutElastic', elasticity: 400, autoplay: false, enabled: true, startEvents: 'mouseenter'},
		click2: {property: 'material.emissiveIntensity', from: '0.2', to: '0.8', dur: 125, delay: 0, loop: '1', dir: 'alternate', easing: 'easeInOutElastic', elasticity: 400, autoplay: false, enabled: true, startEvents: 'mouseenter'},
		click1select: {property: 'scale', from: '1 1 1', to: '1.1 1.1 1.1', dur: 125, delay: 125, loop: '1', dir: 'alternate', easing: 'easeInOutElastic', elasticity: 400, autoplay: false, enabled: true, startEvents: 'select'},
		click2select: {property: 'material.emissiveIntensity', from: '0.2', to: '0.8', dur: 125, delay: 125, loop: '1', dir: 'alternate', easing: 'easeInOutElastic', elasticity: 400, autoplay: false, enabled: true, startEvents: 'select'},
		gameover1: {property: 'material.emissiveIntensity', from: '0.2', to: '0.8', dur: 250, delay: 0, loop: 'false', dir: 'normal', easing: 'easeInOutElastic', elasticity: 400, autoplay: false, enabled: true, startEvents: 'gameOver'},
		gameover2: {property: 'material.emissiveIntensity', from: '0.8', to: '0.2', dur: 250, delay: 2000, loop: 'false', dir: 'normal', easing: 'easeInOutElastic', elasticity: 400, autoplay: false, enabled: true, startEvents: 'gameOver'},
	},
	mixins: false,
	classes: ['a-ent'],
	components: {
		mouseenterrun__dragend:{
			cursorObj: tapIt.id,
			component: 'null',
			method: 'DragEnd',
			params: 'null',
		},
	},
	};
	tapIt.drag2 = auxl.Core(tapIt.drag2Data);

	//UI
	tapIt.tapItUIData = auxl.layerDataFromTemplate(auxl.uiGameLayerData, 'tapItUI',{position: new THREE.Vector3(1.5,1.5,0)}, true);
	tapIt.tapItUI = auxl.Layer('tapItUI',tapIt.tapItUIData);
	//Parent : reflex7UI0
	//Game Status : reflex7UI1
	tapIt.tapItUI.layer.all.child0.core.core.material.color = auxl.tapItGameColor.compl;
	tapIt.tapItUI.layer.all.child0.core.core.material.emissive = auxl.tapItGameColor.compl;
	tapIt.tapItUI.layer.all.child0.core.core.text.value = 'Game Ready';
	//Game Title : reflex7UI2
	tapIt.tapItUI.layer.all.child1.core.core.material.color = auxl.tapItGameColor.compl;
	tapIt.tapItUI.layer.all.child1.core.core.material.emissive = auxl.tapItGameColor.compl;
	tapIt.tapItUI.layer.all.child1.core.core.text.value = 'Tap It';
	//Current Level & Points : reflex7UI3
	tapIt.tapItUI.layer.all.child2.core.core.material.color = auxl.tapItGameColor.compl;
	tapIt.tapItUI.layer.all.child2.core.core.material.emissive = auxl.tapItGameColor.compl;
	tapIt.tapItUI.layer.all.child2.core.core.text.value = 'Hits : 0';
	//High Score Board : reflex7UI4
	tapIt.tapItUI.layer.all.child3.core.core.material.color = auxl.tapItGameColor.compl;
	tapIt.tapItUI.layer.all.child3.core.core.material.emissive = auxl.tapItGameColor.compl;
	//Game Start : reflex7UI5
	tapIt.tapItUI.layer.all.child4.core.core.material.color = auxl.tapItGameColor.compl;
	tapIt.tapItUI.layer.all.child4.core.core.material.emissive = auxl.tapItGameColor.compl;
	tapIt.tapItUI.layer.all.child4.core.core.components = {};
	tapIt.tapItUI.layer.all.child4.core.core.components.clickrun__gamestart = {cursorObj: tapIt.id, component: 'null', method: 'GameStart', params: 'null',};
	//Game Control : reflex7UI6
	tapIt.tapItUI.layer.all.child5.core.core.material.color = auxl.tapItGameColor.compl;
	tapIt.tapItUI.layer.all.child5.core.core.material.emissive = auxl.tapItGameColor.compl;
	tapIt.tapItUI.layer.all.child5.core.core.text.value = 'Give Up';
	tapIt.tapItUI.layer.all.child5.core.core.components = {};
	tapIt.tapItUI.layer.all.child5.core.core.components.visible = false;
	//Game Menu : reflex7UI7
	tapIt.tapItUI.layer.all.child6.core.core.material.color = auxl.tapItGameColor.compl;
	tapIt.tapItUI.layer.all.child6.core.core.material.emissive = auxl.tapItGameColor.compl;
	tapIt.tapItUI.layer.all.child6.core.core.components = {};
	tapIt.tapItUI.layer.all.child6.core.core.components.clickrun__menutoggle = {cursorObj: 'tapItGameMenu', component: 'null', method: 'ToggleGameMenu', params: 'null',};

	//Update Scores
	const UpdateScores = (score) => {
		if(score){
			tapIt.highScores = checkHighScore(score, tapIt.highScores);
		}
		tapIt.highScores.text = refreshHighScoreText(tapIt.highScores);
		tapIt.tapItUI.GetChild('tapItUI4').ChangeSelf({property:'text',value:{value:tapIt.highScores.text}});
		auxl.saveToProfile({auxlObject: tapIt.id, type: 'tapIt', sub: false, name: 'highScores', data: tapIt.highScores});
	}
	//Clear
	const Clear = () => {
		tapIt.dragStart = false;
		tapIt.doubleTapStart = false;
		tapIt.current = false;
	}
	//Reset
	const Reset = () => {
		Clear();
		tapIt.correct = false;
		tapIt.hits = 0;
		tapIt.hitTimerDelay = 3100;
		clearTimeout(tapIt.startTimeout);
		clearTimeout(tapIt.hitTimer);

	}
	//ToggleClicks
	const ToggleClick = (toggle) => {
		tapIt.tap.GetEl().classList.toggle('clickable', toggle);
		tapIt.doubleTap.GetEl().classList.toggle('clickable', toggle);
		tapIt.hover.GetEl().classList.toggle('clickable', toggle);
		tapIt.drag1.GetEl().classList.toggle('clickable', toggle);
		tapIt.drag2.GetEl().classList.toggle('clickable', toggle);
	}
	//Emit All
	const EmitAll = (event) => {
		tapIt.tap.EmitEvent(event);
		tapIt.doubleTap.EmitEvent(event);
		tapIt.hover.EmitEvent(event);
		tapIt.drag1.EmitEvent(event);
		tapIt.drag2.EmitEvent(event);
	}
	//Game Start
	const GameStart = () => {
		Reset();
		tapIt.tapItUI.GetChild('tapItUI1').ChangeSelf({property:'text',value:{value:'Get Ready!'}});
		EmitAll('gameStart');
		tapIt.gameStarted = true;
		tapIt.startTimeout = setTimeout(() => {
			Next();
			clearTimeout(tapIt.startTimeout);
		}, 3000);
	}
	//Game Over
	const GameOver = () => {
		ToggleClick(false);
		EmitAll('gameOver');
		if(tapIt.hits > 0){
			tapIt.hits--;
		}
		UpdateScores(tapIt.hits);
		tapIt.tapItUI.GetChild('tapItUI1').ChangeSelf({property:'text',value:{value:'Ahhhh Game Over!'}});
		tapIt.gameStarted = false;
		Reset();
	}
	//Hit Timer
	const HitTimer = () => {
		if(tapIt.current === 'tap'){
			tapIt.tap.EmitEvent('select');
		} else if(tapIt.current === 'doubleTap'){
			tapIt.doubleTap.EmitEvent('select');
		} else if(tapIt.current === 'hover'){
			tapIt.hover.EmitEvent('select');
		} else if(tapIt.current === 'drag'){
			tapIt.drag1.EmitEvent('select');
			tapIt.drag2.EmitEvent('select');
		}
		tapIt.hitTimer = setTimeout(() => {
			if(tapIt.correct){
				Next();
			} else {
				TimerFail();
			}
		}, tapIt.hitTimerDelay);
	}
	//Next
	const Next = () => {
		ToggleClick(true);
		clearTimeout(tapIt.hitTimer);
		tapIt.correct = false;
		let next = Math.floor(Math.random()*tapIt.objectives.length);
		tapIt.current = tapIt.objectives[next];
		tapIt.hits++;
		if(tapIt.hitTimerDelay > 1100){
			tapIt.hitTimerDelay -= 100;
		}
		tapIt.tapItUI.GetChild('tapItUI1').ChangeSelf({property:'text',value:{value: tapIt.objectivesText[next]}});
		HitTimer();
	}
	//Timer Fail
	const TimerFail = () => {
		clearTimeout(tapIt.hitTimer);
		GameOver();
	}
	//Correct
	const Correct = () => {
		Clear();
		tapIt.correct = true;
		ToggleClick(false);
		tapIt.tapItUI.GetChild('tapItUI3').ChangeSelf({property:'text',value:{value:'Hits : '+tapIt.hits}});
		tapIt.tapItUI.GetChild('tapItUI1').ChangeSelf({property:'text',value:{value: 'Correct'}});
	}
	//Tap
	const Tap = () => {
		if(tapIt.current === 'tap'){
			Correct();
		} else {
			GameOver();
		}
	}
	//Double Tap
	const DoubleTap = () => {
		if(tapIt.doubleTapStart){
			if(tapIt.current === 'doubleTap'){
				Correct();
			}
		} else {
			if(tapIt.current === 'doubleTap'){
				tapIt.doubleTapStart = true;
			} else {
				GameOver();
			}
		}
	}
	//Hover
	const Hover = () => {
		if(tapIt.current === 'hover'){
			Correct();
		} else {
			GameOver();
		}
	}
	//Drag Start
	const DragStart = () => {
		if(tapIt.current === 'drag'){
			tapIt.dragStart = true;
		} else {
			GameOver();
		}
	}
	//Drag End
	const DragEnd = () => {
		if(tapIt.dragStart){
			if(tapIt.current === 'drag'){
				Correct();
			} else {
				GameOver();
			}
		}
	}
	//Spawn Tap It
	const SpawnTIGame = () => {
		if(tapIt.inScene){}else{
			tapIt.tap.SpawnCore();
			tapIt.doubleTap.SpawnCore();
			tapIt.hover.SpawnCore();
			tapIt.drag1.SpawnCore();
			tapIt.drag2.SpawnCore();
			tapIt.tapItUI.SpawnLayer();
			UpdateScores();
			tapIt.inScene = true;
		}
	}
	//Despawn Tap It
	const DespawnTIGame = () => {
		if(tapIt.inScene){
			Reset();
			tapIt.tap.DespawnCore();
			tapIt.doubleTap.DespawnCore();
			tapIt.hover.DespawnCore();
			tapIt.drag1.DespawnCore();
			tapIt.drag2.DespawnCore();
			tapIt.tapItUI.DespawnLayer();
			tapIt.inScene = false;
			auxl.RemoveFromTracker(tapIt.id);
		}
	}

	return {tapIt, core, SpawnTIGame, DespawnTIGame, GameStart, Tap, DoubleTap, Hover, DragStart, DragEnd};
}
auxl.tapItGame = auxl.TapIt('tapItGame');
//Tap It Game Menu
auxl.tapItGameMenuData = {
	id: 'tapItGameMenu',
	game: auxl.tapItGame.tapIt,
	homeZone: 'xrcadeZone',
	homeConnect: 'xrcadeHome',
	gameZone: 'xrcadeZone',
	gameConnect: 'game8',
	gameCabinet: 'cadeCab8Layer',
	outGamePos: new THREE.Vector3(8,1.5,-11.75),
	inGamePos: new THREE.Vector3(0.75,1.5,0.5),
};
auxl.tapItGameMenu = auxl.GameMenu(auxl.tapItGameMenuData);

//
//PopPop Game
//Collect as many Pops as you can every level. The quicker, the greater the bonus
auxl.PopPopGame = (id) => {

	let popPop = {};
	popPop.id = id;
	let core = 'popPop';
	popPop.title = 'Pop Pop';
	popPop.instructionsText = 'How To Play :\n';
	popPop.controlsText = 'Game Controls :\nUse the controller ray and controller click to play the game.';
	popPop.previewImage = auxl.pattern01;
	popPop.inScene = false;
	//Colors
	auxl.popPopGameColor = auxl.colorTheoryGen('#d0621e');
	//High Scores
	popPop.highScores = blankHighScores('Pts', 0);
	//Game Vars
	popPop.gameStarted = false;
	popPop.totalPoints = 0;
	popPop.levelPoints = 0;
	popPop.level = 1;
	popPop.startTimeout;
	popPop.levelTimeout;
	popPop.hits = [];
	popPop.poptotal = 200;
	popPop.levelSpawn = [0,50,65,80,95,110,135,150,165,180,200];
	popPop.loopTime = [0,1500,1375,1250,1125,1000,875,750,625,500,375];
	popPop.loopBonus = [0,10,5,3,2,1,1,1,1,1,1];

	//Base
	popPop.baseData = {
	data:'baseData',
	id:'base',
	sources: false,
	text: false,
	geometry: {primitive: 'cylinder', radius: 7.5, height: 1, openEnded: false, segmentsHeight: 2, segmentsRadial: 32, thetaStart: 0, thetaLength: 360},
	material: {shader: "standard", color: auxl.popPopGameColor.base, emissive: auxl.popPopGameColor.base, emissiveIntensity: 0.25, opacity: 1},
	position: new THREE.Vector3(0,0.5,-15),
	rotation: new THREE.Vector3(0,0,0),
	scale: new THREE.Vector3(1,1,1),
	animations: false,
	mixins: false,
	classes: ['clickable', 'a-ent'],
	components: false,
	};
	popPop.base = auxl.Core(popPop.baseData);
	//Pop Template
	popPop.popData = {
	data:'popData',
	id:'pop',
	sources: false,
	text: false,
	sounds: {
		pop: {src: auxl.confirm1, autoplay: false, loop: false, volume: 1, on: 'pop'},
		hit: {src: auxl.confirm2, autoplay: false, loop: false, volume: 1, on: 'mousedown'},
	},
	geometry:{primitive: 'dodecahedron', radius: 0.6, detail: 0},
	material: {shader: "standard", color: '#fffb96', emissive: '#fffb96', emissiveIntensity: 0.25, opacity: 1},
	position: new THREE.Vector3(-1,0,-15),
	rotation: new THREE.Vector3(0,0,0),
	scale: new THREE.Vector3(1,1,1),
	animations: {
		pop: {property: 'object3D.position.y', from: '0', to: '10', dur: 1500, delay: 0, loop: '20', dir: 'alternate', easing: 'easeOutElastic', elasticity: 400, autoplay: false, enabled: true, startEvents: 'pop', pauseEvents: 'animationcomplete__hitx, reset'},
		hitx: {property: 'object3D.scale.x', from: 1, to: 0.0001, dur: 400, delay: 0, loop: false, dir: 'normal', easing: 'easeInOutElastic', elasticity: 400, autoplay: false, enabled: true, startEvents: 'mouseenter'},
		hity: {property: 'object3D.scale.y', from: 1, to: 0.0001, dur: 400, delay: 0, loop: false, dir: 'normal', easing: 'easeInOutElastic', elasticity: 400, autoplay: false, enabled: true, startEvents: 'mouseenter'},
		hitz: {property: 'object3D.scale.z', from: 1, to: 0.0001, dur: 400, delay: 0, loop: false, dir: 'normal', easing: 'easeInOutElastic', elasticity: 400, autoplay: false, enabled: true, startEvents: 'mouseenter'},
		resetx: {property: 'object3D.scale.x', from: 0.0001, to: 1, dur: 1, delay: 500, loop: false, dir: 'normal', easing: 'linear', elasticity: 400, autoplay: false, enabled: true, startEvents: 'mouseenter, reset'},
		resety: {property: 'object3D.scale.y', from: 0.0001, to: 1, dur: 1, delay: 500, loop: false, dir: 'normal', easing: 'linear', elasticity: 400, autoplay: false, enabled: true, startEvents: 'mouseenter, reset'},
		resetz: {property: 'object3D.scale.z', from: 0.0001, to: 1, dur: 1, delay: 500, loop: false, dir: 'normal', easing: 'linear', elasticity: 400, autoplay: false, enabled: true, startEvents: 'mouseenter, reset'},
		reset: {property: 'object3D.position.y', to: '0', dur: 1, delay: 450, loop: false, dir: 'normal', easing: 'linear', elasticity: 400, autoplay: false, enabled: true, startEvents: 'mouseenter, reset',},
	},
	mixins: false,
	classes: ['clickable', 'a-ent'],
	components: {
		mouseenterrun__hit:{
			cursorObj: popPop.id,
			component: 'null',
			method: 'Hit',
			params: '0',
		},
	},
	};
	popPop.pop = auxl.Core(popPop.popData);
	popPop.popCores = [];
	//Build Pops
	let x = 0;
	let y = 0;
	let z = 0;
	let color;
	for(let a = 0; a < popPop.poptotal; a++){
		x = (Math.random()*14)-7;
		y = (Math.random()*7)+7;
		z = (Math.random()*-6)-15;
		color = auxl.colorTheoryGen(false, 'yellow').base;
		popPop.popCores[a] = auxl.coreFromTemplate(popPop.pop,{id: 'pop'+a, material: {shader: "standard", color: color, emissive: color, emissiveIntensity: 0.25, opacity: 1}, position: new THREE.Vector3(x,0,z), components: {mouseenterrun__hit:{cursorObj: popPop.id, component: 'null', method: 'Hit', params: a,},},}, true);
		popPop.popCores[a].core.animations.pop.to = y;
		popPop.popCores[a].core.animations.pop.delay = Math.random()*1500;
	}

	//UI
	popPop.popPopUIData = auxl.layerDataFromTemplate(auxl.uiGameLayerData, 'popPopUI',{position: new THREE.Vector3(1.5,1.5,0)}, true);
	popPop.popPopUI = auxl.Layer('popPopUI',popPop.popPopUIData);
	//Parent : popPopUI0
	//Game Status : popPopUI1
	popPop.popPopUI.layer.all.child0.core.core.material.color = auxl.popPopGameColor.compl;
	popPop.popPopUI.layer.all.child0.core.core.material.emissive = auxl.popPopGameColor.compl;
	popPop.popPopUI.layer.all.child0.core.core.text.value = 'Game Ready';
	//Game Title : popPopUI2
	popPop.popPopUI.layer.all.child1.core.core.material.color = auxl.popPopGameColor.compl;
	popPop.popPopUI.layer.all.child1.core.core.material.emissive = auxl.popPopGameColor.compl;
	popPop.popPopUI.layer.all.child1.core.core.text.value = 'Pop Pop';
	//Current Level & Points : popPopUI3
	popPop.popPopUI.layer.all.child2.core.core.material.color = auxl.popPopGameColor.compl;
	popPop.popPopUI.layer.all.child2.core.core.material.emissive = auxl.popPopGameColor.compl;
	popPop.popPopUI.layer.all.child2.core.core.text.value = 'Hits : 0\nPts : 0\nTotal : 0';
	//High Score Board : popPopUI4
	popPop.popPopUI.layer.all.child3.core.core.material.color = auxl.popPopGameColor.compl;
	popPop.popPopUI.layer.all.child3.core.core.material.emissive = auxl.popPopGameColor.compl;
	//Game Start : popPopUI5
	popPop.popPopUI.layer.all.child4.core.core.material.color = auxl.popPopGameColor.compl;
	popPop.popPopUI.layer.all.child4.core.core.material.emissive = auxl.popPopGameColor.compl;
	popPop.popPopUI.layer.all.child4.core.core.components = {};
	popPop.popPopUI.layer.all.child4.core.core.components.clickrun__gamestart = {cursorObj: popPop.id, component: 'null', method: 'GameStart', params: 'null',};
	//Game Control : popPopUI6
	popPop.popPopUI.layer.all.child5.core.core.material.color = auxl.popPopGameColor.compl;
	popPop.popPopUI.layer.all.child5.core.core.material.emissive = auxl.popPopGameColor.compl;
	popPop.popPopUI.layer.all.child5.core.core.text.value = 'Next';
	popPop.popPopUI.layer.all.child5.core.core.components = {};
	popPop.popPopUI.layer.all.child5.core.core.components.visible = false;
	popPop.popPopUI.layer.all.child5.core.core.components.clickrun__menutoggle = {cursorObj: popPop.id, component: 'null', method: 'GameLoop', params: 'null',};
	//Game Menu : popPopUI7
	popPop.popPopUI.layer.all.child6.core.core.material.color = auxl.popPopGameColor.compl;
	popPop.popPopUI.layer.all.child6.core.core.material.emissive = auxl.popPopGameColor.compl;
	popPop.popPopUI.layer.all.child6.core.core.components = {};
	popPop.popPopUI.layer.all.child6.core.core.components.clickrun__menutoggle = {cursorObj: 'popPopGameMenu', component: 'null', method: 'ToggleGameMenu', params: 'null',};

	//Update Scores
	const UpdateScores = (score) => {
		if(score){
			popPop.highScores = checkHighScore(score, popPop.highScores);
		}
		popPop.highScores.text = refreshHighScoreText(popPop.highScores);
		popPop.popPopUI.GetChild('popPopUI4').ChangeSelf({property:'text',value:{value:popPop.highScores.text}});
		auxl.saveToProfile({auxlObject: popPop.id, type: 'popPop', sub: false, name: 'highScores', data: popPop.highScores});
	}
	//Reset
	const Reset = () => {
		clearTimeout(popPop.startTimeout);
		clearTimeout(popPop.levelTimeout);
		popPop.popCores.forEach(pop => pop.EmitEvent('reset'));
		popPop.totalPoints = 0;
		popPop.levelPoints = 0;
		popPop.level = 1;
		popPop.hits = 0;
		UpdateCores(popPop.level);
	}
	//Countdown
	const Countdown = (count) => {
		popPop.popPopUI.GetChild('popPopUI1').ChangeSelf({property:'text',value:{value:'Starting in '+ count + '...'}});
		let countTimeout = setTimeout(() => {
			if(count > 1){
				Countdown(count-1);
			} else {
				popPop.popPopUI.GetChild('popPopUI1').ChangeSelf({property:'text',value:{value:'GO!'}});
			}
			clearTimeout(countTimeout);
		}, 1000);
	}
	//Pop
	const Pop = (amount) => {
		for(let a = 0; a < amount; a++){
			popPop.popCores[a].EmitEvent('pop');
		}
	}
	//Update Cores
	const UpdateCores = (level) => {
		let x = 0;
		let y = 0;
		let z = 0;
		let pop = {name: 'pop', property: 'object3D.position.y', from: '0', to: '10', dur: popPop.loopTime[popPop.level], delay: 0, loop: '20', dir: 'alternate', easing: 'easeOutCirc', elasticity: 400, autoplay: false, enabled: true, startEvents: 'pop', pauseEvents: 'animationcomplete__hitx, reset'};
		for(let a = 0; a < popPop.levelSpawn[popPop.level]; a++){
			x = (Math.random()*14)-7;
			y = (Math.random()*10)+7;
			z = (Math.random()*-6)-15;
			pop.to = y;
			pop.delay = Math.random()*1000 + a*5;
			popPop.popCores[a].Animate(pop);
			popPop.popCores[a].ChangeSelf({property: 'position', value: new THREE.Vector3(x,0,z)});
			popPop.popCores[a].GetEl().classList.toggle('clickable', true);
		}
	}
	//Game Loop
	const GameLoop = () => {
		popPop.popPopUI.GetChild('popPopUI3').ChangeSelf({property:'text',value:{value:'Hits : '+ popPop.hits +'\nPts : '+ popPop.levelPoints +'\nTotal : ' + popPop.totalPoints}});
		popPop.popPopUI.GetChild('popPopUI6').ChangeSelf({property:'visible',value: false});
		//Level Countdown
		Countdown(3);
		//Start Popping
		popPop.startTimeout = setTimeout(() => {
			Pop(popPop.levelSpawn[popPop.level]);
			clearTimeout(popPop.startTimeout);
		}, 3000);
		//Level Time
		popPop.levelTimeout = setTimeout(() => {
			LevelOver();
		}, (popPop.loopTime[popPop.level]*20)+5000);
	}
	//Level Complete
	const LevelOver = () => {
		clearTimeout(popPop.levelTimeout);
		popPop.popPopUI.GetChild('popPopUI1').ChangeSelf({property:'text',value:{value:'Level '+popPop.level+' Over'}});
		if(popPop.level === 10){
			GameOver();
		} else {
			popPop.level++;
			popPop.hits = 0;
			popPop.levelPoints = 0;
			UpdateCores(popPop.level);
			//Display Next Level Button to continue GameLoop
			popPop.popPopUI.GetChild('popPopUI6').ChangeSelf({property:'visible',value: true});
		}
	}
	//Good Hit
	const Hit = (item) => {
		popPop.popCores[item].GetEl().classList.toggle('clickable', false);
		let bonus = popPop.popCores[item].GetEl().components.animation__pop.animation.remaining;
		bonus = Math.ceil(bonus/2);
		let points = popPop.loopBonus[bonus]*(popPop.level*10);
		popPop.totalPoints += points;
		popPop.levelPoints += points;
		popPop.hits++;
		popPop.popPopUI.GetChild('popPopUI3').ChangeSelf({property:'text',value:{value:'Hits : '+ popPop.hits +'\nPts : '+ popPop.levelPoints +'\nTotal : ' + popPop.totalPoints}});
		//Collected All
		if(popPop.hits >= popPop.levelSpawn[popPop.level]){
			//Bonus
			popPop.totalPoints += popPop.level*100;
			popPop.levelPoints += popPop.level*100;
			popPop.popPopUI.GetChild('popPopUI3').ChangeSelf({property:'text',value:{value:'Bonus '+ popPop.level*100+'!\nHits : '+ popPop.hits +'\nPts : '+ popPop.levelPoints +'\nTotal : ' + popPop.totalPoints}});
			LevelOver();
		}
	}
	//Game Start
	const GameStart = () => {
		Reset();
		popPop.gameStarted = true;
		popPop.popPopUI.GetChild('popPopUI5').ChangeSelf({property:'text',value:{value:'Restart'}});
		GameLoop();
	}
	//Game Over
	const GameOver = () => {
		popPop.gameStarted = false;
		popPop.popPopUI.GetChild('popPopUI1').ChangeSelf({property:'text',value:{value:'Game Complete'}});
		popPop.popPopUI.GetChild('popPopUI5').ChangeSelf({property:'text',value:{value:'Start'}});
		UpdateScores(popPop.totalPoints);
	}
	//Spawn popPop Game
	const SpawnPPGame = () => {
		if(popPop.inScene){}else{
			popPop.popPopUI.SpawnLayer();
			popPop.base.SpawnCore();
			popPop.popCores.forEach(pop => pop.SpawnCore());
			UpdateScores();
			popPop.inScene = true;
		}
	}
	//Despawn popPop
	const DespawnPPGame = () => {
		if(popPop.inScene){
			popPop.base.DespawnCore();
			popPop.popCores.forEach(pop => pop.DespawnCore());
			popPop.popPopUI.DespawnLayer();
			popPop.inScene = false;
			auxl.RemoveFromTracker(popPop.id);
		}
	}

	return {popPop, core, SpawnPPGame, DespawnPPGame, GameStart, Hit, GameLoop}
}
auxl.popPopGame = auxl.PopPopGame('popPopGame');
//popPop Game Menu
auxl.popPopGameMenuData = {
	id: 'popPopGameMenu',
	game: auxl.popPopGame.popPop,
	homeZone: 'xrcadeZone',
	homeConnect: 'xrcadeHome',
	gameZone: 'xrcadeZone',
	gameConnect: 'game9',
	gameCabinet: 'cadeCab9Layer',
	outGamePos: new THREE.Vector3(8,1.5,-13.75),
	inGamePos: new THREE.Vector3(0.75,1.5,0.5),
};
auxl.popPopGameMenu = auxl.GameMenu(auxl.popPopGameMenuData);



//
//Horde Halt Game 
//Stop on onslaught of enemies that by clicking to stun and swiping to kill
auxl.HordeHaltGame = (id) => {

	let hordeHalt = {};
	hordeHalt.id = id;
	let core = 'hordeHalt';
	hordeHalt.title = 'hordeHalt';
	hordeHalt.instructionsText = 'How To Play :\n';
	hordeHalt.controlsText = 'Game Controls :\nUse the controller ray and controller click to play the game.';
	hordeHalt.previewImage = auxl.pattern01;
	hordeHalt.inScene = false;
	//Colors
	auxl.hordeHaltGameColor = auxl.colorTheoryGen('#4cd041');
	//High Scores
	hordeHalt.highScores = blankHighScores('Kills', 0);
	//Game Vars
	hordeHalt.gameStarted = false;
	hordeHalt.enemyTotal = 10;
	hordeHalt.targetPos = new THREE.Vector3(0,0,-4.5);
	hordeHalt.health = 5;
	hordeHalt.kills = 0;
	hordeHalt.points = 0;

	//Target
	hordeHalt.targetData = {
	data:'targetData',
	id:'target',
	sources: false,
	text: false,
	sounds: {
		fire: {src: auxl.confirm1, autoplay: false, loop: false, volume: 1, on: 'fire'},
		hit: {src: auxl.confirm2, autoplay: false, loop: false, volume: 1, on: 'mousedown'},
	},
	geometry: {primitive: 'box', depth: 1, width: 1, height: 1.25},
	material: {shader: "standard", color: auxl.hordeHaltGameColor.compl, emissive: auxl.hordeHaltGameColor.compl, emissiveIntensity: 0.1, opacity: 1},
	position: hordeHalt.targetPos,
	rotation: new THREE.Vector3(0,0,0),
	scale: new THREE.Vector3(1,1,1),
	animations: false,
	mixins: false,
	classes: ['a-ent'],
	components: false,
	};
	hordeHalt.target = auxl.Core(hordeHalt.targetData);
	//Enemy Template
	hordeHalt.enemyData = {
	data:'enemyData',
	id:'enemy',
	sources: false,
	text: false,
	sounds: {
		pop: {src: auxl.confirm1, autoplay: false, loop: false, volume: 1, on: 'pop'},
		hit: {src: auxl.confirm2, autoplay: false, loop: false, volume: 1, on: 'mousedown'},
	},
	geometry:{primitive: 'dodecahedron', radius: 0.6, detail: 0},
	material: {shader: "standard", color: '#fffb96', emissive: '#fffb96', emissiveIntensity: 0.25, opacity: 0.5},
	position: new THREE.Vector3(-1,0,-15),
	rotation: new THREE.Vector3(0,0,0),
	scale: new THREE.Vector3(0.0001,0.0001,0.0001),
	animations: {
		move: {property: 'position', to: hordeHalt.targetPos, dur: 8000, delay: 0, loop: false, dir: 'normal', easing: 'linear', elasticity: 400, autoplay: false, enabled: true, startEvents: 'start', pauseEvents: 'mousedown', resumeEvents: 'resume'},
		stun: {property: 'material.opacity', to: 1, dur: 1, delay: 0, loop: false, dir: 'normal', easing: 'linear', elasticity: 400, autoplay: false, enabled: true, startEvents: 'mousedown',},
		hit: {property: 'material.emissiveIntensity', from: 0.25, to: 1, dur: 50, delay: 0, loop: '1', dir: 'alternate', easing: 'easeInOutSine', elasticity: 400, autoplay: false, enabled: true, startEvents: 'hit'},
		resume: {property: 'material.opacity', from: 1, to: 0.25, dur: 1, delay: 0, loop: false, dir: 'normal', easing: 'linear', elasticity: 400, autoplay: false, enabled: true, startEvents: 'resume'},
		spawnx: {property: 'object3D.scale.x', from: 0.0001, to: 1, dur: 1000, delay: 0, loop: false, dir: 'normal', easing: 'easeInOutElastic', elasticity: 400, autoplay: false, enabled: true, startEvents: 'spawn'},
		spawny: {property: 'object3D.scale.y', from: 0.0001, to: 1, dur: 1000, delay: 0, loop: false, dir: 'normal', easing: 'easeInOutElastic', elasticity: 400, autoplay: false, enabled: true, startEvents: 'spawn'},
		spawnz: {property: 'object3D.scale.z', from: 0.0001, to: 1, dur: 1000, delay: 0, loop: false, dir: 'normal', easing: 'easeInOutElastic', elasticity: 400, autoplay: false, enabled: true, startEvents: 'spawn'},
		killx: {property: 'object3D.scale.x', from: 1, to: 0.0001, dur: 400, delay: 0, loop: false, dir: 'normal', easing: 'easeInOutElastic', elasticity: 400, autoplay: false, enabled: true, startEvents: 'kill'},
		killy: {property: 'object3D.scale.y', from: 1, to: 0.0001, dur: 400, delay: 0, loop: false, dir: 'normal', easing: 'easeInOutElastic', elasticity: 400, autoplay: false, enabled: true, startEvents: 'kill'},
		killz: {property: 'object3D.scale.z', from: 1, to: 0.0001, dur: 400, delay: 0, loop: false, dir: 'normal', easing: 'easeInOutElastic', elasticity: 400, autoplay: false, enabled: true, startEvents: 'kill'},
		remove: {property: 'object3D.position.y', to: -5, dur: 1, delay: 0, loop: false, dir: 'normal', easing: 'linear', elasticity: 400, autoplay: false, enabled: true, startEvents: 'animationcomplete__killz',},
		damagex: {property: 'object3D.scale.x', from: 1, to: 5, dur: 250, delay: 0, loop: '1', dir: 'alternate', easing: 'easeInOutElastic', elasticity: 400, autoplay: false, enabled: true, startEvents: 'damage'},
		damagex1: {property: 'object3D.scale.x', from: 1, to: 0.0001, dur: 1, delay: 0, loop: false, dir: 'normal', easing: 'linear', elasticity: 400, autoplay: false, enabled: true, startEvents: 'animationcomplete__damagex'},
		damagey: {property: 'object3D.scale.y', from: 1, to: 5, dur: 250, delay: 0, loop: '1', dir: 'alternate', easing: 'easeInOutElastic', elasticity: 400, autoplay: false, enabled: true, startEvents: 'damage'},
		damagey1: {property: 'object3D.scale.y', from: 1, to: 0.0001, dur: 1, delay: 0, loop: false, dir: 'normal', easing: 'linear', elasticity: 400, autoplay: false, enabled: true, startEvents: 'animationcomplete__damagey'},
		damagez: {property: 'object3D.scale.z', from: 1, to: 5, dur: 250, delay: 0, loop: '1', dir: 'alternate', easing: 'easeInOutElastic', elasticity: 400, autoplay: false, enabled: true, startEvents: 'damage'},
		damagez1: {property: 'object3D.scale.z', from: 1, to: 0.0001, dur: 1, delay: 0, loop: false, dir: 'normal', easing: 'linear', elasticity: 400, autoplay: false, enabled: true, startEvents: 'animationcomplete__damagez'},
	},
	mixins: false,
	classes: ['clickable', 'a-ent'],
	components: {
		mousedownrun__hit:{
			cursorObj: hordeHalt.id,
			component: 'null',
			method: 'Stun',
			params: '0',
		},
		mouseenterrun__slashin:{
			cursorObj: hordeHalt.id,
			component: 'null',
			method: 'SlashIn',
			params: '0',
		},
		mouseleaverun__slashout:{
			cursorObj: hordeHalt.id,
			component: 'null',
			method: 'SlashOut',
			params: '0',
		},
		oneventrun__kill:{
			event: 'kill',
			cursorObj: hordeHalt.id,
			component: 'null',
			method: 'ToggleClick',
			params: '0',
		},
		oneventrun__damage:{
			event: 'animationcomplete__move',
			cursorObj: hordeHalt.id,
			component: 'null',
			method: 'Damage',
			params: '0',
		},
	},
	};
	hordeHalt.enemy = auxl.Core(hordeHalt.enemyData);
	hordeHalt.enemies = [];
	hordeHalt.enemyCores = [];
	//Build Enemies
	let x = 0;
	let y = 0;
	let z = 0;
	let color;
	for(let a = 0; a < hordeHalt.enemyTotal; a++){
		x = (Math.random()*40)-20;
		y = (Math.random()*20)+0.5;
		z = (Math.random()*-10)-20;
		color = auxl.colorTheoryGen(false, 'red').base;
		hordeHalt.enemyCores[a] = auxl.coreFromTemplate(hordeHalt.enemy,{id: 'enemy'+a, material: {shader: "standard", color: color, emissive: color, emissiveIntensity: 0.25, opacity: 0.5}, position: new THREE.Vector3(x,y,z), components: {mousedownrun__hit:{cursorObj: hordeHalt.id, component: 'null', method: 'Stun', params: a,}, oneventrun__kill:{event: 'kill', cursorObj: hordeHalt.id, component: 'null', method: 'ToggleClick', params: a,}, mouseenterrun__slashin:{cursorObj: hordeHalt.id, component: 'null', method: 'SlashIn', params: a,}, mouseenterrun__slashout:{cursorObj: hordeHalt.id, component: 'null', method: 'SlashOut', params: a,}, oneventrun__damage:{event: 'animationcomplete__move', cursorObj: hordeHalt.id, component: 'null', method: 'Damage', params: a,}, },}, true);
		hordeHalt.enemyCores[a].core.animations.move.dur = (Math.random()*5000)+20000;
		hordeHalt.enemies.push({num: a, stunned: false, health: 4, slashStart: false, resumeTimeout: false});

	}

	//UI
	hordeHalt.hordeHaltUIData = auxl.layerDataFromTemplate(auxl.uiGameLayerData, 'hordeHaltUI',{position: new THREE.Vector3(1.5,1.5,0)}, true);
	hordeHalt.hordeHaltUI = auxl.Layer('hordeHaltUI',hordeHalt.hordeHaltUIData);
	//Parent : hordeHaltUI0
	//Game Status : hordeHaltUI1
	hordeHalt.hordeHaltUI.layer.all.child0.core.core.material.color = auxl.hordeHaltGameColor.compl;
	hordeHalt.hordeHaltUI.layer.all.child0.core.core.material.emissive = auxl.hordeHaltGameColor.compl;
	hordeHalt.hordeHaltUI.layer.all.child0.core.core.text.value = 'Game Ready';
	//Game Title : hordeHaltUI2
	hordeHalt.hordeHaltUI.layer.all.child1.core.core.material.color = auxl.hordeHaltGameColor.compl;
	hordeHalt.hordeHaltUI.layer.all.child1.core.core.material.emissive = auxl.hordeHaltGameColor.compl;
	hordeHalt.hordeHaltUI.layer.all.child1.core.core.text.value = 'Horde Halt';
	//Current Level & Points : hordeHaltUI3
	hordeHalt.hordeHaltUI.layer.all.child2.core.core.material.color = auxl.hordeHaltGameColor.compl;
	hordeHalt.hordeHaltUI.layer.all.child2.core.core.material.emissive = auxl.hordeHaltGameColor.compl;
	hordeHalt.hordeHaltUI.layer.all.child2.core.core.text.value = 'Pts : 0';
	//High Score Board : hordeHaltUI4
	hordeHalt.hordeHaltUI.layer.all.child3.core.core.material.color = auxl.hordeHaltGameColor.compl;
	hordeHalt.hordeHaltUI.layer.all.child3.core.core.material.emissive = auxl.hordeHaltGameColor.compl;
	//Game Start : hordeHaltUI5
	hordeHalt.hordeHaltUI.layer.all.child4.core.core.material.color = auxl.hordeHaltGameColor.compl;
	hordeHalt.hordeHaltUI.layer.all.child4.core.core.material.emissive = auxl.hordeHaltGameColor.compl;
	hordeHalt.hordeHaltUI.layer.all.child4.core.core.components = {};
	hordeHalt.hordeHaltUI.layer.all.child4.core.core.components.clickrun__gamestart = {cursorObj: hordeHalt.id, component: 'null', method: 'GameStart', params: 'null',};
	//Game Control : hordeHaltUI6
	hordeHalt.hordeHaltUI.layer.all.child5.core.core.material.color = auxl.hordeHaltGameColor.compl;
	hordeHalt.hordeHaltUI.layer.all.child5.core.core.material.emissive = auxl.hordeHaltGameColor.compl;
	hordeHalt.hordeHaltUI.layer.all.child5.core.core.text.value = 'Give Up';
	hordeHalt.hordeHaltUI.layer.all.child5.core.core.components = {};
	hordeHalt.hordeHaltUI.layer.all.child5.core.core.components.visible = false;
	//Game Menu : hordeHaltUI7
	hordeHalt.hordeHaltUI.layer.all.child6.core.core.material.color = auxl.hordeHaltGameColor.compl;
	hordeHalt.hordeHaltUI.layer.all.child6.core.core.material.emissive = auxl.hordeHaltGameColor.compl;
	hordeHalt.hordeHaltUI.layer.all.child6.core.core.components = {};
	hordeHalt.hordeHaltUI.layer.all.child6.core.core.components.clickrun__menutoggle = {cursorObj: 'hordeHaltGameMenu', component: 'null', method: 'ToggleGameMenu', params: 'null',};

	//Update Scores
	const UpdateScores = (score) => {
		if(score){
			hordeHalt.highScores = checkHighScore(score, hordeHalt.highScores);
		}
		hordeHalt.highScores.text = refreshHighScoreText(hordeHalt.highScores);
		hordeHalt.hordeHaltUI.GetChild('hordeHaltUI4').ChangeSelf({property:'text',value:{value:hordeHalt.highScores.text}});
		auxl.saveToProfile({auxlObject: hordeHalt.id, type: 'hordeHalt', sub: false, name: 'highScores', data: hordeHalt.highScores});
	}
	//Countdown
	const Countdown = (count) => {
		hordeHalt.hordeHaltUI.GetChild('hordeHaltUI1').ChangeSelf({property:'text',value:{value:'Starting in '+ count + '...'}});
		let countTimeout = setTimeout(() => {
			if(count > 1){
				Countdown(count-1);
			} else {
				hordeHalt.hordeHaltUI.GetChild('hordeHaltUI1').ChangeSelf({property:'text',value:{value:'GO!'}});
			}
			clearTimeout(countTimeout);
		}, 1000);
	}
	//Toggle Click
	const ToggleClick = (enemy, toggle) => {
		hordeHalt.enemyCores[enemy].GetEl().classList.toggle('clickable', toggle);
	}
	//Reset
	const Reset = () => {
		clearTimeout(hordeHalt.gameDelay);
		hordeHalt.health = 5;
		hordeHalt.kills = 0;
		hordeHalt.points = 0;

		//Enemies
		hordeHalt.enemies.forEach(enemy => {
			enemy.stunned = false;
			enemy.health = 4;
			enemy.slashStart = false;
			enemy.resumeTimeout = false;
			ToggleClick(enemy.num, true);
		});
		let x = 0;
		let y = 0;
		let z = 0;
		hordeHalt.enemyCores.forEach(enemy => {
			x = (Math.random()*40)-20;
			y = (Math.random()*20)+0.5;
			z = (Math.random()*-10)-20;
 			enemy.ChangeSelf([{property: 'position', value: new THREE.Vector3(x,y,z)}, {property: 'material', value: {opacity: 0.25}}])
		});
	}
	//Game Start
	const GameStart = () => {
console.log('Game Start');
		Reset();
		hordeHalt.gameStarted = true;
		Countdown(3);
		hordeHalt.gameDelay = setTimeout(() => {
			GameLoop();
			clearTimeout(hordeHalt.gameDelay);
		}, 3000);
	}
	//Game Over
	const GameOver = () => {
console.log('Game Over');
		hordeHalt.gameStarted = false;
	}

	//Game Loop
	const GameLoop = () => {
console.log('Game Started');
		hordeHalt.enemyCores.forEach(enemy => enemy.EmitEvent('spawn'));
		hordeHalt.enemyCores.forEach(enemy => enemy.EmitEvent('start'));
	}

	//Damage
	const Damage = (enemy) => {
console.log('Damage')
		hordeHalt.health--;
		hordeHalt.enemyCores[enemy].EmitEvent('damage');
		if(hordeHalt.health <= 0){
			GameOver();
		}
	}

	//Stun
	const Stun = (enemy) => {
console.log('Stun')
		if(hordeHalt.enemies[enemy].stunned){}else{
			hordeHalt.enemies[enemy].stunned = true;
			hordeHalt.enemies[enemy].resumeTimeout = setTimeout(() => {
				hordeHalt.enemyCores[enemy].EmitEvent('resume');
				console.log('Resume');
				clearTimeout(hordeHalt.enemies[enemy].resumeTimeout);
			}, 3000);
		}
	}

	//Slash In
	const SlashIn = (enemy) => {
		if(hordeHalt.enemies[enemy].stunned){
			hordeHalt.enemies[enemy].slashStart = true;
console.log('Slash In')
		}
	}

	//Slash Out
	const SlashOut = (enemy) => {
		if(hordeHalt.enemies[enemy].stunned && hordeHalt.enemies[enemy].slashStart){
			hordeHalt.enemies[enemy].health--;
			hordeHalt.enemies[enemy].slashStart = false;
console.log('Slash Out')
			hordeHalt.enemyCores[enemy].EmitEvent('hit');
			if(hordeHalt.enemies[enemy].health <= 0){
				hordeHalt.kills++;
				clearTimeout(hordeHalt.enemies[enemy].resumeTimeout);
				hordeHalt.enemyCores[enemy].EmitEvent('kill');
console.log('Kill')
			}
		}
	}

	//Spawn hordeHalt Game
	const SpawnHHGame = () => {
		hordeHalt.target.SpawnCore();
		hordeHalt.hordeHaltUI.SpawnLayer();
		UpdateScores();
		hordeHalt.enemyCores.forEach(enemy => enemy.SpawnCore());
		hordeHalt.inScene = true;
	}
	//Despawn hordeHalt
	const DespawnHHGame = () => {
		hordeHalt.target.DespawnCore();
		hordeHalt.hordeHaltUI.DespawnLayer();
		hordeHalt.inScene = false;
		auxl.RemoveFromTracker(hordeHalt.id);
	}

	return {hordeHalt, core, SpawnHHGame, DespawnHHGame, GameStart, Stun, SlashIn, SlashOut, Damage, ToggleClick}
}
auxl.hordeHaltGame = auxl.HordeHaltGame('hordeHaltGame');
//hordeHalt Game Menu
auxl.hordeHaltGameMenuData = {
	id: 'hordeHaltGameMenu',
	game: auxl.hordeHaltGame.hordeHalt,
	homeZone: 'xrcadeZone',
	homeConnect: 'xrcadeHome',
	gameZone: 'xrcadeZone',
	gameConnect: 'game10',
	gameCabinet: 'cadeCab10Layer',
	outGamePos: new THREE.Vector3(8,1.5,-15.75),
	inGamePos: new THREE.Vector3(0.75,1.5,0.5),
};
auxl.hordeHaltGameMenu = auxl.GameMenu(auxl.hordeHaltGameMenuData);



//
//Basic Game Template
//Basic game description
auxl.BasicGame = (id) => {
//Create new Scene for Game
//Add ObjGen info to objGenTracking
//Update cadeCabLayer in both locations
//Add Relay to Main Scene
//Add Game to High Score Board ObjGen


	let basic = {};
	basic.id = id;
	let core = 'basic';
	basic.title = 'Basic';
	basic.instructionsText = 'How To Play :\n';
	basic.controlsText = 'Game Controls :\nUse the controller ray and controller click to play the game.';
	basic.previewImage = auxl.pattern01;
	basic.inScene = false;
	//Colors
	auxl.basicGameColor = auxl.colorTheoryGen('#0076ff');
	//High Scores
	basic.highScores = blankHighScores('Hits', 0);
	//Game Vars
	basic.gameStarted = false;

	//Target
	basic.basicObjData = {
	data:'basicObjData',
	id:'basicObj',
	sources: false,
	text: false,
	sounds: {
		fire: {src: auxl.confirm1, autoplay: false, loop: false, volume: 1, on: 'fire'},
		hit: {src: auxl.confirm2, autoplay: false, loop: false, volume: 1, on: 'mousedown'},
	},
	geometry: {primitive: 'box', depth: 1, width: 1, height: 1},
	material: {shader: "standard", color: auxl.basicGameColor.compl, emissive: auxl.basicGameColor.compl, emissiveIntensity: 0.1, opacity: 1},
	position: new THREE.Vector3(0,2,-4),
	rotation: new THREE.Vector3(0,45,0),
	scale: new THREE.Vector3(2,2,2),
	animations: false,
	mixins: false,
	classes: ['a-ent'],
	components: {
		mousedownrun__hit:{
			cursorObj: basic.id,
			component: 'null',
			method: 'TargetHit',
			params: 'null',
		},
	},
	};
	basic.basicObj = auxl.Core(basic.basicObjData);

	//UI
	basic.basicUIData = auxl.layerDataFromTemplate(auxl.uiGameLayerData, 'basicUI',{position: new THREE.Vector3(1.5,1.5,0)}, true);
	basic.basicUI = auxl.Layer('basicUI',basic.basicUIData);
	//Parent : basicUI0
	//Game Status : basicUI1
	basic.basicUI.layer.all.child0.core.core.material.color = auxl.basicGameColor.compl;
	basic.basicUI.layer.all.child0.core.core.material.emissive = auxl.basicGameColor.compl;
	basic.basicUI.layer.all.child0.core.core.text.value = 'Game Ready';
	//Game Title : basicUI2
	basic.basicUI.layer.all.child1.core.core.material.color = auxl.basicGameColor.compl;
	basic.basicUI.layer.all.child1.core.core.material.emissive = auxl.basicGameColor.compl;
	basic.basicUI.layer.all.child1.core.core.text.value = 'Basic';
	//Current Level & Points : basicUI3
	basic.basicUI.layer.all.child2.core.core.material.color = auxl.basicGameColor.compl;
	basic.basicUI.layer.all.child2.core.core.material.emissive = auxl.basicGameColor.compl;
	basic.basicUI.layer.all.child2.core.core.text.value = 'Pts : 0';
	//High Score Board : basicUI4
	basic.basicUI.layer.all.child3.core.core.material.color = auxl.basicGameColor.compl;
	basic.basicUI.layer.all.child3.core.core.material.emissive = auxl.basicGameColor.compl;
	//Game Start : basicUI5
	basic.basicUI.layer.all.child4.core.core.material.color = auxl.basicGameColor.compl;
	basic.basicUI.layer.all.child4.core.core.material.emissive = auxl.basicGameColor.compl;
	basic.basicUI.layer.all.child4.core.core.components = {};
	basic.basicUI.layer.all.child4.core.core.components.clickrun__gamestart = {cursorObj: basic.id, component: 'null', method: 'GameStart', params: 'null',};
	//Game Control : basicUI6
	basic.basicUI.layer.all.child5.core.core.material.color = auxl.basicGameColor.compl;
	basic.basicUI.layer.all.child5.core.core.material.emissive = auxl.basicGameColor.compl;
	basic.basicUI.layer.all.child5.core.core.text.value = 'Give Up';
	basic.basicUI.layer.all.child5.core.core.components = {};
	basic.basicUI.layer.all.child5.core.core.components.visible = false;
	//Game Menu : basicUI7
	basic.basicUI.layer.all.child6.core.core.material.color = auxl.basicGameColor.compl;
	basic.basicUI.layer.all.child6.core.core.material.emissive = auxl.basicGameColor.compl;
	basic.basicUI.layer.all.child6.core.core.components = {};
	basic.basicUI.layer.all.child6.core.core.components.clickrun__menutoggle = {cursorObj: 'basicGameMenu', component: 'null', method: 'ToggleGameMenu', params: 'null',};

	//Update Scores
	const UpdateScores = (score) => {
		if(score){
			basic.highScores = checkHighScore(score, basic.highScores);
		}
		basic.highScores.text = refreshHighScoreText(basic.highScores);
		basic.basicUI.GetChild('basicUI4').ChangeSelf({property:'text',value:{value:basic.highScores.text}});
		auxl.saveToProfile({auxlObject: basic.id, type: 'basic', sub: false, name: 'highScores', data: basic.highScores});
	}
	//Reset
	const Reset = () => {
console.log('Reset');

	}
	//Game Start
	const GameStart = () => {
console.log('Game Start');
		Reset();
		basic.gameStarted = true;
	}
	//Game Over
	const GameOver = () => {
console.log('Game Over');
		basic.gameStarted = false;
	}

	//Game Loop
	const GameLoop = () => {

	}

	//Target Hit
	const TargetHit = () => {
console.log('Hit')

	}

	//Spawn Basic Game
	const SpawnBasicGame = () => {
		basic.basicObj.SpawnCore();
		basic.basicUI.SpawnLayer();
		basic.inScene = true;
	}
	//Despawn Basic
	const DespawnBasicGame = () => {
		basic.basicObj.DespawnCore();
		basic.basicUI.DespawnLayer();
		basic.inScene = false;
		auxl.RemoveFromTracker(basic.id);
	}

	return {basic, core, SpawnBasicGame, DespawnBasicGame, GameStart, TargetHit}
}
auxl.basicGame = auxl.BasicGame('basicGame');
//Basic Game Menu
auxl.basicGameMenuData = {
	id: 'basicGameMenu',
	game: auxl.basicGame.basic,
	homeZone: 'xrcadeZone',
	homeConnect: 'xrcadeHome',
	gameZone: 'xrcadeZone',
	gameConnect: 'game#',
	gameCabinet: 'cadeCab#Layer',
	outGamePos: new THREE.Vector3(8,1.5,-11.75),
	inGamePos: new THREE.Vector3(0.75,1.5,0.5),
};
auxl.basicGameMenu = auxl.GameMenu(auxl.basicGameMenuData);

//
//Highest Scores Board
auxl.HighScoreBoard = (id) => {

	let highScoreBoard = {};
	highScoreBoard.id = id;
	highScoreBoard.inScene = false;

	highScoreBoard.boardData = {
	data:'boardData',
	id:'board',
	sources: false,
	text: {value:'High Scores', color: "#FFFFFF", align: "center", font: "exo2bold", zOffset: 0.005, side: 'front', wrapCount: 25, baseline: 'center', align: 'left', width: 2.75},
	geometry: {primitive: 'plane', width: 3, height: 3},
	material: {shader: "standard", color: '#2694ce', emissive: '#2694ce', emissiveIntensity: 0.75, opacity: 1},
	position: new THREE.Vector3(-9,2,-2),
	rotation: new THREE.Vector3(0,90,0),
	scale: new THREE.Vector3(1,1,1),
	animations: false,
	mixins: false,
	classes: ['a-ent'],
	components: false,
	};
	highScoreBoard.board = auxl.Core(highScoreBoard.boardData);
	highScoreBoard.backBoardData = {
	data:'backBoardData',
	id:'backBoard',
	sources: false,
	text: false,
	geometry: {primitive: 'plane', width: 3.2, height: 3.2},
	material: {shader: "standard", color: '#FFFFFF', emissive: '#FFFFFF', emissiveIntensity: 0.5, opacity: 1},
	position: new THREE.Vector3(-9.01,2,-2),
	rotation: new THREE.Vector3(0,90,0),
	scale: new THREE.Vector3(1,1,1),
	animations: false,
	mixins: false,
	classes: ['a-ent'],
	components: false,
	};
	highScoreBoard.backBoard = auxl.Core(highScoreBoard.backBoardData);

	highScoreBoard.allGames = [
		auxl.memory,
		auxl.swipeLaunchGame,
		auxl.guessHitGame,
		auxl.dragDiffuseGame,
		auxl.sharpShooterGame,
		auxl.perfectScaleGame,
		auxl.reflex7Game,
		auxl.tapItGame,
		auxl.popPopGame,
		auxl.hordeHaltGame,
	];
	highScoreBoard.allScores = {};
	highScoreBoard.text = 'XRcade High Scores\n';

	//Compile Scores
	const CompileScores = () => {
		highScoreBoard.text = 'XRcade High Scores\n';
		highScoreBoard.allGames.forEach(game => {
			//console.log({game:game[game.core].title, name: game[game.core].highScores.name1, score: game[game.core].highScores.score1, type: game[game.core].highScores.type, acc: game[game.core].highScores.acc});
			highScoreBoard.allScores[game.core] = {};
			highScoreBoard.allScores[game.core].title = game[game.core].title;
			highScoreBoard.allScores[game.core].name = game[game.core].highScores.name1;
			highScoreBoard.allScores[game.core].score = game[game.core].highScores.score1;
			highScoreBoard.allScores[game.core].type = game[game.core].highScores.type;
			highScoreBoard.allScores[game.core].acc = game[game.core].highScores.acc;
			highScoreBoard.text += game[game.core].title + ' : ' + game[game.core].highScores.score1.toFixed(game[game.core].highScores.acc) + ' ' + game[game.core].highScores.type;
		});
	}

	//Update
	const UpdateBoard = () => {
		CompileScores();
		highScoreBoard.board.ChangeSelf({property: 'text', value:{value: highScoreBoard.text}});
	}

	//Spawn Board
	const SpawnBoard = () => {
		highScoreBoard.board.SpawnCore();
		highScoreBoard.backBoard.SpawnCore();
		highScoreBoard.inScene = true;
	}
	//Despawn Board
	const DespawnBoard = () => {
		highScoreBoard.board.DespawnCore();
		highScoreBoard.backBoard.DespawnCore();
		highScoreBoard.inScene = false;
	}

	return {highScoreBoard, SpawnBoard, DespawnBoard, UpdateBoard}
}
auxl.highScoresBoard = auxl.HighScoreBoard('highScoresBoard');


//Build Mini Games Objects
auxl.buildMiniGames = () => {
	//Memory Game
	auxl.memory = auxl.MemoryGame('memory');
	auxl.memoryGameMenu = auxl.GameMenu(auxl.memoryGameMenuData);
	//Swipe Launch
	auxl.swipeLaunchGame = auxl.SwipeLaunchGame('swipeLaunchGame');
	auxl.swipeLaunchGameMenu = auxl.GameMenu(auxl.swipeLaunchGameMenuData);
	//Guess Hit
	auxl.guessHitGame = auxl.GuessHitGame('guessHitGame');
	auxl.guessHitGameMenu = auxl.GameMenu(auxl.guessHitGameMenuData);
	//Drag Diffuse
	auxl.dragDiffuseGame = auxl.DragDiffuse('dragDiffuseGame');
	auxl.dragDiffuseGameMenu = auxl.GameMenu(auxl.dragDiffuseGameMenuData);
	//Sharp Shooter
	auxl.sharpShooterGame = auxl.SharpShooter('sharpShooterGame');
	auxl.sharpShooterGameMenu = auxl.GameMenu(auxl.sharpShooterGameMenuData);
	//Perfect Scale
	auxl.perfectScaleGame = auxl.PerfectScale('perfectScaleGame');
	auxl.perfectScaleGameMenu = auxl.GameMenu(auxl.perfectScaleGameMenuData);
	//Reflex 7
	auxl.reflex7Game = auxl.Reflex7('reflex7Game');
	auxl.reflex7GameMenu = auxl.GameMenu(auxl.reflex7GameMenuData);
	//Tap It
	auxl.tapItGame = auxl.TapIt('tapItGame');
	auxl.tapItGameMenu = auxl.GameMenu(auxl.tapItGameMenuData);

}
auxl.toBeRebuilt('buildMiniGames');

},
});

//
//Export
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (arcade);

/***/ }),

/***/ "./src/load/library.js":
/*!*****************************!*\
  !*** ./src/load/library.js ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
//
//AUXL : A-Frame UX Library
//v0.3 Engine
//https://github.com/Minty-Crisp/AUXL
//
//Created by Minty-Crisp (mintycrisp.com)
//
//Library
//
//library

//
//Library : List of Materials, Geometries, Sounds, Animations, Data, Cores, Layers & Objects
const library = AFRAME.registerComponent('library', {
dependencies: ['auxl'],
init: function () {
//AUXL System Connection
const auxl = document.querySelector('a-scene').systems.auxl;


//Colors
//

//Minty Palette
auxl.mintyGreen = '#3EB489';
auxl.mintyPink = '#C14B76';

//Vaporwave Palette
auxl.vaporPink = '#ff71ce';
auxl.vaporBlue = '#01cdfe';
auxl.vaporGreen = '#05ffa1';
auxl.vaporPurple = '#b967ff';
auxl.vaporYellow = '#fffb96';


//Materials Library
//

//Tiles

//Kenny
auxl.pattern01 = './assets/img/tiles/kenny/pattern_01.png';
auxl.pattern02 = './assets/img/tiles/kenny/pattern_02.png';
auxl.pattern03 = './assets/img/tiles/kenny/pattern_03.png';
auxl.pattern04 = './assets/img/tiles/kenny/pattern_04.png';
auxl.pattern05 = './assets/img/tiles/kenny/pattern_05.png';
auxl.pattern06 = './assets/img/tiles/kenny/pattern_06.png';
auxl.pattern07 = './assets/img/tiles/kenny/pattern_07.png';
auxl.pattern08 = './assets/img/tiles/kenny/pattern_08.png';
auxl.pattern09 = './assets/img/tiles/kenny/pattern_09.png';
auxl.pattern10 = './assets/img/tiles/kenny/pattern_10.png';
auxl.pattern11 = './assets/img/tiles/kenny/pattern_11.png';
auxl.pattern12 = './assets/img/tiles/kenny/pattern_12.png';
auxl.pattern13 = './assets/img/tiles/kenny/pattern_13.png';
auxl.pattern14 = './assets/img/tiles/kenny/pattern_14.png';
auxl.pattern15 = './assets/img/tiles/kenny/pattern_15.png';
auxl.pattern16 = './assets/img/tiles/kenny/pattern_16.png';
auxl.pattern17 = './assets/img/tiles/kenny/pattern_17.png';
auxl.pattern18 = './assets/img/tiles/kenny/pattern_18.png';
auxl.pattern19 = './assets/img/tiles/kenny/pattern_19.png';
auxl.pattern20 = './assets/img/tiles/kenny/pattern_20.png';
auxl.pattern21 = './assets/img/tiles/kenny/pattern_21.png';
auxl.pattern22 = './assets/img/tiles/kenny/pattern_22.png';
auxl.pattern23 = './assets/img/tiles/kenny/pattern_23.png';
auxl.pattern24 = './assets/img/tiles/kenny/pattern_24.png';
auxl.pattern25 = './assets/img/tiles/kenny/pattern_25.png';
auxl.pattern26 = './assets/img/tiles/kenny/pattern_26.png';
auxl.pattern27 = './assets/img/tiles/kenny/pattern_27.png';
auxl.pattern28 = './assets/img/tiles/kenny/pattern_28.png';
auxl.pattern29 = './assets/img/tiles/kenny/pattern_29.png';
auxl.pattern30 = './assets/img/tiles/kenny/pattern_30.png';
auxl.pattern31 = './assets/img/tiles/kenny/pattern_31.png';
auxl.pattern32 = './assets/img/tiles/kenny/pattern_32.png';
auxl.pattern33 = './assets/img/tiles/kenny/pattern_33.png';
auxl.pattern34 = './assets/img/tiles/kenny/pattern_34.png';
auxl.pattern35 = './assets/img/tiles/kenny/pattern_35.png';
auxl.pattern36 = './assets/img/tiles/kenny/pattern_36.png';
auxl.pattern37 = './assets/img/tiles/kenny/pattern_37.png';
auxl.pattern38 = './assets/img/tiles/kenny/pattern_38.png';
auxl.pattern39 = './assets/img/tiles/kenny/pattern_39.png';
auxl.pattern40 = './assets/img/tiles/kenny/pattern_40.png';
auxl.pattern41 = './assets/img/tiles/kenny/pattern_41.png';
auxl.pattern42 = './assets/img/tiles/kenny/pattern_42.png';
auxl.pattern43 = './assets/img/tiles/kenny/pattern_43.png';
auxl.pattern44 = './assets/img/tiles/kenny/pattern_44.png';
auxl.pattern45 = './assets/img/tiles/kenny/pattern_45.png';
auxl.pattern46 = './assets/img/tiles/kenny/pattern_46.png';
auxl.pattern47 = './assets/img/tiles/kenny/pattern_47.png';
auxl.pattern48 = './assets/img/tiles/kenny/pattern_48.png';
auxl.pattern49 = './assets/img/tiles/kenny/pattern_49.png';
auxl.pattern50 = './assets/img/tiles/kenny/pattern_50.png';
auxl.pattern51 = './assets/img/tiles/kenny/pattern_51.png';
auxl.pattern52 = './assets/img/tiles/kenny/pattern_52.png';
auxl.pattern53 = './assets/img/tiles/kenny/pattern_53.png';
auxl.pattern54 = './assets/img/tiles/kenny/pattern_54.png';
auxl.pattern55 = './assets/img/tiles/kenny/pattern_55.png';
auxl.pattern56 = './assets/img/tiles/kenny/pattern_56.png';
auxl.pattern57 = './assets/img/tiles/kenny/pattern_57.png';
auxl.pattern58 = './assets/img/tiles/kenny/pattern_58.png';
auxl.pattern59 = './assets/img/tiles/kenny/pattern_59.png';
auxl.pattern60 = './assets/img/tiles/kenny/pattern_60.png';
auxl.pattern61 = './assets/img/tiles/kenny/pattern_61.png';
auxl.pattern62 = './assets/img/tiles/kenny/pattern_62.png';
auxl.pattern63 = './assets/img/tiles/kenny/pattern_63.png';
auxl.pattern64 = './assets/img/tiles/kenny/pattern_64.png';
auxl.pattern65 = './assets/img/tiles/kenny/pattern_65.png';
auxl.pattern66 = './assets/img/tiles/kenny/pattern_66.png';
auxl.pattern67 = './assets/img/tiles/kenny/pattern_67.png';
auxl.pattern68 = './assets/img/tiles/kenny/pattern_68.png';
auxl.pattern69 = './assets/img/tiles/kenny/pattern_69.png';
auxl.pattern70 = './assets/img/tiles/kenny/pattern_70.png';
auxl.pattern71 = './assets/img/tiles/kenny/pattern_71.png';
auxl.pattern72 = './assets/img/tiles/kenny/pattern_72.png';
auxl.pattern73 = './assets/img/tiles/kenny/pattern_73.png';
auxl.pattern74 = './assets/img/tiles/kenny/pattern_74.png';
auxl.pattern75 = './assets/img/tiles/kenny/pattern_75.png';
auxl.pattern76 = './assets/img/tiles/kenny/pattern_76.png';
auxl.pattern77 = './assets/img/tiles/kenny/pattern_77.png';
auxl.pattern78 = './assets/img/tiles/kenny/pattern_78.png';
auxl.pattern79 = './assets/img/tiles/kenny/pattern_79.png';
auxl.pattern80 = './assets/img/tiles/kenny/pattern_80.png';
auxl.pattern81 = './assets/img/tiles/kenny/pattern_81.png';
auxl.pattern82 = './assets/img/tiles/kenny/pattern_82.png';
auxl.pattern83 = './assets/img/tiles/kenny/pattern_83.png';
auxl.pattern84 = './assets/img/tiles/kenny/pattern_84.png';

auxl.patterns = [auxl.pattern01,auxl.pattern02,auxl.pattern03,auxl.pattern04,auxl.pattern05,auxl.pattern06,auxl.pattern07,auxl.pattern08,auxl.pattern09,auxl.pattern10,auxl.pattern11,auxl.pattern12,auxl.pattern13,auxl.pattern14,auxl.pattern15,auxl.pattern16,auxl.pattern17,auxl.pattern18,auxl.pattern19,auxl.pattern20,auxl.pattern21,auxl.pattern22,auxl.pattern23,auxl.pattern24,auxl.pattern25,auxl.pattern26,auxl.pattern27,auxl.pattern28,auxl.pattern29,auxl.pattern30,auxl.pattern31,auxl.pattern32,auxl.pattern33,auxl.pattern34,auxl.pattern35,auxl.pattern36,auxl.pattern37,auxl.pattern38,auxl.pattern39,auxl.pattern40,auxl.pattern41,auxl.pattern42,auxl.pattern43,auxl.pattern44,auxl.pattern45,auxl.pattern46,auxl.pattern47,auxl.pattern48,auxl.pattern49,auxl.pattern50,auxl.pattern51,auxl.pattern52,auxl.pattern53,auxl.pattern54,auxl.pattern55,auxl.pattern56,auxl.pattern57,auxl.pattern58,auxl.pattern59,auxl.pattern60,auxl.pattern61,auxl.pattern62,auxl.pattern63,auxl.pattern64,auxl.pattern65,auxl.pattern66,auxl.pattern67,auxl.pattern68,auxl.pattern69,auxl.pattern70,auxl.pattern71,auxl.pattern72,auxl.pattern73,auxl.pattern74,auxl.pattern75,auxl.pattern76,auxl.pattern77,auxl.pattern78,auxl.pattern79,auxl.pattern80,auxl.pattern81,auxl.pattern82,auxl.pattern83,auxl.pattern84];

//Grass Material
auxl.grassMaterial = {shader: "standard", color: "#55be71", opacity: 1, metalness: 0.1, roughness: 0.9, emissive: "#397e4b", emissiveIntensity: 0.2};

//Water Material
auxl.waterMaterial = {shader: "standard", color: "#55a5be", opacity: 1, metalness: 0.1, roughness: 0.9, emissive: "#65c3e0", emissiveIntensity: 0.2};

//ImageSwapper Materials
auxl.mat0 = {src: './assets/img/minty/4up.jpg', shader: "flat", color: "#FFFFFF", opacity: 1};
auxl.mat1 = {src: './assets/img/vwave/1.jpg', shader: "flat", color: "#FFFFFF", opacity: 1};
auxl.mat2 = {src: './assets/img/vwave/2.jpg', shader: "flat", color: "#FFFFFF", opacity: 1};
auxl.mat3 = {src: './assets/img/vwave/3.jpg', shader: "flat", color: "#FFFFFF", opacity: 1};
auxl.mat4 = {src: './assets/img/vwave/4.jpg', shader: "flat", color: "#FFFFFF", opacity: 1};

//
//Animations Library


//
//Player

//Rig
auxl.playerRigData = {
data:'playerRigData',
id:'playerRig',
entity: 'preAdded',
sources: false,
text: false,
geometry: false,
material: false,
position: new THREE.Vector3(0,0,1),
rotation: new THREE.Vector3(0,0	,0),
scale: new THREE.Vector3(1,1,1),
animations: false,
mixins: false,
classes: ['a-ent','player'],
components: {
['universal-controls']:null,
['locomotion']:{uiid: false, courserid: 'mouseController', movetype: 'desktop'},
//['gimbal']:{uiid: false, courserid: 'mouseController', movetype: 'desktop'},
light: {type: 'point', intensity: 0.075, distance: 5, decay:0.75},
},};
auxl.playerRig = auxl.Core(auxl.playerRigData);
//Player Body
auxl.playerBodyData = {
data:'playerBodyData',
id:'playerBody',
entity: 'preAdded',
sources: false,
text: false,
geometry: false,
material: false,
position: new THREE.Vector3(0,0,0),
rotation: new THREE.Vector3(0,1,0),
scale: new THREE.Vector3(1,1,1),
animations: {
crouchdownstanding: {property: 'object3D.position.y', from: 0, to: -0.75, dur: 750, delay: 0, loop: false, dir: 'normal', easing: 'easeInOutSine', elasticity: 400, autoplay: false, enabled: true, startEvents: 'crouchDownStanding'},
crouchupstanding: {property: 'object3D.position.y', from: -0.75, to: 0, dur: 750, delay: 0, loop: false, dir: 'normal', easing: 'easeInOutSine', elasticity: 400, autoplay: false, enabled: true, startEvents: 'crouchUpStanding'},

crouchdownsitting: {property: 'object3D.position.y', from: 0.75, to: 0, dur: 750, delay: 0, loop: false, dir: 'normal', easing: 'easeInOutSine', elasticity: 400, autoplay: false, enabled: true, startEvents: 'crouchDownSitting'},
crouchupsitting: {property: 'object3D.position.y', from: 0, to: 0.75, dur: 750, delay: 0, loop: false, dir: 'normal', easing: 'easeInOutSine', elasticity: 400, autoplay: false, enabled: true, startEvents: 'crouchUpSitting'},

sit: {property: 'object3D.position.y', from: 0, to: 0.75, dur: 750, delay: 0, loop: false, dir: 'normal', easing: 'easeInOutSine', elasticity: 400, autoplay: false, enabled: true, startEvents: 'sit'},
stand: {property: 'object3D.position.y', from: 0.75, to: 0, dur: 750, delay: 0, loop: false, dir: 'normal', easing: 'easeInOutSine', elasticity: 400, autoplay: false, enabled: true, startEvents: 'stand'},

},
mixins: false,
classes: ['a-ent','player'],
components: false,
};
auxl.playerBody = auxl.Core(auxl.playerBodyData);
//Camera
auxl.cameraData = {
data:'Camera Entity',
id:'camera',
entity: 'preAdded',
sources: false,
text: false,
geometry: false,
material: false,
position: new THREE.Vector3(0,1.6,0),
rotation: new THREE.Vector3(0,0,0),
scale: new THREE.Vector3(1,1,1),
animations: false,
mixins: false,
classes: ['a-ent','player'],
components: {
//['look-controls']:{enabled: true, reverseMouseDrag: false, reverseTouchDrag: false, touchEnabled: true, mouseEnabled: true, pointerLockEnabled: false, magicWindowTrackingEnabled: true},
['wasd-controls']:{enabled: false},
},};
auxl.camera = auxl.Core(auxl.cameraData);
//Camera UI
auxl.cameraUIData = {
data:'Camera UI',
id:'cameraUI',
sources: false,
text: {value:'Message', width: 0.5, color: "#FFFFFF", align: "center", font: "exo2bold", side: 'double', opacity: 0},
geometry: {primitive: 'plane', width: 0.3, height: 0.15},
material: {shader: "flat", color: "#ac2d2d", opacity: 0.69, side: 'both'},
position: new THREE.Vector3(0,0.05,-0.5),
rotation: new THREE.Vector3(0,0,0),
scale: new THREE.Vector3(1,1,1),
animations: {
opacinbk:{property: 'components.material.material.opacity', from: 0, to: 0.82, dur: 750, delay: 0, loop: 'false', dir: 'normal', easing: 'easeInOutSine', elasticity: 400, autoplay: false, enabled: true, startEvents: 'cameraMsg',}, 
opacoutbk:{property: 'components.material.material.opacity', from: 0.82, to: 0, dur: 750, delay: 2000, loop: 'false', dir: 'normal', easing: 'easeInOutSine', elasticity: 400, autoplay: false, enabled: true, startEvents: 'cameraMsg',},
opacintxt:{property: 'text.opacity', from: 0, to: 0.82, dur: 750, delay: 0, loop: 'false', dir: 'normal', easing: 'easeInOutSine', elasticity: 400, autoplay: false, enabled: true, startEvents: 'cameraMsg',}, 
opacouttxt:{property: 'text.opacity', from: 0.82, to: 0, dur: 750, delay: 2000, loop: 'false', dir: 'normal', easing: 'easeInOutSine', elasticity: 400, autoplay: false, enabled: true, startEvents: 'cameraMsg',},
},
mixins: false,
classes: ['a-ent','player'],
components: {
visible: false,
},
}
auxl.cameraUI = auxl.Core(auxl.cameraUIData);
//Mouse|Mobile Controller
auxl.mouseControllerData = {
data:'Mouse Controller',
id:'mouseController',
sources: false,
text: false,
geometry: {primitive: 'ring', radiusInner: 0.005, radiusOuter: 0.01},
material: {shader: "flat", color: "#228da7", opacity: 0.75, side: 'double'},
position: new THREE.Vector3(0,0,-0.5),
rotation: new THREE.Vector3(0,0,0),
scale: new THREE.Vector3(0.75,0.75,0.75),
animations: {
click:{property: 'scale', from: '0.75 0.75 0.75', to: '0.4 0.4 0.4', dur: 100, delay: 0, loop: 'false', dir: 'normal', easing: 'easeInCubic', elasticity: 400, autoplay: false, enabled: true, startEvents: 'mousedown'},
clickreset:{property: 'scale', from: '0.4 0.4 0.4', to: '0.75 0.75 0.75', dur: 300, delay: 0, loop: 'false', dir: 'normal', easing: 'easeOutCubic', elasticity: 400, autoplay: false, enabled: true, startEvents: 'mouseup'},
hoverenter:{property: 'material.color', from: '#228da7', to: '#22a741', dur: 1, delay: 0, loop: 'false', dir: 'normal', easing: 'easeInCubic', elasticity: 400, autoplay: false, enabled: true, startEvents: 'mouseenter'},
hoverleave:{property: 'material.color', from: '#22a741', to: '#228da7', dur: 1, delay: 0, loop: 'false', dir: 'normal', easing: 'easeInCubic', elasticity: 400, autoplay: false, enabled: true, startEvents: 'mouseleave'},
},
mixins: false,
classes: ['a-ent','player'],
components: {
raycaster:{enabled: 'true', autoRefresh: 'true', objects: '.clickable', origin: new THREE.Vector3(0,0,0), direction: new THREE.Vector3(0,0,-1), far: 'Infinity', near: 0, interval: 0, lineColor: 'red', lineOpacity: 0.5, showLine: 'false', useWorldCoordinates: 'false'},
cursor: {fuse: 'false', rayOrigin: 'mouseController', mouseCursorStylesEnabled: 'true'},
},};
auxl.mouseController = auxl.Core(auxl.mouseControllerData);
//VR Controller 1
auxl.vrController1Data = {
data:'vrController1Data',
id:'vrController1',
sources: false,
text: false,
geometry: {primitive: 'ring', radiusInner: 0.02, radiusOuter: 0.03},
material: {shader: "flat", color: "#228da7", opacity: 0.75, side: 'double'},
position: new THREE.Vector3(0,0,-1),
rotation: new THREE.Vector3(0,0,0),
scale: new THREE.Vector3(0.15,0.15,0.15),
animations: {
hoverenter:{property: 'raycaster.lineColor', from: '#228da7', to: '#22a741', dur: 1, delay: 0, loop: 'false', dir: 'normal', easing: 'easeInCubic', elasticity: 400, autoplay: false, enabled: true, startEvents: 'mouseenter'},
hoverleave:{property: 'raycaster.lineColor', from: '#22a741', to: '#228da7', dur: 1, delay: 0, loop: 'false', dir: 'normal', easing: 'easeInCubic', elasticity: 400, autoplay: false, enabled: true, startEvents: 'mouseleave'},
},
mixins: false,
classes: ['a-ent','player'],
components: {
//['vr-left-inputs']:{joystickEnabled: true},
visible: 'false',
},
};
auxl.vrController1 = auxl.Core(auxl.vrController1Data);
//VR Controller 1 UI
auxl.vrController1UIData = {
data:'vrController1UIData',
id:'vrController1UI',
sources: false,
text: {value:'...', width: 0.5, color: "#FFFFFF", align: "center", font: "exo2bold"},
geometry: {primitive: 'plane', width: 0.25, height: 0.1},
material: {shader: "flat", color: "#ac2d2d", opacity: 0.75, side: 'double'},
position: new THREE.Vector3(0,-0.25,-0.25),
rotation: new THREE.Vector3(-90,0,0),
scale: new THREE.Vector3(0.5,0.5,0.5),
animations: false,
mixins: false,
classes: ['a-ent','player'],
components: {visible: 'false',},
};
auxl.vrController1UI = auxl.Core(auxl.vrController1UIData);
//VR Controller 2
auxl.vrController2Data = {
data:'vrController2Data',
id:'vrController2',
sources: false,
text: false,
geometry: {primitive: 'ring', radiusInner: 0.02, radiusOuter: 0.03},
material: {shader: "flat", color: "#228da7", opacity: 0.75, side: 'double'},
position: new THREE.Vector3(0,0,-1),
rotation: new THREE.Vector3(0,0,0),
scale: new THREE.Vector3(0.15,0.15,0.15),
animations: {
hoverenter:{property: 'raycaster.lineColor', from: '#228da7', to: '#22a741', dur: 1, delay: 0, loop: 'false', dir: 'normal', easing: 'easeInCubic', elasticity: 400, autoplay: false, enabled: true, startEvents: 'mouseenter'},
hoverleave:{property: 'raycaster.lineColor', from: '#22a741', to: '#228da7', dur: 1, delay: 0, loop: 'false', dir: 'normal', easing: 'easeInCubic', elasticity: 400, autoplay: false, enabled: true, startEvents: 'mouseleave'},
},
mixins: false,
classes: ['a-ent','player'],
components: {
//['vr-right-inputs']:{joystickEnabled: true},
visible: 'false',
},
};
auxl.vrController2 = auxl.Core(auxl.vrController2Data);
//VR Controller 2 UI
auxl.vrController2UIData = {
data:'vrController2UIData',
id:'vrController2UI',
sources: false,
text: {value:'...', width: 0.5, color: "#FFFFFF", align: "center", font: "exo2bold"},
geometry: {primitive: 'plane', width: 0.25, height: 0.1},
material: {shader: "flat", color: "#ac2d2d", opacity: 0.75, side: 'double'},
position: new THREE.Vector3(0,-0.25,-0.25),
rotation: new THREE.Vector3(-90,0,0),
scale: new THREE.Vector3(0.5,0.5,0.5),
animations: false,
mixins: false,
classes: ['a-ent','player'],
components: {visible: 'false',},
};
auxl.vrController2UI = auxl.Core(auxl.vrController2UIData);
//Belt UI
auxl.playerBeltUIData = {
data:'playerBeltUIData',
id:'playerBeltUI',
sources:false,
text: false,
geometry: false,
material: false,
position: new THREE.Vector3(0,0,0),
rotation: new THREE.Vector3(0,0,0),
scale: new THREE.Vector3(1,1,1),
animations: false,
mixins: false,
classes: ['a-ent'],
components: {
	['look-at-xyz']:{match: 'camera', x:false, y:true, z:false},
},
};
auxl.playerBeltUI = auxl.Core(auxl.playerBeltUIData);
//Belt Text
auxl.playerBeltTextData = {
data:'playerBeltTextData',
id:'playerBeltText',
sources:false,
text: {value:'Hello World!', color: "#FFFFFF", align: "left", font: "exo2bold", width: 0.9, zOffset: 0.03, side: 'front', wrapCount: 45, baseline: 'center'},
geometry: {primitive: 'box', depth: 0.025, width: 1, height: 0.25},
material: {shader: "standard", color: "#4bb8c1", opacity: 0.75, metalness: 0.2, roughness: 0.8, emissive: "#4bb8c1", emissiveIntensity: 0.6},
position: new THREE.Vector3(0,0.69,-0.8),
rotation: new THREE.Vector3(-30,0,0),
scale: new THREE.Vector3(1,1,1),
animations: false,
mixins: false,
classes: ['a-ent'],
components: {
visible: false,
},
};
auxl.playerBeltText = auxl.Core(auxl.playerBeltTextData);
//Player Bottom
auxl.playerFloorData = {
data:'Player Floor',
id:'playerFloor',
sources: false,
text: false,
geometry: {primitive: 'circle', radius: 1, segments: 32, thetaStart: 0, thetaLength: 360},
material: {shader: "flat", src: './assets/img/compass/compass.jpg', repeat: '1 1', color: "#3EB489", opacity: 0.42, side: 'both'},
position: new THREE.Vector3(0,0.05,0),
rotation: new THREE.Vector3(-90,0,0),
scale: new THREE.Vector3(1,1,1),
animations: false,
mixins: false,
classes: ['a-ent','player', 'clickable'],
components: false,
};
auxl.playerFloor = auxl.Core(auxl.playerFloorData);
//Player Audio
auxl.playerAudioData = {
data:'playerAudioData',
id:'playerAudio',
sources: false,
text: false,
geometry: false,
material: false,
position: new THREE.Vector3(0,0,0),
rotation: new THREE.Vector3(0,0,0),
scale: new THREE.Vector3(1,1,1),
animations: false,
mixins: false,
classes: ['a-ent','player'],
components: false,
};
auxl.playerAudio = auxl.Core(auxl.playerAudioData);
//Teleportation Fade
auxl.fadeScreenData = {
data:'Fade Screen',
id:'fadeScreen',
sources: false,
text: false,
geometry: {primitive: 'plane', width: 1, height: 0.5},
material: {shader: "flat", color: '#000000', opacity: 0},
position: new THREE.Vector3(0,0,-0.15),
rotation: new THREE.Vector3(0,0,0),
scale: new THREE.Vector3(1,1,1),
animations: {
fadein:{property: 'components.material.material.opacity', from: 0, to: 1, dur: 400, delay: 0, loop: 'false', dir: 'normal', easing: 'easeOutSine', elasticity: 400, autoplay: false, enabled: true, startEvents: 'fade'},

fadeout:{property: 'components.material.material.opacity', from: 1, to: 0, dur: 400, delay: 800, loop: 'false', dir: 'normal', easing: 'easeInSine', elasticity: 400, autoplay: false, enabled: true, startEvents: 'fade'},


fadeinscene:{property: 'components.material.material.opacity', from: 0, to: 1, dur: 400, delay: 0, loop: 'false', dir: 'normal', easing: 'easeOutSine', elasticity: 400, autoplay: false, enabled: true, startEvents: 'fadeScene1'},

fadeoutscene:{property: 'components.material.material.opacity', from: 1, to: 0, dur: 400, delay: 0, loop: 'false', dir: 'normal', easing: 'easeInSine', elasticity: 400, autoplay: false, enabled: true, startEvents: 'fadeScene2'}, 

},
mixins: false,
classes: ['a-ent','player','clickable'],
components: {visible: false},
};
auxl.fadeScreen = auxl.Core(auxl.fadeScreenData);
//Teleportation Sphere
auxl.sphereScreenData = {
data:'Sphere Screen',
id:'sphereScreen',
sources: false,
text: false,
geometry: {primitive: 'sphere', radius: 0.125, segmentsWidth: 36, segmentsHeight: 18, phiLength: 360, phiStart: 0, thetaLength: 0, thetaStart: 90},
material: {shader: "flat", color: '#000000', opacity: 1, side: 'double'},
position: new THREE.Vector3(0,0,0),
rotation: new THREE.Vector3(0,0,0),
scale: new THREE.Vector3(1,1,1),
animations:{
spherein1:{property: 'geometry.thetaLength', from: 0, to: 180, dur: 400, delay: 0, loop: 'false', dir: 'normal', easing: 'easeInOutSine', elasticity: 400, autoplay: false, enabled: true, startEvents: 'sphere'},
spherein2: {property: 'geometry.thetaStart', from: 90, to: 0, dur: 400, delay: 0, loop: 'false', dir: 'normal', easing: 'easeInOutSine', elasticity: 400, autoplay: false, enabled: true, startEvents: 'sphere'},

sphereout1:{property: 'geometry.thetaLength', from: 180, to: 0, dur: 400, delay: 800, loop: 'false', dir: 'normal', easing: 'easeInOutSine', elasticity: 400, autoplay: false, enabled: true, startEvents: 'sphere'},
sphereout2: {property: 'geometry.thetaStart', from: 0, to: 90, dur: 400, delay: 800, loop: 'false', dir: 'normal', easing: 'easeInOutSine', elasticity: 400, autoplay: false, enabled: true, startEvents: 'sphere'},


spherein1scene:{property: 'geometry.thetaLength', from: 0, to: 180, dur: 400, delay: 0, loop: 'false', dir: 'normal', easing: 'easeInOutSine', elasticity: 400, autoplay: false, enabled: true, startEvents: 'sphereScene1'},
spherein2scene: {property: 'geometry.thetaStart', from: 90, to: 0, dur: 400, delay: 0, loop: 'false', dir: 'normal', easing: 'easeInOutSine', elasticity: 400, autoplay: false, enabled: true, startEvents: 'sphereScene1'},

sphereout1scene:{property: 'geometry.thetaLength', from: 180, to: 0, dur: 400, delay: 0, loop: 'false', dir: 'normal', easing: 'easeInOutSine', elasticity: 400, autoplay: false, enabled: true, startEvents: 'sphereScene2'},
sphereout2scene: {property: 'geometry.thetaStart', from: 0, to: 90, dur: 400, delay: 0, loop: 'false', dir: 'normal', easing: 'easeInOutSine', elasticity: 400, autoplay: false, enabled: true, startEvents: 'sphereScene2'},
},
mixins: false,
classes: ['a-ent','player'],
components: {visible: false},
};
auxl.sphereScreen = auxl.Core(auxl.sphereScreenData);
//Teleportation Blink 1
auxl.blink1ScreenData = {
data:'Blink 1 Screen',
id:'blink1Screen',
sources: false,
text: false,
geometry: {primitive: 'plane', width: 5, height: 2},
material: {shader: "flat", color: '#000000', opacity: 0, side: 'double'},
position: new THREE.Vector3(0,2.5,-0.15),
rotation: new THREE.Vector3(0,0,0),
scale: new THREE.Vector3(1,1,1),
animations:{
blinkin:{property: 'object3D.position.y', from: 2.5, to: 1, dur: 400, delay: 0, loop: 'false', dir: 'normal', easing: 'easeInOutSine', elasticity: 400, autoplay: false, enabled: true, startEvents: 'blink'},
blinkopacin: {property: 'components.material.material.opacity', from: 0, to: 1, dur: 400, delay: 0, loop: 'false', dir: 'normal', easing: 'easeInOutSine', elasticity: 400, autoplay: false, enabled: true, startEvents: 'blink'},

blinkout:{property: 'object3D.position.y', from: 1, to: 2.5, dur: 400, delay: 800, loop: 'false', dir: 'normal', easing: 'easeInOutSine', elasticity: 400, autoplay: false, enabled: true, startEvents: 'blink'},
blinkopacout: {property: 'components.material.material.opacity', from: 1, to: 0, dur: 400, delay: 800, loop: 'false', dir: 'normal', easing: 'easeInOutSine', elasticity: 400, autoplay: false, enabled: true, startEvents: 'blink'},


blinkinscene:{property: 'object3D.position.y', from: 2.5, to: 1, dur: 400, delay: 0, loop: 'false', dir: 'normal', easing: 'easeInOutSine', elasticity: 400, autoplay: false, enabled: true, startEvents: 'blinkScene1'},
blinkopacinscene: {property: 'components.material.material.opacity', from: 0, to: 1, dur: 400, delay: 0, loop: 'false', dir: 'normal', easing: 'easeInOutSine', elasticity: 400, autoplay: false, enabled: true, startEvents: 'blinkScene1'},

blinkoutscene:{property: 'object3D.position.y', from: 1, to: 2.5, dur: 400, delay: 0, loop: 'false', dir: 'normal', easing: 'easeInOutSine', elasticity: 400, autoplay: false, enabled: true, startEvents: 'blinkScene2'},
blinkopacoutscene: {property: 'components.material.material.opacity', from: 1, to: 0, dur: 400, delay: 0, loop: 'false', dir: 'normal', easing: 'easeInOutSine', elasticity: 400, autoplay: false, enabled: true, startEvents: 'blinkScene2'},
},
mixins: false,
classes: ['a-ent','player'],
components: {visible: false},
};
auxl.blink1Screen = auxl.Core(auxl.blink1ScreenData);
//Teleportation Blink 2
auxl.blink2ScreenData = {
data:'Blink 2 Screen',
id:'blink2Screen',
sources: false,
text: false,
geometry: {primitive: 'plane', width: 5, height: 2},
material: {shader: "flat", color: '#000000', opacity: 0, side: 'double'},
position: new THREE.Vector3(0,-2.5,-0.15),
rotation: new THREE.Vector3(0,0,0),
scale: new THREE.Vector3(1,1,1),
animations:{
blinkin:{property: 'object3D.position.y', from: -2.5, to: -1, dur: 400, delay: 0, loop: 'false', dir: 'normal', easing: 'easeInOutSine', elasticity: 400, autoplay: false, enabled: true, startEvents: 'blink'},
blinkopacin: {property: 'components.material.material.opacity', from: 0, to: 1, dur: 400, delay: 0, loop: 'false', dir: 'normal', easing: 'easeInOutSine', elasticity: 400, autoplay: false, enabled: true, startEvents: 'blink'},

blinkout:{property: 'object3D.position.y', from: -1, to: -2.5, dur: 400, delay: 800, loop: 'false', dir: 'normal', easing: 'easeInOutSine', elasticity: 400, autoplay: false, enabled: true, startEvents: 'blink'},
blinkopacout: {property: 'components.material.material.opacity', from: 1, to: 0, dur: 400, delay: 800, loop: 'false', dir: 'normal', easing: 'easeInOutSine', elasticity: 400, autoplay: false, enabled: true, startEvents: 'blink'},


blinkinscene:{property: 'object3D.position.y', from: -2.5, to: -1, dur: 400, delay: 0, loop: 'false', dir: 'normal', easing: 'easeInOutSine', elasticity: 400, autoplay: false, enabled: true, startEvents: 'blinkScene1'},
blinkopacinscene: {property: 'components.material.material.opacity', from: 0, to: 1, dur: 400, delay: 0, loop: 'false', dir: 'normal', easing: 'easeInOutSine', elasticity: 400, autoplay: false, enabled: true, startEvents: 'blinkScene1'},

blinkoutscene:{property: 'object3D.position.y', from: -1, to: -2.5, dur: 400, delay: 0, loop: 'false', dir: 'normal', easing: 'easeInOutSine', elasticity: 400, autoplay: false, enabled: true, startEvents: 'blinkScene2'},
blinkopacoutscene: {property: 'components.material.material.opacity', from: 1, to: 0, dur: 400, delay: 0, loop: 'false', dir: 'normal', easing: 'easeInOutSine', elasticity: 400, autoplay: false, enabled: true, startEvents: 'blinkScene2'},
},
mixins: false,
classes: ['a-ent','player'],
components: {visible: false},
};
auxl.blink2Screen = auxl.Core(auxl.blink2ScreenData);
//Player Layer
auxl.playerAll = {
parent: {core: auxl.playerRig},
child0: {
	parent: {core: auxl.playerBody},
	child0: {
		parent: {core: auxl.camera},
		child0: {core: auxl.mouseController},
		child1: {core: auxl.cameraUI},
		child2: {core: auxl.fadeScreen},
		child3: {core: auxl.sphereScreen},
		child4: {core: auxl.blink1Screen},
		child5: {core: auxl.blink2Screen},
	},
	child1: {
		parent: {core: auxl.vrController1},
		child0: {core: auxl.vrController1UI},
	},
	child2: {
		parent: {core: auxl.vrController2},
		child0: {core: auxl.vrController2UI},
	},
	child3: {
		parent: {core: auxl.playerBeltUI},
		child0: {core: auxl.playerBeltText},
	},
},
child1: {core: auxl.playerFloor},
}

//SPECIAL : Player Base and Child Camera entity are already in HTML and Layer has special exceptions for it
auxl.playerLayer = auxl.Layer('playerLayer', auxl.playerAll);

//Player
auxl.player = auxl.Player('player',auxl.playerLayer);

//
//Avatar

//Avatar Sphere Offset
auxl.avatarSphereData = {
data:'avatarSphereData',
id:'avatarSphere',
sources: false,
text: false,
geometry: false,
material: false,
position: new THREE.Vector3(0,0,0),
rotation: new THREE.Vector3(0,0,0),
scale: new THREE.Vector3(1,1,1),
animations: false,
mixins: false,
classes: ['a-ent','avatar'],
components: false,
};
auxl.avatarSphere = auxl.Core(auxl.avatarSphereData);

//Avatar Rig
auxl.avatarRigData = {
data:'avatarRigData',
id:'avatarRig',
sources: false,
text: false,
geometry: false,
material: false,
position: new THREE.Vector3(0,0,0),
rotation: new THREE.Vector3(0,1,0),
scale: new THREE.Vector3(1,1,1),
animations: false,
mixins: false,
classes: ['a-ent','avatar'],
components: {
light: {type: 'point', intensity: 0.075, distance: 5, decay:0.75},
},};
auxl.avatarRig = auxl.Core(auxl.avatarRigData);
//Avatar Body
auxl.avatarBodyData = {
data:'avatarBodyData',
id:'avatarBody',
sources: false,
text: false,
geometry: {primitive: 'box', depth: 0.95, width: 0.95, height: 1.5},
material: {shader: "standard", color: "#c1664b", opacity: 1, metalness: 0.2, roughness: 0.8, emissive: "#c1664b", emissiveIntensity: 0.6},
position: new THREE.Vector3(0,0.75,0),
rotation: new THREE.Vector3(0,0,0),
scale: new THREE.Vector3(1,1,1),
animations: false,
mixins: false,
classes: ['a-ent','avatar'],
components: false,
};
auxl.avatarBody = auxl.Core(auxl.avatarBodyData);
//Avatar Face
auxl.avatarFaceData = {
data:'avatarFaceData',
id:'avatarFace',
sources: false,
text: false,
geometry: {primitive: 'triangle', vertexA: new THREE.Vector3(0,0.5,0), vertexB: new THREE.Vector3(-0.5,-0.5,0), vertexC: new THREE.Vector3(0.5,-0.5,0),},
material: {shader: "standard", color: "#1fceac", opacity: 1, metalness: 0.2, roughness: 0.8, emissive: "#1fceac", emissiveIntensity: 0.6},
position: new THREE.Vector3(0,0.755,0),
rotation: new THREE.Vector3(-90,0,0),
scale: new THREE.Vector3(0.95,0.95,0.95),
animations: false,
mixins: false,
classes: ['a-ent','avatar'],
components: false,
};
auxl.avatarFace = auxl.Core(auxl.avatarFaceData);
//Avatar Hover
auxl.avatarHoverData = {
data:'avatarHoverData',
id:'avatarHover',
sources: false,
text: {value:'Avatar', width: 3, color: "#FFFFFF", align: "center", font: "exo2bold"},
geometry: {primitive: 'plane', width: 2, height: 2},
material: {shader: "standard", color: "#c1664b", opacity: 0.5, metalness: 0.2, roughness: 0.8, emissive: "#c1664b", emissiveIntensity: 0.6},
position: new THREE.Vector3(0,3,0),
rotation: new THREE.Vector3(0,0,0),
scale: new THREE.Vector3(1,1,1),
animations: false,
mixins: false,
classes: ['a-ent','avatar'],
components: false,
};
auxl.avatarHover = auxl.Core(auxl.avatarHoverData);
//Avatar
auxl.avatarData = {
parent: {core: auxl.avatarSphere},
child0: {
	parent: {core: auxl.avatarRig},
	child0: {
		parent: {core: auxl.avatarBody},
		child0: {core: auxl.avatarFace},
		child1: {core: auxl.avatarHover},
	},
},
}
auxl.avatar = auxl.Layer('avatar', auxl.avatarData);


//
//Belt Locomotion UI

//Belt Parent
auxl.beltUIParentData = {
data:'beltUIParentData',
id:'beltUIParent',
sources:false,
text: false,
geometry: false,
material: false,
position: new THREE.Vector3(0,0,0),
rotation: new THREE.Vector3(0,0,0),
scale: new THREE.Vector3(1,1,1),
animations: false,
mixins: false,
classes: ['nullParent','a-ent'],
components: false,
};
auxl.beltUIParent = auxl.Core(auxl.beltUIParentData);
//Locomotion Forward UI
auxl.locomotionForwardUIData = {
data:'locomotionForwardUIData',
id:'locomotionForwardUI',
sources:false,
text: false,
geometry: {primitive: 'cone', openEnded: true, height: 0.4, radiusBottom: 1.5, radiusTop: 2, segmentsHeight: 6, segmentsRadial: 24, thetaStart: 0, thetaLength: 360},
material: {shader: "flat", color: "#5c174b", opacity: 0.3, side: 'double'},
position: new THREE.Vector3(0,0.25,0),
rotation: new THREE.Vector3(0,0,0),
scale: new THREE.Vector3(1,1,1),
animations: {
brakeon: {property: 'object3D.position.y', from: 1, to: 0.25, dur: 1250, delay: 250, loop: false, dir: 'normal', easing: 'easeInOutSine', elasticity: 400, autoplay: false, enabled: true, startEvents: 'brakeOn'},
brakeoff: {property: 'object3D.position.y', from: 0.25, to: 1, dur: 700, delay: 100, loop: false, dir: 'normal', easing: 'easeInOutSine', elasticity: 400, autoplay: false, enabled: true, startEvents: 'brakeOff'},
},
mixins: false,
classes: ['clickable','a-ent'],
components: false,
};
auxl.locomotionForwardUI = auxl.Core(auxl.locomotionForwardUIData);
//Locomotion Reverse UI
auxl.locomotionReverseUIData = {
data:'locomotionReverseUIData',
id:'locomotionReverseUI',
sources:false,
text: false,
geometry: {primitive: 'cone', openEnded: true, height: 0.001, radiusBottom: 1.25, radiusTop: 1.5, segmentsHeight: 1, segmentsRadial: 24, thetaStart: 0, thetaLength: 360},
material: {shader: "flat", color: "#46113a", opacity: 0.3, side: 'double'},
position: new THREE.Vector3(0,0.1,0),
rotation: new THREE.Vector3(0,0,0),
scale: new THREE.Vector3(1,1,1),
animations: {
brakeon: {property: 'object3D.position.y', from: 0.75, to: 0.1, dur: 1150, delay: 350, loop: false, dir: 'normal', easing: 'easeInOutSine', elasticity: 400, autoplay: false, enabled: true, startEvents: 'brakeOn'},
brakeoff: {property: 'object3D.position.y', from: 0.1, to: 0.75, dur: 700, delay: 250, loop: false, dir: 'normal', easing: 'easeInOutSine', elasticity: 400, autoplay: false, enabled: true, startEvents: 'brakeOff'},
},
mixins: false,
classes: ['clickable','a-ent'],
components: false,
};
auxl.locomotionReverseUI = auxl.Core(auxl.locomotionReverseUIData);
//Locomotion Brake 1 UI
auxl.locomotionBrake1UIData = {
data:'locomotionBrake1UIData',
id:'locomotionBrake1UI',
sources:false,
text: false,
geometry: {primitive: 'cone', openEnded: true, height: 0.01, radiusBottom: 0.75, radiusTop: 1, segmentsHeight: 1, segmentsRadial: 8, thetaStart: 0, thetaLength: 30},
material: {shader: "flat", color: "red", opacity: 0.3, side: 'double'},
position: new THREE.Vector3(0,0.1,0),
rotation: new THREE.Vector3(0,0,0),
scale: new THREE.Vector3(1,1,1),
animations: {
brakeon: {property: 'object3D.position.y', from: 0.5, to: 0.1, dur: 1050, delay: 450, loop: false, dir: 'normal', easing: 'easeInOutSine', elasticity: 400, autoplay: false, enabled: true, startEvents: 'brakeOn'},
brakeoff: {property: 'object3D.position.y', from: 0.1, to: 0.5, dur: 1050, delay: 450, loop: false, dir: 'normal', easing: 'easeInOutSine', elasticity: 400, autoplay: false, enabled: true, startEvents: 'brakeOff'},
},
mixins: false,
classes: ['clickable','a-ent', 'directionBrake'],
components: false,
};
auxl.locomotionBrake1UI = auxl.Core(auxl.locomotionBrake1UIData);
//Locomotion Brake 2 UI
auxl.locomotionBrake2UIData = {
data:'locomotionBrake2UIData',
id:'locomotionBrake2UI',
sources:false,
text: false,
geometry: {primitive: 'cone', openEnded: true, height: 0.01, radiusBottom: 0.75, radiusTop: 1, segmentsHeight: 1, segmentsRadial: 8, thetaStart: 90, thetaLength: 30},
material: {shader: "flat", color: "red", opacity: 0.3, side: 'double'},
position: new THREE.Vector3(0,0.1,0),
rotation: new THREE.Vector3(0,0,0),
scale: new THREE.Vector3(1,1,1),
animations: {
brakeon: {property: 'object3D.position.y', from: 0.5, to: 0.1, dur: 1050, delay: 450, loop: false, dir: 'normal', easing: 'easeInOutSine', elasticity: 400, autoplay: false, enabled: true, startEvents: 'brakeOn'},
brakeoff: {property: 'object3D.position.y', from: 0.1, to: 0.5, dur: 1050, delay: 450, loop: false, dir: 'normal', easing: 'easeInOutSine', elasticity: 400, autoplay: false, enabled: true, startEvents: 'brakeOff'},
},
mixins: false,
classes: ['clickable','a-ent', 'directionBrake'],
components: false,
};
auxl.locomotionBrake2UI = auxl.Core(auxl.locomotionBrake2UIData);
//Locomotion Brake 3 UI
auxl.locomotionBrake3UIData = {
data:'locomotionBrake3UIData',
id:'locomotionBrake3UI',
sources:false,
text: false,
geometry: {primitive: 'cone', openEnded: true, height: 0.01, radiusBottom: 0.75, radiusTop: 1, segmentsHeight: 1, segmentsRadial: 8, thetaStart: 180, thetaLength: 30},
material: {shader: "flat", color: "red", opacity: 0.3, side: 'double'},
position: new THREE.Vector3(0,0.1,0),
rotation: new THREE.Vector3(0,0,0),
scale: new THREE.Vector3(1,1,1),
animations: {
brakeon: {property: 'object3D.position.y', from: 0.5, to: 0.1, dur: 1050, delay: 450, loop: false, dir: 'normal', easing: 'easeInOutSine', elasticity: 400, autoplay: false, enabled: true, startEvents: 'brakeOn'},
brakeoff: {property: 'object3D.position.y', from: 0.1, to: 0.5, dur: 1050, delay: 450, loop: false, dir: 'normal', easing: 'easeInOutSine', elasticity: 400, autoplay: false, enabled: true, startEvents: 'brakeOff'},
},
mixins: false,
classes: ['clickable','a-ent', 'directionBrake'],
components: false,
};
auxl.locomotionBrake3UI = auxl.Core(auxl.locomotionBrake3UIData);
//Locomotion Brake 4 UI
auxl.locomotionBrake4UIData = {
data:'locomotionBrake4UIData',
id:'locomotionBrake4UI',
sources:false,
text: false,
geometry: {primitive: 'cone', openEnded: true, height: 0.01, radiusBottom: 0.75, radiusTop: 1, segmentsHeight: 1, segmentsRadial: 8, thetaStart: 270, thetaLength: 30},
material: {shader: "flat", color: "red", opacity: 0.3, side: 'double'},
position: new THREE.Vector3(0,0.1,0),
rotation: new THREE.Vector3(0,0,0),
scale: new THREE.Vector3(1,1,1),
animations: {
brakeon: {property: 'object3D.position.y', from: 0.5, to: 0.1, dur: 1050, delay: 450, loop: false, dir: 'normal', easing: 'easeInOutSine', elasticity: 400, autoplay: false, enabled: true, startEvents: 'brakeOn'},
brakeoff: {property: 'object3D.position.y', from: 0.1, to: 0.5, dur: 1050, delay: 450, loop: false, dir: 'normal', easing: 'easeInOutSine', elasticity: 400, autoplay: false, enabled: true, startEvents: 'brakeOff'},
},
mixins: false,
classes: ['clickable','a-ent', 'directionBrake'],
components: false,
};
auxl.locomotionBrake4UI = auxl.Core(auxl.locomotionBrake4UIData);
//Locomotion Layer
auxl.locomotionUIAllData = {
	parent: {core: auxl.beltUIParent},
	child0: {core: auxl.locomotionForwardUI},
	child1: {core: auxl.locomotionReverseUI},
	child2: {core: auxl.locomotionBrake1UI},
	child3: {core: auxl.locomotionBrake2UI},
	child4: {core: auxl.locomotionBrake3UI},
	child5: {core: auxl.locomotionBrake4UI},
}
auxl.locomotionUILayer = auxl.Layer('locomotionUILayer', auxl.locomotionUIAllData);

//
//Null Parent Template
auxl.nullParentData = {
data:'nullParent',
id:'nullParent',
sources:false,
text: false,
geometry: false,
material: false,
position: new THREE.Vector3(0,0,0),
rotation: new THREE.Vector3(0,0,0),
scale: new THREE.Vector3(1,1,1),
animations: false,
mixins: false,
classes: ['nullParent','a-ent'],
components: false,
};

//
//Menu Button Base Template
auxl.menuBaseData = {
data:'menu part',
id:'menuBaseTemp',
sources:false,
text: {value:'Hmmm...', wrapCount: 20, color: "#FFFFFF", font: "exo2bold", zOffset: 0.025, side: 'double', align: "center", baseline: 'center'},
geometry: {primitive: 'box', depth: 0.04, width: 0.4, height: 0.15},
material: {shader: "standard", color: "#c1664b", opacity: 1, metalness: 0.2, roughness: 0.8, emissive: "#c1664b", emissiveIntensity: 0.6},
position: new THREE.Vector3(0,0,0),
rotation: new THREE.Vector3(0,0,0),
scale: new THREE.Vector3(1,1,1),
animations:{
click1:{property: 'scale', from: '1 1 1', to: '1.05 1.05 1.05', dur: 125, delay: 0, loop: '1', dir: 'alternate', easing: 'easeInOutElastic', elasticity: 400, autoplay: false, enabled: true, startEvents: 'click'},
click2:{property: 'material.emissiveIntensity', from: '0.6',to: '0.8', dur: 125, delay: 0, loop: '1', dir: 'alternate', easing: 'easeInOutElastic', elasticity: 400, autoplay: false, enabled: true, startEvents: 'click'},
},
mixins: false,
classes: ['clickable','a-ent'],
components: {
['stare']:{id: 'playerRig'},
},
};

//
//Multi Menu Button Base Template
auxl.menuCylinderData = {
data:'menuCylinderData',
id:'menuCylinder',
sources:false,
text: {value:'Menu', wrapCount: 20, color: "#FFFFFF", font: "exo2bold", zOffset: 0.025, side: 'double', align: "center", baseline: 'center'},
geometry: {primitive: 'circle', radius: 0.25, segments: 32, thetaStart: 0, thetaLength: 360},
material: {shader: "standard", color: "#c1664b", opacity: 1, metalness: 0.2, roughness: 0.8, emissive: "#c1664b", emissiveIntensity: 0.6, side: 'double'},
position: new THREE.Vector3(0,0,0),
rotation: new THREE.Vector3(0,0,0),
scale: new THREE.Vector3(1,1,1),
animations:{
click1:{property: 'scale', from: '1 1 1', to: '1.05 1.05 1.05', dur: 125, delay: 0, loop: '1', dir: 'alternate', easing: 'easeInOutElastic', elasticity: 400, autoplay: false, enabled: true, startEvents: 'click'},
},
mixins: false,
classes: ['clickable','a-ent'],
components: false,
};
//Multi-Menu Hover Text Display
auxl.menuHoverData = {
data:'menuHoverData',
id:'menuHover',
sources:false,
text: {value:'Menu', wrapCount: 40, color: "#FFFFFF", font: "exo2bold", zOffset: 0.025, side: 'double', align: "center", baseline: 'center'},
geometry: false,
material: false,
position: new THREE.Vector3(0,-0.25,0),
rotation: new THREE.Vector3(0,0,0),
scale: new THREE.Vector3(1,1,1),
animations: false,
mixins: false,
classes: ['a-ent'],
components: false,
};


//Build Multi-Menu
auxl.buildCoreData = {
data:'buildCoreData',
id:'buildCore',
sources:false,
text: {value:'Menu', wrapCount: 20, color: "#FFFFFF", font: "exo2bold", zOffset: 0.025, side: 'double', align: "center", baseline: 'center'},
geometry: {primitive: 'circle', radius: 0.25, segments: 32, thetaStart: 0, thetaLength: 360},
material: {shader: "standard", color: "#c1664b", opacity: 1, metalness: 0.2, roughness: 0.8, emissive: "#c1664b", emissiveIntensity: 0.6, side: 'double'},
position: new THREE.Vector3(0,0,0),
rotation: new THREE.Vector3(0,0,0),
scale: new THREE.Vector3(1,1,1),
animations:{
click1:{property: 'scale', from: '1 1 1', to: '1.05 1.05 1.05', dur: 125, delay: 0, loop: '1', dir: 'alternate', easing: 'easeInOutElastic', elasticity: 400, autoplay: false, enabled: true, startEvents: 'click'},
},
mixins: false,
classes: ['clickable','a-ent'],
components: false,
};
//Multi-Menu Hover Text Display
auxl.buildHoverData = {
data:'buildHoverData',
id:'buildHover',
sources:false,
text: {value:'Menu', wrapCount: 40, color: "#FFFFFF", font: "exo2bold", zOffset: 0.025, side: 'double', align: "center", baseline: 'center'},
geometry: false,
material: false,
position: new THREE.Vector3(0,-0.25,0),
rotation: new THREE.Vector3(0,0,0),
scale: new THREE.Vector3(1,1,1),
animations: false,
mixins: false,
classes: ['a-ent'],
components: false,
};

//
//Companion Shapes
//Should all be layers with a null parent for which main menu attaches to. This avoids conflicts with NPC events system activating when using the menu

//
//Ghost
//Parent
auxl.ghostParentData = {
data:'ghostParentData',
id:'ghostParent',
sources: false,
text: false,
geometry: false,
material: false,
position: new THREE.Vector3(2,1.5,0),
rotation: new THREE.Vector3(0,0,0),
scale: new THREE.Vector3(1,1,1),
animations: false,
mixins: false,
classes: ['a-ent'],
components: {
['stare']:{id: 'playerRig'},
},
};
auxl.ghostParent = auxl.Core(auxl.ghostParentData);
//All
auxl.ghostAllData = {
data:'ghostAllData',
id:'ghostAll',
sources: false,
text: false,
geometry: false,
material: false,
position: new THREE.Vector3(0,0,0),
rotation: new THREE.Vector3(0,0,0),
scale: new THREE.Vector3(0.75,0.75,0.75),
animations: false,
mixins: false,
classes: ['a-ent'],
components: false,
};
auxl.ghostAll = auxl.Core(auxl.ghostAllData);
//EyeSocket
auxl.eye1SocketData = {
data:'eye1SocketData',
id:'eye1Socket',
sources: false,
text: false,
geometry: {primitive: 'cylinder', radius: 0.175, height: 0.0125, openEnded: false, segmentsHeight: 2, segmentsRadial: 16, thetaStart: 0, thetaLength: 360},
material: {shader: "standard", color: "#fcfafd", emissive: '#fcfafd', emissiveIntensity: 0.25, opacity: 1, side: 'double', metalness: 0.2, roughness: 0.8},
position: new THREE.Vector3(-0.15,0.1,0.4),
rotation: new THREE.Vector3(90,0,0),
scale: new THREE.Vector3(0.75,1,1),
animations: {
powerup1: {property: 'material.color', to: '#1500fa', dur: 100, delay: 0, loop: false, dir: 'normal', easing: 'linear', elasticity: 400, autoplay: false, enabled: true, startEvents: 'poweredUp'},
powerup2: {property: 'material.emissive', to: '#1500fa', dur: 100, delay: 0, loop: false, dir: 'normal', easing: 'linear', elasticity: 400, autoplay: false, enabled: true, startEvents: 'poweredUp'},
powerdown1: {property: 'material.color', to: '#fcfafd', dur: 100, delay: 0, loop: false, dir: 'normal', easing: 'linear', elasticity: 400, autoplay: false, enabled: true, startEvents: 'poweredDown'},
powerdown2: {property: 'material.emissive', to: '#fcfafd', dur: 100, delay: 0, loop: false, dir: 'normal', easing: 'linear', elasticity: 400, autoplay: false, enabled: true, startEvents: 'poweredDown'},
},
mixins: false,
classes: ['a-ent'],
components: false,
};
auxl.eye1Socket = auxl.Core(auxl.eye1SocketData);
//Eye2Socket
auxl.eye2SocketData = auxl.coreDataFromTemplate(auxl.eye1SocketData, {id: 'eye2Socket', position: new THREE.Vector3(0.15,0.1,0.4)}, true);
auxl.eye2Socket = auxl.Core(auxl.eye2SocketData);
//Eye1Pupil
auxl.eye1PupilData = {
data:'eye1PupilData',
id:'eye1Pupil',
sources: false,
text: false,
geometry: {primitive: 'cylinder', radius: 0.1, height: 0.025, openEnded: false, segmentsHeight: 2, segmentsRadial: 16, thetaStart: 0, thetaLength: 360},
material: {shader: "standard", color: "#1500fa", emissive: '#1500fa', emissiveIntensity: 0.25, opacity: 1, side: 'double', metalness: 0.2, roughness: 0.8},
position: new THREE.Vector3(0,0.01,0),
rotation: new THREE.Vector3(0,0,0),
scale: new THREE.Vector3(1.25,1,1),
animations: {
lookdown: {property: 'position', to: new THREE.Vector3(0,0.01,0.07), dur: 100, delay: 0, loop: false, dir: 'normal', easing: 'easeInOutSine', elasticity: 400, autoplay: false, enabled: true, startEvents: 'lookDown'},
lookup: {property: 'position', to: new THREE.Vector3(0,0.01,-0.07), dur: 100, delay: 0, loop: false, dir: 'normal', easing: 'easeInOutSine', elasticity: 400, autoplay: false, enabled: true, startEvents: 'lookUp'},
lookright: {property: 'position', to: new THREE.Vector3(0.05,0.01,0), dur: 100, delay: 0, loop: false, dir: 'normal', easing: 'easeInOutSine', elasticity: 400, autoplay: false, enabled: true, startEvents: 'lookRight'},
lookleft: {property: 'position', to: new THREE.Vector3(-0.05,0.01,0), dur: 100, delay: 0, loop: false, dir: 'normal', easing: 'easeInOutSine', elasticity: 400, autoplay: false, enabled: true, startEvents: 'lookLeft'},

powerup1: {property: 'material.color', to: '#fcfafd', dur: 100, delay: 0, loop: false, dir: 'normal', easing: 'linear', elasticity: 400, autoplay: false, enabled: true, startEvents: 'poweredUp'},
powerup2: {property: 'material.emissive', to: '#fcfafd', dur: 100, delay: 0, loop: false, dir: 'normal', easing: 'linear', elasticity: 400, autoplay: false, enabled: true, startEvents: 'poweredUp'},
powerdown1: {property: 'material.color', to: '#1500fa', dur: 100, delay: 0, loop: false, dir: 'normal', easing: 'linear', elasticity: 400, autoplay: false, enabled: true, startEvents: 'poweredDown'},
powerdown2: {property: 'material.emissive', to: '#1500fa', dur: 100, delay: 0, loop: false, dir: 'normal', easing: 'linear', elasticity: 400, autoplay: false, enabled: true, startEvents: 'poweredDown'},
},
mixins: false,
classes: ['a-ent'],
components: false,
};
auxl.eye1Pupil = auxl.Core(auxl.eye1PupilData);
//Eye2Pupil
auxl.eye2PupilData = auxl.coreDataFromTemplate(auxl.eye1PupilData, {id: 'eye2Pupil',}, true);
auxl.eye2Pupil = auxl.Core(auxl.eye2PupilData);
//Mouth
auxl.mouthData = {
data:'mouthData',
id:'mouth',
sources: false,
text: false,
geometry: false,
material: false,
position: new THREE.Vector3(0,0,0),
rotation: new THREE.Vector3(0,0,0),
scale: new THREE.Vector3(1,1,1),
animations: {
powerup: {property: 'visible', to: true, dur: 100, delay: 0, loop: false, dir: 'normal', easing: 'linear', elasticity: 400, autoplay: false, enabled: true, startEvents: 'poweredUp'},
powerdown: {property: 'visible', to: false, dur: 100, delay: 0, loop: false, dir: 'normal', easing: 'linear', elasticity: 400, autoplay: false, enabled: true, startEvents: 'poweredDown'},
},
mixins: false,
classes: ['a-ent'],
components: {
visible: false,
line:{start: new THREE.Vector3(-0.3,-0.2,0.41), end: new THREE.Vector3(-0.2,-0.15,0.41), color: 'white'},
['line__2']:{start: new THREE.Vector3(-0.2,-0.15,0.41), end: new THREE.Vector3(-0.1,-0.2,0.41), color: 'white'},
['line__3']:{start: new THREE.Vector3(-0.1,-0.2,0.41), end: new THREE.Vector3(0,-0.15,0.41), color: 'white'},
['line__4']:{start: new THREE.Vector3(0,-0.15,0.41), end: new THREE.Vector3(0.1,-0.2,0.41), color: 'white'},
['line__5']:{start: new THREE.Vector3(0.1,-0.2,0.41), end: new THREE.Vector3(0.2,-0.15,0.41), color: 'white'},
['line__6']:{start: new THREE.Vector3(0.2,-0.15,0.41), end: new THREE.Vector3(0.3,-0.2,0.41), color: 'white'},
},
};
auxl.mouth = auxl.Core(auxl.mouthData);
//Spin
auxl.spinData = {
data:'spinData',
id:'spin',
sources: false,
text: false,
geometry: false,
material: false,
position: new THREE.Vector3(0,-0.1,0),
rotation: new THREE.Vector3(0,0,0),
scale: new THREE.Vector3(1,1,1),
animations: {
rotate: {property: 'object3D.rotation.y', from: 0, to: 360, dur: 1500, delay: 0, loop: true, dir: 'normal', easing: 'linear', elasticity: 400, autoplay: true, enabled: true},
},
mixins: false,
classes: ['a-ent'],
components: false,
};
auxl.spin = auxl.Core(auxl.spinData);
//Head
auxl.headData = {
data:'headData',
id:'head',
sources: false,
text: false,
geometry: {primitive: 'sphere', radius: 0.4, phiStart: 0, phiLength: 180, segmentsWidth: 16, segmentsHeight: 16, thetaStart: 0, thetaLength: 180},
material: {shader: "standard", color: "#C14B76", emissive: '#C14B76', emissiveIntensity: 0.25, opacity: 1, side: 'double', metalness: 0.2, roughness: 0.8},
position: new THREE.Vector3(0,0.15,0),
rotation: new THREE.Vector3(-90,0,0),
scale: new THREE.Vector3(1,1,1),
animations: {
powerup1: {property: 'material.color', to: '#1500fa', dur: 100, delay: 0, loop: false, dir: 'normal', easing: 'linear', elasticity: 400, autoplay: false, enabled: true, startEvents: 'poweredUp'},
powerup2: {property: 'material.emissive', to: '#1500fa', dur: 100, delay: 0, loop: false, dir: 'normal', easing: 'linear', elasticity: 400, autoplay: false, enabled: true, startEvents: 'poweredUp'},
powerdown1: {property: 'material.color', to: '#C14B76', dur: 100, delay: 0, loop: false, dir: 'normal', easing: 'linear', elasticity: 400, autoplay: false, enabled: true, startEvents: 'poweredDown'},
powerdown2: {property: 'material.emissive', to: '#C14B76', dur: 100, delay: 0, loop: false, dir: 'normal', easing: 'linear', elasticity: 400, autoplay: false, enabled: true, startEvents: 'poweredDown'},
},
mixins: false,
classes: ['clickable','a-ent'],
components: false,
};
auxl.head = auxl.Core(auxl.headData);
//Body
auxl.bodyData = {
data:'bodyData',
id:'body',
sources: false,
text: false,
geometry: {primitive: 'cylinder', radius: 0.4, height: 0.3, openEnded: false, segmentsHeight: 2, segmentsRadial: 32, thetaStart: 0, thetaLength: 360},
material: {shader: "standard", color: "#C14B76", emissive: '#C14B76', emissiveIntensity: 0.25, opacity: 1, side: 'double', metalness: 0.2, roughness: 0.8},
position: new THREE.Vector3(0,0,0),
rotation: new THREE.Vector3(0,0,0),
scale: new THREE.Vector3(1,1,1),
animations: {
powerup1: {property: 'material.color', to: '#1500fa', dur: 100, delay: 0, loop: false, dir: 'normal', easing: 'linear', elasticity: 400, autoplay: false, enabled: true, startEvents: 'poweredUp'},
powerup2: {property: 'material.emissive', to: '#1500fa', dur: 100, delay: 0, loop: false, dir: 'normal', easing: 'linear', elasticity: 400, autoplay: false, enabled: true, startEvents: 'poweredUp'},
powerdown1: {property: 'material.color', to: '#C14B76', dur: 100, delay: 0, loop: false, dir: 'normal', easing: 'linear', elasticity: 400, autoplay: false, enabled: true, startEvents: 'poweredDown'},
powerdown2: {property: 'material.emissive', to: '#C14B76', dur: 100, delay: 0, loop: false, dir: 'normal', easing: 'linear', elasticity: 400, autoplay: false, enabled: true, startEvents: 'poweredDown'},
},
mixins: false,
classes: ['clickable','a-ent'],
components: false,
};
auxl.body = auxl.Core(auxl.bodyData);
//Legs
auxl.legData = {
data:'legData',
id:'leg',
sources: false,
text: false,
geometry: {primitive: 'cone', radiusBottom: 0, radiusTop: 0.15, height: 0.2, openEnded: false, segmentsHeight: 4, segmentsRadial: 8, thetaStart: 0, thetaLength: 360},
material: {shader: "standard", color: "#C14B76", emissive: '#C14B76', emissiveIntensity: 0.25, opacity: 1, side: 'double', metalness: 0.2, roughness: 0.8},
position: new THREE.Vector3(-0.25,-0.25,0),
rotation: new THREE.Vector3(0,0,0),
scale: new THREE.Vector3(1,1,1),
animations: {
powerup1: {property: 'material.color', to: '#1500fa', dur: 100, delay: 0, loop: false, dir: 'normal', easing: 'linear', elasticity: 400, autoplay: false, enabled: true, startEvents: 'poweredUp'},
powerup2: {property: 'material.emissive', to: '#1500fa', dur: 100, delay: 0, loop: false, dir: 'normal', easing: 'linear', elasticity: 400, autoplay: false, enabled: true, startEvents: 'poweredUp'},
powerdown1: {property: 'material.color', to: '#C14B76', dur: 100, delay: 0, loop: false, dir: 'normal', easing: 'linear', elasticity: 400, autoplay: false, enabled: true, startEvents: 'poweredDown'},
powerdown2: {property: 'material.emissive', to: '#C14B76', dur: 100, delay: 0, loop: false, dir: 'normal', easing: 'linear', elasticity: 400, autoplay: false, enabled: true, startEvents: 'poweredDown'},
},
mixins: false,
classes: ['a-ent'],
components: false,
};
//Leg 1
auxl.leg1Data = auxl.coreDataFromTemplate(auxl.legData, {id: 'leg1',}, true);
auxl.leg1 = auxl.Core(auxl.leg1Data);
//Leg 2
auxl.leg2Data = auxl.coreDataFromTemplate(auxl.legData, {id: 'leg2', position: new THREE.Vector3(0.25,-0.25,0)}, true);
auxl.leg2 = auxl.Core(auxl.leg2Data);
//Leg 3
auxl.leg3Data = auxl.coreDataFromTemplate(auxl.legData, {id: 'leg3', position: new THREE.Vector3(0,-0.25,-0.25)}, true);
auxl.leg3 = auxl.Core(auxl.leg3Data);
//Leg 4
auxl.leg4Data = auxl.coreDataFromTemplate(auxl.legData, {id: 'leg4', position: new THREE.Vector3(0,-0.25,0.25)}, true);
auxl.leg4 = auxl.Core(auxl.leg4Data);
//Ghost Layer
auxl.ghostLayerData = {
	parent: {core: auxl.ghostParent}, 
	child0: {
		parent: {core: auxl.ghostAll}, 
		child0: {
			parent: {core: auxl.eye1Socket}, 
			child0: {core: auxl.eye1Pupil}, 
		}, 
		child1: {
			parent: {core: auxl.eye2Socket}, 
			child0: {core: auxl.eye2Pupil}, 
		}, 
		child2: {core: auxl.mouth},
		child3: {
			parent: {core: auxl.spin}, 
			child0: {core: auxl.head}, 
			child1: {core: auxl.body}, 
			child2: {core: auxl.leg1}, 
			child3: {core: auxl.leg2}, 
			child4: {core: auxl.leg3}, 
			child5: {core: auxl.leg4}, 
		}, 
	}, 

}
auxl.ghost = auxl.Layer('ghost',auxl.ghostLayerData);

//
//Basic Cube
auxl.compCubeParentData = {
data:'compCubeParentData',
id:'compCubeParent',
sources:false,
text: false,
geometry: false,
material: false,
position: new THREE.Vector3(2,1.5,0),
rotation: new THREE.Vector3(0,0,0),
scale: new THREE.Vector3(1,1,1),
animations:false,
mixins: false,
classes: ['a-ent'],
components: {
['stare']:{id: 'playerRig'},
},
};
auxl.compCubeParent = auxl.Core(auxl.compCubeParentData);
auxl.compCubeData = {
data:'compCubeData',
id:'compCube',
sources:false,
text: {value:'Menu', width: 3, color: "#FFFFFF", align: "center", font: "exo2bold", zOffset: 0.135, side: 'double'},
geometry: {primitive: 'box', depth: 0.25, width: 0.25, height: 0.25},
material: {src: './assets/img/minty/4up.jpg', shader: "flat", color: "#FFFFFF", opacity: 1},
position: new THREE.Vector3(0,0,0),
rotation: new THREE.Vector3(0,0,0),
scale: new THREE.Vector3(1,1,1),
animations:false,
mixins: false,
classes: ['clickable','a-ent'],
components: false,
};
auxl.compCube = auxl.Core(auxl.compCubeData);
auxl.cubeLayerData = {
	parent: {core: auxl.compCubeParent},
	child0: {core: auxl.compCube}, 
}
auxl.compCubeLayer = auxl.Layer('compCubeLayer',auxl.cubeLayerData);

//
//Basic Sphere
auxl.compSphereParentData = {
data:'compSphereParentData',
id:'compSphereParent',
sources:false,
text: false,
geometry: false,
material: false,
position: new THREE.Vector3(2,1.5,0),
rotation: new THREE.Vector3(0,0,0),
scale: new THREE.Vector3(1,1,1),
animations:false,
mixins: false,
classes: ['a-ent'],
components: {
['stare']:{id: 'playerRig'},
},
};
auxl.compSphereParent = auxl.Core(auxl.compSphereParentData);
auxl.compSphereData = {
data:'compSphereData',
id:'compSphere',
sources:false,
text: {value:'Menu', width: 3, color: "#FFFFFF", align: "center", font: "exo2bold", zOffset: 0.26, side: 'double'},
geometry: {primitive: 'sphere', radius: 0.25},
material: {src: './assets/img/minty/4up.jpg', shader: "flat", color: "#FFFFFF", opacity: 1},
position: new THREE.Vector3(0,0,0),
rotation: new THREE.Vector3(0,0,0),
scale: new THREE.Vector3(1,1,1),
animations:false,
mixins: false,
classes: ['clickable','a-ent'],
components: false,
};
auxl.compSphere = auxl.Core(auxl.compSphereData);
auxl.compSphereLayerData = {
	parent: {core: auxl.compSphereParent},
	child0: {core: auxl.compSphere}, 
}
auxl.compSphereLayer = auxl.Layer('compSphereLayer',auxl.compSphereLayerData);


//
//Companion Bubble, Book & Pages

//Bubble
auxl.compBubbleParentData = {
data:'compBubbleParentData',
id:'compBubbleParent',
sources:false,
text: {value:'... ... ...', color: "#FFFFFF", align: "left", font: "exo2bold", width: 0.75, zOffset: 0.025, side: 'front', wrapCount: 35, baseline: 'center'},
geometry: {primitive: 'box', depth: 0.025, width: 0.8, height: 0.15},
material: {shader: "standard", color: "#4bb8c1", opacity: 1, metalness: 0.2, roughness: 0.8, emissive: "#4bb8c1", emissiveIntensity: 0.6},
position: new THREE.Vector3(0,0.45,-0.05),
rotation: new THREE.Vector3(0,0,0),
scale: new THREE.Vector3(0.01,0.01,0.01),
animations: {
loadin: {property: 'scale', from: new THREE.Vector3(0.01,0.01,0.01), to: new THREE.Vector3(1,1,1), dur: 1000, delay: 0, loop: false, dir: 'normal', easing: 'easeOutElastic', elasticity: 400, autoplay: false, enabled: true, startEvents: 'loadin'},
loadout: {property: 'scale', from: new THREE.Vector3(1,1,1), to: new THREE.Vector3(0.01,0.01,0.01), dur: 1000, delay: 0, loop: false, dir: 'normal', easing: 'easeInElastic', elasticity: 400, autoplay: false, enabled: true, startEvents: 'loadout'},
},
mixins: false,
classes: ['clickable','a-ent'],
components: false,
};
auxl.compBubbleParent = auxl.Core(auxl.compBubbleParentData);
//Speech Close
auxl.compBubbleCloseData = {
data:'compBubbleCloseData',
id:'compBubbleClose',
sources:false,
text: {value:'X', color: "#FFFFFF", align: "center", font: "exo2bold", zOffset: 0.025, side: 'front', wrapCount: 2, baseline: 'center'},
geometry: {primitive: 'box', depth: 0.025, width: 0.08, height: 0.08},
material: {shader: "standard", color: "#4bb8c1", opacity: 1, metalness: 0.2, roughness: 0.8, emissive: "#4bb8c1", emissiveIntensity: 0.6},
position: new THREE.Vector3(0.5,0.06,-0.05),
rotation: new THREE.Vector3(0,0,0),
scale: new THREE.Vector3(0.01,0.01,0.01),
animations: {
loadin: {property: 'scale', from: new THREE.Vector3(0.01,0.01,0.01), to: new THREE.Vector3(1,1,1), dur: 1000, delay: 0, loop: false, dir: 'normal', easing: 'easeOutElastic', elasticity: 400, autoplay: false, enabled: true, startEvents: 'loadin'},
loadout: {property: 'scale', from: new THREE.Vector3(1,1,1), to: new THREE.Vector3(0.01,0.01,0.01), dur: 1000, delay: 0, loop: false, dir: 'normal', easing: 'easeInElastic', elasticity: 400, autoplay: false, enabled: true, startEvents: 'loadout'},

hoveron: {property: 'text.color', to: '#000000', dur: 100, delay: 0, loop: false, dir: 'normal', easing: 'easeInOutSine', elasticity: 400, autoplay: false, enabled: true, startEvents: 'mouseenter'},
hoveroff: {property: 'text.color', to: '#ffffff', dur: 100, delay: 0, loop: false, dir: 'normal', easing: 'easeInOutSine', elasticity: 400, autoplay: false, enabled: true, startEvents: 'mouseleave'},

click: {property: 'scale', from: '1 1 1', to: '1.25 1.25 1.25', dur: 125, delay: 0, loop: '1', dir: 'alternate', easing: 'easeInOutElastic', elasticity: 400, autoplay: false, enabled: true, startEvents: 'click'},
},
mixins: false,
classes: ['clickable','a-ent'],
components: false,
};
auxl.compBubbleClose = auxl.Core(auxl.compBubbleCloseData);
//Speech Reset
auxl.compBubbleResetData = {
data:'compBubbleResetData',
id:'compBubbleReset',
sources:false,
text: {value:'@', color: "#FFFFFF", align: "center", font: "exo2bold", zOffset: 0.025, side: 'front', wrapCount: 2, baseline: 'center'},
geometry: {primitive: 'box', depth: 0.025, width: 0.08, height: 0.08},
material: {shader: "standard", color: "#4bb8c1", opacity: 1, metalness: 0.2, roughness: 0.8, emissive: "#4bb8c1", emissiveIntensity: 0.6},
position: new THREE.Vector3(0.5,-0.04,-0.05),
rotation: new THREE.Vector3(0,0,0),
scale: new THREE.Vector3(0.01,0.01,0.01),
animations: {
loadin: {property: 'scale', from: new THREE.Vector3(0.01,0.01,0.01), to: new THREE.Vector3(1,1,1), dur: 1000, delay: 0, loop: false, dir: 'normal', easing: 'easeOutElastic', elasticity: 400, autoplay: false, enabled: true, startEvents: 'loadin'},
loadout: {property: 'scale', from: new THREE.Vector3(1,1,1), to: new THREE.Vector3(0.01,0.01,0.01), dur: 1000, delay: 0, loop: false, dir: 'normal', easing: 'easeInElastic', elasticity: 400, autoplay: false, enabled: true, startEvents: 'loadout'},

hoveron: {property: 'text.color', to: '#000000', dur: 100, delay: 0, loop: false, dir: 'normal', easing: 'easeInOutSine', elasticity: 400, autoplay: false, enabled: true, startEvents: 'mouseenter'},
hoveroff: {property: 'text.color', to: '#ffffff', dur: 100, delay: 0, loop: false, dir: 'normal', easing: 'easeInOutSine', elasticity: 400, autoplay: false, enabled: true, startEvents: 'mouseleave'},

click: {property: 'scale', from: '1 1 1', to: '1.25 1.25 1.25', dur: 125, delay: 0, loop: '1', dir: 'alternate', easing: 'easeInOutElastic', elasticity: 400, autoplay: false, enabled: true, startEvents: 'click'},
},
mixins: false,
classes: ['clickable','a-ent'],
components: false,
};
auxl.compBubbleReset = auxl.Core(auxl.compBubbleResetData);
//Comp Bubble Layer
auxl.compBubbleLayerData = {
	parent: {core: auxl.compBubbleParent}, 
	child0: {core: auxl.compBubbleClose}, 
	child1: {core: auxl.compBubbleReset}, 
}
auxl.compBubbleLayer = auxl.Layer('compBubbleLayer',auxl.compBubbleLayerData);
//Comp Book
auxl.compPage0Data = {
	info:{
		id:'compPage0',
		description:'Companion page 0.',
		tags:'comp',
		nextPage: null,
		prevPage: null,
		timeline:'linear',
	},
	timeline0:{
		self:{Speak:{speech:'Hey there!'},},
	},
	timeline1:{
		self:{Speak:{speech:'Having fun?'},},
	},
	timeline2:{
		self:{Speak:{speech:'Lets look around.'},},
	},
	timeline3:{
		self:{Speak:{speech:'Whats over there?'}},
	},
	timeline4:{
		self:{Speak:{speech:'Now... where was that cookie I was eating?'}},
	},
	timeline5:{
		self:{Speak:{speech:'Found it!'}},
	},
	timeline6:{
		self: {NewPage: true},
	},
};
auxl.compPage1Data = {
	info:{
		id:'compPage1',
		description:'Companion page 1.',
		tags:'comp',
		nextPage: null,
		prevPage: null,
		timeline:'linear',
	},
	timeline0:{
		self:{Speak:{speech:'2 Hey there!'},},
	},
	timeline1:{
		self:{Speak:{speech:'2 Having fun?'},},
	},
	timeline2:{
		self:{Speak:{speech:'2 Lets look around.'},},
	},
	timeline3:{
		self:{Speak:{speech:'2 Whats over there?'}},
	},
	timeline4:{
		self:{Speak:{speech:'2 Now... where was that cookie I was eating?'}},
	},
	timeline5:{
		self:{Speak:{speech:'2 Found it!'}},
	},
	timeline6:{
		self: {ResetBook: true},
	},
};
auxl.compIdleData = {
	info:{
		id:'compIdleData',
		description:'Companion idle page.',
		tags:'comp',
		nextPage: null,
		prevPage: null,
		timeline:'random',
	},
	timeline0:{
		self:{Speak:{speech:'Yo ho ho ho and a bottle of rum for me...'}},
	},
	timeline1:{
		self:{Speak:{speech:'Ooh a piece of candy!'}},
	},
	timeline2:{
		self:{Speak:{speech:'Nom nom nom nom...'}},
	},
	timeline3:{
		self:{Speak:{speech:'Yada yada yada...'}},
	},
	timeline4:{
		self:{Speak:{speech:'Whistle whistle whistle...'}},
	},
	timeline5:{
		self:{Speak:{speech:'16 16 16...'}},
	},
	timeline6:{
		self:{Speak:{speech:'Twinkle twinkle little star...'}},
	},
	timeline7:{
		self: {IdleReset: true},
	},
};
auxl.compBookData = {
	info:{
		id:'compBook',
		name: 'Comp',
		description:'Companion book.',
		tags:'comp',
		timeline: 'other',
		idleDelay: 5000,
		idleInterval: 7000,
	},
	pages:{
		page0: auxl.compPage0Data,
		page1: auxl.compPage1Data,
	},
	idle:{
		page0: auxl.compIdleData,
	},
};

//
//Companion
auxl.comp = auxl.Companion('comp',auxl.ghost);

//
//Control Configuration View
auxl.configurationViewData = {
data:'configurationViewData',
id:'configurationView',
sources:false,
text: {value:'Controls', color: "#FFFFFF", align: "left", font: "exo2bold", width: 1.9, zOffset: 0.025, side: 'front', wrapCount: 75, baseline: 'center'},
geometry: {primitive: 'box', depth: 0.025, width: 2, height: 1},
material: {shader: "standard", color: "#4bb8c1", opacity: 1, metalness: 0.2, roughness: 0.8, emissive: "#4bb8c1", emissiveIntensity: 0.6},
position: new THREE.Vector3(0,1.5,-2),
rotation: new THREE.Vector3(0,0,0),
scale: new THREE.Vector3(1,1,1),
animations: false,
mixins: false,
classes: ['clickable','a-ent'],
components:{
clickrun:{cursorObj: 'comp', method: 'ToggleControlView'}, 
//['look-at-xyz']:{match: 'camera', y:true},
['stare']:{id: 'playerRig', twist: true},
},
};
auxl.configurationView = auxl.Core(auxl.configurationViewData);

//
//Text Bubbles

//Scene Text Bubble Template
auxl.sceneTextData = {
data:'Scene display text.',
id:'sceneText',
sources:false,
text: {value:'... ... ...', color: "#FFFFFF", align: "left", font: "exo2bold", width: 1.9, zOffset: 0.025, side: 'front', wrapCount: 75, baseline: 'center'},
geometry: {primitive: 'box', depth: 0.025, width: 2, height: 0.3},
material: {shader: "standard", color: "#4bb8c1", opacity: 1, metalness: 0.2, roughness: 0.8, emissive: "#4bb8c1", emissiveIntensity: 0.6},
position: new THREE.Vector3(0,0.69,-0.8),
rotation: new THREE.Vector3(-30,0,0),
scale: new THREE.Vector3(1,1,1),
animations: false,
mixins: false,
classes: ['clickable','a-ent'],
components: false,
};
//Side Text Bubble Template
auxl.textBubbleSideData = {
data:'text bubble to the side of user/character',
id:'textBubbleSide',
sources:false,
text: {value:'... ... ...', color: "#FFFFFF", align: "left", font: "exo2bold", width: 0.45, zOffset: 0.025, side: 'front', wrapCount: 45, baseline: 'center'},
geometry: {primitive: 'box', depth: 0.025, width: 0.5, height: 0.15},
material: {shader: "standard", color: "#4bb8c1", opacity: 1, metalness: 0.2, roughness: 0.8, emissive: "#4bb8c1", emissiveIntensity: 0.6},
position: new THREE.Vector3(0.375,1.7,-0.65),
rotation: new THREE.Vector3(5,0,0),
scale: new THREE.Vector3(1,1,1),
animations: false,
mixins: false,
classes: ['clickable','a-ent'],
components: false,
};
auxl.textBubbleSide = auxl.Core(auxl.textBubbleSideData);
//Bottom Text Bubble Template
auxl.textBubbleBottomData = {
data:'text bubble on bottom',
id:'textBubbleBottom',
sources:false,
text: {value:'... ... ...', color: "#FFFFFF", align: "left", font: "exo2bold", width: 1.9, zOffset: 0.025, side: 'front', wrapCount: 75, baseline: 'center'},
geometry: {primitive: 'box', depth: 0.025, width: 2, height: 0.3},
material: {shader: "standard", color: "#4bb8c1", opacity: 1, metalness: 0.2, roughness: 0.8, emissive: "#4bb8c1", emissiveIntensity: 0.6},
position: new THREE.Vector3(0,0.69,-0.8),
rotation: new THREE.Vector3(-30,0,0),
scale: new THREE.Vector3(1,1,1),
animations: false,
mixins: false,
classes: ['clickable','a-ent'],
components: false,
};
auxl.textBubbleBottom = auxl.Core(auxl.textBubbleBottomData);
//Top Text Bubble Template
auxl.textBubbleTopData = {
data:'text bubble on top',
id:'textBubbleTop',
sources:false,
text: {value:'... ... ...', color: "#FFFFFF", align: "left", font: "exo2bold", width: 1.9, zOffset: 0.025, side: 'front', wrapCount: 75, baseline: 'center'},
geometry: {primitive: 'box', depth: 0.025, width: 2, height: 0.3},
material: {shader: "standard", color: "#4bb8c1", opacity: 1, metalness: 0.2, roughness: 0.8, emissive: "#4bb8c1", emissiveIntensity: 0.6},
position: new THREE.Vector3(0,2.05,-1.25),
rotation: new THREE.Vector3(15,0,0),
scale: new THREE.Vector3(1,1,1),
animations: false,
mixins: false,
classes: ['clickable','a-ent'],
components: false,
};
auxl.textBubbleTop = auxl.Core(auxl.textBubbleTopData);

//
//Details & Prompt

//Detail Main View
auxl.detailMainData = {
data:'detailMainData',
id:'detailMain',
sources:false,
text: {value:'Details...', color: "#FFFFFF", align: "center", font: "exo2bold", zOffset: 0.065, side: 'double'},
geometry: {primitive: 'box', depth: 0.1, width: 1, height: 1},
material: {shader: "standard", color: "#4bb8c1", opacity: 1, metalness: 0.2, roughness: 0.8, emissive: "#4bb8c1", emissiveIntensity: 0.6},
position: new THREE.Vector3(0,1.5,-1.5),
rotation: new THREE.Vector3(0,0,0),
scale: new THREE.Vector3(0,0,0),
animations:{opening:{property: 'scale', from: '0.001 0.001 0.001', to: '1 1 1', dur: 500, delay: 50, loop: 'false', dir: 'linear', easing: 'easeInOutElastic', elasticity: 400, autoplay: true, enabled: true, startEvents: 'open'}, close: {property: 'scale', from: '1 1 1', to: '0.001 0.001 0.001', dur: 500, delay: 50, loop: false, dir: 'linear', easing: 'easeInOutElastic', elasticity: 400, autoplay: false, enabled: true, startEvents: 'close'}},
mixins: false,
classes: ['a-ent'],
components: {
//detailprompt:{type: 'detail'},
['stare']:{id: 'playerRig'},
},
};
//Detail Close Button
auxl.detailCloseData = {
data:'detailCloseData',
id:'detailClose',
sources:false,
text: {value:'X', width: 3, color: "#FFFFFF", align: "center", font: "exo2bold", zOffset: 0.065, side: 'double'},
geometry: {primitive: 'box', depth: 0.1, width: 0.25, height: 0.25},
material: {shader: "standard", color: "#c14b4b", opacity: 1, metalness: 0.2, roughness: 0.8, emissive: "#c14b4b", emissiveIntensity: 0.6},
position: new THREE.Vector3(0.5,0.5,0.05),
rotation: new THREE.Vector3(0,0,0),
scale: new THREE.Vector3(0,0,0),
animations:{opening:{property: 'scale', from: '0.001 0.001 0.001', to: '1 1 1', dur: 500, delay: 50, loop: 'false', dir: 'linear', easing: 'easeInOutElastic', elasticity: 400, autoplay: true, enabled: true, startEvents: 'open'}, close: {property: 'scale', from: '1 1 1', to: '0.001 0.001 0.001', dur: 500, delay: 50, loop: false, dir: 'linear', easing: 'easeInOutElastic', elasticity: 400, autoplay: false, enabled: true, startEvents: 'close'}},
mixins: false,
classes: ['clickable','a-ent'],
//components: {detailprompt:{type: 'detail'}},
components: false,
};

//
//Teleportation

//Parent
auxl.teleportParentData = {
data:'teleportParentData',
id:'teleportParent',
sources:false,
text: false,
geometry: false,
material: false,
position: new THREE.Vector3(0,0.025,0),
rotation: new THREE.Vector3(-90,0,0),
scale: new THREE.Vector3(1,1,1),
animations: {
click1pos: {property: 'object3D.position.y', from: 0.025, to: 0.75, dur: 2000, delay: 0, loop: false, dir: 'normal', easing: 'easeInOutSine', elasticity: 400, autoplay: false, enabled: true, startEvents: 'click1'},
click1rot: {property: 'object3D.rotation.x', from: -90, to: 720, dur: 2000, delay: 0, loop: false, dir: 'normal', easing: 'easeInOutElastic', elasticity: 400, autoplay: false, enabled: true, startEvents: 'click1'},
posreset: {property: 'object3D.position.y', from: 0.75, to: 0.025, dur: 1000, delay: 0, loop: false, dir: 'normal', easing: 'easeInOutSine', elasticity: 400, autoplay: false, enabled: true, startEvents: 'reset'},
rotreset: {property: 'object3D.rotation.x', from: 720, to: -90, dur: 1000, delay: 0, loop: false, dir: 'normal', easing: 'easeInOutElastic', elasticity: 400, autoplay: false, enabled: true, startEvents: 'reset'},
posresetinstant: {property: 'object3D.position.y', from: 0.75, to: 0.025, dur: 50, delay: 0, loop: false, dir: 'normal', easing: 'easeInOutSine', elasticity: 400, autoplay: false, enabled: true, startEvents: 'resetInstant'},
rotresetinstant: {property: 'object3D.rotation.x', from: 720, to: -90, dur: 50, delay: 0, loop: false, dir: 'normal', easing: 'easeInOutElastic', elasticity: 400, autoplay: false, enabled: true, startEvents: 'resetInstant'},
},
mixins: false,
classes: ['a-ent'],
components: false,
};
//Confirm
auxl.teleportConfirmData = {
data:'teleportConfirmData',
id:'teleportConfirm',
sources:false,
text: {value:'Teleport Here', wrapCount: 45, width: 5, color: "#FFFFFF", font: "exo2bold", zOffset: 0.025, side: 'double', align: "center", baseline: 'center', opacity: 0.75},
geometry: {primitive: 'circle', radius: 0.75, segments: 16, thetaStart: 0, thetaLength: 360},
material: {shader: "standard", color: "#838282", opacity: 0.75, metalness: 0.6, roughness: 0.4, emissive: "#838282", emissiveIntensity: 0.2, side: 'double'},
position: new THREE.Vector3(0,0,0),
rotation: new THREE.Vector3(0,0,0),
scale: new THREE.Vector3(1,1,1),
animations: false,
mixins: false,
classes: ['a-ent', 'clickable', 'teleporter', 'teleport'],
components: {
teleportation:null,
},
};
//Cancel
auxl.teleportCancelData = {
data:'teleportCancelData',
id:'teleportCancel',
sources:false,
text: {value:'Cancel', wrapCount: 45, width: 5, color: "#FFFFFF", font: "exo2bold", zOffset: 0.025, side: 'double', align: "center", baseline: 'center', opacity: 0},
geometry: {primitive: 'circle', radius: 0.75, segments: 16, thetaStart: 0, thetaLength: 360},
material: {shader: "standard", color: "#838282", opacity: 0, metalness: 0.6, roughness: 0.4, emissive: "#838282", emissiveIntensity: 0.2, side: 'double'},
position: new THREE.Vector3(0,1.25,0),
rotation: new THREE.Vector3(0,0,0),
scale: new THREE.Vector3(0.5,0.5,0.5),
animations: {
click1opac: {property: 'material.opacity', from: 0, to: 0.75, dur: 1000, delay: 1800, loop: false, dir: 'normal', easing: 'easeInOutSine', elasticity: 400, autoplay: false, enabled: true, startEvents: 'click1'},
click1textopac: {property: 'text.opacity', from: 0, to: 1, dur: 1000, delay: 1800, loop: false, dir: 'normal', easing: 'easeInOutSine', elasticity: 400, autoplay: false, enabled: true, startEvents: 'click1'},
click1opacreset: {property: 'material.opacity', from: 0.75, to: 0, dur: 500, delay: 0, loop: false, dir: 'normal', easing: 'easeInOutSine', elasticity: 400, autoplay: false, enabled: true, startEvents: 'reset'},
click1textopacreset: {property: 'text.opacity', from: 1, to: 0, dur: 500, delay: 0, loop: false, dir: 'normal', easing: 'easeInOutSine', elasticity: 400, autoplay: false, enabled: true, startEvents: 'reset'},
click1opacresetinstant: {property: 'material.opacity', from: 0.75, to: 0, dur: 50, delay: 0, loop: false, dir: 'normal', easing: 'easeInOutSine', elasticity: 400, autoplay: false, enabled: true, startEvents: 'resetInstant'},
click1textopacresetinstant: {property: 'text.opacity', from: 1, to: 0, dur: 50, delay: 0, loop: false, dir: 'normal', easing: 'easeInOutSine', elasticity: 400, autoplay: false, enabled: true, startEvents: 'resetInstant'},
},
mixins: false,
classes: ['a-ent', 'clickable', 'teleporter', 'cancel'],
components: {
teleportation:null,
},
};

//8 Point Layout
let teleportPos = [
new THREE.Vector3(0,0.025,0),
new THREE.Vector3(-5,0.025,-5),
new THREE.Vector3(0,0.025,-10),
new THREE.Vector3(-5,0.025,5),
new THREE.Vector3(-10,0.025,0),
new THREE.Vector3(5,0.025,-5),
new THREE.Vector3(10,0.025,0),
new THREE.Vector3(5,0.025,5),
new THREE.Vector3(0,0.025,10),
];
auxl.teleport = auxl.Teleport('teleport', teleportPos);
//4 Point Layout
let teleportPos0 = [
new THREE.Vector3(0,0.025,0),
new THREE.Vector3(-5,0.025,-5),
new THREE.Vector3(-5,0.025,5),
new THREE.Vector3(5,0.025,-5),
new THREE.Vector3(5,0.025,5),
];
auxl.teleport0 = auxl.Teleport('teleport0', teleportPos0);

//Raycast Teleportation Testing
auxl.teleportPortalData = {
data:'teleportPortalData',
id:'teleportPortal',
sources: false,
text: false,
geometry: {primitive: 'plane', width: 2, height: 10,},
material: {shader: "standard", color: "#beef1a", opacity: 0.25, metalness: 0.6, roughness: 0.4, emissive: "#beef1a", emissiveIntensity: 0.2, side: 'double'},
position: new THREE.Vector3(10,5,-10),
rotation: new THREE.Vector3(0,0,0),
scale: new THREE.Vector3(1,1,1),
animations:false,
mixins: false,
classes: ['a-ent','clickable'],
components:{
//['look-at-xyz']:{match: 'camera', y:true},
['stare']:{id: 'playerRig', twist: true},
['raycast-teleportation']:null,
},
};
auxl.teleportPortal1Data = auxl.coreDataFromTemplate(auxl.teleportPortalData, {id: 'teleportPortal1',}, true);
auxl.teleportPortal1 = auxl.Core(auxl.teleportPortal1Data);
auxl.teleportPortal2Data = auxl.coreDataFromTemplate(auxl.teleportPortalData, {id: 'teleportPortal2', position: new THREE.Vector3(0,5,3)}, true);
auxl.teleportPortal2 = auxl.Core(auxl.teleportPortal2Data);


//
//Environment

//DayNight SkyBox
//

//Directional - Pre-Added
auxl.directionalLightData = {
data:'directionalLight',
id:'directionalLight',
entity: 'preAdded',
sources: false,
text: false,
geometry: false,
material: false,
position: new THREE.Vector3(-1,1,-1),
rotation: new THREE.Vector3(0,0,0),
scale: new THREE.Vector3(1,1,1),
animations: {
daylight:{property: 'light.intensity', from: 0.1, to: 1, dur: auxl.timeInDay/4, delay: 0, loop: 'true', dir: 'alternate', easing: 'linear', elasticity: 400, autoplay: false, enabled: true, startEvents: 'sunrise', pauseEvents: 'pauseDayNight', resumeEvents: 'resumeDayNight'},
daypos:{property: 'position', from: new THREE.Vector3(-1,1,-1), to: new THREE.Vector3(1,1,1), dur: auxl.timeInDay/2, delay: 0, loop: '1', dir: 'alternate', easing: 'linear', elasticity: 400, autoplay: false, enabled: true, startEvents: 'sunrise', pauseEvents: 'pauseDayNight', resumeEvents: 'resumeDayNight'},
},
mixins: false,
classes: ['a-ent'],
components: {
light: {type: 'directional', intensity: 1, castShadow: false},
},
};
auxl.directionalLight = auxl.Core(auxl.directionalLightData);
//Ambient - Pre-Added
auxl.ambientLightData = {
data:'ambientLight',
id:'ambientLight',
entity: 'preAdded',
sources: false,
text: false,
geometry: false,
material: false,
position: new THREE.Vector3(0,0,0),
rotation: new THREE.Vector3(0,0,0),
scale: new THREE.Vector3(1,1,1),
animations: {
daylight:{property: 'light.intensity', from: 0.5, to: 0.25, dur: auxl.timeInDay/2, delay: 0, loop: '1', dir: 'alternate', easing: 'linear', elasticity: 400, autoplay: false, enabled: true, startEvents: 'sunrise', pauseEvents: 'pauseDayNight', resumeEvents: 'resumeDayNight'},
daycolor:{property: 'light.color', from: '#99154E', to: '#fffb96', dur: auxl.timeInDay/4, delay: 0, loop: '1', dir: 'alternate', easing: 'linear', elasticity: 400, autoplay: false, enabled: true, startEvents: 'sunrise', pauseEvents: 'pauseDayNight', resumeEvents: 'resumeDayNight'},
},
mixins: false,
classes: ['a-ent'],
components: {
light: {type: 'ambient', intensity: 1, color: '#716a9a'},
},
};
auxl.ambientLight = auxl.Core(auxl.ambientLightData);
//Directional 2
auxl.directionalLight2Data = {
data:'directionalLight2',
id:'directionalLight2',
sources: false,
text: false,
geometry: false,
material: false,
position: new THREE.Vector3(1,1,1),
rotation: new THREE.Vector3(0,0,0),
scale: new THREE.Vector3(1,1,1),
animations: {
nightlight:{property: 'light.intensity', from: 0.2, to: 0.1, dur: auxl.timeInDay/4, delay: 0, loop: '1', dir: 'alternate', easing: 'linear', elasticity: 400, autoplay: false, enabled: true, startEvents: 'sunrise', pauseEvents: 'pauseDayNight', resumeEvents: 'resumeDayNight'},
daypos:{property: 'position', from: new THREE.Vector3(1,1,1), to: new THREE.Vector3(-1,1,-1), dur: auxl.timeInDay/2, delay: 0, loop: '1', dir: 'alternate', easing: 'linear', elasticity: 400, autoplay: false, enabled: true, startEvents: 'sunrise', pauseEvents: 'pauseDayNight', resumeEvents: 'resumeDayNight'},

},
mixins: false,
classes: ['a-ent'],
components: {
light: {type: 'directional', intensity: 0.1, castShadow: false},
},
};
auxl.directionalLight2 = auxl.Core(auxl.directionalLight2Data);
//Directional 3
auxl.directionalLight3Data = {
data:'directionalLight3',
id:'directionalLight3',
sources: false,
text: false,
geometry: false,
material: false,
position: new THREE.Vector3(1,1,-1),
rotation: new THREE.Vector3(0,0,0),
scale: new THREE.Vector3(1,1,1),
animations: {
daylight:{property: 'light.intensity', from: 0.05, to: 0.1, dur: auxl.timeInDay/4, delay: 0, loop: '1', dir: 'alternate', easing: 'linear', elasticity: 400, autoplay: false, enabled: true, startEvents: 'sunrise', pauseEvents: 'pauseDayNight', resumeEvents: 'resumeDayNight'},
daypos:{property: 'position', from: new THREE.Vector3(1,1,-1), to: new THREE.Vector3(-1,1,-1), dur: auxl.timeInDay/2, delay: 0, loop: '1', dir: 'alternate', easing: 'linear', elasticity: 400, autoplay: false, enabled: false, startEvents: 'sunrise', pauseEvents: 'pauseDayNight', resumeEvents: 'resumeDayNight'},
},
mixins: false,
classes: ['a-ent'],
components: {
light: {type: 'directional', intensity: 0.05, castShadow: false},
},
};
auxl.directionalLight3 = auxl.Core(auxl.directionalLight3Data);

//Sun
auxl.sunOuterData = {
data:'sunOuter',
id:'sunOuter',
sources: false,
text: false,
geometry: false,
material: false,
position: new THREE.Vector3(0,0,0),
rotation: new THREE.Vector3(-5,45,0),
scale: new THREE.Vector3(1,1,1),
animations:{daynight:{property: 'object3D.rotation.x', from: -5, to: 355, dur: auxl.timeInDay, delay: 0, loop: '1', dir: 'normal', easing: 'linear', elasticity: 400, autoplay: false, enabled: true, startEvents: 'sunrise', pauseEvents: 'pauseDayNight', resumeEvents: 'resumeDayNight'},},
mixins: false,
classes: ['a-ent'],
components: false,
};
auxl.sunData = {
data:'sun',
id:'sun',
sources: false,
text: false,
geometry: {primitive: 'sphere', radius: 50,},
material: {shader: "standard", color: "#F0A500", opacity: 1, side: 'front', emissive: '#F0A500', emissiveIntensity: 1, fog: false},
position: new THREE.Vector3(0,0,-400),
rotation: new THREE.Vector3(0,0,0),
scale: new THREE.Vector3(1,1,1),
animations: false,
mixins: false,
classes: ['a-ent'],
components: false,
};
auxl.sunOuter = auxl.Core(auxl.sunOuterData);
auxl.sun = auxl.Core(auxl.sunData);
auxl.sunLayerData = {
parent: {core: auxl.sunOuter},
child0: {core: auxl.sun},
}
auxl.sunLayer = auxl.Layer('sunLayer', auxl.sunLayerData);
//Moon
auxl.moonOuterData = {
data:'moonOuter',
id:'moonOuter',
sources: false,
text: false,
geometry: false,
material: false,
position: new THREE.Vector3(0,0,0),
rotation: new THREE.Vector3(175,45,0),
scale: new THREE.Vector3(1,1,1),
animations:{daynight:{property: 'object3D.rotation.x', from: 175, to: 535, dur: auxl.timeInDay, delay: 0, loop: '1', dir: 'normal', easing: 'linear', elasticity: 400, autoplay: false, enabled: true, startEvents: 'sunrise', pauseEvents: 'pauseDayNight', resumeEvents: 'resumeDayNight'},},
mixins: false,
classes: ['a-ent'],
components: false,
};
auxl.moonData = {
data:'moon',
id:'moon',
sources: false,
text: false,
geometry: {primitive: 'sphere', radius: 24,},
material: {shader: "standard", color: "#5c2196", opacity: 1, side: 'front', emissive: '#5c2196', emissiveIntensity: 0.75, fog: false},
position: new THREE.Vector3(0,0,-400),
rotation: new THREE.Vector3(0,0,0),
scale: new THREE.Vector3(1,1,1),
animations: false,
mixins: false,
classes: ['a-ent'],
components: false,
};
auxl.moonOuter = auxl.Core(auxl.moonOuterData);
auxl.moon = auxl.Core(auxl.moonData);
auxl.moonLayerData = {
parent: {core: auxl.moonOuter},
child0: {core: auxl.moon},
}
auxl.moonLayer = auxl.Layer('moonLayer', auxl.moonLayerData);

//3GradDualSky
//threeColorGradientShader error : core:schema:warn Unknown property `color` for component/system `material`
auxl.skyGradData = {
data: 'sky gradient',
id: 'skyGrad',
entity: 'a-sky',
sources: false,
text: false,
geometry: false,
material: {shader: 'threeColorGradientShader', topColor: '#613381', middleColor: '#99154E', bottomColor: '#b967ff'},
position: new THREE.Vector3(0,0,0),
rotation: new THREE.Vector3(0,0,0),
scale: new THREE.Vector3(1,1,1),
animations: {
sunrisetop:{property: 'material.topColor', from: '#613381', to: '#01cdfe', dur: auxl.timeInDay/6, delay: 0, loop: 'false', dir: 'normal', easing: 'linear', elasticity: 400, autoplay: false, enabled: true, startEvents: 'sunrise', pauseEvents: 'pauseDayNight', resumeEvents: 'resumeDayNight'},
sunrisemid:{property: 'material.middleColor', from: '#99154E', to: '#fffb96', dur: auxl.timeInDay/6, delay: 0, loop: 'false', dir: 'normal', easing: 'linear', elasticity: 400, autoplay: false, enabled: true, startEvents: 'sunrise', pauseEvents: 'pauseDayNight', resumeEvents: 'resumeDayNight'}, 
sunsettop:{property: 'material.topColor', from: '#01cdfe', to: '#613381', dur: auxl.timeInDay/6, delay: 0, loop: 'false', dir: 'normal', easing: 'linear', elasticity: 400, autoplay: false, enabled: true, startEvents: 'sunset', pauseEvents: 'pauseDayNight', resumeEvents: 'resumeDayNight'},
sunsetmid:{property: 'material.middleColor', from: '#fffb96', to: '#99154E', dur: auxl.timeInDay/6, delay: 0, loop: 'false', dir: 'normal', easing: 'linear', elasticity: 400, autoplay: false, enabled: true, startEvents: 'sunset', pauseEvents: 'pauseDayNight', resumeEvents: 'resumeDayNight'}, 
},
mixins: false,
classes: ['a-ent'],
components: false,
};
auxl.skyGrad = auxl.Core(auxl.skyGradData);
//
//skyBox0
auxl.skyBox0Data = {
data:'skyBox0Data',
id:'skyBox0',
sources:false,
lights:[
auxl.directionalLight,
auxl.directionalLight2,
auxl.directionalLight3,
auxl.ambientLight,
],
sky:[
auxl.skyGrad,
],
space:[
auxl.sunLayer,
auxl.moonLayer,
],
};
auxl.skyBox0 = auxl.SkyBox(auxl.skyBox0Data);

//
//Collision Support
auxl.mapEdgeBasicData = {
data:'mapEdgeBasicData',
id:'mapEdgeBasic',
sources: false,
text: false,
geometry: {primitive: 'box', depth: 0.25, width: 0.25, height: 0.5},
material: {shader: "standard", color: "#6c4646", opacity: 1},
position: new THREE.Vector3(0,1,0),
rotation: new THREE.Vector3(0,0,0),
scale: new THREE.Vector3(1,1,1),
animations: false,
mixins: false,
classes: ['a-ent'],
components: false,
};
auxl.mapEdgeBasic = auxl.Core(auxl.mapEdgeBasicData);


//Build Library Objects
auxl.buildLibrary = () => {

//Player is Reset within Rebuild()

//Companion Avatars
//Ghost
auxl.ghostParent = auxl.Core(auxl.ghostParentData);
auxl.ghostAll = auxl.Core(auxl.ghostAllData);
auxl.eye1Socket = auxl.Core(auxl.eye1SocketData);
auxl.eye2Socket = auxl.Core(auxl.eye2SocketData);
auxl.eye1Pupil = auxl.Core(auxl.eye1PupilData);
auxl.eye2Pupil = auxl.Core(auxl.eye2PupilData);
auxl.mouth = auxl.Core(auxl.mouthData);
auxl.spin = auxl.Core(auxl.spinData);
auxl.head = auxl.Core(auxl.headData);
auxl.body = auxl.Core(auxl.bodyData);
auxl.leg1 = auxl.Core(auxl.leg1Data);
auxl.leg2 = auxl.Core(auxl.leg2Data);
auxl.leg3 = auxl.Core(auxl.leg3Data);
auxl.leg4 = auxl.Core(auxl.leg4Data);
auxl.ghost = auxl.Layer('ghost',auxl.ghostLayerData);
//Cube
auxl.compCubeParent = auxl.Core(auxl.compCubeParentData);
auxl.compCube = auxl.Core(auxl.compCubeData);
auxl.compCubeLayer = auxl.Layer('compCubeLayer',auxl.cubeLayerData);
//Sphere
auxl.compSphereParent = auxl.Core(auxl.compSphereParentData);
auxl.compSphere = auxl.Core(auxl.compSphereData);
auxl.compSphereLayer = auxl.Layer('compSphereLayer',auxl.compSphereLayerData);
//Text Bubble
auxl.compBubbleParent = auxl.Core(auxl.compBubbleParentData);
auxl.compBubbleClose = auxl.Core(auxl.compBubbleCloseData);
auxl.compBubbleReset = auxl.Core(auxl.compBubbleResetData);
auxl.compBubbleLayer = auxl.Layer('compBubbleLayer',auxl.compBubbleLayerData);
//Companion
auxl.comp = auxl.Companion('comp',auxl.ghost);

//Configuration Screen
auxl.configurationView = auxl.Core(auxl.configurationViewData);

//TextBubble
auxl.textBubbleSide = auxl.Core(auxl.textBubbleSideData);
auxl.textBubbleBottom = auxl.Core(auxl.textBubbleBottomData);
auxl.textBubbleTop = auxl.Core(auxl.textBubbleTopData);

//Teleport
auxl.teleport = auxl.Teleport('teleport', teleportPos);
auxl.teleport0 = auxl.Teleport('teleport0', teleportPos0);
auxl.teleportPortal1 = auxl.Core(auxl.teleportPortal1Data);
auxl.teleportPortal2 = auxl.Core(auxl.teleportPortal2Data);

//Lighting
auxl.directionalLight = auxl.Core(auxl.directionalLightData);
auxl.ambientLight = auxl.Core(auxl.ambientLightData);
auxl.directionalLight2 = auxl.Core(auxl.directionalLight2Data);
auxl.directionalLight3 = auxl.Core(auxl.directionalLight3Data);

//SkyBox
auxl.sunOuter = auxl.Core(auxl.sunOuterData);
auxl.sun = auxl.Core(auxl.sunData);
auxl.sunLayer = auxl.Layer('sunLayer', auxl.sunLayerData);
auxl.moonOuter = auxl.Core(auxl.moonOuterData);
auxl.moon = auxl.Core(auxl.moonData);
auxl.moonLayer = auxl.Layer('moonLayer', auxl.moonLayerData);
auxl.skyGrad = auxl.Core(auxl.skyGradData);
auxl.skyBox0 = auxl.SkyBox(auxl.skyBox0Data);

//Collision Support
auxl.mapEdgeBasic = auxl.Core(auxl.mapEdgeBasicData);

}
auxl.toBeRebuilt('buildLibrary');

},
});

//
//Export
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (library);

/***/ }),

/***/ "./src/support/controls.js":
/*!*********************************!*\
  !*** ./src/support/controls.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
//
//AUXL : A-Frame UX Library
//v0.3 Engine
//https://github.com/Minty-Crisp/AUXL
//
//Created by Minty-Crisp (mintycrisp.com)
//
//Controls

//
//Universal Controls
//Customizable Controls and Methods, Defaults for Locomotion and Snap Turning
const controls = AFRAME.registerComponent('universal-controls', {
dependencies: ['auxl'],
schema: {
	update: {type: 'number', default: 0},
},
init: function () {

//Controls to Configure for :
//Desktop : Mouse & Keyboard
//Mobile : Touchscreen
//VR Advanced : Dual 6DoF Controllers
//VR Basic : Single 3DoF Button Controller - Need to Finish
//VR Mobile : Headset Only - Need to Add
//Hand Tracking : Dual Hand Movements - Need to Add
//Game Controller - Need To Add

//Control Actions :
//Main Click - Triggers, Mouse Click, Screen Tap
//Alt Click - Grip, Mouse Right Click, HTML Alt
//Directional Movement - Locomotion Joystick, Key WASD/Arrows, HTML Direction Buttons
//Rotational Movement - Headset, Mouse, Gyro
//Action 1 - Button X, Key Q, HTML A
//Action 2 - Button Y, Key E, HTML B
//Action 3 - Button A, Key R, HTML C
//Action 4 - Button B, Key T, HTML D
//Action 5 - Other Joystick Down, Key C, HTML E
//Action 6 - Other Joystick Up, Key V, HTML F
//Action 7 - Other Joystick Left, Key Z, HTML <-
//Action 8 - Other Joystick Right, Key X, HTML ->

this.aScene = document.querySelector('a-scene');
this.auxl = document.querySelector('a-scene').systems.auxl;
//Locomotion Component
this.locomotion;
this.gimbal;
//VR Controllers
this.vrController1;
this.vrController2;

//Gimbal Disabled

//Remappable Desktop Controls
this.controls = {
directionForwardKeys: ['w','W'],
directionLeftKeys: ['a','A'],
directionBackwardKeys: ['s','S'],
directionRightKeys: ['d','D'],
//rotationForwardKeys: ['ArrowUp'],
rotationForwardKeys: [null],
//rotationLeftKeys: ['ArrowLeft'],
rotationLeftKeys: [null],
//rotationBackwardKeys: ['ArrowDown'],
rotationBackwardKeys: [null],
//rotationRightKeys: ['ArrowRight'],
rotationRightKeys: [null],
action1Keys: ['q','Q'],
action2Keys: ['e','E'],
action3Keys: ['r','R'],
action4Keys: ['t','T'],
action5Keys: ['c','C'],
action6Keys: ['v','V'],
action7Keys: ['z','Z'],
action8Keys: ['x','X'],
};
this.auxl.controlConfig = this.controls;

//Mobile HTML Buttons
this.mobileUpLeft = document.getElementById('upLeft');
this.mobileUp = document.getElementById('up');
this.mobileUpRight = document.getElementById('upRight');
this.mobileLeft = document.getElementById('left');
this.mobileCenter = document.getElementById('center');
this.mobileRight = document.getElementById('right');
this.mobileDownLeft = document.getElementById('downLeft');
this.mobileDown = document.getElementById('down');
this.mobileDownRight = document.getElementById('downRight');
this.mobileSelect = document.getElementById('select');
this.mobileStart = document.getElementById('start');
this.mobileA = document.getElementById('a');
this.mobileB = document.getElementById('b');
this.mobileC = document.getElementById('c');
this.mobileD = document.getElementById('d');
this.mobileE = document.getElementById('e');
this.mobileF = document.getElementById('f');
this.mobileL = document.getElementById('l');
this.mobileR = document.getElementById('r');

//Customizable Action Controls
this.altDownFunc = false;
this.altDownParams = false;
this.altUpFunc = false;
this.altUpParams = false;
this.action1DownFunc = false;
this.action1DownParams = false;
this.action1UpFunc = false;
this.action1UpParams = false;
this.action2DownFunc = false;
this.action2DownParams = false;
this.action2UpFunc = false;
this.action2UpParams = false;
this.action3DownFunc = false;
this.action3DownParams = false;
this.action3UpFunc = false;
this.action3UpParams = false;
this.action4DownFunc = false;
this.action4DownParams = false;
this.action4UpFunc = false;
this.action4UpParams = false;
this.action5DownFunc = false;
this.action5DownParams = false;
this.action5UpFunc = false;
this.action5UpParams = false;
this.action6DownFunc = false;
this.action6DownParams = false;
this.action6UpFunc = false;
this.action6UpParams = false;
this.action7DownFunc = false;
this.action7DownParams = false;
this.action7UpFunc = false;
this.action7UpParams = false;
this.action8DownFunc = false;
this.action8DownParams = false;
this.action8UpFunc = false;
this.action8UpParams = false;

//
//Control Events

//Main Click
this.mainClickDetail = {info: 'Main Click', click: null};
this.mainClickEvent = new CustomEvent('mainClick', {
	bubbles: false,
	cancelable: true,
	detail: this.mainClickDetail,
});
//Alt Click
this.altClickDetail = {info: 'Alt Click', click: null};
this.altClickEvent = new CustomEvent('altClick', {
	bubbles: false,
	cancelable: true,
	detail: this.altClickDetail,
});
//Directional Movement
this.directionEventDetail = {info: 'Direction', direction: null};
this.directionEvent = new CustomEvent('direction', {
	bubbles: false,
	cancelable: true,
	detail: this.directionEventDetail,
});
//Rotational Movement
this.rotationEventDetail = {info: 'Rotation', rotation: null};
this.rotationEvent = new CustomEvent('rotation', {
	bubbles: false,
	cancelable: true,
	detail: this.rotationEventDetail,
});
//Action 1
this.action1EventDetail = {info: 'Action 1', action: null};
this.action1Event = new CustomEvent('action1', {
	bubbles: false,
	cancelable: true,
	detail: this.action1EventDetail,
});
//Action 2
this.action2EventDetail = {info: 'Action 2', action: null};
this.action2Event = new CustomEvent('action2', {
	bubbles: false,
	cancelable: true,
	detail: this.action2EventDetail,
});
//Action 3
this.action3EventDetail = {info: 'Action 3', action: null};
this.action3Event = new CustomEvent('action3', {
	bubbles: false,
	cancelable: true,
	detail: this.action3EventDetail,
});
//Action 4
this.action4EventDetail = {info: 'Action 4', action: null};
this.action4Event = new CustomEvent('action4', {
	bubbles: false,
	cancelable: true,
	detail: this.action4EventDetail,
});
//Action 5
this.action5EventDetail = {info: 'Action 5', action: null};
this.action5Event = new CustomEvent('action5', {
	bubbles: false,
	cancelable: true,
	detail: this.action5EventDetail,
});
//Action 6
this.action6EventDetail = {info: 'Action 6', action: null};
this.action6Event = new CustomEvent('action6', {
	bubbles: false,
	cancelable: true,
	detail: this.action6EventDetail,
});
//Action 7
this.action7EventDetail = {info: 'Action 7', action: null};
this.action7Event = new CustomEvent('action7', {
	bubbles: false,
	cancelable: true,
	detail: this.action7EventDetail,
});
//Action 8
this.action8EventDetail = {info: 'Action 8', action: null};
this.action8Event = new CustomEvent('action8', {
	bubbles: false,
	cancelable: true,
	detail: this.action8EventDetail,
});

//Main Click
this.mainClickHit = (e) => {
	this.mainClick(e);
}
this.mainClickE = () => {
	this.mainClickDetail.click = 'click';
	document.dispatchEvent(this.mainClickEvent);
}
this.mainClickDown = () => {
	this.mainClickDetail.click = 'clickDown';
	document.dispatchEvent(this.mainClickEvent);
}
this.mainClickUp = () => {
	this.mainClickDetail.click = 'clickUp';
	document.dispatchEvent(this.mainClickEvent);
}

//Alt Click
this.altClickHit = (e) => {
	this.altClick(e);
}
this.altClickDown = () => {
	this.altClickDetail.click = 'altClickHit';
	document.dispatchEvent(this.altClickEvent);
}
this.altClickUp = () => {
	this.altClickDetail.click = 'altClickRelease';
	document.dispatchEvent(this.altClickEvent);
}
this.dispatchAlt = () => {
	document.dispatchEvent(this.altClickEvent);
}

//Directional Movement
this.directionHit = (e) => {
	this.direction(e);
}
//Forward Left
this.directionForwardLeftDown = () => {
	this.directionForwardDown();
	this.directionLeftDown();
}
this.directionForwardLeftUp = () => {
	this.directionForwardUp();
	this.directionLeftUp();
}
//Forward
this.directionForwardDown = () => {
	this.directionEventDetail.direction = 'forwardHit';
	document.dispatchEvent(this.directionEvent);
}
this.directionForwardUp = () => {
	this.directionEventDetail.direction = 'forwardRelease';
	document.dispatchEvent(this.directionEvent);
}
//Forward Right
this.directionForwardRightDown = () => {
	this.directionForwardDown();
	this.directionRightDown();
}
this.directionForwardRightUp = () => {
	this.directionForwardUp();
	this.directionRightUp();
}
//Left
this.directionLeftDown = () => {
	this.directionEventDetail.direction = 'leftHit';
	document.dispatchEvent(this.directionEvent);
}
this.directionLeftUp = () => {
	this.directionEventDetail.direction = 'leftRelease';
	document.dispatchEvent(this.directionEvent);
}
//Backward Left
this.directionBackwardLeftDown = () => {
	this.directionBackwardDown();
	this.directionLeftDown();
}
this.directionBackwardLeftUp = () => {
	this.directionBackwardUp();
	this.directionLeftUp();
}
//Backward
this.directionBackwardDown = () => {
	this.directionEventDetail.direction = 'backwardHit';
	document.dispatchEvent(this.directionEvent);
}
this.directionBackwardUp = () => {
	this.directionEventDetail.direction = 'backwardRelease';
	document.dispatchEvent(this.directionEvent);
}
//Backward Right
this.directionBackwardRightDown = () => {
	this.directionBackwardDown();
	this.directionRightDown();
}
this.directionBackwardRightUp = () => {
	this.directionBackwardUp();
	this.directionRightUp();
}
//Right
this.directionRightDown = () => {
	this.directionEventDetail.direction = 'rightHit';
	document.dispatchEvent(this.directionEvent);
}
this.directionRightUp = () => {
	this.directionEventDetail.direction = 'rightRelease';
	document.dispatchEvent(this.directionEvent);
}

//Rotational Movement
this.rotationHit = (e) => {
	this.rotation(e);
}
/*
this.dispatchRotation = () => {
	document.dispatchEvent(this.rotationEvent);
}
*/
//Forward Left
this.rotationForwardLeftDown = () => {
	this.rotationForwardDown();
	this.rotationLeftDown();
}
this.rotationForwardLeftUp = () => {
	this.rotationForwardUp();
	this.rotationLeftUp();
}
//Forward
this.rotationForwardDown = () => {
	this.rotationEventDetail.rotation = 'forwardHit';
	document.dispatchEvent(this.rotationEvent);
}
this.rotationForwardUp = () => {
	this.rotationEventDetail.rotation = 'forwardRelease';
	document.dispatchEvent(this.rotationEvent);
}
//Forward Right
this.rotationForwardRightDown = () => {
	this.rotationForwardDown();
	this.rotationRightDown();
}
this.rotationForwardRightUp = () => {
	this.rotationForwardUp();
	this.rotationRightUp();
}
//Left
this.rotationLeftDown = () => {
	this.rotationEventDetail.rotation = 'leftHit';
	document.dispatchEvent(this.rotationEvent);
}
this.rotationLeftUp = () => {
	this.rotationEventDetail.rotation = 'leftRelease';
	document.dispatchEvent(this.rotationEvent);
}
//Backward Left
this.rotationBackwardLeftDown = () => {
	this.rotationBackwardDown();
	this.rotationLeftDown();
}
this.rotationBackwardLeftUp = () => {
	this.rotationBackwardUp();
	this.rotationLeftUp();
}
//Backward
this.rotationBackwardDown = () => {
	this.rotationEventDetail.rotation = 'backwardHit';
	document.dispatchEvent(this.rotationEvent);
}
this.rotationBackwardUp = () => {
	this.rotationEventDetail.rotation = 'backwardRelease';
	document.dispatchEvent(this.rotationEvent);
}
//Backward Right
this.rotationBackwardRightDown = () => {
	this.rotationBackwardDown();
	this.rotationRightDown();
}
this.rotationBackwardRightUp = () => {
	this.rotationBackwardUp();
	this.rotationRightUp();
}
//Right
this.rotationRightDown = () => {
	this.rotationEventDetail.rotation = 'rightHit';
	document.dispatchEvent(this.rotationEvent);
}
this.rotationRightUp = () => {
	this.rotationEventDetail.rotation = 'rightRelease';
	document.dispatchEvent(this.rotationEvent);
}




//Action 1
this.action1Hit = (e) => {
	this.action1(e);
}
this.action1Down = () => {
	this.action1EventDetail.action = 'action1Hit';
	document.dispatchEvent(this.action1Event);
}
this.action1Up = () => {
	this.action1EventDetail.action = 'action1Release';
	document.dispatchEvent(this.action1Event);
}
//Action 2
this.action2Hit = (e) => {
	this.action2(e);
}
this.action2Down = () => {
	this.action2EventDetail.action = 'action2Hit';
	document.dispatchEvent(this.action2Event);
}
this.action2Up = () => {
	this.action2EventDetail.action = 'action2Release';
	document.dispatchEvent(this.action2Event);
}
//Action 3
this.action3Hit = (e) => {
	this.action3(e);
}
this.action3Down = () => {
	this.action3EventDetail.action = 'action3Hit';
	document.dispatchEvent(this.action3Event);
}
this.action3Up = () => {
	this.action3EventDetail.action = 'action3Release';
	document.dispatchEvent(this.action3Event);
}
//Action 4
this.action4Hit = (e) => {
	this.action4(e);
}
this.action4Down = () => {
	this.action4EventDetail.action = 'action4Hit';
	document.dispatchEvent(this.action4Event);
}
this.action4Up = () => {
	this.action4EventDetail.action = 'action4Release';
	document.dispatchEvent(this.action4Event);
}
//Action 5
this.action5Hit = (e) => {
	this.action5(e);
}
this.action5Down = () => {
	this.action5EventDetail.action = 'action5Hit';
	document.dispatchEvent(this.action5Event);
}
this.action5Up = () => {
	this.action5EventDetail.action = 'action5Release';
	document.dispatchEvent(this.action5Event);
}
//Action 6
this.action6Hit = (e) => {
	this.action6(e);
}
this.action6Down = () => {
	this.action6EventDetail.action = 'action6Hit';
	document.dispatchEvent(this.action6Event);
}
this.action6Up = () => {
	this.action6EventDetail.action = 'action6Release';
	document.dispatchEvent(this.action6Event);
}
//Action 7
this.action7Hit = (e) => {
	this.action7(e);
}
this.action7Down = () => {
	this.action7EventDetail.action = 'action7Hit';
	document.dispatchEvent(this.action7Event);
}
this.action7Up = () => {
	this.action7EventDetail.action = 'action7Release';
	document.dispatchEvent(this.action7Event);
}
//Action 8
this.action8Hit = (e) => {
	this.action8(e);
}
this.action8Down = () => {
	this.action8EventDetail.action = 'action8Hit';
	document.dispatchEvent(this.action8Event);
}
this.action8Up = () => {
	this.action8EventDetail.action = 'action8Release';
	document.dispatchEvent(this.action8Event);
}

//
//Keyboard Events
this.keyboardDownHit = (e) => {
	this.keyboardDown(e);
}
this.keyboardUpHit = (e) => {
	this.keyboardUp(e);
}

//
//Blank
this.blankHit = (e) => {
	this.blank(e);
}

//
//Controller Events

//Left
//Main Trigger
this.questLeftMainClickDown = () => {
	this.mainClickDetail.click = 'leftClickDown';
	document.dispatchEvent(this.mainClickEvent);
}
this.questLeftMainClickUp = () => {
	this.mainClickDetail.click = 'leftClickUp';
	document.dispatchEvent(this.mainClickEvent);
}
//Secondary Trigger
this.questLeftAltClickDown = () => {
	this.altClickDetail.click = 'leftAltClickDown';
	document.dispatchEvent(this.altClickEvent);
}
this.questLeftAltClickUp = () => {
	this.altClickDetail.click = 'leftAltClickUp';
	document.dispatchEvent(this.altClickEvent);
}
//Joystick
this.questJoystickLocomotionEvent = (e) => {
	if(auxl.joystickLoco === 1){
		//this.questJoystick1Locomotion(e);
	} else if(auxl.joystickLoco === 4){
		this.questJoystick4Locomotion(e);
	} else if(auxl.joystickLoco === 8){
		this.questJoystick8Locomotion(e);
	}
}
//Locomotion Joystick
this.deadzoneLoco = 0.1;
this.xNumLoco = 0;
this.yNumLoco = 0;
this.angleLoco = 0;
this.angleDegLoco = 0;

//Right
//Main Trigger
this.questRightMainClickDown = () => {
	this.mainClickDetail.click = 'rightClickDown';
	document.dispatchEvent(this.mainClickEvent);
}
this.questRightMainClickUp = () => {
	this.mainClickDetail.click = 'rightClickUp';
	document.dispatchEvent(this.mainClickEvent);
}
//Secondary Trigger
this.questRightAltClickDown = () => {
	this.altClickDetail.click = 'rightAltClickDown';
	document.dispatchEvent(this.altClickEvent);
}
this.questRightAltClickUp = () => {
	this.altClickDetail.click = 'rightAltClickUp';
	document.dispatchEvent(this.altClickEvent);
}
//Joystick
this.questJoystickOtherEvent = (e) => {
	this.questJoystick4Other(e);
}
//Other Joystick
this.deadzoneOther = 0.1;
this.xNumOther = 0;
this.yNumOther = 0;
this.angleOther = 0;
this.angleDegOther = 0;

//Joystick Rotation
this.questJoystickRotationEvent = (e) => {
	if(auxl.joystickRotation === 1){
		//this.questJoystick1Locomotion(e);
	} else if(auxl.joystickRotation === 4){
		this.questJoystick4Rotation(e);
	} else if(auxl.joystickRotation === 8){
		this.questJoystick8Rotation(e);
	}
}
//Locomotion Joystick
this.deadzoneRot = 0.1;
this.xNumRot = 0;
this.yNumRot = 0;
this.angleRot = 0;
this.angleDegRot = 0;


    },
//Dev Input Display
updateInput: function (input){
	//console.log(input)
	//Enable A-Frame Entity to use below
	//Display Inputs - DEV Testing
	/*
	const displayInput = document.querySelector('#displayInput');
	let displayInputText = {value: 'No Input', color: 'white', align: 'center'}
	displayInputText.value = input;
	displayInput.setAttribute('text',displayInputText);
	*/
},
//Change Action function
updateAction: function (actionObj){
	//console.log(actionObj);
	for(let action in actionObj){
		//console.log(action);//actionName
		//console.log(actionObj[action]);//object
		let actionFunc;
		let actionParams;
		let actionCommand;
		let htmlDisplay;
		if(action === 'altDown'){
			actionFunc = 'altDownFunc';
			actionParams = 'altDownParams';
			htmlDisplay = 'center';
		} else if(action === 'altUp'){
			actionFunc = 'altUpFunc';
			actionParams = 'altUpParams';
			htmlDisplay = 'center';
		} else if(action === 'action1Down'){
			actionFunc = 'action1DownFunc';
			actionParams = 'action1DownParams';
			htmlDisplay = 'a';
		} else if(action === 'action1Up'){
			actionFunc = 'action1UpFunc';
			actionParams = 'action1UpParams';
			htmlDisplay = 'a';
		} else if(action === 'action2Down'){
			actionFunc = 'action2DownFunc';
			actionParams = 'action2DownParams';
			htmlDisplay = 'b';
		} else if(action === 'action2Up'){
			actionFunc = 'action2UpFunc';
			actionParams = 'action2UpParams';
			htmlDisplay = 'b';
		} else if(action === 'action3Down'){
			actionFunc = 'action3DownFunc';
			actionParams = 'action3DownParams';
			htmlDisplay = 'c';
		} else if(action === 'action3Up'){
			actionFunc = 'action3UpFunc';
			actionParams = 'action3UpParams';
			htmlDisplay = 'c';
		} else if(action === 'action4Down'){
			actionFunc = 'action4DownFunc';
			actionParams = 'action4DownParams';
			htmlDisplay = 'd';
		} else if(action === 'action4Up'){
			actionFunc = 'action4UpFunc';
			actionParams = 'action4UpParams';
			htmlDisplay = 'd';
		} else if(action === 'action5Down'){
			actionFunc = 'action5DownFunc';
			actionParams = 'action5DownParams';
			htmlDisplay = 'e';
		} else if(action === 'action5Up'){
			actionFunc = 'action5UpFunc';
			actionParams = 'action5UpParams';
			htmlDisplay = 'e';
		} else if(action === 'action6Down'){
			actionFunc = 'action6DownFunc';
			actionParams = 'action6DownParams';
			htmlDisplay = 'f';
		} else if(action === 'action6Up'){
			actionFunc = 'action6UpFunc';
			actionParams = 'action6UpParams';
			htmlDisplay = 'f';
		} else if(action === 'action7Down'){
			actionFunc = 'action7DownFunc';
			actionParams = 'action7DownParams';
			htmlDisplay = 'l';
		} else if(action === 'action7Up'){
			actionFunc = 'action7UpFunc';
			actionParams = 'action7UpParams';
			htmlDisplay = 'l';
		} else if(action === 'action8Down'){
			actionFunc = 'action8DownFunc';
			actionParams = 'action8DownParams';
			htmlDisplay = 'r';
		} else if(action === 'action8Up'){
			actionFunc = 'action8UpFunc';
			actionParams = 'action8UpParams';
			htmlDisplay = 'r';
		} else {
			console.log('Failed to identify action')
			return;
		}
		if(actionObj[action]){
			let auxlObj = actionObj[action].auxlObj;
			let component = false;
			if(actionObj[action].component){
				component = actionObj[action].component;
			}
			let func = actionObj[action].func;
			//Assign Parameters if Required
			this[actionParams] = false;
			if(actionObj[action].params){
				this[actionParams] = actionObj[action].params;
			}
			if(component){
				//if component is not auxl, then the object is a dom entity and the component is attached to that object and the func is in that component
				//if component is true, then
//Bind function to the component itself
this[actionFunc] = document.getElementById(auxlObj).components[component][func].bind(document.getElementById(auxlObj).components[component]);
			} else {
				//if component is false, then
				//this.auxl[auxlObj][func]
				this[actionFunc] = this.auxl[auxlObj][func];
			}
			//Update Control Text
			if(actionObj[action].name){
				//this.auxl.controlsInfo[actionObj[action].name] = actionObj[action].info;
				//this.auxl.controlsInfo[action] = {name: actionObj[action].name, info: actionObj[action].info};
				this.auxl.controlsInfo[action] = {name: actionObj[action].name, info: actionObj[action].info};
			}
			//Display Mobile HTML
			this.auxl.ToggleHTML(htmlDisplay, true);
		} else {
			this[actionFunc] = false;
			this[actionParams] = false;
		}
	}
},
//Disable Action function
disableAction: function (actionObj){
	//console.log(actionObj);
	for(let action in actionObj){
		//console.log(action);//actionName
		//console.log(actionObj[action]);//params
		let actionFunc;
		let actionParams;
		let htmlDisplay;
		if(action === 'altDown'){
			actionFunc = 'altDownFunc';
			actionParams = 'altDownParams';
			htmlDisplay = 'center';
		} else if(action === 'altUp'){
			actionFunc = 'altUpFunc';
			actionParams = 'altUpParams';
			htmlDisplay = 'center';
		} else if(action === 'action1Down'){
			actionFunc = 'action1DownFunc';
			actionParams = 'action1DownParams';
			htmlDisplay = 'a';
		} else if(action === 'action1Up'){
			actionFunc = 'action1UpFunc';
			actionParams = 'action1UpParams';
			htmlDisplay = 'a';
		} else if(action === 'action2Down'){
			actionFunc = 'action2DownFunc';
			actionParams = 'action2DownParams';
			htmlDisplay = 'b';
		} else if(action === 'action2Up'){
			actionFunc = 'action2UpFunc';
			actionParams = 'action2UpParams';
			htmlDisplay = 'b';
		} else if(action === 'action3Down'){
			actionFunc = 'action3DownFunc';
			actionParams = 'action3DownParams';
			htmlDisplay = 'c';
		} else if(action === 'action3Up'){
			actionFunc = 'action3UpFunc';
			actionParams = 'action3UpParams';
			htmlDisplay = 'c';
		} else if(action === 'action4Down'){
			actionFunc = 'action4DownFunc';
			actionParams = 'action4DownParams';
			htmlDisplay = 'd';
		} else if(action === 'action4Up'){
			actionFunc = 'action4UpFunc';
			actionParams = 'action4UpParams';
			htmlDisplay = 'd';
		} else if(action === 'action5Down'){
			actionFunc = 'action5DownFunc';
			actionParams = 'action5DownParams';
			htmlDisplay = 'e';
		} else if(action === 'action5Up'){
			actionFunc = 'action5UpFunc';
			actionParams = 'action5UpParams';
			htmlDisplay = 'e';
		} else if(action === 'action6Down'){
			actionFunc = 'action6DownFunc';
			actionParams = 'action6DownParams';
			htmlDisplay = 'f';
		} else if(action === 'action6Up'){
			actionFunc = 'action6UpFunc';
			actionParams = 'action6UpParams';
			htmlDisplay = 'f';
		} else if(action === 'action7Down'){
			actionFunc = 'action7DownFunc';
			actionParams = 'action7DownParams';
			htmlDisplay = 'l';
		} else if(action === 'action7Up'){
			actionFunc = 'action7UpFunc';
			actionParams = 'action7UpParams';
			htmlDisplay = 'l';
		} else if(action === 'action8Down'){
			actionFunc = 'action8DownFunc';
			actionParams = 'action8DownParams';
			htmlDisplay = 'r';
		} else if(action === 'action8Up'){
			actionFunc = 'action8UpFunc';
			actionParams = 'action8UpParams';
			htmlDisplay = 'r';
		} else {
			console.log('Failed to identify action')
			console.log(action)
			console.log(actionObj[action])
			return;
		}
		//Update Control Text
		if(actionObj[action].name){
			delete this.auxl.controlsInfo[action];
		}
		//Display Mobile HTML
		this.auxl.ToggleHTML(htmlDisplay, false);
		this[actionFunc] = false;
		this[actionParams] = false;
	}
},
//Main Click
mainClick: function (e){
	//console.log(e.detail);
	//this.updateInput(e.detail.info);
},
//Alt Click
altClick: function (e){
	//console.log(e.detail);
	//this.updateInput(e.detail.info);
	if(e.detail.action === 'altClickHit'){
		if(this.altDownFunc){
			if(this.altDownParams){
				this.altDownFunc(this.altDownParams);
			} else {
				this.altDownFunc();
			}
		}
	} else if(e.detail.action === 'altClickRelease'){
		if(this.altUpFunc){
			if(this.altUpParams){
				this.altUpFunc(this.altUpParams);
			} else {
				this.altUpFunc();
			}
		}
	}
},
//Directional Movement
direction: function (e){
	//console.log(e.detail);
	//this.updateInput(e.detail.info);
	//Direction Movement Unlocked
	if(e.detail.direction === 'forwardHit'){
		this.locomotion.movingForward();
	} else if(e.detail.direction === 'forwardRelease'){
		this.locomotion.cancelForward();
	} else if(e.detail.direction === 'leftHit'){
		this.locomotion.movingLeft();
	} else if(e.detail.direction === 'leftRelease'){
		this.locomotion.cancelLeft();
	} else if(e.detail.direction === 'backwardHit'){
		this.locomotion.movingReverse();
	} else if(e.detail.direction === 'backwardRelease'){
		this.locomotion.cancelReverse();
	} else if(e.detail.direction === 'rightHit'){
		this.locomotion.movingRight();
	} else if(e.detail.direction === 'rightRelease'){
		this.locomotion.cancelRight();
	}
},
//Rotational Movement
rotation: function (e){
	//console.log(e.detail);
	//this.updateInput(e.detail.info);
	if(e.detail.rotation === 'forwardHit'){
		this.gimbal.movingForward();
	} else if(e.detail.rotation === 'forwardRelease'){
		this.gimbal.cancelForward();
	} else if(e.detail.rotation === 'leftHit'){
		this.gimbal.movingLeft();
	} else if(e.detail.rotation === 'leftRelease'){
		this.gimbal.cancelLeft();
	} else if(e.detail.rotation === 'backwardHit'){
		this.gimbal.movingReverse();
	} else if(e.detail.rotation === 'backwardRelease'){
		this.gimbal.cancelReverse();
	} else if(e.detail.rotation === 'rightHit'){
		this.gimbal.movingRight();
	} else if(e.detail.rotation === 'rightRelease'){
		this.gimbal.cancelRight();
	} 
},
//Action 1
action1: function (e){
	//console.log(e.detail);
	//this.updateInput(e.detail.info);
	if(e.detail.action === 'action1Hit'){
		if(this.action1DownFunc){
			if(this.action1DownParams){
				this.action1DownFunc(this.action1DownParams);
			} else {
				this.action1DownFunc();
			}
		}
	} else if(e.detail.action === 'action1Release'){
		if(this.action1UpFunc){
			if(this.action1UpParams){
				this.action1UpFunc(this.action1UpParams);
			} else {
				this.action1UpFunc();
			}
		}
	}
},
//Action 2
action2: function (e){
	//console.log(e.detail);
	//this.updateInput(e.detail.info);
	if(e.detail.action === 'action2Hit'){
		if(this.action2DownFunc){
			if(this.action2DownParams){
				this.action2DownFunc(this.action2DownParams);
			} else {
				this.action2DownFunc();
			}
		}
	} else if(e.detail.action === 'action2Release'){
		if(this.action2UpFunc){
			if(this.action2UpParams){
				this.action2UpFunc(this.action2UpParams);
			} else {
				this.action2UpFunc();
			}
		}
	}
},
//Action 3
action3: function (e){
	//console.log(e.detail);
	//this.updateInput(e.detail.info);
	if(e.detail.action === 'action3Hit'){
		if(this.action3DownFunc){
			if(this.action3DownParams){
				this.action3DownFunc(this.action3DownParams);
			} else {
				this.action3DownFunc();
			}
		}
	} else if(e.detail.action === 'action3Release'){
		if(this.action3UpFunc){
			if(this.action3UpParams){
				this.action3UpFunc(this.action3UpParams);
			} else {
				this.action3UpFunc();
			}
		}
	}
},
//Action 4
action4: function (e){
	//console.log(e.detail);
	//this.updateInput(e.detail.info);
	if(e.detail.action === 'action4Hit'){
		if(this.action4DownFunc){
			if(this.action4DownParams){
				this.action4DownFunc(this.action4DownParams);
			} else {
				this.action4DownFunc();
			}
		}
	} else if(e.detail.action === 'action4Release'){
		if(this.action4UpFunc){
			if(this.action4UpParams){
				this.action4UpFunc(this.action4UpParams);
			} else {
				this.action4UpFunc();
			}
		}
	}
},
//Action 5
action5: function (e){
	//console.log(e.detail);
	//this.updateInput(e.detail.info);
	if(e.detail.action === 'action5Hit'){
		if(this.action5DownFunc){
			if(this.action5DownParams){
				this.action5DownFunc(this.action5DownParams);
			} else {
				this.action5DownFunc();
			}
		}
	} else if(e.detail.action === 'action5Release'){
		if(this.action5UpFunc){
			if(this.action5UpParams){
				this.action5UpFunc(this.action5UpParams);
			} else {
				this.action5UpFunc();
			}
		}
	}
},
//Action 6
action6: function (e){
	//console.log(e.detail);
	//this.updateInput(e.detail.info);
	if(e.detail.action === 'action6Hit'){
		if(this.action6DownFunc){
			if(this.action6DownParams){
				this.action6DownFunc(this.action6DownParams);
			} else {
				this.action6DownFunc();
			}
		}
	} else if(e.detail.action === 'action6Release'){
		if(this.action6UpFunc){
			if(this.action6UpParams){
				this.action6UpFunc(this.action6UpParams);
			} else {
				this.action6UpFunc();
			}
		}
	}
},
//Action 7
action7: function (e){
	//console.log(e.detail);
	//this.updateInput(e.detail.info);
	if(e.detail.action === 'action7Hit'){
		if(this.action7DownFunc){
			if(this.action7DownParams){
				this.action7DownFunc(this.action7DownParams);
			} else {
				this.action7DownFunc();
			}
		}
	} else if(e.detail.action === 'action7Release'){
		if(this.action7UpFunc){
			if(this.action7UpParams){
				this.action7UpFunc(this.action7UpParams);
			} else {
				this.action7UpFunc();
			}
		}
	}
},
//Action 8
action8: function (e){
	//console.log(e.detail);
	//this.updateInput(e.detail.info);
	if(e.detail.action === 'action8Hit'){
		if(this.action8DownFunc){
			if(this.action8DownParams){
				this.action8DownFunc(this.action8DownParams);
			} else {
				this.action8DownFunc();
			}
		}
	} else if(e.detail.action === 'action8Release'){
		if(this.action8UpFunc){
			if(this.action8UpParams){
				this.action8UpFunc(this.action8UpParams);
			} else {
				this.action8UpFunc();
			}
		}
	}
},
//Keyboard Controls
keyboardDown: function (e){
	if(this.controls.directionForwardKeys.includes(e.key)) {
		//Direction : Forward
		this.directionForwardDown();
	} else if(this.controls.directionLeftKeys.includes(e.key)){
		//Direction : Left
		this.directionLeftDown();
	} else if(this.controls.directionBackwardKeys.includes(e.key)){
		//Direction : Backward
		this.directionBackwardDown();
	} else if(this.controls.directionRightKeys.includes(e.key)){
		//Direction : Right
		this.directionRightDown();
	} else if(this.controls.rotationForwardKeys.includes(e.key)) {
		//Rotation : Forward
		this.rotationForwardDown();
	} else if(this.controls.rotationLeftKeys.includes(e.key)){
		//Rotation : Left
		this.rotationLeftDown();
	} else if(this.controls.rotationBackwardKeys.includes(e.key)){
		//Rotation : Backward
		this.rotationBackwardDown();
	} else if(this.controls.rotationRightKeys.includes(e.key)){
		//Rotation : Right
		this.rotationRightDown();
	} else if(this.controls.action1Keys.includes(e.key)){
		//Action 1
		this.action1Down();
	} else if(this.controls.action2Keys.includes(e.key)){
		//Action 2
		this.action2Down();
	} else if(this.controls.action3Keys.includes(e.key)){
		//Action 3
		this.action3Down();
	} else if(this.controls.action4Keys.includes(e.key)){
		//Action 4
		this.action4Down();
	} else if(this.controls.action5Keys.includes(e.key)){
		//Action 5
		this.action5Down();
	} else if(this.controls.action6Keys.includes(e.key)){
		//Action 6
		this.action6Down();
	} else if(this.controls.action7Keys.includes(e.key)){
		//Action 7
		this.action7Down();
	} else if(this.controls.action8Keys.includes(e.key)){
		//Action 8
		this.action8Down();
	}

},
keyboardUp: function (e){
	if(this.controls.directionForwardKeys.includes(e.key)) {
		//Direction : Forward
		this.directionForwardUp();
	} else if(this.controls.directionLeftKeys.includes(e.key)){
		//Direction : Left
		this.directionLeftUp();
	} else if(this.controls.directionBackwardKeys.includes(e.key)){
		//Direction : Backward
		this.directionBackwardUp();
	} else if(this.controls.directionRightKeys.includes(e.key)){
		//Direction : Right
		this.directionRightUp();
	} else if(this.controls.rotationForwardKeys.includes(e.key)) {
		//Rotation : Forward
		this.rotationForwardUp();
	} else if(this.controls.rotationLeftKeys.includes(e.key)){
		//Rotation : Left
		this.rotationLeftUp();
	} else if(this.controls.rotationBackwardKeys.includes(e.key)){
		//Rotation : Backward
		this.rotationBackwardUp();
	} else if(this.controls.rotationRightKeys.includes(e.key)){
		//Rotation : Right
		this.rotationRightUp();
	} else if(this.controls.action1Keys.includes(e.key)){
		//Action 1
		this.action1Up();
	} else if(this.controls.action2Keys.includes(e.key)){
		//Action 2
		this.action2Up();
	} else if(this.controls.action3Keys.includes(e.key)){
		//Action 3
		this.action3Up();
	} else if(this.controls.action4Keys.includes(e.key)){
		//Action 4
		this.action4Up();
	} else if(this.controls.action5Keys.includes(e.key)){
		//Action 5
		this.action5Up();
	} else if(this.controls.action6Keys.includes(e.key)){
		//Action 6
		this.action6Up();
	} else if(this.controls.action7Keys.includes(e.key)){
		//Action 7
		this.action7Up();
	} else if(this.controls.action8Keys.includes(e.key)){
		//Action 8
		this.action8Up();
	}
},
//Joystick 4 Locomotion
questJoystick4Locomotion: function (e){
	//Update this.locomotion.func into this.directionEvent
	this.xNumLoco = e.detail.x;
	this.yNumLoco = e.detail.y;
	this.angleLoco = Math.atan2(this.xNumLoco,this.yNumLoco);
	function radToDeg(rad) {
	  return rad / (Math.PI / 180);
	}
	this.angleDegLoco = radToDeg(this.angleLoco);

	if(this.yNumLoco < this.deadzoneLoco && this.yNumLoco > this.deadzoneLoco*-1 && this.xNumLoco > this.deadzoneLoco*-1 && this.xNumLoco < this.deadzoneLoco){
		this.locomotion.clearMovement();
		this.updateInput('Locomotion Clear');
	} else if(this.yNumLoco > this.deadzoneLoco || this.yNumLoco < this.deadzoneLoco*-1 || this.xNumLoco < this.deadzoneLoco*-1 || this.xNumLoco > this.deadzoneLoco) {
		if(this.angleDegLoco > -45 && this.angleDegLoco < 45){
			//Backward : -45 -> 45
			this.locomotion.clearMovement();
			this.locomotion.movingReverse();
			//this.updateInput('Backward');
		} else if(this.angleDegLoco > 45 && this.angleDegLoco < 135){
			//Right : 45 -> 135
			this.locomotion.clearMovement();
			this.locomotion.movingRight();
			//this.updateInput('Right');
		} else if(this.angleDegLoco > 135 || this.angleDegLoco < -135){
			//Forward : 135 -> 180 or -135 -> -180
			this.locomotion.clearMovement();
			this.locomotion.movingForward();
			//this.updateInput('Forward');
		} else if(this.angleDegLoco < -45 && this.angleDegLoco > -135){
			//Left : -45 -> -135
			this.locomotion.clearMovement();
			this.locomotion.movingLeft();
			//this.updateInput('Left');
		}
	} else {
		this.locomotion.clearMovement();
		//this.updateInput('Locomotion Clear');
	}
},
//Joystick 8 Locomotion
questJoystick8Locomotion: function (e){
	//Update this.locomotion.func into this.directionEvent
	this.xNumLoco = e.detail.x;
	this.yNumLoco = e.detail.y;
	this.angleLoco = Math.atan2(this.xNumLoco,this.yNumLoco);
	function radToDeg(rad) {
	  return rad / (Math.PI / 180);
	}
	this.angleDegLoco = radToDeg(this.angleLoco);

	if(this.yNumLoco < this.deadzoneLoco && this.yNumLoco > this.deadzoneLoco*-1 && this.xNumLoco > this.deadzoneLoco*-1 && this.xNumLoco < this.deadzoneLoco){
		this.locomotion.clearMovement();
		this.updateInput('Locomotion Clear');
	} else if(this.yNumLoco > this.deadzoneLoco || this.yNumLoco < this.deadzoneLoco*-1 || this.xNumLoco < this.deadzoneLoco*-1 || this.xNumLoco > this.deadzoneLoco) {
		if(this.angleDegLoco > -22.5 && this.angleDegLoco < 22.5){
			//Backward : -22.5 -> 22.5
			this.locomotion.clearMovement();
			this.locomotion.movingReverse();
			//this.updateInput('Backward');
		} else if(this.angleDegLoco > 22.5 && this.angleDegLoco < 67.5){
			//BackwardRight : 22.5 -> 67.5
			this.locomotion.clearMovement();
			this.locomotion.movingReverse();
			this.locomotion.movingRight();
			//this.updateInput('Backward Right');
		} else if(this.angleDegLoco > 67.5 && this.angleDegLoco < 112.5){
			//Right : 67.5 -> 112.5
			this.locomotion.clearMovement();
			this.locomotion.movingRight();
			//this.updateInput('Right');
		} else if(this.angleDegLoco > 112.5 && this.angleDegLoco < 157.5){
			//ForwardRight : 112.5 -> 157.5
			this.locomotion.clearMovement();
			this.locomotion.movingForward();
			this.locomotion.movingRight();
			//this.updateInput('Forward Right');
		} else if(this.angleDegLoco > 157.5 || this.angleDegLoco < -157.5){
			//Forward : 157.5 -> 180 or -157.5 -> -180
			this.locomotion.clearMovement();
			this.locomotion.movingForward();
			//this.updateInput('Forward');
		} else if(this.angleDegLoco < -112.5 && this.angleDegLoco > -157.5){
			//ForwardLeft: -112.5 -> -157.5
			this.locomotion.clearMovement();
			this.locomotion.movingForward();
			this.locomotion.movingLeft();
			//this.updateInput('Forward Left');
		} else if(this.angleDegLoco < -67.5 && this.angleDegLoco > -112.5){
			//Left : -67.5 -> -112.5
			this.locomotion.clearMovement();
			this.locomotion.movingLeft();
			//this.updateInput('Left');
		} else if(this.angleDegLoco < -22.5 && this.angleDegLoco > -67.5){
			//BackwardLeft: -22.5 -> -67.5 
			this.locomotion.clearMovement();
			this.locomotion.movingReverse();
			this.locomotion.movingLeft();
			//this.updateInput('Backward Left');
		}
	} else {
		this.locomotion.clearMovement();
		//this.updateInput('Locomotion Clear');
	}
},
//Joystick 4 Rotation
questJoystick4Rotation: function (e){
	//Update this.gimbal.func into this.rotationEvent
	this.xNumRot = e.detail.x;
	this.yNumRot = e.detail.y;
	this.angleRot = Math.atan2(this.xNumRot,this.yNumRot);
	function radToDeg(rad) {
	  return rad / (Math.PI / 180);
	}
	this.angleDegRot = radToDeg(this.angleRot);

	if(this.yNumRot < this.deadzoneRot && this.yNumRot > this.deadzoneRot*-1 && this.xNumRot > this.deadzoneRot*-1 && this.xNumRot < this.deadzoneRot){
		this.gimbal.clearMovement();
		this.updateInput('Rotation Clear');
	} else if(this.yNumRot > this.deadzoneRot || this.yNumRot < this.deadzoneRot*-1 || this.xNumRot < this.deadzoneRot*-1 || this.xNumRot > this.deadzoneRot) {
		if(this.angleDegRot > -45 && this.angleDegRot < 45){
			//Backward : -45 -> 45
			this.gimbal.clearMovement();
			this.gimbal.movingReverse();
			//this.updateInput('Backward');
		} else if(this.angleDegRot > 45 && this.angleDegRot < 135){
			//Right : 45 -> 135
			this.gimbal.clearMovement();
			this.gimbal.movingRight();
			//this.updateInput('Right');
		} else if(this.angleDegRot > 135 || this.angleDegRot < -135){
			//Forward : 135 -> 180 or -135 -> -180
			this.gimbal.clearMovement();
			this.gimbal.movingForward();
			//this.updateInput('Forward');
		} else if(this.angleDegRot < -45 && this.angleDegRot > -135){
			//Left : -45 -> -135
			this.gimbal.clearMovement();
			this.gimbal.movingLeft();
			//this.updateInput('Left');
		}
	} else {
		this.gimbal.clearMovement();
		//this.updateInput('Locomotion Clear');
	}
},
//Joystick 8 Rotation
questJoystick8Rotation: function (e){
	//Update this.gimbal.func into this.rotationEvent
	this.xNumRot = e.detail.x;
	this.yNumRot = e.detail.y;
	this.angleRot = Math.atan2(this.xNumRot,this.yNumRot);
	function radToDeg(rad) {
	  return rad / (Math.PI / 180);
	}
	this.angleDegRot = radToDeg(this.angleRot);

	if(this.yNumRot < this.deadzoneRot && this.yNumRot > this.deadzoneRot*-1 && this.xNumRot > this.deadzoneRot*-1 && this.xNumRot < this.deadzoneRot){
		this.gimbal.clearMovement();
		this.updateInput('Rotation Clear');
	} else if(this.yNumRot > this.deadzoneRot || this.yNumRot < this.deadzoneRot*-1 || this.xNumRot < this.deadzoneRot*-1 || this.xNumRot > this.deadzoneRot) {
		if(this.angleDegRot > -22.5 && this.angleDegRot < 22.5){
			//Backward : -22.5 -> 22.5
			this.gimbal.clearMovement();
			this.gimbal.movingReverse();
			//this.updateInput('Backward');
		} else if(this.angleDegRot > 22.5 && this.angleDegRot < 67.5){
			//BackwardRight : 22.5 -> 67.5
			this.gimbal.clearMovement();
			this.gimbal.movingReverse();
			this.gimbal.movingRight();
			//this.updateInput('Backward Right');
		} else if(this.angleDegRot > 67.5 && this.angleDegRot < 112.5){
			//Right : 67.5 -> 112.5
			this.gimbal.clearMovement();
			this.gimbal.movingRight();
			//this.updateInput('Right');
		} else if(this.angleDegRot > 112.5 && this.angleDegRot < 157.5){
			//ForwardRight : 112.5 -> 157.5
			this.gimbal.clearMovement();
			this.gimbal.movingForward();
			this.gimbal.movingRight();
			//this.updateInput('Forward Right');
		} else if(this.angleDegRot > 157.5 || this.angleDegRot < -157.5){
			//Forward : 157.5 -> 180 or -157.5 -> -180
			this.gimbal.clearMovement();
			this.gimbal.movingForward();
			//this.updateInput('Forward');
		} else if(this.angleDegRot < -112.5 && this.angleDegRot > -157.5){
			//ForwardLeft: -112.5 -> -157.5
			this.gimbal.clearMovement();
			this.gimbal.movingForward();
			this.gimbal.movingLeft();
			//this.updateInput('Forward Left');
		} else if(this.angleDegRot < -67.5 && this.angleDegRot > -112.5){
			//Left : -67.5 -> -112.5
			this.gimbal.clearMovement();
			this.gimbal.movingLeft();
			//this.updateInput('Left');
		} else if(this.angleDegRot < -22.5 && this.angleDegRot > -67.5){
			//BackwardLeft: -22.5 -> -67.5 
			this.gimbal.clearMovement();
			this.gimbal.movingReverse();
			this.gimbal.movingLeft();
			//this.updateInput('Backward Left');
		}
	} else {
		this.gimbal.clearMovement();
		//this.updateInput('Locomotion Clear');
	}
},
//Joystick 4 Other
questJoystick4Other: function (e){
	this.xNumOther = e.detail.x;
	this.yNumOther = e.detail.y;
	this.angleOther = Math.atan2(this.xNumOther,this.yNumOther);
	function radToDeg(rad) {
	  return rad / (Math.PI / 180);
	}
	this.angleDegOther = radToDeg(this.angleOther);

	if(this.yNumOther < this.deadzoneOther && this.yNumOther > this.deadzone*-1 && this.xNumOther > this.deadzoneOther*-1 && this.xNumOther < this.deadzoneOther){
		this.updateInput('Rotation|Duck Clear');
	} else if(this.yNumOther > this.deadzoneOther || this.yNumOther < this.deadzoneOther*-1 || this.xNumOther < this.deadzoneOther*-1 || this.xNumOther > this.deadzoneOther) {
		if(this.angleDegOther > -45 && this.angleDegOther < 45){
			//Backward : -45 -> 45
			//this.updateInput('Duck');
			this.action5Down();
		} else if(this.angleDegOther > 45 && this.angleDegOther < 135){
			//Right : 45 -> 135
			//this.updateInput('Rotate Right');
			//this.snapRightHit();
			this.action7Down();
		} else if(this.angleDegOther > 135 || this.angleDegOther < -135){
			//Forward : 135 -> 180 or -135 -> -180
			//this.updateInput('Stand');
			this.action6Down();
		} else if(this.angleDegOther < -45 && this.angleDegOther > -135){
			//Left : -45 -> -135
			//this.updateInput('Rotate Left');
			//this.snapLeftHit();
			this.action8Down();
		}
	} else {
		//this.updateInput('Rotation|Duck Clear');
	}
},
//Temp Blank
blank: function (e){
	console.log(e);
	//this.updateInput('Blank Button');
},
update: function () {

	//Universal Events
	document.addEventListener('mainClick', this.mainClickHit);
	document.addEventListener('altClick', this.altClickHit);
	document.addEventListener('direction', this.directionHit);
	document.addEventListener('rotation', this.rotationHit);
	document.addEventListener('action1', this.action1Hit);
	document.addEventListener('action2', this.action2Hit);
	document.addEventListener('action3', this.action3Hit);
	document.addEventListener('action4', this.action4Hit);
	document.addEventListener('action5', this.action5Hit);
	document.addEventListener('action6', this.action6Hit);
	document.addEventListener('action7', this.action7Hit);
	document.addEventListener('action8', this.action8Hit);

	//Desktop
	document.addEventListener('click', this.mainClickE);
	document.addEventListener('contextmenu', this.dispatchAlt);
	document.addEventListener('keydown', this.keyboardDownHit);
	document.addEventListener('keyup', this.keyboardUpHit);

	//Joystick Locomotion
	this.questJoystickLocomotionEvent = (e) => {
		if(auxl.joystickLoco === 1){
			//this.questJoystick1Locomotion(e);
		} else if(auxl.joystickLoco === 4){
			this.questJoystick4Locomotion(e);
		} else if(auxl.joystickLoco === 8){
			this.questJoystick8Locomotion(e);
		}
	}

	//Joystick Rotation
	this.questJoystickRotationEvent = (e) => {
		if(auxl.joystickRotation === 1){
			//this.questJoystick1Locomotion(e);
		} else if(auxl.joystickRotation === 4){
			this.questJoystick4Rotation(e);
		} else if(auxl.joystickRotation === 8){
			this.questJoystick8Rotation(e);
		}
	}

//Allow elements to spawn before grabbing/assigning
let initTimeout = setTimeout(() => {

	//Locomotion Component
	this.locomotion = document.getElementById('playerRig').components.locomotion;

	//Gimbal Component
	this.gimbal = document.getElementById('playerRig').components.gimbal;	

	//Quest
	this.vrController1 = document.getElementById('vrController1');
	this.vrController2 = document.getElementById('vrController2');

	//Left
	//Main Trigger
	this.vrController1.addEventListener('triggerdown', this.questLeftMainClickDown);
	this.vrController1.addEventListener('triggerup', this.questLeftMainClickUp);
	//Secondary Trigger
	this.vrController1.addEventListener('gripdown', this.questLeftAltClickDown);
	this.vrController1.addEventListener('gripup', this.questLeftAltClickUp);
	//Button 1 (X)
	this.vrController1.addEventListener('xbuttondown', this.action1Down);
	this.vrController1.addEventListener('xbuttonup', this.action1Up);
	//Button 2 (Y)
	this.vrController1.addEventListener('ybuttondown', this.action2Down);
	this.vrController1.addEventListener('ybuttonup', this.action2Up);

	//Right
	//Main Trigger
	this.vrController2.addEventListener('triggerdown', this.questRightMainClickDown);
	this.vrController2.addEventListener('triggerup', this.questRightMainClickUp);
	//Secondary Trigger
	this.vrController2.addEventListener('gripdown', this.questRightAltClickDown);
	this.vrController2.addEventListener('gripup', this.questRightAltClickUp);
	//Button 1 (A)
	this.vrController2.addEventListener('abuttondown', this.action3Down);
	this.vrController2.addEventListener('abuttonup', this.action3Up);
	//Button 2 (B)
	this.vrController2.addEventListener('bbuttondown', this.action4Down);
	this.vrController2.addEventListener('bbuttonup', this.action4Up);

	//Joysticks
	if(this.auxl.vrHand === 'bothRight' || this.auxl.vrHand === 'bothLeftLoco'){
		//Left Locomotion
		this.vrController1.addEventListener('thumbstickmoved', this.questJoystickLocomotionEvent);
		//Right Other
		//this.vrController2.addEventListener('thumbstickmoved', this.questJoystickOtherEvent);
		this.vrController2.addEventListener('thumbstickmoved', this.questJoystickRotationEvent);
	} else if(this.auxl.vrHand === 'bothLeft' || this.auxl.vrHand === 'bothRightLoco'){
		//Right Locomotion
		this.vrController2.addEventListener('thumbstickmoved', this.questJoystickLocomotionEvent);
		//Left Other
		//this.vrController1.addEventListener('thumbstickmoved', this.questJoystickOtherEvent);
		this.vrController1.addEventListener('thumbstickmoved', this.questJoystickRotationEvent);
	} else {
		//Left Locomotion
		this.vrController1.addEventListener('thumbstickmoved', this.questJoystickLocomotionEvent);
		//Right Other
		//this.vrController2.addEventListener('thumbstickmoved', this.questJoystickOtherEvent);
		this.vrController2.addEventListener('thumbstickmoved', this.questJoystickRotationEvent);
	}
}, 100);


	//Mobile
	this.mobileUpLeft.addEventListener('touchstart', this.directionForwardLeftDown);
	this.mobileUpLeft.addEventListener('touchend', this.directionForwardLeftUp);
	this.mobileUp.addEventListener('touchstart', this.directionForwardDown);
	this.mobileUp.addEventListener('touchend', this.directionForwardUp);
	this.mobileUpRight.addEventListener('touchstart', this.directionForwardRightDown);
	this.mobileUpRight.addEventListener('touchend', this.directionForwardRightUp);
	this.mobileLeft.addEventListener('touchstart', this.directionLeftDown);
	this.mobileLeft.addEventListener('touchend', this.directionLeftUp);
	this.mobileCenter.addEventListener('touchstart', this.blankHit);
	this.mobileCenter.addEventListener('touchend', this.blankHit);
	this.mobileRight.addEventListener('touchstart', this.directionRightDown);
	this.mobileRight.addEventListener('touchend', this.directionRightUp);
	this.mobileDownLeft.addEventListener('touchstart', this.directionBackwardLeftDown);
	this.mobileDownLeft.addEventListener('touchend', this.directionBackwardLeftUp);
	this.mobileDown.addEventListener('touchstart', this.directionBackwardDown);
	this.mobileDown.addEventListener('touchend', this.directionBackwardUp);
	this.mobileDownRight.addEventListener('touchstart', this.directionBackwardRightDown);
	this.mobileDownRight.addEventListener('touchend', this.directionBackwardRightUp);
	this.mobileSelect.addEventListener('touchstart', this.blankHit);
	//this.mobileSelect.addEventListener('touchend', this.blankHit);
	this.mobileStart.addEventListener('touchstart', this.blankHit);
	//this.mobileStart.addEventListener('touchend', this.blankHit);
	this.mobileA.addEventListener('touchstart', this.action1Down);
	this.mobileA.addEventListener('touchend', this.action1Up);
	this.mobileB.addEventListener('touchstart', this.action2Down);
	this.mobileB.addEventListener('touchend', this.action2Up);
	this.mobileC.addEventListener('touchstart', this.action3Down);
	this.mobileC.addEventListener('touchend', this.action3Up);
	this.mobileD.addEventListener('touchstart', this.action4Down);
	this.mobileD.addEventListener('touchend', this.action4Up);
	this.mobileE.addEventListener('touchstart', this.action5Down);
	this.mobileE.addEventListener('touchend', this.action5Up);
	this.mobileF.addEventListener('touchstart', this.action6Down);
	this.mobileF.addEventListener('touchend', this.action6Up);
	this.mobileL.addEventListener('touchstart', this.action7Down);
	this.mobileL.addEventListener('touchend', this.action7Up);
	this.mobileR.addEventListener('touchstart', this.action8Down);
	this.mobileR.addEventListener('touchend', this.action8Up);


	//document.addEventListener('mousedown', this.mainClickDown);
	//document.addEventListener('mouseup', this.mainClickUp);
	//Both the mouseCursor and Canvas element fire mousedown and mouseup resulting in 2 events firing at the same time
	/*
	mousedown { target: a-entity#mouseCursor, isTrusted: false, detail: {…}, srcElement: a-entity#mouseCursor, currentTarget: HTMLDocument http://localhost/auxl/test.html, eventPhase: 3, bubbles: true, cancelable: false, returnValue: true, defaultPrevented: false, … }

	mousedown { target: canvas.a-canvas.a-grab-cursor, buttons: 1, clientX: 1245, clientY: 326, layerX: 1245, layerY: 326 }

		document.addEventListener('mousedown', function(e){
			//e.stopImmediatePropagation();
			//e.stopPropagation();
			//e.preventDefault();
			console.log('Mouse Down')
		});
	*/

},
remove: function () {

	//Universal Events
	document.removeEventListener('mainClick', this.mainClickHit);
	document.removeEventListener('altClick', this.altClickHit);
	document.removeEventListener('direction', this.directionHit);
	document.removeEventListener('rotation', this.rotationHit);
	document.removeEventListener('action1', this.action1Hit);
	document.removeEventListener('action2', this.action2Hit);
	document.removeEventListener('action3', this.action3Hit);
	document.removeEventListener('action4', this.action4Hit);
	document.removeEventListener('action5', this.action5Hit);
	document.removeEventListener('action6', this.action6Hit);
	document.removeEventListener('action7', this.action7Hit);
	document.removeEventListener('action8', this.action8Hit);
	//Desktop
	document.removeEventListener('click', this.mainClickE);
	document.removeEventListener('contextmenu', this.dispatchAlt);
	document.removeEventListener('keydown', this.keyboardDownHit);
	document.removeEventListener('keyup', this.keyboardUpHit);

	//VR Controllers
	this.vrController1.removeEventListener('triggerdown', this.questLeftMainClickDown);
	this.vrController1.removeEventListener('triggerup', this.questLeftMainClickUp);
	this.vrController1.removeEventListener('gripdown', this.questLeftAltClickDown);
	this.vrController1.removeEventListener('gripup', this.questLeftAltClickUp);
	this.vrController1.removeEventListener('xbuttondown', this.action1Down);
	this.vrController1.removeEventListener('xbuttonup', this.action1Up);
	this.vrController1.removeEventListener('ybuttondown', this.action2Down);
	this.vrController1.removeEventListener('ybuttonup', this.action2Up);
	this.vrController1.removeEventListener('thumbstickmoved', this.questJoystickLocomotionEvent);
	this.vrController2.removeEventListener('triggerdown', this.questRightMainClickDown);
	this.vrController2.removeEventListener('triggerup', this.questRightMainClickUp);
	this.vrController2.removeEventListener('gripdown', this.questRightAltClickDown);
	this.vrController2.removeEventListener('gripup', this.questRightAltClickUp);
	this.vrController2.removeEventListener('abuttondown', this.action3Down);
	this.vrController2.removeEventListener('abuttonup', this.action3Up);
	this.vrController2.removeEventListener('bbuttondown', this.action4Down);
	this.vrController2.removeEventListener('bbuttonup', this.action4Up);
	this.vrController2.removeEventListener('thumbstickmoved', this.questJoystickOtherEvent);
	//Joysticks
	if(this.auxl.vrHand === 'bothRight' || this.auxl.vrHand === 'bothLeftLoco'){
		this.vrController1.removeEventListener('thumbstickmoved', this.questJoystickLocomotionEvent);
		this.vrController2.removeEventListener('thumbstickmoved', this.questJoystickOtherEvent);
	} else if(this.auxl.vrHand === 'bothLeft' || this.auxl.vrHand === 'bothRightLoco'){
		this.vrController2.removeEventListener('thumbstickmoved', this.questJoystickLocomotionEvent);
		this.vrController1.removeEventListener('thumbstickmoved', this.questJoystickOtherEvent);
	} else {
		this.vrController1.removeEventListener('thumbstickmoved', this.questJoystickLocomotionEvent);
		this.vrController2.removeEventListener('thumbstickmoved', this.questJoystickOtherEvent);
	}

	//Mobile
	this.mobileUpLeft.removeEventListener('mousedown', this.directionForwardLeftDown);
	this.mobileUpLeft.removeEventListener('mouseup', this.directionForwardLeftUp);
	this.mobileUp.removeEventListener('mousedown', this.directionForwardDown);
	this.mobileUp.removeEventListener('mouseup', this.directionForwardUp);
	this.mobileUpRight.removeEventListener('mousedown', this.directionForwardRightDown);
	this.mobileUpRight.removeEventListener('mouseup', this.directionForwardRightUp);
	this.mobileLeft.removeEventListener('mousedown', this.directionLeftDown);
	this.mobileLeft.removeEventListener('mouseup', this.directionLeftUp);
	this.mobileCenter.removeEventListener('mousedown', this.blankHit);
	this.mobileCenter.removeEventListener('mouseup', this.blankHit);
	this.mobileRight.removeEventListener('mousedown', this.directionRightDown);
	this.mobileRight.removeEventListener('mouseup', this.directionRightUp);
	this.mobileDownLeft.removeEventListener('mousedown', this.directionBackwardLeftDown);
	this.mobileDownLeft.removeEventListener('mouseup', this.directionBackwardLeftUp);
	this.mobileDown.removeEventListener('mousedown', this.directionBackwardDown);
	this.mobileDown.removeEventListener('mouseup', this.directionBackwardUp);
	this.mobileDownRight.removeEventListener('mousedown', this.directionBackwardRightDown);
	this.mobileDownRight.removeEventListener('mouseup', this.directionBackwardRightUp);
	this.mobileSelect.removeEventListener('mousedown', this.blankHit);
	//this.mobileSelect.removeEventListener('mouseup', this.blankHit);
	this.mobileStart.removeEventListener('mousedown', this.blankHit);
	//this.mobileStart.removeEventListener('mouseup', this.blankHit);
	this.mobileA.removeEventListener('mousedown', this.action1Down);
	this.mobileA.removeEventListener('mouseup', this.action1Up);
	this.mobileB.removeEventListener('mousedown', this.action2Down);
	this.mobileB.removeEventListener('mouseup', this.action2Up);
	this.mobileC.removeEventListener('mousedown', this.action3Down);
	this.mobileC.removeEventListener('mouseup', this.action3Up);
	this.mobileD.removeEventListener('mousedown', this.action4Down);
	this.mobileD.removeEventListener('mouseup', this.action4Up);
	this.mobileE.removeEventListener('mousedown', this.action5Down);
	this.mobileE.removeEventListener('mouseup', this.action5Up);
	this.mobileF.removeEventListener('mousedown', this.action6Down);
	this.mobileF.removeEventListener('mouseup', this.action6Up);
	this.mobileL.removeEventListener('touchstart', this.action7Down);
	this.mobileL.removeEventListener('touchend', this.action7Up);
	this.mobileR.removeEventListener('touchstart', this.action8Down);
	this.mobileR.removeEventListener('touchend', this.action8Up);
},
});

//
//Export
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (controls);

/***/ }),

/***/ "./src/support/doors.js":
/*!******************************!*\
  !*** ./src/support/doors.js ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   doorway: () => (/* binding */ doorway),
/* harmony export */   doorwayTrigger: () => (/* binding */ doorwayTrigger)
/* harmony export */ });
//
//AUXL : A-Frame UX Library
//v0.3 Engine
//https://github.com/Minty-Crisp/AUXL
//
//Created by Minty-Crisp (mintycrisp.com)
//
//Doors
//
//doorway
//doorwayTrigger

//
//Click
const doorway = AFRAME.registerComponent('doorway', {
	dependencies: ['auxl'],
schema: {
	zone: {type: 'string', default: 'zone0'},
	to: {type: 'string', default: 'connect0'},
	delay: {type: 'number', default: 0},
},
init: function () {
	this.auxl = document.querySelector('a-scene').systems.auxl;
	this.zone = this.data.zone;
	this.to = this.data.to;
	this.delay = this.data.delay;
},
swap: function(){
	this.timeout = setTimeout(() => {
		this.auxl[this.zone].Move(this.to);
		clearTimeout(this.timeout);
	}, this.delay);
},
events: {
	click: function (evt) {
		this.swap();
	}
},
remove: function() {
	clearTimeout(this.timeout);
},
});

//Trigger
const doorwayTrigger = AFRAME.registerComponent('doorway-trigger', {
	dependencies: ['auxl'],
schema: {
	zone: {type: 'string', default: 'zone0'},
	to: {type: 'string', default: 'connect0'},
	delay: {type: 'number', default: 0},
},
init: function () {
	this.auxl = document.querySelector('a-scene').systems.auxl;
	this.zone = this.data.zone;
	this.to = this.data.to;
	this.delay = this.data.delay;
},
swap: function(){
	this.timeout = setTimeout(() => {
		this.auxl[this.zone].Move(this.to);
		clearTimeout(this.timeout);
	}, this.delay);
},
remove: function() {
	clearTimeout(this.timeout);
},
});

//
//Export


/***/ }),

/***/ "./src/support/inventory.js":
/*!**********************************!*\
  !*** ./src/support/inventory.js ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   acceptobject: () => (/* binding */ acceptobject),
/* harmony export */   clickaddinventory: () => (/* binding */ clickaddinventory)
/* harmony export */ });
//
//AUXL : A-Frame UX Library
//v0.3 Engine
//https://github.com/Minty-Crisp/AUXL
//
//Created by Minty-Crisp (mintycrisp.com)
//
//Inventory
//
//clickaddinventory
//acceptobject

//
//Click to Add to Inventory
const clickaddinventory = AFRAME.registerComponent('clickaddinventory', {
dependencies: ['auxl'],
multiple: true,
schema: {
	item: {type: 'string', default: 'itemName'},
	once: {type: 'boolean', default: true},
	delay: {type: 'number', default: 0},
	despawn: {type: 'boolean', default: true},
	auxlObj: {type: 'string', default: 'auxlObj'},
	despawnMethod: {type: 'string', default: 'DespawnCore'},
},
init: function () {
	//AUXL System Connection
	this.auxl = document.querySelector('a-scene').systems.auxl;
	this.domEnt;
	this.item = this.data.item;
	this.once = this.data.once;
	this.delay = this.data.delay;
	this.give = true;
	this.despawn = this.data.despawn;
	this.auxlObj = this.data.auxlObj;
	this.despawnMethod = this.data.despawnMethod;
},
events: {
	click: function () {
		if(this.give){
			this.timeout = setTimeout(() => {
				this.auxl.comp.AddToInventory({item:this.auxl[this.item]});
				if(this.once){
					this.give = false;
				}
				if(this.despawn){
					this.auxl[this.auxlObj][this.despawnMethod]();
				}
				clearTimeout(this.timeout);
			}, this.delay);
		}
	}
},
});

//
//Use on Object
const acceptobject = AFRAME.registerComponent('acceptobject', {
dependencies: ['auxl'],
multiple: true,
schema: {
	item: {type: 'string', default: 'itemName'},
	uses: {type: 'number', default: 1},
	delay: {type: 'number', default: 0},
	despawn: {type: 'boolean', default: true},
	auxlObj: {type: 'string', default: 'auxlObj'},
	despawnMethod: {type: 'string', default: 'DespawnCore'},
	methodObj: {type: 'string', default: 'auxlObj'},
	component: {type: 'string', default: 'null'},
	method: {type: 'string', default: 'methodName'},
	params: {type: 'string', default: 'null'}
},
init: function () {
	//AUXL System Connection
	this.auxl = document.querySelector('a-scene').systems.auxl;
	this.domEnt;
	this.item = this.data.item;
	this.uses = this.data.uses;
	this.delay = this.data.delay;
	this.inUse = false;
	this.despawn = this.data.despawn;
	this.auxlObj = this.data.auxlObj;
	this.despawnMethod = this.data.despawnMethod;
	this.methodObj = this.data.methodObj;
	this.component = this.data.component;
	this.method = this.data.method;
	this.params = this.data.params;
},
run: function(){
	this.timeout = setTimeout(() => {
		if(this.component === 'null'){
			if(this.auxl[this.methodObj][this.method]){
				if(this.params === 'null'){
					this.auxl[this.methodObj][this.method]();
				} else {
					this.auxl[this.methodObj][this.method](this.params);
				}
			}
		} else {
			//object is a dom entity and the component is attached to that object and the func is in that component
			if(document.getElementById(this.methodObj)){
				this.domEnt = document.getElementById(this.methodObj);
				if(this.params === 'null'){
					this.domEnt.components[this.component][this.method]();
				} else {
					this.domEnt.components[this.component][this.method](this.params);
				}
			}
		}
		if(this.auxl[this.item].persist === 'limited'){
			this.auxl[this.item].amount--;
			this.auxl.comp.UpdateInventoryMenu();
			this.auxl.player.Unequip();
		}
		this.uses--;
		if(this.uses <= 0 && this.despawn){
			this.auxl[this.auxlObj][this.despawnMethod]();
		}
		this.inUse = false;
		clearTimeout(this.timeout);
	}, this.delay);
},
events: {
	click: function () {
		if(this.auxl.player.layer.equipped){
			if(this.auxl.player.layer.equippedObject === this.item){
				if(this.inUse){}else{
					this.inUse = true;
					this.run();
				}
			}
		}
	}
},
});

//
//Export


/***/ }),

/***/ "./src/support/material.js":
/*!*********************************!*\
  !*** ./src/support/material.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   gltfmat: () => (/* binding */ gltfmat),
/* harmony export */   modifyMaterials: () => (/* binding */ modifyMaterials)
/* harmony export */ });
//
//AUXL : A-Frame UX Library
//v0.3 Engine
//https://github.com/Minty-Crisp/AUXL
//
//Created by Minty-Crisp (mintycrisp.com)
//
//Material
//
//gltfmat
//modifyMaterials

//
//Altering GLTF Materials
const gltfmat = AFRAME.registerComponent('gltfmat', {
dependencies: ['auxl'],
schema: {
	colors: {type: 'array', default: [false]},
	emissive: {type: 'array', default: [false]},
	textures: {type: 'array', default: [false]},
	repeats: {type: 'array', default: [false]},
	random: {type: 'boolean', default: false},
},
	init: function () {
		//AUXL System
		const auxl = document.querySelector('a-scene').systems.auxl;
		//Mesh Name
		this.meshName = false;
		this.current = 0;
		this.materials = [];
		this.data.colors.forEach(color => {
			//Color
			if(color){
				//Base Color
				if(color === 'random'){
					this.materials[this.current] = new THREE.MeshStandardMaterial({color: auxl.colorTheoryGen().base});
				} else {
					this.materials[this.current] = new THREE.MeshStandardMaterial({color});
				}
				//Emissive
				if(this.data.emissive[this.current]){
					this.materials[this.current].emissive = this.materials[this.current].color;
					this.materials[this.current].emissiveIntensity = this.data.emissive[this.current];
				}
				//Texture
				if(this.data.textures[this.current]){
					this.materials[this.current].texture = new THREE.TextureLoader().load(this.data.textures[this.current]);
					if(!this.data.repeats[this.current] || this.data.repeats[this.current] === 'false'){} else {
						this.materials[this.current].texture.wrapS = THREE.RepeatWrapping;
						this.materials[this.current].texture.wrapT = THREE.RepeatWrapping;
						this.materials[this.current].texture.repeat.set(this.data.repeats[this.current]);
					}
				}
			} else {
				this.materials[this.current] = false;
			}
			this.current++;
		})
		//console.log(this.materials)
		this.current = -2;
		// Wait for model to load. GLTF/OBJ Event
		this.el.addEventListener('model-loaded', () => {
			// Grab the mesh / scene.
			const obj = this.el.getObject3D('mesh');
			obj.traverse(node => {
				//console.log(node.name)
				if(this.current < 0){} else {
					if(this.data.random){
						node.material = new THREE.MeshStandardMaterial({color: auxl.colorTheoryGen().base});
					} else {
						if(this.materials[this.current]){
							node.material = this.materials[this.current];
						}
					}
				}
				this.current++;
			});
		});
	}
});

//
//Testing
//Gradient & Toon Shader
const modifyMaterials = AFRAME.registerComponent('modify-materials', {
dependencies: ['auxl'],
	init: function () {
		const auxl = document.querySelector('a-scene').systems.auxl;
		// Wait for model to load. GLTF/OBJ Event
		this.el.addEventListener('model-loaded', () => {
			// Grab the mesh / scene.
			const obj = this.el.getObject3D('mesh');
			// Go over the submeshes and modify materials we want.
			//const materialTest = {src: './assets/img/minty/4up.jpg', shader: "flat", color: "#FFFFFF", opacity: 1};
			//mesh.material = new THREE.MeshBasicMaterial( { color: 0xffffff } );
			const materialTest = new THREE.MeshBasicMaterial( { color: 0xffffff } );

const threeTone = new THREE.TextureLoader().load('./assets/img/gradient/threeTone.jpg')
threeTone.minFilter = THREE.NearestFilter
threeTone.magFilter = THREE.NearestFilter

const fourTone = new THREE.TextureLoader().load('./assets/img/gradient/fourTone.jpg')
fourTone.minFilter = THREE.NearestFilter
fourTone.magFilter = THREE.NearestFilter

const fiveTone = new THREE.TextureLoader().load('./assets/img/gradient/fiveTone.jpg')
fiveTone.minFilter = THREE.NearestFilter
fiveTone.magFilter = THREE.NearestFilter

			//const diffuseColor = new THREE.Color().setHSL( alpha, 0.5, gamma * 0.5 + 0.1 ).multiplyScalar( 1 - beta * 0.2 );
			const gradientMap = new THREE.DataTexture( 2, 1, 2, 3 );
			gradientMap.needsUpdate = true;

			const materialToon = new THREE.MeshToonMaterial( {
				color: 'blue',
				gradientMap: fiveTone
			} );

			obj.traverse(node => {
				if(node.name.indexOf('Mesh_crop_melon') !== -1) {
					node.material = materialToon;
				}


//testing
//<empty string>
//crop_melon
//Mesh_crop_melon
//Mesh_crop_melon_1
//Mesh_crop_melon_2
/*
				console.log(node.name)
				if(node.name.indexOf('Mesh_crop_melon') !== -1) {
					node.material.color.set('red');
				}
				if(node.name.indexOf('Mesh_crop_melon_1') !== -1) {
					node.material.color.set('blue');
				}
				if(node.name.indexOf('Mesh_crop_melon_2') !== -1) {
					node.material.color.set('yellow');
				}
*/
			});
		});
	}
});

//
//Export


/***/ }),

/***/ "./src/support/menu.js":
/*!*****************************!*\
  !*** ./src/support/menu.js ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   scroll: () => (/* binding */ scroll)
/* harmony export */ });
//
//AUXL : A-Frame UX Library
//v0.3 Engine
//https://github.com/Minty-Crisp/AUXL
//
//Created by Minty-Crisp (mintycrisp.com)
//
//Menu
//
//Scroll

//
//Scroll
const scroll = AFRAME.registerComponent('scroll', {
dependencies: ['auxl', 'raycaster'],
schema: {
	type: {type: 'string', default: 'plane'},
	axis: {type: 'string', default: 'horizontal'},
	parent: {type: 'string', default: 'auxlObj'},
	length: {type: 'number', default: 1},
	options: {type: 'number', default: 5},
	elements: {type: 'array', default: []},
},
init: function () {
	//AUXL System Connection
	this.auxl = document.querySelector('a-scene').systems.auxl;
	this.scrollee = document.getElementById(this.data.parent);
	this.domEnt;
	this.elements = [];
	this.data.elements.forEach(el => this.elements.push(document.getElementById(el)));

	//Map needs to import dynamically
	//Scroll Map
	this.scrollMap = new Map();
	this.scrollMap.set(4, this.elements[7]);
	this.scrollMap.set(3, this.elements[6]);
	this.scrollMap.set(2, this.elements[5]);
	this.scrollMap.set(1, this.elements[4]);
	this.scrollMap.set(0, this.elements[3]);
	this.scrollMap.set(-1, this.elements[2]);
	this.scrollMap.set(-2, this.elements[1]);
	this.scrollMap.set(-3, this.elements[0]);

	//Throttled Scroll Function
	this.scrollThrottled = AFRAME.utils.throttle(this.scroll, 50, this);

	//Raycaster
	this.mouse = document.querySelector('#mouseController');
	this.mouseRay = this.mouse.components.raycaster;
	//Need VR Raycasters as well

	//Intersection Data
	this.intersection;
	this.previous = new THREE.Vector3(0,0,0);
	//this.previous.copy(this.scrollee.object3D.position);

	//Scroll Calc
	this.hold = false;
	this.distance = 0;
	this.compass = false;
	this.direction = false;
	this.location = 0;
	this.prevPos = 0;
	this.pos = 0;
	this.size = this.data.length / this.data.options;
	this.opacInit = true;
	this.opacityPlus = 0;
	this.plusFadeEl = false;
	//this.plusExtraEl = false;
	this.opacityMinus = 0;
	this.minusFadeEl = false;
	//this.minusExtraEl = false;
	this.extraEl = false;

	//Mousedown
    this.el.addEventListener('mousedown', () => {
		//console.log('mousedown');
		//Mouse held down to drag
		this.hold = true;
		//Init starting intersection point to avoid drag on first click
		this.previous.copy(this.mouseRay.getIntersection(this.el).point);
	});
	//Mouseup
    this.el.addEventListener('mouseup', () => {
		//console.log('mouseup');
		//Mouse released to stop drag
		this.hold = false;
		this.opacInit = true;
	});
	//Mouseleave
    this.el.addEventListener('mouseleave', () => {
		//console.log('mouseleave');
		//Mouse left to stop tracking pos
		this.hold = false;
		this.opacInit = true;
	});

	//Helper
	//Raycaster Intersected
    this.el.addEventListener('raycaster-intersected', function (evt) {
		//console.log('raycaster-intersected');
		//console.log(evt);
    });

},
//Calc which direction to move
axisDirection: function(previous, next){
	let axis;
	let directions = [];
	if(this.data.axis === 'vertical'){
		axis = 'y';
		directions = ['down','up'];
	} else if(this.data.axis === 'horizontal'){
		axis = 'x';
		directions = ['left','right'];
	}
	if(previous[axis] < next[axis]){
		return {axis, dir:directions[0]};
	} else {
		return {axis, dir:directions[1]};
	}
},
//Convert Number to 2 Decimals
twoDecimal: function(num){
	return Math.round(num*100)/100;
},
//Absolute single point to point distance
distanceTo: function(num1, num2){
	return Math.abs(Math.abs(num1) - Math.abs(num2));
},
getMapEl: function(map, location){
	function offMap(key){
		if(map.get(key) === undefined){
			return true;
		} else {
			return false;
		}
	}
	while(offMap(location)){
		if(location > 0){
			location -= this.elements.length;
		} else if(location < 0){
			location += this.elements.length;
		}
	}
	return map.get(location);
},
//Throttle Scrolling
scroll: function(){
	if(this.hold){
		//Get current intersection point
		this.intersection = this.mouseRay.getIntersection(this.el);
		//Ensure returned intersection is complete
		if(this.intersection === null || this.intersection === undefined){}else{
			//Ensure movement has happened
			if(this.intersection.point.equals(this.previous)){} else {
				//Get Up,Down,Left,Right direction
				this.compass = this.axisDirection(this.previous, this.intersection.point);
				//Calc absolute distance of difference and move in direction
				this.distance = this.distanceTo(this.previous[this.compass.axis], this.intersection.point[this.compass.axis]);
				this.pos = this.scrollee.object3D.position[this.compass.axis];
				//Move in direction type
				if(this.data.type === 'plane'){
					if(this.compass.dir === 'left' || this.compass.dir === 'down'){
						this.scrollee.object3D.position[this.compass.axis] += this.distance;
					} else if(this.compass.dir === 'right' || this.compass.dir === 'up'){
						this.scrollee.object3D.position[this.compass.axis] -= this.distance;
					}
//2 Decimal Tracking
this.pos = this.twoDecimal(this.pos);

//Menu Swapping
let prev;
let next;

if(this.location > 0){
	prev = ((this.location * this.size) + this.size)*-1;
	next = prev + this.size;
} else if(this.location < 0){
	next = ((this.location * this.size) - this.size)*-1;
	prev = next - this.size;
} else {
	prev = (this.location * this.size) - this.size;
	next = (this.location * this.size) + this.size;
}
prev = this.twoDecimal(prev);
next = this.twoDecimal(next);

//Changing from 1 direction to another breaks it initially, but after a few more scrolls in the same direction it fixes itself.
//Don't swap elements until checkpoint, need to make 0 as a checkpoint
//When exact el placement is working perfectly, convert using this.data.options and this.elements.length
//What about starting off center, like 0.02 to detect direction right away

if(this.pos > next){
	this.location--;
	this.opacityPlus = 1;
	this.opacityMinus = 0;
	this.direction = 'plus';
	this.opacInit = false;
	//swap extra to plus position
	this.plusFadeEl = this.getMapEl(this.scrollMap, this.location+2);
	this.minusFadeEl = this.getMapEl(this.scrollMap, this.location-3);
	this.extraEl = this.getMapEl(this.scrollMap, this.location+4);
	this.extraEl.object3D.position[this.compass.axis] = (this.location - this.elements.length/2) * this.size;
console.log('Shift Plus');
console.log(this.pos);
console.log(this.location);
} else if(this.pos < prev){
	this.location++;
	this.opacityPlus = 0;
	this.opacityMinus = 1;
	this.direction = 'minus';
	this.opacInit = false;
	//swap extra to minus position
	this.plusFadeEl = this.getMapEl(this.scrollMap, this.location+3);
	this.minusFadeEl = this.getMapEl(this.scrollMap, this.location-2);
	this.extraEl = this.getMapEl(this.scrollMap, this.location-4);
	this.extraEl.object3D.position[this.compass.axis] = (this.location + this.elements.length/2) * this.size;

console.log('Shift Minus');
console.log(this.pos);
console.log(this.location);
}

//Option Opacity
let opacTotal = 0;
if(this.pos > this.prevPos){
	if(this.opacInit){
//This is allowed each time the mouse is cleared
		if(this.direction === 'minus' || !this.direction){
			this.opacityPlus = 1;
			this.opacityMinus = 0;
			this.direction = 'plus';
			//ensure extra is at plus position
			this.plusFadeEl = this.getMapEl(this.scrollMap, this.location+2);
			this.minusFadeEl = this.getMapEl(this.scrollMap, this.location-3);
			this.extraEl = this.getMapEl(this.scrollMap, this.location+4);
			this.extraEl.object3D.position[this.compass.axis] = (this.location - this.elements.length/2) * this.size;
console.log('swap')
		}
	}
	opacTotal = this.twoDecimal((this.pos - this.prevPos)*this.data.options);
	this.opacityPlus = this.twoDecimal(this.opacityPlus - opacTotal);
	this.opacityMinus = this.twoDecimal(this.opacityMinus + opacTotal);
console.log('Plus');
} else if(this.pos < this.prevPos){
	if(this.opacInit){
//This is allowed each time the mouse is cleared
		if(this.direction === 'plus' || !this.direction){
			this.opacityPlus = 0;
			this.opacityMinus = 1;
			this.direction = 'minus';
			//ensure extra is at minus position
			this.plusFadeEl = this.getMapEl(this.scrollMap, this.location+3);
			this.minusFadeEl = this.getMapEl(this.scrollMap, this.location-2);
			this.extraEl = this.getMapEl(this.scrollMap, this.location-4);
			this.extraEl.object3D.position[this.compass.axis] = (this.location + this.elements.length/2) * this.size;
console.log('swap')
		}
	}
	opacTotal = this.twoDecimal((this.prevPos - this.pos)*this.data.options);
	this.opacityPlus = this.twoDecimal(this.opacityPlus + opacTotal);
	this.opacityMinus = this.twoDecimal(this.opacityMinus - opacTotal);
console.log('Minus');
}
this.prevPos = this.pos;

if(this.plusFadeEl && this.minusFadeEl){
	this.plusFadeEl.setAttribute('material',{opacity: this.opacityPlus});
	this.minusFadeEl.setAttribute('material',{opacity: this.opacityMinus});
}

console.log({
previous:prev, next, location: this.location,
plusFadeEl: this.plusFadeEl,
minusFadeEl: this.minusFadeEl,
extraEl: this.extraEl,
})

//Changing from 1 direction to another breaks it

/*
0
0.8 : 4
0.6 : 3
0.4 : 2 *
0.2 : 1 *
0 : 0 *
-0.2 : -1 *
-0.4 : -2 *
-0.6 : -3

1 Minus (Left/Down)
1 : 5
0.8 : 4
0.6 : 3 *
0.4 : 2 *
0.2 : 1 *
0 : 0 *
-0.2 : -1 *
-0.4 : -2

2 Minus (Left/Down)
1.2 : 6
1 : 5
0.8 : 4 *
0.6 : 3 *
0.4 : 2 *
0.2 : 1 *
0 : 0 *
-0.2 : -1


-1 Plus (Right/Up)
0.6 : 3
0.4 : 2
0.2 : 1 *
0 : 0 *
-0.2 : -1 *
-0.4 : -2 *
-0.6 : -3 *
- 0.8 : -4

-2 Plus (Right/Up)
0.4 : 2
0.2 : 1
0 : 0 *
-0.2 : -1 *
-0.4 : -2 *
-0.6 : -3 *
- 0.8 : -4 *
-1 : -5

*/
				} else if(this.data.type === 'cylinder'){
					if(this.compass === 'left'){
						this.scrollee.object3D.rotation.y += this.distance;
					} else if(this.compass === 'right'){
						this.scrollee.object3D.rotation.y -= this.distance;
					} else if(this.compass === 'up'){
						this.scrollee.object3D.rotation.x += this.distance;
					} else if(this.compass === 'down'){
						this.scrollee.object3D.rotation.x -= this.distance;
					}
				}
				//Update current intersection to previous
				this.previous.copy(this.intersection.point);
			}
		}
	}
},
tick: function (time, timeDelta) {
	this.scrollThrottled();
},
});


//
//Export


/***/ }),

/***/ "./src/support/misc.js":
/*!*****************************!*\
  !*** ./src/support/misc.js ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   hovertext: () => (/* binding */ hovertext),
/* harmony export */   lookAtXYZ: () => (/* binding */ lookAtXYZ),
/* harmony export */   stare: () => (/* binding */ stare),
/* harmony export */   syncPos: () => (/* binding */ syncPos)
/* harmony export */ });
//
//AUXL : A-Frame UX Library
//v0.3 Engine
//https://github.com/Minty-Crisp/AUXL
//
//Created by Minty-Crisp (mintycrisp.com)
//
//Misc
//
//attach
//lookAtXYZ
//stare
//hovertext

//
//Sync Pos
const syncPos = AFRAME.registerComponent('sync-pos', {
	dependencies: ['auxl'],
    schema: {
        idname: {type: 'string', default: 'ui'},
        position: {type: 'vec3'},
    },
    init: function () {
        //Thing To Attach
        this.attachee = document.getElementById(this.data.idname);
        this.offset = new THREE.Vector3();
		if(this.data.position){
			this.offset.copy(this.data.position);
		} else {
        	this.offset.copy(this.attachee.object3D.position);
		}
        this.newPosVec3 = new THREE.Vector3();
    },
    attached: function () {
        //Clone current the entity this component is attached to's position
        this.newPosVec3.copy(this.el.object3D.position);
        //Offsets
        this.newPosVec3.x += this.offset.x;
        this.newPosVec3.y += this.offset.y;
        this.newPosVec3.z += this.offset.z;
        //Set position for UI at 3js level for speed!
        this.attachee.object3D.position.copy(this.newPosVec3);
    },
    tick: function (time, timeDelta) {
        this.attached();
    },
});

//
//Look At XYZ
const lookAtXYZ = AFRAME.registerComponent('look-at-xyz', {
	dependencies: ['auxl'],
	schema: {
		buffer: {type: 'number', default: 0},
		drag: {type: 'number', default: 0},
		match: {type: 'string', default: 'camera'},
		x: {type: 'boolean', default: false},
		y: {type: 'boolean', default: false},
		z: {type: 'boolean', default: false},
	},
    init: function () {
    },
    update: function () {
		this.rotation = new THREE.Euler();
		this.rotation.copy(this.el.object3D.rotation);
		this.matchView = document.getElementById(this.data.match);
		this.matchRotation = new THREE.Euler();
		this.lookAtXYZThrottled = AFRAME.utils.throttle(this.lookAtXYZ, 30, this);
    },
    lookAtXYZ: function () {
		this.matchRotation.copy(this.matchView.object3D.rotation);
		//Sync X,Y and/or Z
		if(this.data.x){
			if(Math.abs(this.matchRotation.x - this.rotation.x) >= this.data.buffer){
				this.rotation.x = this.matchRotation.x;
			}
		}
		if(this.data.y){
			if(Math.abs(this.matchRotation.y - this.rotation.y) >= this.data.buffer){
				if(this.data.drag > 0){
					if(this.matchRotation.y > this.rotation.y){
						this.rotation.y += this.data.drag;
					} else {
						this.rotation.y -= this.data.drag;
					}
				} else {
					this.rotation.y = this.matchRotation.y;
				}


/*
				if(this.data.buffer > 0){
					if(this.matchRotation.y > this.rotation.y){
						this.rotation.y += this.data.buffer/10;
					} else {
						this.rotation.y -= this.data.buffer/10;
					}
				} else {
					this.rotation.y = this.matchRotation.y;
				}
*/



			}
		}
		if(this.data.z){
			if(Math.abs(this.matchRotation.z - this.rotation.z) >= this.data.buffer){
				this.rotation.z = this.matchRotation.z;
			}
		}
		this.el.object3D.rotation.copy(this.rotation);
    },
    tick: function (time, timeDelta) {
        this.lookAtXYZThrottled();
    },
});

//
//Stare
const stare = AFRAME.registerComponent('stare', {
	dependencies: ['auxl'],
	schema: {
		id: {type: 'string', default:'playerRig'},
		twist: {type: 'boolean', default: false},
	},
    init: function () {
    },
    update: function () {
		this.idView = document.getElementById(this.data.id);
		this.idPosition = new THREE.Vector3();
		this.stareThrottled = AFRAME.utils.throttle(this.stare, 30, this);
    },
    stare: function () {
		//Get Position of Stare Object
		this.idPosition.copy(this.idView.object3D.position);
		//If player, add current camera height
		if(this.data.id === 'playerRig'){
			this.idPosition.y += document.getElementById('camera').object3D.position.y;
		}
		//Twist will not look up or down
		if(this.data.twist){
			this.idPosition.y = this.el.object3D.position.y;
		}
		this.el.object3D.lookAt(this.idPosition);
    },
    tick: function (time, timeDelta) {
        this.stareThrottled();
    },
});

//
//Display Text Description on Hover
const hovertext = AFRAME.registerComponent('hovertext', {
	dependencies: ['auxl'],
schema: {
	value: {type: 'string', default: 'TEXT'},
	hover: {type: 'string', default: 'front'},
	offset: {type: 'number', default: 1},
	twist: {type: 'bool', default: true},
	size: {type: 'number', default: 20},
},
    init: function () {
		this.auxl = document.querySelector('a-scene').systems.auxl;
		this.value = this.data.value;
		this.hover = this.data.hover;
		this.offset = this.data.offset;
		this.twist = this.data.twist;
		this.size = this.data.size;
		this.hoverSpawned = false;

		this.position = new THREE.Vector3(0,0,0);

		if(this.hover === 'top'){
			this.position = new THREE.Vector3(0,this.offset,0);
		} else if(this.hover === 'front'){
			this.position = new THREE.Vector3(0,0,this.offset);
		}

		//
		//Hover Text Template
		this.hoverTextParentData = {
		data:'hoverTextParentData',
		id:'hoverTextParent',
		sources:false,
		text: false,
		geometry: false,
		material: false,
		position: new THREE.Vector3(0,0,0),
		rotation: new THREE.Vector3(0,0,0),
		scale: new THREE.Vector3(1,1,1),
		animations: false,
		mixins: false,
		classes: ['nullParent','a-ent'],
		components: {
			//['look-at-xyz']:{match: 'camera', y:this.twist,},
			['stare']:{id: 'playerRig', twist: this.twist},
		},
		};
		this.hoverTextParent = this.auxl.Core(this.hoverTextParentData);
		this.hoverTextData = {
		data:'hoverTextData',
		id:'hoverText',
		text: {value:this.value, wrapCount: 20, color: "#FFFFFF", font: "exo2bold", zOffset: 0.025, side: 'double', align: "center", baseline: 'center', width: 2},
		position: this.position,
		rotation: new THREE.Vector3(0,0,0),
		scale: new THREE.Vector3(1,1,1),
		animations: false,
		mixins: false,
		classes: ['a-ent'],
		components: false,
		};
		this.hoverText = this.auxl.Core(this.hoverTextData);
		this.hoverTextAllData = {
			parent: {core: this.hoverTextParent},
			child0: {core: this.hoverText},
		}
		this.hoverTextAll = this.auxl.Layer('hoverTextAll', this.hoverTextAllData);

    },
events: {
	mouseenter: function (evt) {
		if(this.hoverSpawned){}else{
			this.hoverSpawned = true;
			this.hoverTextAll.SpawnLayer(this.el);
		}
	},
	mouseleave: function (evt) {
		if(this.hoverSpawned){
			this.hoverTextAll.DespawnLayer();
			this.hoverSpawned = false;
		}
	},
},
    update: function () {

    },
    remove: function () {
		if(this.hoverSpawned){}else{
			this.hoverTextAll.DespawnLayer();
			this.hoverSpawned = false;
		}
    },

});

//
//Export


/***/ }),

/***/ "./src/support/movement.js":
/*!*********************************!*\
  !*** ./src/support/movement.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   gimbal: () => (/* binding */ gimbal),
/* harmony export */   locomotion: () => (/* binding */ locomotion),
/* harmony export */   raycastTeleport: () => (/* binding */ raycastTeleport),
/* harmony export */   raycastTeleportSelect: () => (/* binding */ raycastTeleportSelect),
/* harmony export */   teleportation: () => (/* binding */ teleportation)
/* harmony export */ });
//
//AUXL : A-Frame UX Library
//v0.3 Engine
//https://github.com/Minty-Crisp/AUXL
//
//Created by Minty-Crisp (mintycrisp.com)
//
//Movement
//
//locomotion
//gimbal
//teleportation
//raycastTeleport
//raycastTeleportSelect

//
//Locomotion
//1st/3rd Walk|Run X,Y and/or Z w/ Collision Support
const locomotion = AFRAME.registerComponent('locomotion', {
dependencies: ['auxl'],
schema: {
	uiid: {type: 'string', default: 'ui'},
	courserid: {type: 'string', default: 'mouseCursor'},
	movetype: {type: 'string', default: 'vr'},
	pov: {type: 'string', default: '1st'},
	style: {type: 'string', default: 'free'},
	axis: {type: 'string', default: 'posXZ'},
	speedFast: {type: 'number', default: 0.15},
	speedSlow: {type: 'number', default: 0.075},
},
init: function () {
	//AUXL System Connection
	this.auxl = document.querySelector('a-scene').systems.auxl;
	//Free Locomotion
	this.freeStepThrottled = AFRAME.utils.throttle(this.freeStep, 30, this);
	//this.freeStepThrottled = AFRAME.utils.throttle(this.freeStepPlus, 30, this);
	//Grid Locomotion
	this.gridStepThrottled = AFRAME.utils.throttle(this.gridStep, 400, this);

	//Schema Imoprt
	//
	//Cursor Element
	this.mouseCursor = document.getElementById(this.data.courserid);
	//UI to attach
	if(this.data.uuid){
		this.ui = document.getElementById(this.data.uiid);
	}
//
//posXZ
//directionXZ : 1st POV Walk along XZ Floor relative to Camera View
//rigXZ : 3rd POV Walk along XZ Floor
//
//posXZY
//directionXZY : 1st POV Fly relative to Camera View
//
//posXY
//directionXY : 1st POV Walk along XY Wall relative to Camera View
//rigXY : 3rd POV Walk along XY Wall
//
//posXYZ
//directionXYZ : 1st POV Walk along XZ Floor relative to Camera View w/ Up & Down Controls
//rigXYZ : 3rd POV Walk along XZ Floor w/ Up & Down Controls
//
//posXYZWall
//directionXYZWall : 1st POV Walk along X, Y or Z Floor/Walls In or Out
//rigXYZWall : 3rd POV Walk along X, Y or Z Floor/Walls In or Out
//
//angleXY
//directionAXY : 1st POV Orbit Rotate
//rigAXY : 3rd POV Orbit Rotate
//
//angleXYZ
//directionAXYZ : 1st POV Orbit Rotate w/ Zoom In & Out
//rigAXYZ : 3rd POV Orbit Rotate w/ Zoom In & Out

	//Movement Type
	this.movetype = this.data.movetype;
	//vr
	//vrHover
	//desktop
	//mobile

	//Point of View
	this.pov = this.data.pov;
	//1st
	//3rd

	//Free or Grid Locomotion Style
	this.style = this.data.style;
	//free
	//grid

	//Movement Coords
	this.axis = this.data.axis;
	//Move XZ - floor movement
	//Move XY - wall movement
	//Move XYZ - fly movement
	//Move Sphere Angle - orbit movement
	//Move Sphere Angle & Z(In and Out) - orbit with zoom

	//
	//Band Controller Support
	this.directionForward;
	this.directionReverse;
	this.directionBrake1;
	this.directionBrake2;
	this.directionBrake3;
	this.directionBrake4;

	//Camera Walk Support
	this.camera = document.getElementById('camera');
	this.player = document.getElementById('playerRig');
	//this.playerSphere = document.getElementById('playerSphere');
	this.avatar;
	this.avatarSphere;
	this.ui = document.getElementById('beltUIParent');
    this.positionCam = new THREE.Vector3();
    this.positionPlayer = new THREE.Vector3();
    this.rotationPlayer = new THREE.Vector3();
    this.positionAvatar = new THREE.Vector3();
    this.rotationAvatar = new THREE.Vector3();
    this.positionNew = new THREE.Vector3();
    this.rotationNew = new THREE.Vector3();
    this.positionTemp = new THREE.Vector3();
	this.quaternion = new THREE.Quaternion();
	this.vector;
	this.angle;
	//Direction of Movement
	this.directionObject;
    this.directionVector = new THREE.Vector3();


	//Collision
	this.posRound = new THREE.Vector3();
	this.newPosRound = new THREE.Vector3();
	this.newPosStandRound = new THREE.Vector3();
	this.newPosTemp = new THREE.Vector3();
	this.mapX;
	this.mapZ;

	//Attach to Player Support
	this.elPosVec3New = new THREE.Vector3();

	//User Direction Support
	this.velocity;
	this.userPreviousPos = this.player.getAttribute('position');
	this.userPos;
	this.userRot;
	this.userPov;
	this.userTravel;
	this.userView;
	this.newX;
	this.newZ;

	//Locomotion Support
	//Brake Engaged by Default aka Slow Speed
	this.moveTo = false;
	this.moveBack = false;
	this.moveRight = false;
	this.moveLeft = false;
	this.moveUp = false;
	this.moveDown = false;
	this.moveBrake = true;
	this.brakeReady = true;
	this.brakeToggle = false;
	this.brakeReset; //Delay

	//Free Locomotion Support
	this.moveSpeedDefault = this.data.speedFast;
	this.moveSpeedSlow = this.data.speedSlow;

	//Grid Locomotion Support
	this.gridForwardTimeout;
	this.gridReverseTimeout;
	this.gridLeftTimeout;
	this.gridRightTimeout;
	this.gridUpTimeout;
	this.gridDownTimeout;
	this.gridMove = false;
	//Movement is always 1 meter, so speed is in ms
	this.gridSpeed = 400;

	//3rd Person Config
	let initDelay = setTimeout(()=> {
		if(this.pov === '3rd'){
			this.auxl.avatar.SpawnLayer(true);
			this.player.object3D.position.copy(new THREE.Vector3(0,5,10));
			let initDelay = setTimeout(()=> {
				this.avatar = document.getElementById('avatarRig');
				this.avatarSphere = document.getElementById('avatarSphere');
				if(this.axis === 'angleXY'){
					this.avatar.object3D.position.copy(new THREE.Vector3(0,0,-10));
					this.player.object3D.position.copy(new THREE.Vector3(0,1.6,2));
				}
			},500)
		}
	},1000)
},
//1 Increments
round: function (num){
	return Math.round(num);
},
//0.5 Increments
roundHalf: function (num){
	return Math.round(num*2)/2;
},
//Move Forward
movingForward: function (){
	clearTimeout(this.gridForwardTimeout);
	if(this.moveTo){}else{
		this.moveTo = true;
	}
},
//Cancel Forward
cancelForward: function (){
	if(this.moveTo){
		if(this.style === 'grid'){
			if(this.gridMove){
				this.moveTo = false;
			} else {
				this.gridForwardTimeout = setTimeout(() => {
					this.moveTo = false;
				}, this.gridSpeed/1.25);
			}
		} else {
			this.moveTo = false;
		}
	}
},
//Move Reverse
movingReverse: function (){
	clearTimeout(this.gridReverseTimeout);
	if(this.moveBack){}else{
		this.moveBack = true;
	}
},
//Cancel Reverse
cancelReverse: function (){
	if(this.moveBack){
		if(this.style === 'grid'){
			if(this.gridMove){
				this.moveBack = false;
			} else {
				this.gridReverseTimeout = setTimeout(() => {
					this.moveBack = false;
				}, this.gridSpeed/1.25);
			}
		} else {
			this.moveBack = false;
		}
	}
},
//Move Left
movingLeft: function (){
	clearTimeout(this.gridLeftTimeout);
	if(this.moveLeft){}else{
		this.moveLeft = true;
	}
},
//Cancel Left
cancelLeft: function (){
	if(this.moveLeft){
		if(this.style === 'grid'){
			if(this.gridMove){
				this.moveLeft = false;
			} else {
				this.gridLeftTimeout = setTimeout(() => {
					this.moveLeft = false;
				}, this.gridSpeed/1.25);
			}
		} else {
			this.moveLeft = false;
		}
	}
},
//Move Right
movingRight: function (){
	clearTimeout(this.gridRightTimeout);
	if(this.moveRight){}else{
		this.moveRight = true;
	}
},
//Cancel Right
cancelRight: function (){
	if(this.moveRight){
		if(this.style === 'grid'){
			if(this.gridMove){
				this.moveRight = false;
			} else {
				this.gridRightTimeout = setTimeout(() => {
					this.moveRight = false;
				}, this.gridSpeed/1.25);
			}
		} else {
			this.moveRight = false;
		}
	}
},
//Move Up
movingUp: function (){
	clearTimeout(this.gridUpTimeout);
	if(this.moveUp){}else{
		this.moveUp = true;
	}
},
//Cancel Up
cancelUp: function (){
	if(this.moveUp){
		if(this.style === 'grid'){
			if(this.gridMove){
				this.moveUp = false;
			} else {
				this.gridUpTimeout = setTimeout(() => {
					this.moveUp = false;
				}, this.gridSpeed/1.25);
			}
		} else {
			this.moveUp = false;
		}
	}
},
//Move Down
movingDown: function (){
	clearTimeout(this.gridDownTimeout);
	if(this.moveDown){}else{
		this.moveDown = true;
	}
},
//Cancel Down
cancelDown: function (){
	if(this.moveDown){
		if(this.style === 'grid'){
			if(this.gridMove){
				this.moveDown = false;
			} else {
				this.gridDownTimeout = setTimeout(() => {
					this.moveDown = false;
				}, this.gridSpeed/1.25);
			}
		} else {
			this.moveDown = false;
		}
	}
},
//Clear All Movement
clearMovement: function (){
	this.cancelForward();
	this.cancelReverse();
	this.cancelLeft();
	this.cancelRight();
	this.cancelUp();
	this.cancelDown();
},
//Clear All Grid Movement
clearGridMovement: function (){
	this.moveTo = false;
	this.moveBack = false;
	this.moveLeft = false;
	this.moveRight = false;
	clearTimeout(this.gridForwardTimeout);
	clearTimeout(this.gridReverseTimeout);
	clearTimeout(this.gridLeftTimeout);
	clearTimeout(this.gridRightTimeout);
},
//Toggle Speed Change
toggleSpeed: function (){
	if(this.brakeReady){
		if(this.brakeToggle){
			//Set reset switch toggle
			this.brakeToggle = false;
			//Set reset timer switch toggle
			this.brakeReady = false;
			//Brake On
			this.moveBrake = true;
			//Slower Grid Move
			this.gridSpeed = 400;
			this.everyStepThrottled = AFRAME.utils.throttle(this.everyStep, this.gridSpeed, this);
		} else {
			//Set reset switch toggle
			this.brakeToggle = true;
			//Set reset timer switch toggle
			this.brakeReady = false;
			//Brake Off
			this.moveBrake = false;
			//Faster Grid Move
			this.gridSpeed = 200;
			this.everyStepThrottled = AFRAME.utils.throttle(this.everyStep, this.gridSpeed, this);
		}
		this.brakeReset = setTimeout(() => {
			//Set reset switch toggle
			this.brakeReady = true;
			clearTimeout(this.brakeReset);
		}, 250);
	}
},
//Long Buffer for Toggling Speed Change
brakeReadBufferLong: function (){
	//This will start the reset timer to allow the brake to be re-engadged
	this.brakeReset = setTimeout(() => {
		this.brakeReady = true;
		clearTimeout(this.brakeReset);
	}, 2250);
},
//Hover Interaction on Belt UI
hoverLocomotion: function (e) {
	if(this.brakeReady){
		if(this.brakeToggle){
			//Set reset switch toggle
			this.brakeToggle = false;
			//Set reset timer switch toggle
			this.brakeReady = false;
			this.moveBrake = true;
			//Set brake color to red
			this.directionBrake1.setAttribute('material', {color: 'red'});
			this.directionBrake2.setAttribute('material', {color: 'red'});
			this.directionBrake3.setAttribute('material', {color: 'red'});
			this.directionBrake4.setAttribute('material', {color: 'red'});
			//Anim positition for forward/reverse bar and brakes
			this.directionForward.emit('brakeOn',{});
			this.directionReverse.emit('brakeOn',{});
			this.directionBrake1.emit('brakeOn',{});
			this.directionBrake2.emit('brakeOn',{});
			this.directionBrake3.emit('brakeOn',{});
			this.directionBrake4.emit('brakeOn',{});
		} else {
			//Set reset switch toggle
			this.brakeToggle = true;
			//Set reset timer switch toggle
			this.brakeReady = false;
			this.moveBrake = false;
			//Set brake color to default
			this.directionBrake1.setAttribute('material', {color: 'black'});
			this.directionBrake2.setAttribute('material', {color: 'black'});
			this.directionBrake3.setAttribute('material', {color: 'black'});
			this.directionBrake4.setAttribute('material', {color: 'black'});
			//Anim positition for forward/reverse bar back to default
			this.directionForward.emit('brakeOff',{});
			this.directionReverse.emit('brakeOff',{});
			this.directionBrake1.emit('brakeOff',{});
			this.directionBrake2.emit('brakeOff',{});
			this.directionBrake3.emit('brakeOff',{});
			this.directionBrake4.emit('brakeOff',{});
		}
	}
},
//Update
update: function () {
	//Locomotion Support
	//Brake Engaged by Default
	this.moveTo = false;
	this.moveBack = false;
	this.moveRight = false;
	this.moveLeft = false;
	this.moveBrake = true;
	this.brakeReady = true;
	this.brakeToggle = false;
	this.brakeReset; //Delay
	this.moveSpeedDefault = this.data.speedFast;
	this.moveSpeedSlow = this.data.speedSlow;

	//Grid Locomotion Support
	this.gridForwardTimeout;
	this.gridReverseTimeout;
	this.gridLeftTimeout;
	this.gridRightTimeout;
	this.gridMove = false;
	//Movement is always 1 meter, so speed is in ms
	this.gridSpeed = 500;

	//Schema Imoprt
	//
	//Cursor Element
	this.mouseCursor = document.getElementById(this.data.courserid);
	//UI to attach
	if(this.data.uiid){
		this.ui = document.getElementById(this.data.uiid);
	}
	//Movement Type
	this.movetype = this.data.movetype;
	//Point of View
	this.pov = this.data.pov;
	//Free or Grid Locomotion Style
	this.style = this.data.style;
	//Movement Coords
	this.axis = this.data.axis;
	//3rd Person Config
	let initDelay = setTimeout(()=> {
		if(this.pov === '3rd'){
			this.auxl.avatar.SpawnLayer(true);
			this.player.object3D.position.copy(new THREE.Vector3(0,5,10));
			let initDelay = setTimeout(()=> {
				this.avatar = document.getElementById('avatarRig');
				this.avatarSphere = document.getElementById('avatarSphere');
				if(this.axis === 'angleXY'){
					this.avatar.object3D.position.copy(new THREE.Vector3(0,0,-10));
					this.player.object3D.position.copy(new THREE.Vector3(0,1.6,2));
				}
			},500)
		}
	},1000)

	//Keyboard Controller Event Listeners
	if(this.movetype === 'desktop'){
		//Controlled by Universal Controls
		this.directionObject = document.getElementById('camera');
	} else if(this.movetype === 'mobile'){
		//Controlled by Universal Controls
		this.directionObject = document.getElementById('camera');
	} else if(this.movetype === 'vr'){
		//Controlled by Universal Controls
		if(this.auxl.directionType === 'camera'){
			this.directionObject = document.getElementById('camera');
		} else {
			if(this.auxl.vrHand === 'bothRight' || this.auxl.vrHand === 'bothLeftLoco'){
				this.directionObject = document.getElementById('vrController1');
			} else if(this.auxl.vrHand === 'bothLeft' || this.auxl.vrHand === 'bothRightLoco'){
				this.directionObject = document.getElementById('vrController2');
			} else {
				this.directionObject = document.getElementById('vrController1');
			}
		}	
	} else if(this.movetype === 'vrHover'){
		if(this.auxl.directionType === 'camera'){
			this.directionObject = document.getElementById('camera');
		} else {
			this.directionObject = document.getElementById('vrController1');
		}	
		//this.vrController1;
		this.directionForward = document.getElementById('locomotionForwardUI');
		this.directionReverse = document.getElementById('locomotionReverseUI');
		this.directionBrake1 = document.getElementById('locomotionBrake1UI');
		this.directionBrake2 = document.getElementById('locomotionBrake2UI');
		this.directionBrake3 = document.getElementById('locomotionBrake3UI');
		this.directionBrake4 = document.getElementById('locomotionBrake4UI');
		//directionForward
		this.directionForward.addEventListener('mouseenter', this.movingForward);
		this.directionForward.addEventListener('mouseleave', this.cancelForward);
		//directionReverse
		this.directionReverse.addEventListener('mouseenter', this.movingReverse);
		this.directionReverse.addEventListener('mouseleave', this.cancelReverse);

		this.hoverLocomotionEvent = (event) => {
			this.hoverLocomotion(event);
		}
		document.querySelectorAll('.directionBrake').forEach(item => {
			item.addEventListener('mouseenter', event => this.hoverLocomotionEvent)
		});
		document.querySelectorAll('.directionBrake').forEach(item => {
			item.addEventListener('mouseleave', event => this.brakeReadBufferLong)
		});
	}
},
//Remove
remove: function () {
	if(this.movetype === 'desktop'){
		//Controlled by Universal Controls
	} else if(this.movetype === 'mobile'){
		//Controlled by Universal Controls
	} else if(this.movetype === 'vr'){
		//Controlled by Universal Controls
	} else if(this.movetype === 'vrHover'){
		this.directionForward.removeEventListener('mouseenter', this.movingForward);
		this.directionForward.removeEventListener('mouseleave', this.cancelForward);
		this.directionReverse.removeEventListener('mouseenter', this.movingReverse);
		this.directionReverse.removeEventListener('mouseleave', this.cancelReverse);
		document.querySelectorAll('.directionBrake').forEach(item => {
			item.removeEventListener('mouseenter', event => this.hoverLocomotionEvent)
		});
		document.querySelectorAll('.directionBrake').forEach(item => {
			item.removeEventListener('mouseleave', event => this.brakeReadBufferLong)
		});
	}
},
//Tick
tick: function (time, timeDelta) {
	//Unlocked Locomotion
	if(this.auxl.player.layer.move){
		//Locomotion Type
		if(this.style === 'free'){
			this.freeStepThrottled();
		} else if(this.style === 'grid'){
			this.gridStepThrottled();
		}

		//Sync Belt
		if(this.movetype === 'vrHover'){
			this.uiSync();
		}
	}
},
//Free Locomotion Tick
freeStep: function (time, timeDelta) {
	if(this.moveBrake){
		if(this.moveTo && this.moveRight) {
			this.move('forwardRight', this.moveSpeedSlow);
		} else if(this.moveTo && this.moveLeft) {
			this.move('forwardLeft', this.moveSpeedSlow);
		} else if(this.moveBack && this.moveRight) {
			this.move('reverseRight', this.moveSpeedSlow);
		} else if(this.moveBack && this.moveLeft) {
			this.move('reverseLeft', this.moveSpeedSlow);
		} else if(this.moveTo) {
			this.move('forward', this.moveSpeedSlow);
		} else if(this.moveBack) {
			this.move('reverse', this.moveSpeedSlow);
		} else if(this.moveRight) {
			this.move('right', this.moveSpeedSlow);
		} else if(this.moveLeft) {
			this.move('left', this.moveSpeedSlow);
		}
	} else {
		if(this.moveTo && this.moveRight) {
			this.move('forwardRight', this.moveSpeedDefault);
		} else if(this.moveTo && this.moveLeft) {
			this.move('forwardLeft', this.moveSpeedDefault);
		} else if(this.moveBack && this.moveRight) {
			this.move('reverseRight', this.moveSpeedDefault);
		} else if(this.moveBack && this.moveLeft) {
			this.move('reverseLeft', this.moveSpeedDefault);
		} else if(this.moveTo) {
			this.move('forward', this.moveSpeedDefault);
		} else if(this.moveBack) {
			this.move('reverse', this.moveSpeedDefault);
		} else if(this.moveRight) {
			this.move('right', this.moveSpeedDefault);
		} else if(this.moveLeft) {
			this.move('left', this.moveSpeedDefault);
		}
	}
},
//Free Locomotion For Up/Down Button Support
freeStepPlus: function (time, timeDelta) {

//Not Working
//UpForwardLeft
//UpReverseLeft
//DownForwardRight
//DownReverseRight
	this.movement = '';
	//Up|Down
	if(this.moveUp && this.moveDown){} else {
		if(this.moveUp){
			this.movement += 'Up';
		} else if(this.moveDown){
			this.movement += 'Down';
		}
	}
	//Forward|Reverse
	if(this.moveTo && this.moveBack){} else {
		if(this.moveTo){
			this.movement += 'Forward';
		} else if(this.moveBack){
			this.movement += 'Reverse';
		}
	}
	//Right|Left
	if(this.moveRight && this.moveLeft){} else {
		if(this.moveRight){
			this.movement += 'Right';
		} else if(this.moveLeft){
			this.movement += 'Left';
		}
	}
	//console.log(this.movement)

	//Speed
	if(this.moveBrake){
		this.move(this.movement, this.moveSpeedSlow);
	} else {
		this.move(this.movement, this.moveSpeedDefault);
	}
},
//Grid Locomotion Tick
gridStep: function (time, timeDelta) {
	if(this.moveTo || this.moveBack || this.moveRight || this.moveLeft){
		if(this.gridMove){} else {
			this.gridMove = true;
		}
	} else {
		this.gridMove = false;
	}
	if(this.moveTo && this.moveRight) {
		this.move('forwardRight', 0.5);
	} else if(this.moveTo && this.moveLeft) {
		this.move('forwardLeft', 0.5);
	} else if(this.moveBack && this.moveRight) {
		this.move('reverseRight', 0.5);
	} else if(this.moveBack && this.moveLeft) {
		this.move('reverseLeft', 0.5);
	} else if(this.moveTo) {
		this.move('forward', 0.5);
	} else if(this.moveBack) {
		this.move('reverse', 0.5);
	} else if(this.moveRight) {
		this.move('right', 0.5);
	} else if(this.moveLeft) {
		this.move('left', 0.5);
	}

},
//Function to calculate distance between two points
distance: function(x1, y1, x2,  y2) {
    //Calculating distance
    return Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2) * 1.0);
},
//Sync Belt UI
uiSync: function () {
	this.elPosVec3New.copy(this.el.object3D.position);
	//No Offsets as UI Parent is at 0 0 0
	this.ui.object3D.position.copy(this.elPosVec3New);
},
//Move
move: function (direction, speed) {
	if(this.pov === '1st'){
		if(this.axis === 'posXZ'){
			this.directionXZ(direction, speed);
		} else if(this.axis === 'posXZY'){
			this.directionXZY(direction, speed);
		} else if(this.axis === 'posXY'){
			this.directionXY(direction, speed);
		} else if(this.axis === 'posXYZ'){
			this.directionXYZ(direction, speed);
		} else if(this.axis === 'posXYZWall'){
			this.directionXYZWall(direction, speed);
		} else if(this.axis === 'angleXY'){
			this.directionAXY(direction, speed);
		} else if(this.axis === 'angleXYZ'){
			this.directionAXYZ(direction, speed);
		}
	} else if(this.pov === '3rd'){
		if(this.axis === 'posXZ'){
			this.rigXZ(direction, speed);
		} else if(this.axis === 'posXZY'){
			this.rigXZY(direction, speed);
		} else if(this.axis === 'posXY'){
			this.rigXY(direction, speed);
		} else if(this.axis === 'posXYZ'){
			this.rigXYZ(direction, speed);
		} else if(this.axis === 'posXYZWall'){
			this.rigXYZWall(direction, speed);
		} else if(this.axis === 'angleXY'){
			this.rigAXY(direction, speed);
		} else if(this.axis === 'angleXYZ'){
			this.rigAXYZ(direction, speed);
		}
	}
},
//Toggle 1st/3rd POV
togglePOV: function (){

	//Load 3rd POV
	if(this.pov === '3rd'){
		//Spawn Avatar
		this.auxl.avatar.SpawnLayer(true);
		//Move Avatar to Player Current POS

		//Move Player to Avatar Offset
		this.player.object3D.position.copy(new THREE.Vector3(0,5,10));

		let initDelay = setTimeout(()=> {
			//Update Avatar Reference
			this.avatar = document.getElementById('avatarRig');
			this.avatarSphere = document.getElementById('avatarSphere');

/*
			if(this.axis === 'angleXY'){
				this.avatar.object3D.position.copy(new THREE.Vector3(0,0,-10));
				this.player.object3D.position.copy(new THREE.Vector3(0,1.6,2));
			}
*/

		},500)


	}


},
//Default
//1st POV Walk along XZ Floor relative to Direction View
directionXZ: function (action, speed) {
	this.allow = false;
	this.velocity = speed;
	this.directionVector = new THREE.Vector3();
	this.directionObject.object3D.getWorldDirection(this.directionVector);
	this.positionNew = new THREE.Vector3();
	this.positionPlayer.copy(this.player.object3D.position);
	//Math out the Angle of Camera
	this.angle = Math.atan2(this.directionVector.x,this.directionVector.z);
	//Facing
	this.face;
	//Quadrant 1 : -x, -z
	//Quadrant 2 : +x, -z
	//Quadrant 3 : -x, +z
	//Quadrant 4 : +x, +z
	//Check Camera Angle Quadrant
	if(this.angle > 0 && this.angle < Math.PI/2) {
		//console.log('Forward Left');
		this.face = 'frontLeft';
	} else if(this.angle < 0 && this.angle > -Math.PI/2) {
		//console.log('Forward Right');
		this.face = 'frontRight';
	} else if(this.angle > Math.PI/2 && this.angle < Math.PI) {
		//console.log('Backward Left');
		this.face = 'backLeft';
	} else if(this.angle < -Math.PI/2 && this.angle > -Math.PI) {
		//console.log('Backward Right');
		this.face = 'backRight';
	} else {
		//console.log('Level');
		this.face = 'level';
	}
	if(action === 'forwardRight'){
		if(this.face === 'frontLeft') {
			this.positionNew.x = this.positionPlayer.x - (Math.sin(this.angle) * this.velocity) + (Math.cos(this.angle) * this.velocity);
			this.positionNew.z = this.positionPlayer.z - (Math.cos(this.angle) * this.velocity) - (Math.sin(this.angle) * this.velocity);
		} else if(this.face === 'frontRight') {
			this.angle += Math.PI;
			this.positionNew.x = this.positionPlayer.x + (Math.sin(this.angle) * this.velocity) - (Math.cos(this.angle) * this.velocity);
			this.positionNew.z = this.positionPlayer.z + (Math.cos(this.angle) * this.velocity) + (Math.sin(this.angle) * this.velocity);
		} else if(this.face === 'backLeft') {
			this.positionNew.x = this.positionPlayer.x - (Math.sin(this.angle) * this.velocity) + (Math.cos(this.angle) * this.velocity);
			this.positionNew.z = this.positionPlayer.z - (Math.cos(this.angle) * this.velocity) - (Math.sin(this.angle) * this.velocity);
		} else if(this.face === 'backRight') {
			this.angle += (Math.PI * 2);
			this.positionNew.x = this.positionPlayer.x - (Math.sin(this.angle) * this.velocity) + (Math.cos(this.angle) * this.velocity);
			this.positionNew.z = this.positionPlayer.z - (Math.cos(this.angle) * this.velocity) - (Math.sin(this.angle) * this.velocity);
		} else {
			this.positionNew.x = this.positionPlayer.x + this.velocity;
			this.positionNew.z = this.positionPlayer.z - this.velocity;
		}
	} else if(action === 'forwardLeft'){
		if(this.face === 'frontLeft') {
			this.positionNew.x = this.positionPlayer.x - (Math.sin(this.angle) * this.velocity) - (Math.cos(this.angle) * this.velocity);
			this.positionNew.z = this.positionPlayer.z - (Math.cos(this.angle) * this.velocity) + (Math.sin(this.angle) * this.velocity);
		} else if(this.face === 'frontRight') {
			this.angle += Math.PI;
			this.positionNew.x = this.positionPlayer.x + (Math.sin(this.angle) * this.velocity) + (Math.cos(this.angle) * this.velocity);
			this.positionNew.z = this.positionPlayer.z + (Math.cos(this.angle) * this.velocity) - (Math.sin(this.angle) * this.velocity);
		} else if(this.face === 'backLeft') {
			this.positionNew.x = this.positionPlayer.x - (Math.sin(this.angle) * this.velocity) - (Math.cos(this.angle) * this.velocity);
			this.positionNew.z = this.positionPlayer.z - (Math.cos(this.angle) * this.velocity) + (Math.sin(this.angle) * this.velocity);
		} else if(this.face === 'backRight') {
			this.angle += (Math.PI * 2);
			this.positionNew.x = this.positionPlayer.x - (Math.sin(this.angle) * this.velocity) - (Math.cos(this.angle) * this.velocity);
			this.positionNew.z = this.positionPlayer.z - (Math.cos(this.angle) * this.velocity) + (Math.sin(this.angle) * this.velocity);
		} else {
			this.positionNew.x = this.positionPlayer.x - this.velocity;
			this.positionNew.z = this.positionPlayer.z - this.velocity;
		}
	} else if(action === 'reverseRight'){
		if(this.face === 'frontLeft') {
			this.positionNew.x = this.positionPlayer.x + (Math.sin(this.angle) * this.velocity) + (Math.cos(this.angle) * this.velocity);
			this.positionNew.z = this.positionPlayer.z + (Math.cos(this.angle) * this.velocity) - (Math.sin(this.angle) * this.velocity);
		} else if(this.face === 'frontRight') {
			this.angle += Math.PI;
			this.positionNew.x = this.positionPlayer.x - (Math.sin(this.angle) * this.velocity) - (Math.cos(this.angle) * this.velocity);
			this.positionNew.z = this.positionPlayer.z - (Math.cos(this.angle) * this.velocity) + (Math.sin(this.angle) * this.velocity);
		} else if(this.face === 'backLeft') {
			this.positionNew.x = this.positionPlayer.x + (Math.sin(this.angle) * this.velocity) + (Math.cos(this.angle) * this.velocity);
			this.positionNew.z = this.positionPlayer.z + (Math.cos(this.angle) * this.velocity) - (Math.sin(this.angle) * this.velocity);
		} else if(this.face === 'backRight') {
			this.angle += (Math.PI * 2);
			this.positionNew.x = this.positionPlayer.x + (Math.sin(this.angle) * this.velocity) + (Math.cos(this.angle) * this.velocity);
			this.positionNew.z = this.positionPlayer.z + (Math.cos(this.angle) * this.velocity) - (Math.sin(this.angle) * this.velocity);
		} else {
			this.positionNew.x = this.positionPlayer.x + this.velocity;
			this.positionNew.z = this.positionPlayer.z + this.velocity;
		}
	} else if(action === 'reverseLeft'){
		if(this.face === 'frontLeft') {
			this.positionNew.x = this.positionPlayer.x + (Math.sin(this.angle) * this.velocity) - (Math.cos(this.angle) * this.velocity);
			this.positionNew.z = this.positionPlayer.z + (Math.cos(this.angle) * this.velocity) + (Math.sin(this.angle) * this.velocity);
		} else if(this.face === 'frontRight') {
			this.angle += Math.PI;
			this.positionNew.x = this.positionPlayer.x - (Math.sin(this.angle) * this.velocity) + (Math.cos(this.angle) * this.velocity);
			this.positionNew.z = this.positionPlayer.z - (Math.cos(this.angle) * this.velocity) - (Math.sin(this.angle) * this.velocity);
		} else if(this.face === 'backLeft') {
			this.positionNew.x = this.positionPlayer.x + (Math.sin(this.angle) * this.velocity) - (Math.cos(this.angle) * this.velocity);
			this.positionNew.z = this.positionPlayer.z + (Math.cos(this.angle) * this.velocity) + (Math.sin(this.angle) * this.velocity);
		} else if(this.face === 'backRight') {
			this.angle += (Math.PI * 2);
			this.positionNew.x = this.positionPlayer.x + (Math.sin(this.angle) * this.velocity) - (Math.cos(this.angle) * this.velocity);
			this.positionNew.z = this.positionPlayer.z + (Math.cos(this.angle) * this.velocity) + (Math.sin(this.angle) * this.velocity);
		} else {
			this.positionNew.x = this.positionPlayer.x - this.velocity;
			this.positionNew.z = this.positionPlayer.z + this.velocity;
		}
	} else if(action === 'forward'){
		if(this.face === 'frontLeft') {
			this.positionNew.x = this.positionPlayer.x - (Math.sin(this.angle) * this.velocity);
			this.positionNew.z = this.positionPlayer.z - (Math.cos(this.angle) * this.velocity);
		} else if(this.face === 'frontRight') {
			this.angle += Math.PI;
			this.positionNew.x = this.positionPlayer.x + (Math.sin(this.angle) * this.velocity);
			this.positionNew.z = this.positionPlayer.z + (Math.cos(this.angle) * this.velocity);
		} else if(this.face === 'backLeft') {
			this.positionNew.x = this.positionPlayer.x - (Math.sin(this.angle) * this.velocity);
			this.positionNew.z = this.positionPlayer.z - (Math.cos(this.angle) * this.velocity);
		} else if(this.face === 'backRight') {
			this.angle += (Math.PI * 2);
			this.positionNew.x = this.positionPlayer.x - (Math.sin(this.angle) * this.velocity);
			this.positionNew.z = this.positionPlayer.z - (Math.cos(this.angle) * this.velocity);
		} else {
			this.positionNew.x = this.positionPlayer.x;
			this.positionNew.z = this.positionPlayer.z - this.velocity;
		}
	} else if(action === 'reverse'){
		if(this.face === 'frontLeft') {
			this.positionNew.x = this.positionPlayer.x + (Math.sin(this.angle) * this.velocity);
			this.positionNew.z = this.positionPlayer.z + (Math.cos(this.angle) * this.velocity);
		} else if(this.face === 'frontRight') {
			this.angle += Math.PI;
			this.positionNew.x = this.positionPlayer.x - (Math.sin(this.angle) * this.velocity);
			this.positionNew.z = this.positionPlayer.z - (Math.cos(this.angle) * this.velocity);
		} else if(this.face === 'backLeft') {
			this.positionNew.x = this.positionPlayer.x + (Math.sin(this.angle) * this.velocity);
			this.positionNew.z = this.positionPlayer.z + (Math.cos(this.angle) * this.velocity);
		} else if(this.face === 'backRight') {
			this.angle += (Math.PI * 2);
			this.positionNew.x = this.positionPlayer.x + (Math.sin(this.angle) * this.velocity);
			this.positionNew.z = this.positionPlayer.z + (Math.cos(this.angle) * this.velocity);
		} else {
			this.positionNew.x = this.positionPlayer.x;
			this.positionNew.z = this.positionPlayer.z + this.velocity;
		}
	} else if(action === 'right'){
		if(this.face === 'frontLeft') {
			this.positionNew.x = this.positionPlayer.x + (Math.cos(this.angle) * this.velocity);
			this.positionNew.z = this.positionPlayer.z - (Math.sin(this.angle) * this.velocity);
		} else if(this.face === 'frontRight') {
			this.angle += Math.PI;
			this.positionNew.x = this.positionPlayer.x - (Math.cos(this.angle) * this.velocity);
			this.positionNew.z = this.positionPlayer.z + (Math.sin(this.angle) * this.velocity);
		} else if(this.face === 'backLeft') {
			this.positionNew.x = this.positionPlayer.x + (Math.cos(this.angle) * this.velocity);
			this.positionNew.z = this.positionPlayer.z - (Math.sin(this.angle) * this.velocity);
		} else if(this.face === 'backRight') {
			this.angle += (Math.PI * 2);
			this.positionNew.x = this.positionPlayer.x + (Math.cos(this.angle) * this.velocity);
			this.positionNew.z = this.positionPlayer.z - (Math.sin(this.angle) * this.velocity);
		} else {
			this.positionNew.x = this.positionPlayer.x + this.velocity;
			this.positionNew.z = this.positionPlayer.z;
		}
	} else if(action === 'left'){
		if(this.face === 'frontLeft') {
			this.positionNew.x = this.positionPlayer.x - (Math.cos(this.angle) * this.velocity);
			this.positionNew.z = this.positionPlayer.z + (Math.sin(this.angle) * this.velocity);
		} else if(this.face === 'frontRight') {
			this.angle += Math.PI;
			this.positionNew.x = this.positionPlayer.x + (Math.cos(this.angle) * this.velocity);
			this.positionNew.z = this.positionPlayer.z - (Math.sin(this.angle) * this.velocity);
		} else if(this.face === 'backLeft') {
			this.positionNew.x = this.positionPlayer.x - (Math.cos(this.angle) * this.velocity);
			this.positionNew.z = this.positionPlayer.z + (Math.sin(this.angle) * this.velocity);
		} else if(this.face === 'backRight') {
			this.angle += (Math.PI * 2);
			this.positionNew.x = this.positionPlayer.x - (Math.cos(this.angle) * this.velocity);
			this.positionNew.z = this.positionPlayer.z + (Math.sin(this.angle) * this.velocity);
		} else {
			this.positionNew.x = this.positionPlayer.x - this.velocity;
			this.positionNew.z = this.positionPlayer.z;
		}
	}

	this.positionNew.y = this.positionPlayer.y;

	//Physics, Grid Collision or No Clip
	if(this.auxl.physics){
		this.player.body.position.copy(this.positionNew);
	} else if(this.auxl.collision){
		//Locomotion with Collision every 0.5 meter on XZ and 1 meter on Y
		this.newPosRound.x = this.roundHalf(this.positionNew.x);
		this.newPosRound.y = this.round(this.positionNew.y);
		this.newPosRound.z = this.roundHalf(this.positionNew.z);
		this.posRound.x = this.roundHalf(this.positionPlayer.x);
		this.posRound.y = this.round(this.positionPlayer.y);
		this.posRound.z = this.roundHalf(this.positionPlayer.z);
		//Check for Obstacles
		if(this.auxl.map.CheckMapObstaclesDiagonal(this.newPosRound, this.posRound)){
			if(this.auxl.player.layer.standing){
				this.newPosStandRound.copy(this.newPosRound);
				this.newPosStandRound.y+=1;
				if(this.auxl.map.CheckMapObstaclesDiagonal(this.newPosStandRound, this.posRound)){
					this.allow = true;
				} else {
					this.allow = false;
				}
			} else {
				this.allow = true;
			}
		}
		//Atempt to move parallel
		if(!this.allow){
			//Backup
			this.newPosTemp.copy(this.newPosRound);
			//Test X
			this.newPosRound.x = this.posRound.x;
			if(this.auxl.map.CheckMapObstaclesDiagonal(this.newPosRound, this.posRound)){
				//X is blocked
				this.positionNew.x = this.positionPlayer.x;
				this.allow = true;
			} else {
				//Test Z
				this.newPosRound.z = this.posRound.z;
				//Reset X
				this.newPosRound.x = this.newPosTemp.x;
				if(this.auxl.map.CheckMapObstaclesDiagonal(this.newPosRound, this.posRound)){
					//Z is blocked
					this.positionNew.z = this.positionPlayer.z;
					this.allow = true;
				} 
			}
		}
		//Move
		if(this.allow){
			this.player.object3D.position.copy(this.positionNew);
			this.auxl.player.layer.gridPos.copy(this.newPosRound);

			let direction = '';
			if(this.newPosRound.z < this.posRound.z){
				direction += 'forward'
			} else if(this.newPosRound.z > this.posRound.z){
				direction += 'reverse'
			}
			if(this.newPosRound.x > this.posRound.x){
				direction += 'right'
			} else if(this.newPosRound.x < this.posRound.x){
				direction += 'left'
			}
			this.auxl.player.layer.gridDirection = direction;
			//Check for Triggers on New Coords
			if(this.newPosRound.x === this.posRound.x && this.newPosRound.z === this.posRound.z){} else {
				//Check for Trigger Enter
				if(this.auxl.map.CheckMapTriggers(this.newPosRound)){
					this.auxl.map.TriggerEnterHit(this.newPosRound);
				}
				//Check for Trigger Exits
				this.auxl.map.CheckActiveTriggers(this.newPosRound);
				//Check for Cleared Spawn Collision Conditions
				this.auxl.map.WaitingToSpawn();
			}
		}
	} else {
		//Free Locomotion No Collision
		this.player.object3D.position.copy(this.positionNew);
	}
},
//1st POV Walk with Fly Buttons relative to Direction View
directionXZY: function (action, speed) {
	this.velocity = speed;
	this.directionVector = new THREE.Vector3();
	this.directionObject.object3D.getWorldDirection(this.directionVector);
	this.positionNew = new THREE.Vector3();
	this.positionPlayer.copy(this.player.object3D.position);
	//Math out the Angle of Camera
	this.angle = Math.atan2(this.directionVector.x,this.directionVector.z);
	//Facing
	this.face;
	//Quadrant 1 : -x, -z
	//Quadrant 2 : +x, -z
	//Quadrant 3 : -x, +z
	//Quadrant 4 : +x, +z
	//Check Camera Angle Quadrant
	if(this.angle > 0 && this.angle < Math.PI/2) {
		//console.log('Forward Left');
		this.face = 'frontLeft';
	} else if(this.angle < 0 && this.angle > -Math.PI/2) {
		//console.log('Forward Right');
		this.face = 'frontRight';
	} else if(this.angle > Math.PI/2 && this.angle < Math.PI) {
		//console.log('Backward Left');
		this.face = 'backLeft';
	} else if(this.angle < -Math.PI/2 && this.angle > -Math.PI) {
		//console.log('Backward Right');
		this.face = 'backRight';
	} else {
		//console.log('Level');
		this.face = 'level';
	}
	if(action === 'UpForwardRight'){
		if(this.face === 'frontLeft') {
			this.positionNew.x = this.positionPlayer.x - (Math.sin(this.angle) * this.velocity) + (Math.cos(this.angle) * this.velocity);
			this.positionNew.z = this.positionPlayer.z - (Math.cos(this.angle) * this.velocity) - (Math.sin(this.angle) * this.velocity);
		} else if(this.face === 'frontRight') {
			this.angle += Math.PI;
			this.positionNew.x = this.positionPlayer.x + (Math.sin(this.angle) * this.velocity) - (Math.cos(this.angle) * this.velocity);
			this.positionNew.z = this.positionPlayer.z + (Math.cos(this.angle) * this.velocity) + (Math.sin(this.angle) * this.velocity);
		} else if(this.face === 'backLeft') {
			this.positionNew.x = this.positionPlayer.x - (Math.sin(this.angle) * this.velocity) + (Math.cos(this.angle) * this.velocity);
			this.positionNew.z = this.positionPlayer.z - (Math.cos(this.angle) * this.velocity) - (Math.sin(this.angle) * this.velocity);
		} else if(this.face === 'backRight') {
			this.angle += (Math.PI * 2);
			this.positionNew.x = this.positionPlayer.x - (Math.sin(this.angle) * this.velocity) + (Math.cos(this.angle) * this.velocity);
			this.positionNew.z = this.positionPlayer.z - (Math.cos(this.angle) * this.velocity) - (Math.sin(this.angle) * this.velocity);
		} else {
			this.positionNew.x = this.positionPlayer.x + this.velocity;
			this.positionNew.z = this.positionPlayer.z - this.velocity;
		}
		this.positionNew.y = this.positionPlayer.y + this.velocity;
	} else if(action === 'DownForwardRight'){
		if(this.face === 'frontLeft') {
			this.positionNew.x = this.positionPlayer.x - (Math.sin(this.angle) * this.velocity) + (Math.cos(this.angle) * this.velocity);
			this.positionNew.z = this.positionPlayer.z - (Math.cos(this.angle) * this.velocity) - (Math.sin(this.angle) * this.velocity);
		} else if(this.face === 'frontRight') {
			this.angle += Math.PI;
			this.positionNew.x = this.positionPlayer.x + (Math.sin(this.angle) * this.velocity) - (Math.cos(this.angle) * this.velocity);
			this.positionNew.z = this.positionPlayer.z + (Math.cos(this.angle) * this.velocity) + (Math.sin(this.angle) * this.velocity);
		} else if(this.face === 'backLeft') {
			this.positionNew.x = this.positionPlayer.x - (Math.sin(this.angle) * this.velocity) + (Math.cos(this.angle) * this.velocity);
			this.positionNew.z = this.positionPlayer.z - (Math.cos(this.angle) * this.velocity) - (Math.sin(this.angle) * this.velocity);
		} else if(this.face === 'backRight') {
			this.angle += (Math.PI * 2);
			this.positionNew.x = this.positionPlayer.x - (Math.sin(this.angle) * this.velocity) + (Math.cos(this.angle) * this.velocity);
			this.positionNew.z = this.positionPlayer.z - (Math.cos(this.angle) * this.velocity) - (Math.sin(this.angle) * this.velocity);
		} else {
			this.positionNew.x = this.positionPlayer.x + this.velocity;
			this.positionNew.z = this.positionPlayer.z - this.velocity;
		}
		this.positionNew.y = this.positionPlayer.y - this.velocity;
	} else if(action === 'ForwardRight'){
		if(this.face === 'frontLeft') {
			this.positionNew.x = this.positionPlayer.x - (Math.sin(this.angle) * this.velocity) + (Math.cos(this.angle) * this.velocity);
			this.positionNew.z = this.positionPlayer.z - (Math.cos(this.angle) * this.velocity) - (Math.sin(this.angle) * this.velocity);
		} else if(this.face === 'frontRight') {
			this.angle += Math.PI;
			this.positionNew.x = this.positionPlayer.x + (Math.sin(this.angle) * this.velocity) - (Math.cos(this.angle) * this.velocity);
			this.positionNew.z = this.positionPlayer.z + (Math.cos(this.angle) * this.velocity) + (Math.sin(this.angle) * this.velocity);
		} else if(this.face === 'backLeft') {
			this.positionNew.x = this.positionPlayer.x - (Math.sin(this.angle) * this.velocity) + (Math.cos(this.angle) * this.velocity);
			this.positionNew.z = this.positionPlayer.z - (Math.cos(this.angle) * this.velocity) - (Math.sin(this.angle) * this.velocity);
		} else if(this.face === 'backRight') {
			this.angle += (Math.PI * 2);
			this.positionNew.x = this.positionPlayer.x - (Math.sin(this.angle) * this.velocity) + (Math.cos(this.angle) * this.velocity);
			this.positionNew.z = this.positionPlayer.z - (Math.cos(this.angle) * this.velocity) - (Math.sin(this.angle) * this.velocity);
		} else {
			this.positionNew.x = this.positionPlayer.x + this.velocity;
			this.positionNew.z = this.positionPlayer.z - this.velocity;
		}
		this.positionNew.y = this.positionPlayer.y;
	} else if(action === 'UpForwardLeft'){
		if(this.face === 'frontLeft') {
			this.positionNew.x = this.positionPlayer.x - (Math.sin(this.angle) * this.velocity) - (Math.cos(this.angle) * this.velocity);
			this.positionNew.z = this.positionPlayer.z - (Math.cos(this.angle) * this.velocity) + (Math.sin(this.angle) * this.velocity);
		} else if(this.face === 'frontRight') {
			this.angle += Math.PI;
			this.positionNew.x = this.positionPlayer.x + (Math.sin(this.angle) * this.velocity) + (Math.cos(this.angle) * this.velocity);
			this.positionNew.z = this.positionPlayer.z + (Math.cos(this.angle) * this.velocity) - (Math.sin(this.angle) * this.velocity);
		} else if(this.face === 'backLeft') {
			this.positionNew.x = this.positionPlayer.x - (Math.sin(this.angle) * this.velocity) - (Math.cos(this.angle) * this.velocity);
			this.positionNew.z = this.positionPlayer.z - (Math.cos(this.angle) * this.velocity) + (Math.sin(this.angle) * this.velocity);
		} else if(this.face === 'backRight') {
			this.angle += (Math.PI * 2);
			this.positionNew.x = this.positionPlayer.x - (Math.sin(this.angle) * this.velocity) - (Math.cos(this.angle) * this.velocity);
			this.positionNew.z = this.positionPlayer.z - (Math.cos(this.angle) * this.velocity) + (Math.sin(this.angle) * this.velocity);
		} else {
			this.positionNew.x = this.positionPlayer.x - this.velocity;
			this.positionNew.z = this.positionPlayer.z - this.velocity;
		}
		this.positionNew.y = this.positionPlayer.y + this.velocity;
	} else if(action === 'DownForwardLeft'){
		if(this.face === 'frontLeft') {
			this.positionNew.x = this.positionPlayer.x - (Math.sin(this.angle) * this.velocity) - (Math.cos(this.angle) * this.velocity);
			this.positionNew.z = this.positionPlayer.z - (Math.cos(this.angle) * this.velocity) + (Math.sin(this.angle) * this.velocity);
		} else if(this.face === 'frontRight') {
			this.angle += Math.PI;
			this.positionNew.x = this.positionPlayer.x + (Math.sin(this.angle) * this.velocity) + (Math.cos(this.angle) * this.velocity);
			this.positionNew.z = this.positionPlayer.z + (Math.cos(this.angle) * this.velocity) - (Math.sin(this.angle) * this.velocity);
		} else if(this.face === 'backLeft') {
			this.positionNew.x = this.positionPlayer.x - (Math.sin(this.angle) * this.velocity) - (Math.cos(this.angle) * this.velocity);
			this.positionNew.z = this.positionPlayer.z - (Math.cos(this.angle) * this.velocity) + (Math.sin(this.angle) * this.velocity);
		} else if(this.face === 'backRight') {
			this.angle += (Math.PI * 2);
			this.positionNew.x = this.positionPlayer.x - (Math.sin(this.angle) * this.velocity) - (Math.cos(this.angle) * this.velocity);
			this.positionNew.z = this.positionPlayer.z - (Math.cos(this.angle) * this.velocity) + (Math.sin(this.angle) * this.velocity);
		} else {
			this.positionNew.x = this.positionPlayer.x - this.velocity;
			this.positionNew.z = this.positionPlayer.z - this.velocity;
		}
		this.positionNew.y = this.positionPlayer.y - this.velocity;
	} else if(action === 'ForwardLeft'){
		if(this.face === 'frontLeft') {
			this.positionNew.x = this.positionPlayer.x - (Math.sin(this.angle) * this.velocity) - (Math.cos(this.angle) * this.velocity);
			this.positionNew.z = this.positionPlayer.z - (Math.cos(this.angle) * this.velocity) + (Math.sin(this.angle) * this.velocity);
		} else if(this.face === 'frontRight') {
			this.angle += Math.PI;
			this.positionNew.x = this.positionPlayer.x + (Math.sin(this.angle) * this.velocity) + (Math.cos(this.angle) * this.velocity);
			this.positionNew.z = this.positionPlayer.z + (Math.cos(this.angle) * this.velocity) - (Math.sin(this.angle) * this.velocity);
		} else if(this.face === 'backLeft') {
			this.positionNew.x = this.positionPlayer.x - (Math.sin(this.angle) * this.velocity) - (Math.cos(this.angle) * this.velocity);
			this.positionNew.z = this.positionPlayer.z - (Math.cos(this.angle) * this.velocity) + (Math.sin(this.angle) * this.velocity);
		} else if(this.face === 'backRight') {
			this.angle += (Math.PI * 2);
			this.positionNew.x = this.positionPlayer.x - (Math.sin(this.angle) * this.velocity) - (Math.cos(this.angle) * this.velocity);
			this.positionNew.z = this.positionPlayer.z - (Math.cos(this.angle) * this.velocity) + (Math.sin(this.angle) * this.velocity);
		} else {
			this.positionNew.x = this.positionPlayer.x - this.velocity;
			this.positionNew.z = this.positionPlayer.z - this.velocity;
		}
		this.positionNew.y = this.positionPlayer.y;
	} else if(action === 'UpReverseRight'){
		if(this.face === 'frontLeft') {
			this.positionNew.x = this.positionPlayer.x + (Math.sin(this.angle) * this.velocity) + (Math.cos(this.angle) * this.velocity);
			this.positionNew.z = this.positionPlayer.z + (Math.cos(this.angle) * this.velocity) - (Math.sin(this.angle) * this.velocity);
		} else if(this.face === 'frontRight') {
			this.angle += Math.PI;
			this.positionNew.x = this.positionPlayer.x - (Math.sin(this.angle) * this.velocity) - (Math.cos(this.angle) * this.velocity);
			this.positionNew.z = this.positionPlayer.z - (Math.cos(this.angle) * this.velocity) + (Math.sin(this.angle) * this.velocity);
		} else if(this.face === 'backLeft') {
			this.positionNew.x = this.positionPlayer.x + (Math.sin(this.angle) * this.velocity) + (Math.cos(this.angle) * this.velocity);
			this.positionNew.z = this.positionPlayer.z + (Math.cos(this.angle) * this.velocity) - (Math.sin(this.angle) * this.velocity);
		} else if(this.face === 'backRight') {
			this.angle += (Math.PI * 2);
			this.positionNew.x = this.positionPlayer.x + (Math.sin(this.angle) * this.velocity) + (Math.cos(this.angle) * this.velocity);
			this.positionNew.z = this.positionPlayer.z + (Math.cos(this.angle) * this.velocity) - (Math.sin(this.angle) * this.velocity);
		} else {
			this.positionNew.x = this.positionPlayer.x + this.velocity;
			this.positionNew.z = this.positionPlayer.z + this.velocity;
		}
		this.positionNew.y = this.positionPlayer.y + this.velocity;
	} else if(action === 'DownReverseRight'){
		if(this.face === 'frontLeft') {
			this.positionNew.x = this.positionPlayer.x + (Math.sin(this.angle) * this.velocity) + (Math.cos(this.angle) * this.velocity);
			this.positionNew.z = this.positionPlayer.z + (Math.cos(this.angle) * this.velocity) - (Math.sin(this.angle) * this.velocity);
		} else if(this.face === 'frontRight') {
			this.angle += Math.PI;
			this.positionNew.x = this.positionPlayer.x - (Math.sin(this.angle) * this.velocity) - (Math.cos(this.angle) * this.velocity);
			this.positionNew.z = this.positionPlayer.z - (Math.cos(this.angle) * this.velocity) + (Math.sin(this.angle) * this.velocity);
		} else if(this.face === 'backLeft') {
			this.positionNew.x = this.positionPlayer.x + (Math.sin(this.angle) * this.velocity) + (Math.cos(this.angle) * this.velocity);
			this.positionNew.z = this.positionPlayer.z + (Math.cos(this.angle) * this.velocity) - (Math.sin(this.angle) * this.velocity);
		} else if(this.face === 'backRight') {
			this.angle += (Math.PI * 2);
			this.positionNew.x = this.positionPlayer.x + (Math.sin(this.angle) * this.velocity) + (Math.cos(this.angle) * this.velocity);
			this.positionNew.z = this.positionPlayer.z + (Math.cos(this.angle) * this.velocity) - (Math.sin(this.angle) * this.velocity);
		} else {
			this.positionNew.x = this.positionPlayer.x + this.velocity;
			this.positionNew.z = this.positionPlayer.z + this.velocity;
		}
		this.positionNew.y = this.positionPlayer.y - this.velocity;
	} else if(action === 'ReverseRight'){
		if(this.face === 'frontLeft') {
			this.positionNew.x = this.positionPlayer.x + (Math.sin(this.angle) * this.velocity) + (Math.cos(this.angle) * this.velocity);
			this.positionNew.z = this.positionPlayer.z + (Math.cos(this.angle) * this.velocity) - (Math.sin(this.angle) * this.velocity);
		} else if(this.face === 'frontRight') {
			this.angle += Math.PI;
			this.positionNew.x = this.positionPlayer.x - (Math.sin(this.angle) * this.velocity) - (Math.cos(this.angle) * this.velocity);
			this.positionNew.z = this.positionPlayer.z - (Math.cos(this.angle) * this.velocity) + (Math.sin(this.angle) * this.velocity);
		} else if(this.face === 'backLeft') {
			this.positionNew.x = this.positionPlayer.x + (Math.sin(this.angle) * this.velocity) + (Math.cos(this.angle) * this.velocity);
			this.positionNew.z = this.positionPlayer.z + (Math.cos(this.angle) * this.velocity) - (Math.sin(this.angle) * this.velocity);
		} else if(this.face === 'backRight') {
			this.angle += (Math.PI * 2);
			this.positionNew.x = this.positionPlayer.x + (Math.sin(this.angle) * this.velocity) + (Math.cos(this.angle) * this.velocity);
			this.positionNew.z = this.positionPlayer.z + (Math.cos(this.angle) * this.velocity) - (Math.sin(this.angle) * this.velocity);
		} else {
			this.positionNew.x = this.positionPlayer.x + this.velocity;
			this.positionNew.z = this.positionPlayer.z + this.velocity;
		}
		this.positionNew.y = this.positionPlayer.y;
	} else if(action === 'UpReverseLeft'){
		if(this.face === 'frontLeft') {
			this.positionNew.x = this.positionPlayer.x + (Math.sin(this.angle) * this.velocity) - (Math.cos(this.angle) * this.velocity);
			this.positionNew.z = this.positionPlayer.z + (Math.cos(this.angle) * this.velocity) + (Math.sin(this.angle) * this.velocity);
		} else if(this.face === 'frontRight') {
			this.angle += Math.PI;
			this.positionNew.x = this.positionPlayer.x - (Math.sin(this.angle) * this.velocity) + (Math.cos(this.angle) * this.velocity);
			this.positionNew.z = this.positionPlayer.z - (Math.cos(this.angle) * this.velocity) - (Math.sin(this.angle) * this.velocity);
		} else if(this.face === 'backLeft') {
			this.positionNew.x = this.positionPlayer.x + (Math.sin(this.angle) * this.velocity) - (Math.cos(this.angle) * this.velocity);
			this.positionNew.z = this.positionPlayer.z + (Math.cos(this.angle) * this.velocity) + (Math.sin(this.angle) * this.velocity);
		} else if(this.face === 'backRight') {
			this.angle += (Math.PI * 2);
			this.positionNew.x = this.positionPlayer.x + (Math.sin(this.angle) * this.velocity) - (Math.cos(this.angle) * this.velocity);
			this.positionNew.z = this.positionPlayer.z + (Math.cos(this.angle) * this.velocity) + (Math.sin(this.angle) * this.velocity);
		} else {
			this.positionNew.x = this.positionPlayer.x - this.velocity;
			this.positionNew.z = this.positionPlayer.z + this.velocity;
		}
		this.positionNew.y = this.positionPlayer.y + this.velocity;
	} else if(action === 'DownReverseLeft'){
		if(this.face === 'frontLeft') {
			this.positionNew.x = this.positionPlayer.x + (Math.sin(this.angle) * this.velocity) - (Math.cos(this.angle) * this.velocity);
			this.positionNew.z = this.positionPlayer.z + (Math.cos(this.angle) * this.velocity) + (Math.sin(this.angle) * this.velocity);
		} else if(this.face === 'frontRight') {
			this.angle += Math.PI;
			this.positionNew.x = this.positionPlayer.x - (Math.sin(this.angle) * this.velocity) + (Math.cos(this.angle) * this.velocity);
			this.positionNew.z = this.positionPlayer.z - (Math.cos(this.angle) * this.velocity) - (Math.sin(this.angle) * this.velocity);
		} else if(this.face === 'backLeft') {
			this.positionNew.x = this.positionPlayer.x + (Math.sin(this.angle) * this.velocity) - (Math.cos(this.angle) * this.velocity);
			this.positionNew.z = this.positionPlayer.z + (Math.cos(this.angle) * this.velocity) + (Math.sin(this.angle) * this.velocity);
		} else if(this.face === 'backRight') {
			this.angle += (Math.PI * 2);
			this.positionNew.x = this.positionPlayer.x + (Math.sin(this.angle) * this.velocity) - (Math.cos(this.angle) * this.velocity);
			this.positionNew.z = this.positionPlayer.z + (Math.cos(this.angle) * this.velocity) + (Math.sin(this.angle) * this.velocity);
		} else {
			this.positionNew.x = this.positionPlayer.x - this.velocity;
			this.positionNew.z = this.positionPlayer.z + this.velocity;
		}
		this.positionNew.y = this.positionPlayer.y - this.velocity;
	} else if(action === 'ReverseLeft'){
		if(this.face === 'frontLeft') {
			this.positionNew.x = this.positionPlayer.x + (Math.sin(this.angle) * this.velocity) - (Math.cos(this.angle) * this.velocity);
			this.positionNew.z = this.positionPlayer.z + (Math.cos(this.angle) * this.velocity) + (Math.sin(this.angle) * this.velocity);
		} else if(this.face === 'frontRight') {
			this.angle += Math.PI;
			this.positionNew.x = this.positionPlayer.x - (Math.sin(this.angle) * this.velocity) + (Math.cos(this.angle) * this.velocity);
			this.positionNew.z = this.positionPlayer.z - (Math.cos(this.angle) * this.velocity) - (Math.sin(this.angle) * this.velocity);
		} else if(this.face === 'backLeft') {
			this.positionNew.x = this.positionPlayer.x + (Math.sin(this.angle) * this.velocity) - (Math.cos(this.angle) * this.velocity);
			this.positionNew.z = this.positionPlayer.z + (Math.cos(this.angle) * this.velocity) + (Math.sin(this.angle) * this.velocity);
		} else if(this.face === 'backRight') {
			this.angle += (Math.PI * 2);
			this.positionNew.x = this.positionPlayer.x + (Math.sin(this.angle) * this.velocity) - (Math.cos(this.angle) * this.velocity);
			this.positionNew.z = this.positionPlayer.z + (Math.cos(this.angle) * this.velocity) + (Math.sin(this.angle) * this.velocity);
		} else {
			this.positionNew.x = this.positionPlayer.x - this.velocity;
			this.positionNew.z = this.positionPlayer.z + this.velocity;
		}
		this.positionNew.y = this.positionPlayer.y;
	} else if(action === 'UpForward'){
		if(this.face === 'frontLeft') {
			this.positionNew.x = this.positionPlayer.x - (Math.sin(this.angle) * this.velocity);
			this.positionNew.z = this.positionPlayer.z - (Math.cos(this.angle) * this.velocity);
		} else if(this.face === 'frontRight') {
			this.angle += Math.PI;
			this.positionNew.x = this.positionPlayer.x + (Math.sin(this.angle) * this.velocity);
			this.positionNew.z = this.positionPlayer.z + (Math.cos(this.angle) * this.velocity);
		} else if(this.face === 'backLeft') {
			this.positionNew.x = this.positionPlayer.x - (Math.sin(this.angle) * this.velocity);
			this.positionNew.z = this.positionPlayer.z - (Math.cos(this.angle) * this.velocity);
		} else if(this.face === 'backRight') {
			this.angle += (Math.PI * 2);
			this.positionNew.x = this.positionPlayer.x - (Math.sin(this.angle) * this.velocity);
			this.positionNew.z = this.positionPlayer.z - (Math.cos(this.angle) * this.velocity);
		} else {
			this.positionNew.x = this.positionPlayer.x;
			this.positionNew.z = this.positionPlayer.z - this.velocity;
		}
		this.positionNew.y = this.positionPlayer.y + this.velocity;
	} else if(action === 'DownForward'){
		if(this.face === 'frontLeft') {
			this.positionNew.x = this.positionPlayer.x - (Math.sin(this.angle) * this.velocity);
			this.positionNew.z = this.positionPlayer.z - (Math.cos(this.angle) * this.velocity);
		} else if(this.face === 'frontRight') {
			this.angle += Math.PI;
			this.positionNew.x = this.positionPlayer.x + (Math.sin(this.angle) * this.velocity);
			this.positionNew.z = this.positionPlayer.z + (Math.cos(this.angle) * this.velocity);
		} else if(this.face === 'backLeft') {
			this.positionNew.x = this.positionPlayer.x - (Math.sin(this.angle) * this.velocity);
			this.positionNew.z = this.positionPlayer.z - (Math.cos(this.angle) * this.velocity);
		} else if(this.face === 'backRight') {
			this.angle += (Math.PI * 2);
			this.positionNew.x = this.positionPlayer.x - (Math.sin(this.angle) * this.velocity);
			this.positionNew.z = this.positionPlayer.z - (Math.cos(this.angle) * this.velocity);
		} else {
			this.positionNew.x = this.positionPlayer.x;
			this.positionNew.z = this.positionPlayer.z - this.velocity;
		}
		this.positionNew.y = this.positionPlayer.y - this.velocity;
	} else if(action === 'Forward'){
		if(this.face === 'frontLeft') {
			this.positionNew.x = this.positionPlayer.x - (Math.sin(this.angle) * this.velocity);
			this.positionNew.z = this.positionPlayer.z - (Math.cos(this.angle) * this.velocity);
		} else if(this.face === 'frontRight') {
			this.angle += Math.PI;
			this.positionNew.x = this.positionPlayer.x + (Math.sin(this.angle) * this.velocity);
			this.positionNew.z = this.positionPlayer.z + (Math.cos(this.angle) * this.velocity);
		} else if(this.face === 'backLeft') {
			this.positionNew.x = this.positionPlayer.x - (Math.sin(this.angle) * this.velocity);
			this.positionNew.z = this.positionPlayer.z - (Math.cos(this.angle) * this.velocity);
		} else if(this.face === 'backRight') {
			this.angle += (Math.PI * 2);
			this.positionNew.x = this.positionPlayer.x - (Math.sin(this.angle) * this.velocity);
			this.positionNew.z = this.positionPlayer.z - (Math.cos(this.angle) * this.velocity);
		} else {
			this.positionNew.x = this.positionPlayer.x;
			this.positionNew.z = this.positionPlayer.z - this.velocity;
		}
		this.positionNew.y = this.positionPlayer.y;
	} else if(action === 'UpReverse'){
		if(this.face === 'frontLeft') {
			this.positionNew.x = this.positionPlayer.x + (Math.sin(this.angle) * this.velocity);
			this.positionNew.z = this.positionPlayer.z + (Math.cos(this.angle) * this.velocity);
		} else if(this.face === 'frontRight') {
			this.angle += Math.PI;
			this.positionNew.x = this.positionPlayer.x - (Math.sin(this.angle) * this.velocity);
			this.positionNew.z = this.positionPlayer.z - (Math.cos(this.angle) * this.velocity);
		} else if(this.face === 'backLeft') {
			this.positionNew.x = this.positionPlayer.x + (Math.sin(this.angle) * this.velocity);
			this.positionNew.z = this.positionPlayer.z + (Math.cos(this.angle) * this.velocity);
		} else if(this.face === 'backRight') {
			this.angle += (Math.PI * 2);
			this.positionNew.x = this.positionPlayer.x + (Math.sin(this.angle) * this.velocity);
			this.positionNew.z = this.positionPlayer.z + (Math.cos(this.angle) * this.velocity);
		} else {
			this.positionNew.x = this.positionPlayer.x;
			this.positionNew.z = this.positionPlayer.z + this.velocity;
		}
		this.positionNew.y = this.positionPlayer.y + this.velocity;
	} else if(action === 'DownReverse'){
		if(this.face === 'frontLeft') {
			this.positionNew.x = this.positionPlayer.x + (Math.sin(this.angle) * this.velocity);
			this.positionNew.z = this.positionPlayer.z + (Math.cos(this.angle) * this.velocity);
		} else if(this.face === 'frontRight') {
			this.angle += Math.PI;
			this.positionNew.x = this.positionPlayer.x - (Math.sin(this.angle) * this.velocity);
			this.positionNew.z = this.positionPlayer.z - (Math.cos(this.angle) * this.velocity);
		} else if(this.face === 'backLeft') {
			this.positionNew.x = this.positionPlayer.x + (Math.sin(this.angle) * this.velocity);
			this.positionNew.z = this.positionPlayer.z + (Math.cos(this.angle) * this.velocity);
		} else if(this.face === 'backRight') {
			this.angle += (Math.PI * 2);
			this.positionNew.x = this.positionPlayer.x + (Math.sin(this.angle) * this.velocity);
			this.positionNew.z = this.positionPlayer.z + (Math.cos(this.angle) * this.velocity);
		} else {
			this.positionNew.x = this.positionPlayer.x;
			this.positionNew.z = this.positionPlayer.z + this.velocity;
		}
		this.positionNew.y = this.positionPlayer.y - this.velocity;
	} else if(action === 'Reverse'){
		if(this.face === 'frontLeft') {
			this.positionNew.x = this.positionPlayer.x + (Math.sin(this.angle) * this.velocity);
			this.positionNew.z = this.positionPlayer.z + (Math.cos(this.angle) * this.velocity);
		} else if(this.face === 'frontRight') {
			this.angle += Math.PI;
			this.positionNew.x = this.positionPlayer.x - (Math.sin(this.angle) * this.velocity);
			this.positionNew.z = this.positionPlayer.z - (Math.cos(this.angle) * this.velocity);
		} else if(this.face === 'backLeft') {
			this.positionNew.x = this.positionPlayer.x + (Math.sin(this.angle) * this.velocity);
			this.positionNew.z = this.positionPlayer.z + (Math.cos(this.angle) * this.velocity);
		} else if(this.face === 'backRight') {
			this.angle += (Math.PI * 2);
			this.positionNew.x = this.positionPlayer.x + (Math.sin(this.angle) * this.velocity);
			this.positionNew.z = this.positionPlayer.z + (Math.cos(this.angle) * this.velocity);
		} else {
			this.positionNew.x = this.positionPlayer.x;
			this.positionNew.z = this.positionPlayer.z + this.velocity;
		}
		this.positionNew.y = this.positionPlayer.y;
	} else if(action === 'UpRight'){
		if(this.face === 'frontLeft') {
			this.positionNew.x = this.positionPlayer.x + (Math.cos(this.angle) * this.velocity);
			this.positionNew.z = this.positionPlayer.z - (Math.sin(this.angle) * this.velocity);
		} else if(this.face === 'frontRight') {
			this.angle += Math.PI;
			this.positionNew.x = this.positionPlayer.x - (Math.cos(this.angle) * this.velocity);
			this.positionNew.z = this.positionPlayer.z + (Math.sin(this.angle) * this.velocity);
		} else if(this.face === 'backLeft') {
			this.positionNew.x = this.positionPlayer.x + (Math.cos(this.angle) * this.velocity);
			this.positionNew.z = this.positionPlayer.z - (Math.sin(this.angle) * this.velocity);
		} else if(this.face === 'backRight') {
			this.angle += (Math.PI * 2);
			this.positionNew.x = this.positionPlayer.x + (Math.cos(this.angle) * this.velocity);
			this.positionNew.z = this.positionPlayer.z - (Math.sin(this.angle) * this.velocity);
		} else {
			this.positionNew.x = this.positionPlayer.x + this.velocity;
			this.positionNew.z = this.positionPlayer.z;
		}
		this.positionNew.y = this.positionPlayer.y + this.velocity;
	} else if(action === 'DownRight'){
		if(this.face === 'frontLeft') {
			this.positionNew.x = this.positionPlayer.x + (Math.cos(this.angle) * this.velocity);
			this.positionNew.z = this.positionPlayer.z - (Math.sin(this.angle) * this.velocity);
		} else if(this.face === 'frontRight') {
			this.angle += Math.PI;
			this.positionNew.x = this.positionPlayer.x - (Math.cos(this.angle) * this.velocity);
			this.positionNew.z = this.positionPlayer.z + (Math.sin(this.angle) * this.velocity);
		} else if(this.face === 'backLeft') {
			this.positionNew.x = this.positionPlayer.x + (Math.cos(this.angle) * this.velocity);
			this.positionNew.z = this.positionPlayer.z - (Math.sin(this.angle) * this.velocity);
		} else if(this.face === 'backRight') {
			this.angle += (Math.PI * 2);
			this.positionNew.x = this.positionPlayer.x + (Math.cos(this.angle) * this.velocity);
			this.positionNew.z = this.positionPlayer.z - (Math.sin(this.angle) * this.velocity);
		} else {
			this.positionNew.x = this.positionPlayer.x + this.velocity;
			this.positionNew.z = this.positionPlayer.z;
		}
		this.positionNew.y = this.positionPlayer.y - this.velocity;
	} else if(action === 'Right'){
		if(this.face === 'frontLeft') {
			this.positionNew.x = this.positionPlayer.x + (Math.cos(this.angle) * this.velocity);
			this.positionNew.z = this.positionPlayer.z - (Math.sin(this.angle) * this.velocity);
		} else if(this.face === 'frontRight') {
			this.angle += Math.PI;
			this.positionNew.x = this.positionPlayer.x - (Math.cos(this.angle) * this.velocity);
			this.positionNew.z = this.positionPlayer.z + (Math.sin(this.angle) * this.velocity);
		} else if(this.face === 'backLeft') {
			this.positionNew.x = this.positionPlayer.x + (Math.cos(this.angle) * this.velocity);
			this.positionNew.z = this.positionPlayer.z - (Math.sin(this.angle) * this.velocity);
		} else if(this.face === 'backRight') {
			this.angle += (Math.PI * 2);
			this.positionNew.x = this.positionPlayer.x + (Math.cos(this.angle) * this.velocity);
			this.positionNew.z = this.positionPlayer.z - (Math.sin(this.angle) * this.velocity);
		} else {
			this.positionNew.x = this.positionPlayer.x + this.velocity;
			this.positionNew.z = this.positionPlayer.z;
		}
		this.positionNew.y = this.positionPlayer.y;
	} else if(action === 'UpLeft'){
		if(this.face === 'frontLeft') {
			this.positionNew.x = this.positionPlayer.x - (Math.cos(this.angle) * this.velocity);
			this.positionNew.z = this.positionPlayer.z + (Math.sin(this.angle) * this.velocity);
		} else if(this.face === 'frontRight') {
			this.angle += Math.PI;
			this.positionNew.x = this.positionPlayer.x + (Math.cos(this.angle) * this.velocity);
			this.positionNew.z = this.positionPlayer.z - (Math.sin(this.angle) * this.velocity);
		} else if(this.face === 'backLeft') {
			this.positionNew.x = this.positionPlayer.x - (Math.cos(this.angle) * this.velocity);
			this.positionNew.z = this.positionPlayer.z + (Math.sin(this.angle) * this.velocity);
		} else if(this.face === 'backRight') {
			this.angle += (Math.PI * 2);
			this.positionNew.x = this.positionPlayer.x - (Math.cos(this.angle) * this.velocity);
			this.positionNew.z = this.positionPlayer.z + (Math.sin(this.angle) * this.velocity);
		} else {
			this.positionNew.x = this.positionPlayer.x - this.velocity;
			this.positionNew.z = this.positionPlayer.z;
		}
		this.positionNew.y = this.positionPlayer.y + this.velocity;
	} else if(action === 'DownLeft'){
		if(this.face === 'frontLeft') {
			this.positionNew.x = this.positionPlayer.x - (Math.cos(this.angle) * this.velocity);
			this.positionNew.z = this.positionPlayer.z + (Math.sin(this.angle) * this.velocity);
		} else if(this.face === 'frontRight') {
			this.angle += Math.PI;
			this.positionNew.x = this.positionPlayer.x + (Math.cos(this.angle) * this.velocity);
			this.positionNew.z = this.positionPlayer.z - (Math.sin(this.angle) * this.velocity);
		} else if(this.face === 'backLeft') {
			this.positionNew.x = this.positionPlayer.x - (Math.cos(this.angle) * this.velocity);
			this.positionNew.z = this.positionPlayer.z + (Math.sin(this.angle) * this.velocity);
		} else if(this.face === 'backRight') {
			this.angle += (Math.PI * 2);
			this.positionNew.x = this.positionPlayer.x - (Math.cos(this.angle) * this.velocity);
			this.positionNew.z = this.positionPlayer.z + (Math.sin(this.angle) * this.velocity);
		} else {
			this.positionNew.x = this.positionPlayer.x - this.velocity;
			this.positionNew.z = this.positionPlayer.z;
		}
		this.positionNew.y = this.positionPlayer.y - this.velocity;
	} else if(action === 'Left'){
		if(this.face === 'frontLeft') {
			this.positionNew.x = this.positionPlayer.x - (Math.cos(this.angle) * this.velocity);
			this.positionNew.z = this.positionPlayer.z + (Math.sin(this.angle) * this.velocity);
		} else if(this.face === 'frontRight') {
			this.angle += Math.PI;
			this.positionNew.x = this.positionPlayer.x + (Math.cos(this.angle) * this.velocity);
			this.positionNew.z = this.positionPlayer.z - (Math.sin(this.angle) * this.velocity);
		} else if(this.face === 'backLeft') {
			this.positionNew.x = this.positionPlayer.x - (Math.cos(this.angle) * this.velocity);
			this.positionNew.z = this.positionPlayer.z + (Math.sin(this.angle) * this.velocity);
		} else if(this.face === 'backRight') {
			this.angle += (Math.PI * 2);
			this.positionNew.x = this.positionPlayer.x - (Math.cos(this.angle) * this.velocity);
			this.positionNew.z = this.positionPlayer.z + (Math.sin(this.angle) * this.velocity);
		} else {
			this.positionNew.x = this.positionPlayer.x - this.velocity;
			this.positionNew.z = this.positionPlayer.z;
		}
		this.positionNew.y = this.positionPlayer.y;
	} else if(action === 'Up'){
		this.positionNew.x = this.positionPlayer.x;
		this.positionNew.z = this.positionPlayer.z;
		this.positionNew.y = this.positionPlayer.y + this.velocity;
	} else if(action === 'Down'){
		this.positionNew.x = this.positionPlayer.x;
		this.positionNew.z = this.positionPlayer.z;
		this.positionNew.y = this.positionPlayer.y - this.velocity;
	} else {
		this.positionNew.x = this.positionPlayer.x;
		this.positionNew.z = this.positionPlayer.z;
		this.positionNew.y = this.positionPlayer.y;
	}

	//Collision Enabled or Not
	if(this.auxl.collision){
		//Locomotion with Collision every 0.5 meter
		this.newPosRound.x = this.roundHalf(this.positionNew.x);
		this.newPosRound.z = this.roundHalf(this.positionNew.z);
		this.posRound.x = this.roundHalf(this.positionPlayer.x);
		this.posRound.z = this.roundHalf(this.positionPlayer.z);

		//Check for Obstacles
		if(this.auxl.map.CheckMapObstacles(this.newPosRound, this.posRound)){
			this.player.object3D.position.copy(this.positionNew);
		}
	} else {
		//Free Locomotion No Collision
		this.player.object3D.position.copy(this.positionNew);
	}


},
//1st POV Walk along XY Wall relative to Direction View
directionXY: function (action, speed) {
	this.velocity = speed;
	this.directionVector = new THREE.Vector3();
	this.directionObject.object3D.getWorldDirection(this.directionVector);
	this.positionNew = new THREE.Vector3();
	this.positionPlayer.copy(this.player.object3D.position);
	//Math out the Angle of Camera
	this.angle = Math.atan2(this.directionVector.x,this.directionVector.z);
	//Facing
	this.face;
	//Quadrant 1 : -x, -z
	//Quadrant 2 : +x, -z
	//Quadrant 3 : -x, +z
	//Quadrant 4 : +x, +z
	//Check Camera Angle Quadrant
	if(this.angle > 0 && this.angle < Math.PI/2) {
		//console.log('Forward Left');
		this.face = 'front';
	} else if(this.angle < 0 && this.angle > -Math.PI/2) {
		//console.log('Forward Right');
		this.face = 'front';
	} else if(this.angle > Math.PI/2 && this.angle < Math.PI) {
		//console.log('Backward Left');
		this.face = 'back';
	} else if(this.angle < -Math.PI/2 && this.angle > -Math.PI) {
		//console.log('Backward Right');
		this.face = 'back';
	} else {
		//console.log('Level');
		this.face = 'front';
	}

	if(action === 'forwardRight'){
		if(this.face === 'front'){
			this.positionNew.x = this.positionPlayer.x + this.velocity;
		} else {
			this.positionNew.x = this.positionPlayer.x - this.velocity;
		}
		this.positionNew.y = this.positionPlayer.y + this.velocity;
	} else if(action === 'forwardLeft'){
		if(this.face === 'front'){
			this.positionNew.x = this.positionPlayer.x - this.velocity;
		} else {
			this.positionNew.x = this.positionPlayer.x + this.velocity;
		}
		this.positionNew.y = this.positionPlayer.y + this.velocity;
	} else if(action === 'reverseRight'){
		if(this.face === 'front'){
			this.positionNew.x = this.positionPlayer.x + this.velocity;
		} else {
			this.positionNew.x = this.positionPlayer.x - this.velocity;
		}
		this.positionNew.y = this.positionPlayer.y - this.velocity;
	} else if(action === 'reverseLeft'){
		if(this.face === 'front'){
			this.positionNew.x = this.positionPlayer.x - this.velocity;
		} else {
			this.positionNew.x = this.positionPlayer.x + this.velocity;
		}
		this.positionNew.y = this.positionPlayer.y - this.velocity;
	} else if(action === 'forward'){
		this.positionNew.x = this.positionPlayer.x;
		this.positionNew.y = this.positionPlayer.y + this.velocity;
	} else if(action === 'reverse'){
		this.positionNew.x = this.positionPlayer.x;
		this.positionNew.y = this.positionPlayer.y - this.velocity;
	} else if(action === 'right'){
		this.positionNew.x = this.positionPlayer.x + this.velocity;
		this.positionNew.y = this.positionPlayer.y;
	} else if(action === 'left'){
		this.positionNew.x = this.positionPlayer.x - this.velocity;
		this.positionNew.y = this.positionPlayer.y;
	}
	this.positionNew.z = this.positionPlayer.z;

	//Collision Enabled or Not
	if(this.auxl.collision){
		//Locomotion with Collision every 0.5 meter
		this.newPosRound.x = this.roundHalf(this.positionNew.x);
		this.newPosRound.y = this.roundHalf(this.positionNew.y);
		this.posRound.x = this.roundHalf(this.positionPlayer.x);
		this.posRound.y = this.roundHalf(this.positionPlayer.y);

		//Check for Obstacles
		if(this.auxl.map.CheckMapObstacles(this.newPosRound, this.posRound)){
			this.player.object3D.position.copy(this.positionNew);
		}
	} else {
		//Free Locomotion No Collision
		this.player.object3D.position.copy(this.positionNew);
	}
},
//1st POV Fly relative to Direction View
directionXYZ: function (action, speed) {
	this.allow = false;
	this.yDeadZone = 0.1;
	this.velocity = speed;
	this.directionVector = new THREE.Vector3();
	this.cameraVector = new THREE.Vector3();
	this.camera.object3D.getWorldDirection(this.cameraVector);
	this.directionObject.object3D.getWorldDirection(this.directionVector);
	this.positionNew = new THREE.Vector3();
	this.positionPlayer.copy(this.player.object3D.position);
	//Math out the Angle of Camera
	this.angle = Math.atan2(this.directionVector.x,this.directionVector.z);
	//Facing
	this.face;
	//Quadrant 1 : -x, -z
	//Quadrant 2 : +x, -z
	//Quadrant 3 : -x, +z
	//Quadrant 4 : +x, +z
	//Check Camera Angle Quadrant
	if(this.angle > 0 && this.angle < Math.PI/2) {
		//console.log('Forward Left');
		this.face = 'frontLeft';
	} else if(this.angle < 0 && this.angle > -Math.PI/2) {
		//console.log('Forward Right');
		this.face = 'frontRight';
	} else if(this.angle > Math.PI/2 && this.angle < Math.PI) {
		//console.log('Backward Left');
		this.face = 'backLeft';
	} else if(this.angle < -Math.PI/2 && this.angle > -Math.PI) {
		//console.log('Backward Right');
		this.face = 'backRight';
	} else {
		//console.log('Level');
		this.face = 'level';
	}
	//Quadrant 1 : -x, -z
	//Quadrant 2 : +x, -z
	//Quadrant 3 : -x, +z
	//Quadrant 4 : +x, +z
	if(action === 'forwardRight'){
		if(this.face === 'frontLeft') {
			this.positionNew.x = this.positionPlayer.x - (Math.sin(this.angle) * this.velocity) + (Math.cos(this.angle) * this.velocity);
			this.positionNew.z = this.positionPlayer.z - (Math.cos(this.angle) * this.velocity) - (Math.sin(this.angle) * this.velocity);
		} else if(this.face === 'frontRight') {
			this.angle += Math.PI;
			this.positionNew.x = this.positionPlayer.x + (Math.sin(this.angle) * this.velocity) - (Math.cos(this.angle) * this.velocity);
			this.positionNew.z = this.positionPlayer.z + (Math.cos(this.angle) * this.velocity) + (Math.sin(this.angle) * this.velocity);
		} else if(this.face === 'backLeft') {
			this.positionNew.x = this.positionPlayer.x - (Math.sin(this.angle) * this.velocity) + (Math.cos(this.angle) * this.velocity);
			this.positionNew.z = this.positionPlayer.z - (Math.cos(this.angle) * this.velocity) - (Math.sin(this.angle) * this.velocity);
		} else if(this.face === 'backRight') {
			this.angle += (Math.PI * 2);
			this.positionNew.x = this.positionPlayer.x - (Math.sin(this.angle) * this.velocity) + (Math.cos(this.angle) * this.velocity);
			this.positionNew.z = this.positionPlayer.z - (Math.cos(this.angle) * this.velocity) - (Math.sin(this.angle) * this.velocity);
		} else {
			this.positionNew.x = this.positionPlayer.x + this.velocity;
			this.positionNew.z = this.positionPlayer.z - this.velocity;
		}
	} else if(action === 'forwardLeft'){
		if(this.face === 'frontLeft') {
			this.positionNew.x = this.positionPlayer.x - (Math.sin(this.angle) * this.velocity) - (Math.cos(this.angle) * this.velocity);
			this.positionNew.z = this.positionPlayer.z - (Math.cos(this.angle) * this.velocity) + (Math.sin(this.angle) * this.velocity);
		} else if(this.face === 'frontRight') {
			this.angle += Math.PI;
			this.positionNew.x = this.positionPlayer.x + (Math.sin(this.angle) * this.velocity) + (Math.cos(this.angle) * this.velocity);
			this.positionNew.z = this.positionPlayer.z + (Math.cos(this.angle) * this.velocity) - (Math.sin(this.angle) * this.velocity);
		} else if(this.face === 'backLeft') {
			this.positionNew.x = this.positionPlayer.x - (Math.sin(this.angle) * this.velocity) - (Math.cos(this.angle) * this.velocity);
			this.positionNew.z = this.positionPlayer.z - (Math.cos(this.angle) * this.velocity) + (Math.sin(this.angle) * this.velocity);
		} else if(this.face === 'backRight') {
			this.angle += (Math.PI * 2);
			this.positionNew.x = this.positionPlayer.x - (Math.sin(this.angle) * this.velocity) - (Math.cos(this.angle) * this.velocity);
			this.positionNew.z = this.positionPlayer.z - (Math.cos(this.angle) * this.velocity) + (Math.sin(this.angle) * this.velocity);
		} else {
			this.positionNew.x = this.positionPlayer.x - this.velocity;
			this.positionNew.z = this.positionPlayer.z - this.velocity;
		}
	} else if(action === 'reverseRight'){
		if(this.face === 'frontLeft') {
			this.positionNew.x = this.positionPlayer.x + (Math.sin(this.angle) * this.velocity) + (Math.cos(this.angle) * this.velocity);
			this.positionNew.z = this.positionPlayer.z + (Math.cos(this.angle) * this.velocity) - (Math.sin(this.angle) * this.velocity);
		} else if(this.face === 'frontRight') {
			this.angle += Math.PI;
			this.positionNew.x = this.positionPlayer.x - (Math.sin(this.angle) * this.velocity) - (Math.cos(this.angle) * this.velocity);
			this.positionNew.z = this.positionPlayer.z - (Math.cos(this.angle) * this.velocity) + (Math.sin(this.angle) * this.velocity);
		} else if(this.face === 'backLeft') {
			this.positionNew.x = this.positionPlayer.x + (Math.sin(this.angle) * this.velocity) + (Math.cos(this.angle) * this.velocity);
			this.positionNew.z = this.positionPlayer.z + (Math.cos(this.angle) * this.velocity) - (Math.sin(this.angle) * this.velocity);
		} else if(this.face === 'backRight') {
			this.angle += (Math.PI * 2);
			this.positionNew.x = this.positionPlayer.x + (Math.sin(this.angle) * this.velocity) + (Math.cos(this.angle) * this.velocity);
			this.positionNew.z = this.positionPlayer.z + (Math.cos(this.angle) * this.velocity) - (Math.sin(this.angle) * this.velocity);
		} else {
			this.positionNew.x = this.positionPlayer.x + this.velocity;
			this.positionNew.z = this.positionPlayer.z + this.velocity;
		}
	} else if(action === 'reverseLeft'){
		if(this.face === 'frontLeft') {
			this.positionNew.x = this.positionPlayer.x + (Math.sin(this.angle) * this.velocity) - (Math.cos(this.angle) * this.velocity);
			this.positionNew.z = this.positionPlayer.z + (Math.cos(this.angle) * this.velocity) + (Math.sin(this.angle) * this.velocity);
		} else if(this.face === 'frontRight') {
			this.angle += Math.PI;
			this.positionNew.x = this.positionPlayer.x - (Math.sin(this.angle) * this.velocity) + (Math.cos(this.angle) * this.velocity);
			this.positionNew.z = this.positionPlayer.z - (Math.cos(this.angle) * this.velocity) - (Math.sin(this.angle) * this.velocity);
		} else if(this.face === 'backLeft') {
			this.positionNew.x = this.positionPlayer.x + (Math.sin(this.angle) * this.velocity) - (Math.cos(this.angle) * this.velocity);
			this.positionNew.z = this.positionPlayer.z + (Math.cos(this.angle) * this.velocity) + (Math.sin(this.angle) * this.velocity);
		} else if(this.face === 'backRight') {
			this.angle += (Math.PI * 2);
			this.positionNew.x = this.positionPlayer.x + (Math.sin(this.angle) * this.velocity) - (Math.cos(this.angle) * this.velocity);
			this.positionNew.z = this.positionPlayer.z + (Math.cos(this.angle) * this.velocity) + (Math.sin(this.angle) * this.velocity);
		} else {
			this.positionNew.x = this.positionPlayer.x - this.velocity;
			this.positionNew.z = this.positionPlayer.z + this.velocity;
		}
	} else if(action === 'forward'){
		if(this.face === 'frontLeft') {
			this.positionNew.x = this.positionPlayer.x - (Math.sin(this.angle) * this.velocity);
			this.positionNew.z = this.positionPlayer.z - (Math.cos(this.angle) * this.velocity);
		} else if(this.face === 'frontRight') {
			this.angle += Math.PI;
			this.positionNew.x = this.positionPlayer.x + (Math.sin(this.angle) * this.velocity);
			this.positionNew.z = this.positionPlayer.z + (Math.cos(this.angle) * this.velocity);
		} else if(this.face === 'backLeft') {
			this.positionNew.x = this.positionPlayer.x - (Math.sin(this.angle) * this.velocity);
			this.positionNew.z = this.positionPlayer.z - (Math.cos(this.angle) * this.velocity);
		} else if(this.face === 'backRight') {
			this.angle += (Math.PI * 2);
			this.positionNew.x = this.positionPlayer.x - (Math.sin(this.angle) * this.velocity);
			this.positionNew.z = this.positionPlayer.z - (Math.cos(this.angle) * this.velocity);
		} else {
			this.positionNew.x = this.positionPlayer.x;
			this.positionNew.z = this.positionPlayer.z - this.velocity;
		}
	} else if(action === 'reverse'){
		if(this.face === 'frontLeft') {
			this.positionNew.x = this.positionPlayer.x + (Math.sin(this.angle) * this.velocity);
			this.positionNew.z = this.positionPlayer.z + (Math.cos(this.angle) * this.velocity);
		} else if(this.face === 'frontRight') {
			this.angle += Math.PI;
			this.positionNew.x = this.positionPlayer.x - (Math.sin(this.angle) * this.velocity);
			this.positionNew.z = this.positionPlayer.z - (Math.cos(this.angle) * this.velocity);
		} else if(this.face === 'backLeft') {
			this.positionNew.x = this.positionPlayer.x + (Math.sin(this.angle) * this.velocity);
			this.positionNew.z = this.positionPlayer.z + (Math.cos(this.angle) * this.velocity);
		} else if(this.face === 'backRight') {
			this.angle += (Math.PI * 2);
			this.positionNew.x = this.positionPlayer.x + (Math.sin(this.angle) * this.velocity);
			this.positionNew.z = this.positionPlayer.z + (Math.cos(this.angle) * this.velocity);
		} else {
			this.positionNew.x = this.positionPlayer.x;
			this.positionNew.z = this.positionPlayer.z + this.velocity;
		}
	} else if(action === 'right'){
		if(this.face === 'frontLeft') {
			this.positionNew.x = this.positionPlayer.x + (Math.cos(this.angle) * this.velocity);
			this.positionNew.z = this.positionPlayer.z - (Math.sin(this.angle) * this.velocity);
		} else if(this.face === 'frontRight') {
			this.angle += Math.PI;
			this.positionNew.x = this.positionPlayer.x - (Math.cos(this.angle) * this.velocity);
			this.positionNew.z = this.positionPlayer.z + (Math.sin(this.angle) * this.velocity);
		} else if(this.face === 'backLeft') {
			this.positionNew.x = this.positionPlayer.x + (Math.cos(this.angle) * this.velocity);
			this.positionNew.z = this.positionPlayer.z - (Math.sin(this.angle) * this.velocity);
		} else if(this.face === 'backRight') {
			this.angle += (Math.PI * 2);
			this.positionNew.x = this.positionPlayer.x + (Math.cos(this.angle) * this.velocity);
			this.positionNew.z = this.positionPlayer.z - (Math.sin(this.angle) * this.velocity);
		} else {
			this.positionNew.x = this.positionPlayer.x + this.velocity;
			this.positionNew.z = this.positionPlayer.z;
		}
	} else if(action === 'left'){
		if(this.face === 'frontLeft') {
			this.positionNew.x = this.positionPlayer.x - (Math.cos(this.angle) * this.velocity);
			this.positionNew.z = this.positionPlayer.z + (Math.sin(this.angle) * this.velocity);
		} else if(this.face === 'frontRight') {
			this.angle += Math.PI;
			this.positionNew.x = this.positionPlayer.x + (Math.cos(this.angle) * this.velocity);
			this.positionNew.z = this.positionPlayer.z - (Math.sin(this.angle) * this.velocity);
		} else if(this.face === 'backLeft') {
			this.positionNew.x = this.positionPlayer.x - (Math.cos(this.angle) * this.velocity);
			this.positionNew.z = this.positionPlayer.z + (Math.sin(this.angle) * this.velocity);
		} else if(this.face === 'backRight') {
			this.angle += (Math.PI * 2);
			this.positionNew.x = this.positionPlayer.x - (Math.cos(this.angle) * this.velocity);
			this.positionNew.z = this.positionPlayer.z + (Math.sin(this.angle) * this.velocity);
		} else {
			this.positionNew.x = this.positionPlayer.x - this.velocity;
			this.positionNew.z = this.positionPlayer.z;
		}
	}

	//Up Down
	if(this.cameraVector.y < this.yDeadZone){
		this.positionNew.y = this.positionPlayer.y + ((this.cameraVector.y * -1) * this.velocity);
	} else if(this.cameraVector.y > (this.yDeadZone*-1)){
		this.positionNew.y = this.positionPlayer.y - (this.cameraVector.y * this.velocity);
	} else {
		this.positionNew.y = this.positionPlayer.y;
	}

	//Collision Enabled or Not
	if(this.auxl.collision){
		//Locomotion with Collision every 0.5 meter at XZ and 1m on Y
		this.newPosRound.x = this.roundHalf(this.positionNew.x);
		this.newPosRound.y = this.round(this.positionNew.y);
		this.newPosRound.z = this.roundHalf(this.positionNew.z);
		this.posRound.x = this.roundHalf(this.positionPlayer.x);
		this.posRound.y = this.round(this.positionPlayer.y);
		this.posRound.z = this.roundHalf(this.positionPlayer.z);

		//Check for Obstacles
		if(this.auxl.map.CheckMapObstaclesDiagonal(this.newPosRound, this.posRound)){
			if(this.auxl.player.layer.standing){
				this.newPosStandRound.copy(this.newPosRound);
				this.newPosStandRound.y+=1;
				if(this.auxl.map.CheckMapObstaclesDiagonal(this.newPosStandRound, this.posRound)){
					this.allow = true;
				} else {
					this.allow = false;
				}
			} else {
				this.allow = true;
			}
		} else {
			this.allow = false;
		}
		//Atempt to move parallel
		if(!this.allow){
			//Backup
			this.newPosTemp.copy(this.newPosRound);
			//Test Y
			this.newPosRound.y = this.posRound.y;
			if(this.auxl.map.CheckMapObstaclesDiagonal(this.newPosRound, this.posRound)){
				//Y is blocked
				this.positionNew.y = this.positionPlayer.y;
				this.allow = true;
			} else {
				//Test X
				this.newPosRound.x = this.posRound.x;
				//Reset Y
				this.newPosRound.y = this.newPosTemp.y;
				if(this.auxl.map.CheckMapObstaclesDiagonal(this.newPosRound, this.posRound)){
					//Z is blocked
					this.positionNew.x = this.positionPlayer.x;
					this.allow = true;
				} else {
					//Test Z
					this.newPosRound.z = this.posRound.z;
					//Reset XY
					this.newPosRound.x = this.newPosTemp.x;
					this.newPosRound.y = this.newPosTemp.y;
					if(this.auxl.map.CheckMapObstaclesDiagonal(this.newPosRound, this.posRound)){
						//Z is blocked
						this.positionNew.z = this.positionPlayer.z;
						this.allow = true;
					} 
				}
			}
		}
		//Move
		if(this.allow){
/*
			if(this.positionNew.y < 0){
				console.log(this.positionNew.y); 
			}
*/
			this.player.object3D.position.copy(this.positionNew);
			this.auxl.player.layer.gridPos.copy(this.newPosRound);
			//Check for Triggers on New Coords
			if(this.newPosRound.x === this.posRound.x && this.newPosRound.z === this.posRound.z){} else {
				//Check for Trigger Enter
				if(this.auxl.map.CheckMapTriggers(this.newPosRound)){
					this.auxl.map.TriggerEnterHit(this.newPosRound);
				}
				//Check for Trigger Exits
				this.auxl.map.CheckActiveTriggers(this.newPosRound);
				//Check for Cleared Spawn Collision Conditions
				this.auxl.map.WaitingToSpawn();
			}
		}
/*
		if(this.auxl.map.CheckMapObstacles(this.newPosRound, this.posRound)){
			this.player.object3D.position.copy(this.positionNew);
			this.auxl.player.layer.gridPos.copy(this.newPosRound);
			//Check for Triggers on New Coords
			if(this.newPosRound.x === this.posRound.x && this.newPosRound.z === this.posRound.z){} else {
				//Check for Trigger Enter
				if(this.auxl.map.CheckMapTriggers(this.newPosRound)){
					this.auxl.map.TriggerEnterHit(this.newPosRound);
				}
				//Check for Trigger Exits
				this.auxl.map.CheckActiveTriggers(this.newPosRound);
				//Check for Cleared Spawn Collision Conditions
				this.auxl.map.WaitingToSpawn();
			}
		}
*/
	} else {
		//Free Locomotion No Collision
		this.player.object3D.position.copy(this.positionNew);
	}
},
//1st POV Walk along X, Y or Z Floor/Walls relative to Direction View
directionXYZWall: function (action, speed){},
//1st POV Orbit Rotate
directionAXY: function (action, speed){},
//1st POV Orbit Rotate w/ Zoom In & Out
directionAXYZ: function (action, speed){},
//3rd POV Walk along XZ Floor
rigXZ: function (action, speed) {
	this.velocity = speed;
	this.positionNew = new THREE.Vector3();
	this.positionAvatar.copy(this.avatar.object3D.position);

	if(action === 'forwardRight'){
		this.positionNew.x = this.positionAvatar.x + this.velocity;
		this.positionNew.z = this.positionAvatar.z - this.velocity;
	} else if(action === 'forwardLeft'){
		this.positionNew.x = this.positionAvatar.x - this.velocity;
		this.positionNew.z = this.positionAvatar.z - this.velocity;
	} else if(action === 'reverseRight'){
		this.positionNew.x = this.positionAvatar.x + this.velocity;
		this.positionNew.z = this.positionAvatar.z + this.velocity;
	} else if(action === 'reverseLeft'){
		this.positionNew.x = this.positionAvatar.x - this.velocity;
		this.positionNew.z = this.positionAvatar.z + this.velocity;
	} else if(action === 'forward'){
		this.positionNew.x = this.positionAvatar.x;
		this.positionNew.z = this.positionAvatar.z - this.velocity;
	} else if(action === 'reverse'){
		this.positionNew.x = this.positionAvatar.x;
		this.positionNew.z = this.positionAvatar.z + this.velocity;
	} else if(action === 'right'){
		this.positionNew.x = this.positionAvatar.x + this.velocity;
		this.positionNew.z = this.positionAvatar.z;
	} else if(action === 'left'){
		this.positionNew.x = this.positionAvatar.x - this.velocity;
		this.positionNew.z = this.positionAvatar.z;
	}
	this.positionNew.y = this.positionAvatar.y;

	//Collision Enabled or Not
	if(this.auxl.collision){
		//Locomotion with Collision every 0.5 meter
		this.newPosRound.x = this.roundHalf(this.positionNew.x);
		this.newPosRound.z = this.roundHalf(this.positionNew.z);
		this.posRound.x = this.roundHalf(this.positionAvatar.x);
		this.posRound.z = this.roundHalf(this.positionAvatar.z);

		//Check for Obstacles
		if(this.auxl.map.CheckMapObstacles(this.newPosRound, this.posRound)){
			this.avatar.object3D.position.copy(this.positionNew);
		}
	} else {
		//Free Locomotion No Collision
		this.avatar.object3D.position.copy(this.positionNew);
	}
},
//3rd POV Walk with Fly Buttons
rigXZY: function (action, speed){},
//3rd POV Walk along XY Wall
rigXY: function (action, speed) {
	this.velocity = speed;
	this.positionNew = new THREE.Vector3();
	this.positionAvatar.copy(this.avatar.object3D.position);

	if(action === 'forwardRight'){
		this.positionNew.x = this.positionAvatar.x + this.velocity;
		this.positionNew.y = this.positionAvatar.y + this.velocity;
	} else if(action === 'forwardLeft'){
		this.positionNew.x = this.positionAvatar.x - this.velocity;
		this.positionNew.y = this.positionAvatar.y + this.velocity;
	} else if(action === 'reverseRight'){
		this.positionNew.x = this.positionAvatar.x + this.velocity;
		this.positionNew.y = this.positionAvatar.y - this.velocity;
	} else if(action === 'reverseLeft'){
		this.positionNew.x = this.positionAvatar.x - this.velocity;
		this.positionNew.y = this.positionAvatar.y - this.velocity;
	} else if(action === 'forward'){
		this.positionNew.x = this.positionAvatar.x;
		this.positionNew.y = this.positionAvatar.y + this.velocity;
	} else if(action === 'reverse'){
		this.positionNew.x = this.positionAvatar.x;
		this.positionNew.y = this.positionAvatar.y - this.velocity;
	} else if(action === 'right'){
		this.positionNew.x = this.positionAvatar.x + this.velocity;
		this.positionNew.y = this.positionAvatar.y;
	} else if(action === 'left'){
		this.positionNew.x = this.positionAvatar.x - this.velocity;
		this.positionNew.y = this.positionAvatar.y;
	}
	this.positionNew.z = this.positionAvatar.z;

	//Collision Enabled or Not
	if(this.auxl.collision){
		//Locomotion with Collision every 0.5 meter
		this.newPosRound.x = this.roundHalf(this.positionNew.x);
		this.newPosRound.y = this.roundHalf(this.positionNew.y);
		this.posRound.x = this.roundHalf(this.positionAvatar.x);
		this.posRound.y = this.roundHalf(this.positionAvatar.y);

		//Check for Obstacles
		if(this.auxl.map.CheckMapObstacles(this.newPosRound, this.posRound)){
			this.avatar.object3D.position.copy(this.positionNew);
		}
	} else {
		//Free Locomotion No Collision
		this.avatar.object3D.position.copy(this.positionNew);
	}
},
//3rd POV Walk along XZ Floor w/ Up & Down Controls
rigXYZ: function (action, speed){},
//3rd POV Walk along X, Y or Z Floor/Walls
rigXYZWall: function (action, speed){},
//3rd POV Orbit Rotate
rigAXY: function (action, speed) {
	this.velocity = speed/10;
	this.rotationNew = new THREE.Euler(0,0,0,'YXZ');
	this.rotationAvatar.copy(this.avatarSphere.object3D.rotation);

	if(action === 'forwardRight'){
		this.rotationNew.x = this.rotationAvatar.x + this.velocity;
		this.rotationNew.y = this.rotationAvatar.y - this.velocity;
	} else if(action === 'forwardLeft'){
		this.rotationNew.x = this.rotationAvatar.x + this.velocity;
		this.rotationNew.y = this.rotationAvatar.y + this.velocity;
	} else if(action === 'reverseRight'){
		this.rotationNew.x = this.rotationAvatar.x - this.velocity;
		this.rotationNew.y = this.rotationAvatar.y - this.velocity;
	} else if(action === 'reverseLeft'){
		this.rotationNew.x = this.rotationAvatar.x - this.velocity;
		this.rotationNew.y = this.rotationAvatar.y + this.velocity;
	} else if(action === 'forward'){
		this.rotationNew.x = this.rotationAvatar.x + this.velocity;
		this.rotationNew.y = this.rotationAvatar.y;
	} else if(action === 'reverse'){
		this.rotationNew.x = this.rotationAvatar.x - this.velocity;
		this.rotationNew.y = this.rotationAvatar.y;
	} else if(action === 'right'){
		this.rotationNew.x = this.rotationAvatar.x;
		this.rotationNew.y = this.rotationAvatar.y - this.velocity;
	} else if(action === 'left'){
		this.rotationNew.x = this.rotationAvatar.x;
		this.rotationNew.y = this.rotationAvatar.y + this.velocity;
	}
	this.rotationNew.z = this.rotationAvatar.z;

	//Free Locomotion No Collision
	this.avatarSphere.object3D.rotation.copy(this.rotationNew);
},
//3rd POV Orbit Rotate w/ Zoom In & Out
rigAXYZ: function (action, speed){},
//Camera Direction to Spawn Assets In - Unused Currently
userDirection: function (){
	this.userPos = this.player.getAttribute('position');
	this.userRot = this.camera.getAttribute('rotation');
	//Check which direction the user is traveling
	if((this.userPreviousPos.x + this.userPos.x < 0) && (this.userPreviousPos.z + this.userPos.z < 0)){
		//northWest -x-z
		this.userTravel = 'northWest';
	} else if((this.userPreviousPos.x + this.userPos.x < 0) && (this.userPreviousPos.z + this.userPos.z > 0)){
		//southWest -x +z
		this.userTravel = 'southWest';
	} else if((this.userPreviousPos.x + this.userPos.x > 0) && (this.userPreviousPos.z + this.userPos.z > 0)){
		//southEast +x+z
		this.userTravel = 'southEast';
	} else if((this.userPreviousPos.x + this.userPos.x > 0) && (this.userPreviousPos.z + this.userPos.z < 0)){
		//northEast +x-z
		this.userTravel = 'northEast';
	} else {
		//Default
		this.userTravel = 'northEast';
	}
	//After previous to current position check, update the previous position value to be compared against on the next run cycle
	this.userPreviousPos = this.userPos;

	//If POV Rotation is more then 360 or -360, divide it by sets of 360 to obtain 0-360 degrees to assign from
	if( this.userRot.y > 360) {
		let radials = this.userRot.y / 360;
		this.userPov = ((Math.floor(radials)) * 360 ) - this.userRot.y;
		this.userPov *= -1;
	} else if(this.userRot.y < -360) {
		let radials = this.userRot.y / 360;
		this.userPov = ((Math.floor(radials)) * 360 ) - this.userRot.y;
		this.userPov *= -1;
	} else {
		this.userPov = this.userRot.y;
	}
	//Check which direciton the User is facing
	if ((this.userPov > 0 && this.userPov < 15) || (this.userPov > 345 && this.userPov < 360)) {
			//North
			this.userView = 'north';
	   } else if (this.userPov > 255 && this.userPov > 285) {
			//East
			this.userView = 'east';
		} else if (this.userPov > 75 && this.userPov < 105) {
			//West
			this.userView = 'west';
		} else if (this.userPov > 165 && this.userPov < 195) {
			//South
			this.userView = 'south';
		} else if ((this.userPov < 0 && this.userPov > -15) || (this.userPov < -345 && this.userPov > -360)) {
			//North
			this.userView = 'north';
	   } else if (this.userPov < -255 && this.userPov > -285) {
			//West
			this.userView = 'west';
		} else if (this.userPov < -75 && this.userPov > -105) {
			//East
			this.userView = 'east';
		} else if (this.userPov < -165 && this.userPov > -195) {
			//South
			this.userView = 'south';
		} else if (this.userPov > 15 && this.userPov < 75) {//
			//North West
			this.userView = 'northWest';
	   } else if (this.userPov > 105 && this.userPov < 165) {//
			//South West
			this.userView = 'southWest';
		} else if (this.userPov > 195 && this.userPov < 255) {//
			//South East
			this.userView = 'southEast';
		} else if (this.userPov > 285 && this.userPov < 345) {//
			//North East
			this.userView = 'northEast';
		} else if (this.userPov < -15 && this.userPov > -75 ) {//Negative direction
			//North East
			this.userView = 'northEast';
	   } else if (this.userPov < -105 && this.userPov > -165) {
			//South East
			this.userView = 'southEast';
		} else if (this.userPov < -195 && this.userPov > -255) {
			//South West
			this.userView = 'southWest';
		} else if (this.userPov < -285 && this.userPov > -345) {
			//North West
			this.userView = 'northWest';
		} else {
			this.userView = 'north';
		}
	//Depending on the User's facing direction, spawn in that quadrant
	if(this.userView === "northWest"){// -x -z
		this.positionTemp.x = (this.velocity + this.positionPlayer.x) * -1;
		this.positionTemp.z = (this.velocity + this.positionPlayer.z) * -1;
		this.positionTemp.z += this.positionPlayer.z;
	} else if(this.userView === "southWest"){// -x +z
		this.positionTemp.x = (this.velocity + this.positionPlayer.x) * -1;
		this.positionTemp.z =(this.velocity + this.positionPlayer.z);
	} else if(this.userView === "southEast"){// +x +z
		this.positionTemp.x = (this.velocity + this.positionPlayer.x);
		this.positionTemp.z =(this.velocity + this.positionPlayer.z);
	} else if(this.userView === "northEast"){// +x -z
		this.positionTemp.x = (this.velocity + this.positionPlayer.x);
		this.positionTemp.z =(this.velocity + this.positionPlayer.z) * -1;
	} else if(this.userView === "north"){// +-x -z
		this.positionTemp.x = (this.velocity + this.positionPlayer.x);
		this.positionTemp.z =(this.velocity + this.positionPlayer.z) * -1;
	} else if(this.userView === "west"){// -x +-z
		this.positionTemp.x = (this.velocity + this.positionPlayer.x) * -1;
		this.positionTemp.z =(this.velocity + this.positionPlayer.z);
	} else if(this.userView === "east"){// +x +-z
		this.positionTemp.x = (this.velocity + this.positionPlayer.x);
		this.positionTemp.z =(this.velocity + this.positionPlayer.z);
	} else if(this.userView === "south"){// +-x +z
		this.positionTemp.x = (this.velocity + this.positionPlayer.x);
		this.positionTemp.z =(this.velocity + this.positionPlayer.z);
	} else {
		this.positionTemp.x = 0;
		this.positionTemp.z = 0;
	}
	this.positionNew = new THREE.Vector3(this.positionTemp.x, 0, this.positionTemp.z);
},

});

//
//Gimbal
//1st/3rd Rotation X,Y and/or Z
const gimbal = AFRAME.registerComponent('gimbal', {
dependencies: ['auxl'],
schema: {
	uiid: {type: 'string', default: 'ui'},
	courserid: {type: 'string', default: 'mouseCursor'},
	movetype: {type: 'string', default: 'vr'},
	pov: {type: 'string', default: '1st'},
	style: {type: 'string', default: 'free'},
	axis: {type: 'string', default: 'rotXZ'},
},
init: function () {
	//AUXL System Connection
	this.auxl = document.querySelector('a-scene').systems.auxl;
	//Free Locomotion
	this.freeStepThrottled = AFRAME.utils.throttle(this.freeStep, 30, this);
	//Grid Locomotion
	this.gridStepThrottled = AFRAME.utils.throttle(this.gridStep, 400, this);

	//Schema Imoprt
	//
	//Cursor Element
	this.mouseCursor = document.getElementById(this.data.courserid);
	//UI to attach
	if(this.data.uuid){
		this.ui = document.getElementById(this.data.uiid);
	}


	//Movement Type
	this.movetype = this.data.movetype;
	//vr
	//vrHover
	//desktop
	//mobile

	//Point of View
	this.pov = this.data.pov;
	//1st
	//3rd

	//Free or Grid Locomotion Style
	this.style = this.data.style;
	//free
	//grid

	//Movement Coords
	this.axis = this.data.axis;
	//Rot XZ

	//Camera Rotate Support
	this.camera = document.getElementById('camera');
	this.player = document.getElementById('playerRig');
	//this.playerSphere = document.getElementById('playerSphere');
	this.avatar;
	this.avatarSphere;
	this.ui = document.getElementById('beltUIParent');
    this.rotationPlayer = new THREE.Vector3();
    this.rotationAvatar = new THREE.Vector3();
    this.rotationNew = new THREE.Vector3();
    this.rotationTemp = new THREE.Vector3();
	this.quaternion = new THREE.Quaternion();
	this.vector;
	this.angle;

	//Collision
	this.posRound = new THREE.Vector3();
	this.newPosRound = new THREE.Vector3();
	this.mapX;
	this.mapZ;

	//Attach to Player Support
	this.elPosVec3New = new THREE.Vector3();

	//User Direction Support
	this.velocity;
	this.userPreviousPos = this.player.getAttribute('rotation');
	this.userPos;
	this.userRot;
	this.userPov;
	this.userTravel;
	this.userView;
	this.newX;
	this.newZ;

	//Locomotion Support
	//Brake Engaged by Default aka Slow Speed
	this.moveTo = false;
	this.moveBack = false;
	this.moveRight = false;
	this.moveLeft = false;
	this.moveUp = false;
	this.moveDown = false;
	this.moveBrake = true;
	this.brakeReady = true;
	this.brakeToggle = false;
	this.brakeReset; //Delay

	//Free Locomotion Support
	this.moveSpeedDefault;
	this.moveSpeedSlow;

	//Grid Locomotion Support
	this.gridForwardTimeout;
	this.gridReverseTimeout;
	this.gridLeftTimeout;
	this.gridRightTimeout;
	this.gridUpTimeout;
	this.gridDownTimeout;
	this.gridMove = false;
	//Movement is always 1 meter, so speed is in ms
	this.gridSpeed = 400;

	//3rd Person Config
	let initDelay = setTimeout(()=> {
		if(this.pov === '3rd'){
			let initDelay = setTimeout(()=> {
				this.avatar = document.getElementById('avatarRig');
				this.avatarSphere = document.getElementById('avatarSphere');
			},500)
		}
	},1000)
},
//0.5 Increments
roundHalf: function (num){
    return Math.round(num*2)/2;
},
//Move Forward
movingForward: function (){
	clearTimeout(this.gridForwardTimeout);
	if(this.moveTo){}else{
		this.moveTo = true;
	}
},
//Cancel Forward
cancelForward: function (){
	if(this.moveTo){
		if(this.style === 'grid'){
			if(this.gridMove){
				this.moveTo = false;
			} else {
				this.gridForwardTimeout = setTimeout(() => {
					this.moveTo = false;
				}, this.gridSpeed/1.25);
			}
		} else {
			this.moveTo = false;
		}
	}
},
//Move Reverse
movingReverse: function (){
	clearTimeout(this.gridReverseTimeout);
	if(this.moveBack){}else{
		this.moveBack = true;
	}
},
//Cancel Reverse
cancelReverse: function (){
	if(this.moveBack){
		if(this.style === 'grid'){
			if(this.gridMove){
				this.moveBack = false;
			} else {
				this.gridReverseTimeout = setTimeout(() => {
					this.moveBack = false;
				}, this.gridSpeed/1.25);
			}
		} else {
			this.moveBack = false;
		}
	}
},
//Move Left
movingLeft: function (){
	clearTimeout(this.gridLeftTimeout);
	if(this.moveLeft){}else{
		this.moveLeft = true;
	}
},
//Cancel Left
cancelLeft: function (){
	if(this.moveLeft){
		if(this.style === 'grid'){
			if(this.gridMove){
				this.moveLeft = false;
			} else {
				this.gridLeftTimeout = setTimeout(() => {
					this.moveLeft = false;
				}, this.gridSpeed/1.25);
			}
		} else {
			this.moveLeft = false;
		}
	}
},
//Move Right
movingRight: function (){
	clearTimeout(this.gridRightTimeout);
	if(this.moveRight){}else{
		this.moveRight = true;
	}
},
//Cancel Right
cancelRight: function (){
	if(this.moveRight){
		if(this.style === 'grid'){
			if(this.gridMove){
				this.moveRight = false;
			} else {
				this.gridRightTimeout = setTimeout(() => {
					this.moveRight = false;
				}, this.gridSpeed/1.25);
			}
		} else {
			this.moveRight = false;
		}
	}
},
//Move Up
movingUp: function (){
	clearTimeout(this.gridUpTimeout);
	if(this.moveUp){}else{
		this.moveUp = true;
	}
},
//Cancel Up
cancelUp: function (){
	if(this.moveUp){
		if(this.style === 'grid'){
			if(this.gridMove){
				this.moveUp = false;
			} else {
				this.gridUpTimeout = setTimeout(() => {
					this.moveUp = false;
				}, this.gridSpeed/1.25);
			}
		} else {
			this.moveUp = false;
		}
	}
},
//Move Down
movingDown: function (){
	clearTimeout(this.gridDownTimeout);
	if(this.moveDown){}else{
		this.moveDown = true;
	}
},
//Cancel Down
cancelDown: function (){
	if(this.moveDown){
		if(this.style === 'grid'){
			if(this.gridMove){
				this.moveDown = false;
			} else {
				this.gridDownTimeout = setTimeout(() => {
					this.moveDown = false;
				}, this.gridSpeed/1.25);
			}
		} else {
			this.moveDown = false;
		}
	}
},
//Clear All Movement
clearMovement: function (){
	this.cancelForward();
	this.cancelReverse();
	this.cancelLeft();
	this.cancelRight();
	this.cancelUp();
	this.cancelDown();
},
//Clear All Grid Movement
clearGridMovement: function (){
	this.moveTo = false;
	this.moveBack = false;
	this.moveLeft = false;
	this.moveRight = false;
	clearTimeout(this.gridForwardTimeout);
	clearTimeout(this.gridReverseTimeout);
	clearTimeout(this.gridLeftTimeout);
	clearTimeout(this.gridRightTimeout);
},
//Toggle Speed Change
toggleSpeed: function (){
	if(this.brakeReady){
		if(this.brakeToggle){
			//Set reset switch toggle
			this.brakeToggle = false;
			//Set reset timer switch toggle
			this.brakeReady = false;
			//Brake On
			this.moveBrake = true;
			//Slower Grid Move
			this.gridSpeed = 400;
			this.everyStepThrottled = AFRAME.utils.throttle(this.everyStep, this.gridSpeed, this);
		} else {
			//Set reset switch toggle
			this.brakeToggle = true;
			//Set reset timer switch toggle
			this.brakeReady = false;
			//Brake Off
			this.moveBrake = false;
			//Faster Grid Move
			this.gridSpeed = 200;
			this.everyStepThrottled = AFRAME.utils.throttle(this.everyStep, this.gridSpeed, this);
		}
		this.brakeReset = setTimeout(() => {
			//Set reset switch toggle
			this.brakeReady = true;
			clearTimeout(this.brakeReset);
		}, 250);
	}
},
//Long Buffer for Toggling Speed Change
brakeReadBufferLong: function (){
	//This will start the reset timer to allow the brake to be re-engadged
	this.brakeReset = setTimeout(() => {
		this.brakeReady = true;
		clearTimeout(this.brakeReset);
	}, 2250);
},
//Update
update: function () {
	//Locomotion Support
	//Brake Engaged by Default
	this.moveTo = false;
	this.moveBack = false;
	this.moveRight = false;
	this.moveLeft = false;
	this.moveBrake = true;
	this.brakeReady = true;
	this.brakeToggle = false;
	this.brakeReset; //Delay
	this.moveSpeedDefault = 1;
	this.moveSpeedSlow = 0.5;

	//Grid Locomotion Support
	this.gridForwardTimeout;
	this.gridReverseTimeout;
	this.gridLeftTimeout;
	this.gridRightTimeout;
	this.gridMove = false;
	//Movement is always 1 meter, so speed is in ms
	this.gridSpeed = 500;

	//Schema Imoprt
	//
	//Cursor Element
	this.mouseCursor = document.getElementById(this.data.courserid);
	//UI to attach
	if(this.data.uiid){
		this.ui = document.getElementById(this.data.uiid);
	}
	//Movement Type
	this.movetype = this.data.movetype;

	//Keyboard Controller Event Listeners
	if(this.movetype === 'desktop'){
		//Controlled by Universal Controls
	} else if(this.movetype === 'mobile'){
		//Controlled by Universal Controls
	} else if(this.movetype === 'vr'){
		//Controlled by Universal Controls
	} else if(this.movetype === 'vrHover'){
		//Not Configured
	}
},
//Remove
remove: function () {
	if(this.movetype === 'desktop'){
		//Controlled by Universal Controls
	} else if(this.movetype === 'mobile'){
		//Controlled by Universal Controls
	} else if(this.movetype === 'vr'){
		//Controlled by Universal Controls
	} else if(this.movetype === 'vrHover'){
		//Not Configured
	}
},
//Tick
tick: function (time, timeDelta) {
	//Locomotion Type
	if(this.style === 'free'){
		this.freeStepThrottled();
	} else if(this.style === 'grid'){
		this.gridStepThrottled();
	}

},
//Free Locomotion Tick
freeStep: function (time, timeDelta) {
	if(this.moveBrake){
		if(this.moveTo && this.moveRight) {
			this.move('forwardRight', this.moveSpeedSlow);
		} else if(this.moveTo && this.moveLeft) {
			this.move('forwardLeft', this.moveSpeedSlow);
		} else if(this.moveBack && this.moveRight) {
			this.move('reverseRight', this.moveSpeedSlow);
		} else if(this.moveBack && this.moveLeft) {
			this.move('reverseLeft', this.moveSpeedSlow);
		} else if(this.moveTo) {
			this.move('forward', this.moveSpeedSlow);
		} else if(this.moveBack) {
			this.move('reverse', this.moveSpeedSlow);
		} else if(this.moveRight) {
			this.move('right', this.moveSpeedSlow);
		} else if(this.moveLeft) {
			this.move('left', this.moveSpeedSlow);
		}
	} else {
		if(this.moveTo && this.moveRight) {
			this.move('forwardRight', this.moveSpeedDefault);
		} else if(this.moveTo && this.moveLeft) {
			this.move('forwardLeft', this.moveSpeedDefault);
		} else if(this.moveBack && this.moveRight) {
			this.move('reverseRight', this.moveSpeedDefault);
		} else if(this.moveBack && this.moveLeft) {
			this.move('reverseLeft', this.moveSpeedDefault);
		} else if(this.moveTo) {
			this.move('forward', this.moveSpeedDefault);
		} else if(this.moveBack) {
			this.move('reverse', this.moveSpeedDefault);
		} else if(this.moveRight) {
			this.move('right', this.moveSpeedDefault);
		} else if(this.moveLeft) {
			this.move('left', this.moveSpeedDefault);
		}
	}
},
//Free Locomotion Tick
freeStepPlus: function (time, timeDelta) {

//Not Working
//UpForwardLeft
//UpReverseLeft
//DownForwardRight
//DownReverseRight
	this.movement = '';
	//Up|Down
	if(this.moveUp && this.moveDown){} else {
		if(this.moveUp){
			this.movement += 'Up';
		} else if(this.moveDown){
			this.movement += 'Down';
		}
	}
	//Forward|Reverse
	if(this.moveTo && this.moveBack){} else {
		if(this.moveTo){
			this.movement += 'Forward';
		} else if(this.moveBack){
			this.movement += 'Reverse';
		}
	}
	//Right|Left
	if(this.moveRight && this.moveLeft){} else {
		if(this.moveRight){
			this.movement += 'Right';
		} else if(this.moveLeft){
			this.movement += 'Left';
		}
	}
	console.log(this.movement)

	//Speed
	if(this.moveBrake){
		this.moveFree(this.movement, this.moveSpeedSlow);
	} else {
		this.moveFree(this.movement, this.moveSpeedDefault);
	}
},
//Grid Locomotion Tick
gridStep: function (time, timeDelta) {
	if(this.moveTo || this.moveBack || this.moveRight || this.moveLeft){
		if(this.gridMove){} else {
			this.gridMove = true;
		}
	} else {
		this.gridMove = false;
	}
	if(this.moveTo && this.moveRight) {
		this.move('forwardRight', 0.5);
	} else if(this.moveTo && this.moveLeft) {
		this.move('forwardLeft', 0.5);
	} else if(this.moveBack && this.moveRight) {
		this.move('reverseRight', 0.5);
	} else if(this.moveBack && this.moveLeft) {
		this.move('reverseLeft', 0.5);
	} else if(this.moveTo) {
		this.move('forward', 0.5);
	} else if(this.moveBack) {
		this.move('reverse', 0.5);
	} else if(this.moveRight) {
		this.move('right', 0.5);
	} else if(this.moveLeft) {
		this.move('left', 0.5);
	}

},
//Function to calculate distance between two points
distance: function(x1, y1, x2,  y2) {
    //Calculating distance
    return Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2) * 1.0);
},
//Sync Belt UI
uiSync: function () {
	this.elPosVec3New.copy(this.el.object3D.rotation);
	//No Offsets as UI Parent is at 0 0 0
	this.ui.object3D.rotation.copy(this.elPosVec3New);
},
//Move
move: function (direction, speed) {
	if(this.pov === '1st'){
		if(this.axis === 'rotXZ'){
			this.directionXZ(direction, speed);
		}
	} else if(this.pov === '3rd'){
		if(this.axis === 'rotXZ'){
			this.rigXZ(direction, speed);
		}
	}
},
//1st POV Rotat along XZ relative to Camera View
directionXZ: function (action, speed) {
	this.velocity = speed;
	this.cameraVector = new THREE.Vector3();
	this.camera.object3D.getWorldDirection(this.cameraVector);
	this.rotationNew = new THREE.Vector3();
	//Euler
	//this.rotationPlayer.copy(this.player.object3D.rotation);
	this.rotationPlayer = this.player.getAttribute('rotation');
	//Math out the Angle of Camera
	this.angle = Math.atan2(this.cameraVector.x,this.cameraVector.z);
	//Facing
	this.face;
	//Quadrant 1 : -x, -z
	//Quadrant 2 : +x, -z
	//Quadrant 3 : -x, +z
	//Quadrant 4 : +x, +z
	//Check Camera Angle Quadrant
	if(this.angle > 0 && this.angle < Math.PI/2) {
		//console.log('Forward Left');
		this.face = 'frontLeft';
	} else if(this.angle < 0 && this.angle > -Math.PI/2) {
		//console.log('Forward Right');
		this.face = 'frontRight';
	} else if(this.angle > Math.PI/2 && this.angle < Math.PI) {
		//console.log('Backward Left');
		this.face = 'backLeft';
	} else if(this.angle < -Math.PI/2 && this.angle > -Math.PI) {
		//console.log('Backward Right');
		this.face = 'backRight';
	} else {
		//console.log('Level');
		this.face = 'level';
	}
	if(action === 'forwardRight'){
		if(this.face === 'frontLeft') {
			this.rotationNew.x = this.rotationPlayer.x - (Math.sin(this.angle) * this.velocity) + (Math.cos(this.angle) * this.velocity);
			this.rotationNew.z = this.rotationPlayer.z - (Math.cos(this.angle) * this.velocity) - (Math.sin(this.angle) * this.velocity);
		} else if(this.face === 'frontRight') {
			this.angle += Math.PI;
			this.rotationNew.x = this.rotationPlayer.x + (Math.sin(this.angle) * this.velocity) - (Math.cos(this.angle) * this.velocity);
			this.rotationNew.z = this.rotationPlayer.z + (Math.cos(this.angle) * this.velocity) + (Math.sin(this.angle) * this.velocity);
		} else if(this.face === 'backLeft') {
			this.rotationNew.x = this.rotationPlayer.x - (Math.sin(this.angle) * this.velocity) + (Math.cos(this.angle) * this.velocity);
			this.rotationNew.z = this.rotationPlayer.z - (Math.cos(this.angle) * this.velocity) - (Math.sin(this.angle) * this.velocity);
		} else if(this.face === 'backRight') {
			this.angle += (Math.PI * 2);
			this.rotationNew.x = this.rotationPlayer.x - (Math.sin(this.angle) * this.velocity) + (Math.cos(this.angle) * this.velocity);
			this.rotationNew.z = this.rotationPlayer.z - (Math.cos(this.angle) * this.velocity) - (Math.sin(this.angle) * this.velocity);
		} else {
			this.rotationNew.x = this.rotationPlayer.x + this.velocity;
			this.rotationNew.z = this.rotationPlayer.z - this.velocity;
		}
	} else if(action === 'forwardLeft'){
		if(this.face === 'frontLeft') {
			this.rotationNew.x = this.rotationPlayer.x - (Math.sin(this.angle) * this.velocity) - (Math.cos(this.angle) * this.velocity);
			this.rotationNew.z = this.rotationPlayer.z - (Math.cos(this.angle) * this.velocity) + (Math.sin(this.angle) * this.velocity);
		} else if(this.face === 'frontRight') {
			this.angle += Math.PI;
			this.rotationNew.x = this.rotationPlayer.x + (Math.sin(this.angle) * this.velocity) + (Math.cos(this.angle) * this.velocity);
			this.rotationNew.z = this.rotationPlayer.z + (Math.cos(this.angle) * this.velocity) - (Math.sin(this.angle) * this.velocity);
		} else if(this.face === 'backLeft') {
			this.rotationNew.x = this.rotationPlayer.x - (Math.sin(this.angle) * this.velocity) - (Math.cos(this.angle) * this.velocity);
			this.rotationNew.z = this.rotationPlayer.z - (Math.cos(this.angle) * this.velocity) + (Math.sin(this.angle) * this.velocity);
		} else if(this.face === 'backRight') {
			this.angle += (Math.PI * 2);
			this.rotationNew.x = this.rotationPlayer.x - (Math.sin(this.angle) * this.velocity) - (Math.cos(this.angle) * this.velocity);
			this.rotationNew.z = this.rotationPlayer.z - (Math.cos(this.angle) * this.velocity) + (Math.sin(this.angle) * this.velocity);
		} else {
			this.rotationNew.x = this.rotationPlayer.x - this.velocity;
			this.rotationNew.z = this.rotationPlayer.z - this.velocity;
		}
	} else if(action === 'reverseRight'){
		if(this.face === 'frontLeft') {
			this.rotationNew.x = this.rotationPlayer.x + (Math.sin(this.angle) * this.velocity) + (Math.cos(this.angle) * this.velocity);
			this.rotationNew.z = this.rotationPlayer.z + (Math.cos(this.angle) * this.velocity) - (Math.sin(this.angle) * this.velocity);
		} else if(this.face === 'frontRight') {
			this.angle += Math.PI;
			this.rotationNew.x = this.rotationPlayer.x - (Math.sin(this.angle) * this.velocity) - (Math.cos(this.angle) * this.velocity);
			this.rotationNew.z = this.rotationPlayer.z - (Math.cos(this.angle) * this.velocity) + (Math.sin(this.angle) * this.velocity);
		} else if(this.face === 'backLeft') {
			this.rotationNew.x = this.rotationPlayer.x + (Math.sin(this.angle) * this.velocity) + (Math.cos(this.angle) * this.velocity);
			this.rotationNew.z = this.rotationPlayer.z + (Math.cos(this.angle) * this.velocity) - (Math.sin(this.angle) * this.velocity);
		} else if(this.face === 'backRight') {
			this.angle += (Math.PI * 2);
			this.rotationNew.x = this.rotationPlayer.x + (Math.sin(this.angle) * this.velocity) + (Math.cos(this.angle) * this.velocity);
			this.rotationNew.z = this.rotationPlayer.z + (Math.cos(this.angle) * this.velocity) - (Math.sin(this.angle) * this.velocity);
		} else {
			this.rotationNew.x = this.rotationPlayer.x + this.velocity;
			this.rotationNew.z = this.rotationPlayer.z + this.velocity;
		}
	} else if(action === 'reverseLeft'){
		if(this.face === 'frontLeft') {
			this.rotationNew.x = this.rotationPlayer.x + (Math.sin(this.angle) * this.velocity) - (Math.cos(this.angle) * this.velocity);
			this.rotationNew.z = this.rotationPlayer.z + (Math.cos(this.angle) * this.velocity) + (Math.sin(this.angle) * this.velocity);
		} else if(this.face === 'frontRight') {
			this.angle += Math.PI;
			this.rotationNew.x = this.rotationPlayer.x - (Math.sin(this.angle) * this.velocity) + (Math.cos(this.angle) * this.velocity);
			this.rotationNew.z = this.rotationPlayer.z - (Math.cos(this.angle) * this.velocity) - (Math.sin(this.angle) * this.velocity);
		} else if(this.face === 'backLeft') {
			this.rotationNew.x = this.rotationPlayer.x + (Math.sin(this.angle) * this.velocity) - (Math.cos(this.angle) * this.velocity);
			this.rotationNew.z = this.rotationPlayer.z + (Math.cos(this.angle) * this.velocity) + (Math.sin(this.angle) * this.velocity);
		} else if(this.face === 'backRight') {
			this.angle += (Math.PI * 2);
			this.rotationNew.x = this.rotationPlayer.x + (Math.sin(this.angle) * this.velocity) - (Math.cos(this.angle) * this.velocity);
			this.rotationNew.z = this.rotationPlayer.z + (Math.cos(this.angle) * this.velocity) + (Math.sin(this.angle) * this.velocity);
		} else {
			this.rotationNew.x = this.rotationPlayer.x - this.velocity;
			this.rotationNew.z = this.rotationPlayer.z + this.velocity;
		}
	} else if(action === 'forward'){
		if(this.face === 'frontLeft') {
			this.rotationNew.x = this.rotationPlayer.x - (Math.sin(this.angle) * this.velocity);
			this.rotationNew.z = this.rotationPlayer.z - (Math.cos(this.angle) * this.velocity);
		} else if(this.face === 'frontRight') {
			this.angle += Math.PI;
			this.rotationNew.x = this.rotationPlayer.x + (Math.sin(this.angle) * this.velocity);
			this.rotationNew.z = this.rotationPlayer.z + (Math.cos(this.angle) * this.velocity);
		} else if(this.face === 'backLeft') {
			this.rotationNew.x = this.rotationPlayer.x - (Math.sin(this.angle) * this.velocity);
			this.rotationNew.z = this.rotationPlayer.z - (Math.cos(this.angle) * this.velocity);
		} else if(this.face === 'backRight') {
			this.angle += (Math.PI * 2);
			this.rotationNew.x = this.rotationPlayer.x - (Math.sin(this.angle) * this.velocity);
			this.rotationNew.z = this.rotationPlayer.z - (Math.cos(this.angle) * this.velocity);
		} else {
			this.rotationNew.x = this.rotationPlayer.x;
			this.rotationNew.z = this.rotationPlayer.z - this.velocity;
		}
	} else if(action === 'reverse'){
		if(this.face === 'frontLeft') {
			this.rotationNew.x = this.rotationPlayer.x + (Math.sin(this.angle) * this.velocity);
			this.rotationNew.z = this.rotationPlayer.z + (Math.cos(this.angle) * this.velocity);
		} else if(this.face === 'frontRight') {
			this.angle += Math.PI;
			this.rotationNew.x = this.rotationPlayer.x - (Math.sin(this.angle) * this.velocity);
			this.rotationNew.z = this.rotationPlayer.z - (Math.cos(this.angle) * this.velocity);
		} else if(this.face === 'backLeft') {
			this.rotationNew.x = this.rotationPlayer.x + (Math.sin(this.angle) * this.velocity);
			this.rotationNew.z = this.rotationPlayer.z + (Math.cos(this.angle) * this.velocity);
		} else if(this.face === 'backRight') {
			this.angle += (Math.PI * 2);
			this.rotationNew.x = this.rotationPlayer.x + (Math.sin(this.angle) * this.velocity);
			this.rotationNew.z = this.rotationPlayer.z + (Math.cos(this.angle) * this.velocity);
		} else {
			this.rotationNew.x = this.rotationPlayer.x;
			this.rotationNew.z = this.rotationPlayer.z + this.velocity;
		}
	} else if(action === 'right'){
		if(this.face === 'frontLeft') {
			this.rotationNew.x = this.rotationPlayer.x + (Math.cos(this.angle) * this.velocity);
			this.rotationNew.z = this.rotationPlayer.z - (Math.sin(this.angle) * this.velocity);
		} else if(this.face === 'frontRight') {
			this.angle += Math.PI;
			this.rotationNew.x = this.rotationPlayer.x - (Math.cos(this.angle) * this.velocity);
			this.rotationNew.z = this.rotationPlayer.z + (Math.sin(this.angle) * this.velocity);
		} else if(this.face === 'backLeft') {
			this.rotationNew.x = this.rotationPlayer.x + (Math.cos(this.angle) * this.velocity);
			this.rotationNew.z = this.rotationPlayer.z - (Math.sin(this.angle) * this.velocity);
		} else if(this.face === 'backRight') {
			this.angle += (Math.PI * 2);
			this.rotationNew.x = this.rotationPlayer.x + (Math.cos(this.angle) * this.velocity);
			this.rotationNew.z = this.rotationPlayer.z - (Math.sin(this.angle) * this.velocity);
		} else {
			this.rotationNew.x = this.rotationPlayer.x + this.velocity;
			this.rotationNew.z = this.rotationPlayer.z;
		}
	} else if(action === 'left'){
		if(this.face === 'frontLeft') {
			this.rotationNew.x = this.rotationPlayer.x - (Math.cos(this.angle) * this.velocity);
			this.rotationNew.z = this.rotationPlayer.z + (Math.sin(this.angle) * this.velocity);
		} else if(this.face === 'frontRight') {
			this.angle += Math.PI;
			this.rotationNew.x = this.rotationPlayer.x + (Math.cos(this.angle) * this.velocity);
			this.rotationNew.z = this.rotationPlayer.z - (Math.sin(this.angle) * this.velocity);
		} else if(this.face === 'backLeft') {
			this.rotationNew.x = this.rotationPlayer.x - (Math.cos(this.angle) * this.velocity);
			this.rotationNew.z = this.rotationPlayer.z + (Math.sin(this.angle) * this.velocity);
		} else if(this.face === 'backRight') {
			this.angle += (Math.PI * 2);
			this.rotationNew.x = this.rotationPlayer.x - (Math.cos(this.angle) * this.velocity);
			this.rotationNew.z = this.rotationPlayer.z + (Math.sin(this.angle) * this.velocity);
		} else {
			this.rotationNew.x = this.rotationPlayer.x - this.velocity;
			this.rotationNew.z = this.rotationPlayer.z;
		}
	}

	this.rotationNew.y = this.rotationPlayer.y;



	//Free Rotation No Collision
	//Euler
	//this.player.object3D.rotation.copy(this.rotationNew);
	this.player.setAttribute('rotation',this.rotationNew)

},
//3rd POV Rotat along XZ
rigXZ: function (action, speed) {
	this.velocity = speed;
	this.rotationNew = new THREE.Vector3();
	//Euler
	//this.rotationAvatar.copy(this.avatar.object3D.rotation);
	this.rotationAvatar = this.avatar.getAttribute('rotation');

	if(action === 'forwardRight'){
		this.rotationNew.x = this.rotationAvatar.x + this.velocity;
		this.rotationNew.z = this.rotationAvatar.z - this.velocity;
	} else if(action === 'forwardLeft'){
		this.rotationNew.x = this.rotationAvatar.x - this.velocity;
		this.rotationNew.z = this.rotationAvatar.z - this.velocity;
	} else if(action === 'reverseRight'){
		this.rotationNew.x = this.rotationAvatar.x + this.velocity;
		this.rotationNew.z = this.rotationAvatar.z + this.velocity;
	} else if(action === 'reverseLeft'){
		this.rotationNew.x = this.rotationAvatar.x - this.velocity;
		this.rotationNew.z = this.rotationAvatar.z + this.velocity;
	} else if(action === 'forward'){
		this.rotationNew.x = this.rotationAvatar.x;
		this.rotationNew.z = this.rotationAvatar.z - this.velocity;
	} else if(action === 'reverse'){
		this.rotationNew.x = this.rotationAvatar.x;
		this.rotationNew.z = this.rotationAvatar.z + this.velocity;
	} else if(action === 'right'){
		this.rotationNew.x = this.rotationAvatar.x + this.velocity;
		this.rotationNew.z = this.rotationAvatar.z;
	} else if(action === 'left'){
		this.rotationNew.x = this.rotationAvatar.x - this.velocity;
		this.rotationNew.z = this.rotationAvatar.z;
	}
	this.rotationNew.y = this.rotationAvatar.y;

	//Free Rotation No Collision
	//Requires Euler
	//this.avatar.object3D.rotation.copy(this.rotationNew);
	this.avatar.setAttribute('rotation',this.rotationNew)
},
//Camera Direction to Spawn Assets In - Unused Currently
userDirection: function (){
	this.userPos = this.player.getAttribute('rotation');
	this.userRot = this.camera.getAttribute('rotation');
	//Check which direction the user is traveling
	if((this.userPreviousPos.x + this.userPos.x < 0) && (this.userPreviousPos.z + this.userPos.z < 0)){
		//northWest -x-z
		this.userTravel = 'northWest';
	} else if((this.userPreviousPos.x + this.userPos.x < 0) && (this.userPreviousPos.z + this.userPos.z > 0)){
		//southWest -x +z
		this.userTravel = 'southWest';
	} else if((this.userPreviousPos.x + this.userPos.x > 0) && (this.userPreviousPos.z + this.userPos.z > 0)){
		//southEast +x+z
		this.userTravel = 'southEast';
	} else if((this.userPreviousPos.x + this.userPos.x > 0) && (this.userPreviousPos.z + this.userPos.z < 0)){
		//northEast +x-z
		this.userTravel = 'northEast';
	} else {
		//Default
		this.userTravel = 'northEast';
	}
	//After previous to current rotation check, update the previous rotation value to be compared against on the next run cycle
	this.userPreviousPos = this.userPos;

	//If POV Rotation is more then 360 or -360, divide it by sets of 360 to obtain 0-360 degrees to assign from
	if( this.userRot.y > 360) {
		let radials = this.userRot.y / 360;
		this.userPov = ((Math.floor(radials)) * 360 ) - this.userRot.y;
		this.userPov *= -1;
	} else if(this.userRot.y < -360) {
		let radials = this.userRot.y / 360;
		this.userPov = ((Math.floor(radials)) * 360 ) - this.userRot.y;
		this.userPov *= -1;
	} else {
		this.userPov = this.userRot.y;
	}
	//Check which direciton the User is facing
	if ((this.userPov > 0 && this.userPov < 15) || (this.userPov > 345 && this.userPov < 360)) {
			//North
			this.userView = 'north';
	   } else if (this.userPov > 255 && this.userPov > 285) {
			//East
			this.userView = 'east';
		} else if (this.userPov > 75 && this.userPov < 105) {
			//West
			this.userView = 'west';
		} else if (this.userPov > 165 && this.userPov < 195) {
			//South
			this.userView = 'south';
		} else if ((this.userPov < 0 && this.userPov > -15) || (this.userPov < -345 && this.userPov > -360)) {
			//North
			this.userView = 'north';
	   } else if (this.userPov < -255 && this.userPov > -285) {
			//West
			this.userView = 'west';
		} else if (this.userPov < -75 && this.userPov > -105) {
			//East
			this.userView = 'east';
		} else if (this.userPov < -165 && this.userPov > -195) {
			//South
			this.userView = 'south';
		} else if (this.userPov > 15 && this.userPov < 75) {//
			//North West
			this.userView = 'northWest';
	   } else if (this.userPov > 105 && this.userPov < 165) {//
			//South West
			this.userView = 'southWest';
		} else if (this.userPov > 195 && this.userPov < 255) {//
			//South East
			this.userView = 'southEast';
		} else if (this.userPov > 285 && this.userPov < 345) {//
			//North East
			this.userView = 'northEast';
		} else if (this.userPov < -15 && this.userPov > -75 ) {//Negative direction
			//North East
			this.userView = 'northEast';
	   } else if (this.userPov < -105 && this.userPov > -165) {
			//South East
			this.userView = 'southEast';
		} else if (this.userPov < -195 && this.userPov > -255) {
			//South West
			this.userView = 'southWest';
		} else if (this.userPov < -285 && this.userPov > -345) {
			//North West
			this.userView = 'northWest';
		} else {
			this.userView = 'north';
		}
	//Depending on the User's facing direction, spawn in that quadrant
	if(this.userView === "northWest"){// -x -z
		this.rotationTemp.x = (this.velocity + this.rotationPlayer.x) * -1;
		this.rotationTemp.z = (this.velocity + this.rotationPlayer.z) * -1;
		this.rotationTemp.z += this.rotationPlayer.z;
	} else if(this.userView === "southWest"){// -x +z
		this.rotationTemp.x = (this.velocity + this.rotationPlayer.x) * -1;
		this.rotationTemp.z =(this.velocity + this.rotationPlayer.z);
	} else if(this.userView === "southEast"){// +x +z
		this.rotationTemp.x = (this.velocity + this.rotationPlayer.x);
		this.rotationTemp.z =(this.velocity + this.rotationPlayer.z);
	} else if(this.userView === "northEast"){// +x -z
		this.rotationTemp.x = (this.velocity + this.rotationPlayer.x);
		this.rotationTemp.z =(this.velocity + this.rotationPlayer.z) * -1;
	} else if(this.userView === "north"){// +-x -z
		this.rotationTemp.x = (this.velocity + this.rotationPlayer.x);
		this.rotationTemp.z =(this.velocity + this.rotationPlayer.z) * -1;
	} else if(this.userView === "west"){// -x +-z
		this.rotationTemp.x = (this.velocity + this.rotationPlayer.x) * -1;
		this.rotationTemp.z =(this.velocity + this.rotationPlayer.z);
	} else if(this.userView === "east"){// +x +-z
		this.rotationTemp.x = (this.velocity + this.rotationPlayer.x);
		this.rotationTemp.z =(this.velocity + this.rotationPlayer.z);
	} else if(this.userView === "south"){// +-x +z
		this.rotationTemp.x = (this.velocity + this.rotationPlayer.x);
		this.rotationTemp.z =(this.velocity + this.rotationPlayer.z);
	} else {
		this.rotationTemp.x = 0;
		this.rotationTemp.z = 0;
	}
	this.rotationNew = new THREE.Vector3(this.rotationTemp.x, 0, this.rotationTemp.z);
},

});

//
//Teleportation
//Component for Teleportation Points Object
const teleportation = AFRAME.registerComponent('teleportation',{
dependencies: ['auxl'],
//Uses Player's Scene Transition Type to Teleport
//Locomotion Teleportation also supported 
init: function(){
	//Prepare Teleport Controls
	if(this.el.classList.contains('teleport')){
		this.el.parentNode.setAttribute('active', 'false');
	} else if(this.el.classList.contains('cancel')){
		this.el.classList.toggle('clickable', false);
		this.el.parentNode.setAttribute('active', 'false');
	}
},
//Instantly Reset All Teleportation Points
resetTeleCircles: function () {
	this.allTeleportors = document.querySelectorAll('.teleporter');
	for (let i= 0; i < this.allTeleportors.length; i++){
		if (this.allTeleportors[i].parentNode.getAttribute('active') === 'true') {
			this.allTeleportors[i].emit('resetInstant',{});
			this.allTeleportors[i].nextSibling.emit('resetInstant',{});
		}
	}
},
//Reset of Teleportation Point
resetInstantEvent: function () {
	if(this.classList.contains('teleport')) {
		this.parentNode.setAttribute('active', 'false');
	} else if(this.classList.contains('cancel')) {
		this.classList.toggle('clickable', false);
		this.parentNode.setAttribute('active', 'false');
	}
},
//Regular Reset of Teleportation Point
resetEvent: function () {
	if(this.classList.contains('teleport')){
		this.parentNode.setAttribute('active', 'false');
	} else if(this.classList.contains('cancel')){
		this.classList.toggle('clickable', false);
		this.parentNode.setAttribute('active', 'false');
	}
},
//Dynamically Teleport to Point Selected
clickToTeleport: function () {
	let element = this;
	let user = document.getElementById('playerRig');
	let userView = document.getElementById('camera');
	let auxl = document.querySelector('a-scene').systems.auxl;
	let userPos = user.getAttribute('position');
	let teleportType = auxl.player.layer.transition.teleport;
	let newPosition = new THREE.Vector3();
	let teleportPos = this.parentNode.getAttribute('position');
	let allTeleportors = document.querySelectorAll('.teleporter');
	let posTimeout;
	let animTimeout;
	//Prepare Player Movement
	function prepMove(element, newPos, telePos){
		//Do an reset on element to not interfer with anim
		//Selected Circle
		element.emit('reset',{});
		//Cancel Circle
		element.nextSibling.emit('reset',{});
		//Clone current entity's position User
		newPos.copy(telePos);
		//Reset User's Y back to 0 - Flat Mode
		newPos.y = 0;
	}
	//Instantly Reset All Teleportation Points
	function resetTeleCircles(){
		for(let i= 0; i < allTeleportors.length; i++){
			if(allTeleportors[i].parentNode.getAttribute('active') === 'true') {
				allTeleportors[i].emit('resetInstant',{});
				allTeleportors[i].nextSibling.emit('resetInstant',{});
			}
		}
	}
	//Teleport Control
	if(element.parentNode.getAttribute('active') === 'false') {
		//Allow cancel circle to be viewable and clickable
		element.nextSibling.classList.toggle('clickable', true);
		element.nextSibling.emit('click1',{});
		element.userPov = userView.getAttribute('rotation');
		element.rotationParams = {
			property: 'object3D.rotation.y',
			to: element.userPov.y,
			dur: 500,
			delay: 0,
			loop: 'false',
			dir: 'normal',
			easing:'easeInOutSine',
			elasticity: 400,
			autoplay: 'true',
			enabled: 'true',
			};
		element.parentNode.setAttribute('animation__rotateToUser', element.rotationParams);
		element.parentNode.setAttribute('active', 'true');
	} else {
		//Confirm and Cancel circle are ready to be clicked
		//if Confirm was selected, teleport user and reset properties
		//if Cancel was selcted, reset properties
		if(element.classList.contains('teleport')) {
			//Teleportation Type
			if(teleportType === 'instant') {
				resetTeleCircles();
				prepMove(element, newPosition, teleportPos);
				posTimeout = setTimeout(function () {
					user.object3D.position.copy(newPosition);
					clearTimeout(posTimeout);
				}, 250);
			} else if(teleportType === 'fade') {
				auxl.player.PlayerTeleportAnim();
				prepMove(element, newPosition, teleportPos);
				posTimeout = setTimeout(function () {
					resetTeleCircles();
					user.object3D.position.copy(newPosition);
					clearTimeout(posTimeout);
				}, 600);
			} else if(teleportType === 'locomotion') {
				//Create locomotion animation based on teleported Pos
				let travelParams = {
					property: 'position',
					from: {x: userPos.x, y: 0, z: userPos.z},
					to: {x: teleportPos.x, y: 0, z: teleportPos.z},
					dur: 1000,
					delay: 0,
					loop: 'false',
					dir: 'normal',
					easing:'easeInOutSine',
					elasticity: 400,
					autoplay: 'true',
					enabled: 'true',
					};
				user.setAttribute('animation__locomotion', travelParams);
				element.nextSibling.emit('reset',{});//cancel circle
				resetTeleCircles();
			} else if(teleportType === 'sphere') {
				auxl.player.PlayerTeleportAnim();
				prepMove(element, newPosition, teleportPos);
				posTimeout = setTimeout(function () {
					resetTeleCircles();
					user.object3D.position.copy(newPosition);
					clearTimeout(posTimeout);
				}, 600);
			} else if(teleportType === 'blink') {
				auxl.player.PlayerTeleportAnim();
				prepMove(element, newPosition, teleportPos);
				posTimeout = setTimeout(function () {
					resetTeleCircles();
					user.object3D.position.copy(newPosition);
					clearTimeout(posTimeout);
				}, 600);
			}
		} else if (element.classList.contains('cancel')) {
			element.emit('reset',{});
		}
	}
},
update: function () {
	this.el.addEventListener('reset', this.resetEvent);
	this.el.addEventListener('resetInstant', this.resetInstantEvent);
	this.el.addEventListener('click', this.clickToTeleport);
},
remove: function () {
	this.el.removeEventListener('reset', this.resetEvent);
	this.el.removeEventListener('resetInstant', this.resetInstantEvent);
	this.el.removeEventListener('click', this.clickToTeleport);
},
});

//
//Raycast Teleportation
//Add to Clickable Object to Teleport to Raycast Intersection Position
const raycastTeleport = AFRAME.registerComponent('raycast-teleportation-select', {
//Uses Player's Scene Transition Type to Teleport
//Locomotion Teleportation also supported
dependencies: ['auxl'],
init: function () {
	this.auxl = document.querySelector('a-scene').systems.auxl;
	this.hoverSelectData = {
	data:'hoverSelectData',
	id:'hoverSelect',
	text: {value:'Teleport Here', wrapCount: 20, color: "#FFFFFF", font: "exo2bold", zOffset: 0.025, side: 'double', align: "center", baseline: 'center'},
	geometry: {primitive: 'circle', radius: 0.5, segments: 32, thetaStart: 0, thetaLength: 360},
	material: {shader: "standard", color: "#3eb58c", opacity: 1, metalness: 0.6, roughness: 0.4, emissive: "#3eb58c", emissiveIntensity: 0.2, side: 'front'},
	position: new THREE.Vector3(0,0,0),
	rotation: new THREE.Vector3(0,0,0),
	scale: new THREE.Vector3(1,1,1),
	animations: false,
	mixins: false,
	classes: ['clickable', 'a-ent'],
	components: {
		stare:{twist: true,}
	},
	};
	this.hoverSelect = this.auxl.Core(this.hoverSelectData);

	this.spawned = false;
},
spawnSelect: function (event){
	let teleportPos = event.detail.intersection.point;
	if(this.spawned){
		this.hoverSelect.GetEl().removeEventListener('click',this.clickToTeleportEvent);
		this.hoverSelect.DespawnCore();
	}
	this.hoverSelect.core.position.x = teleportPos.x;
	this.hoverSelect.core.position.y = 1;
	this.hoverSelect.core.position.z = teleportPos.z;
	this.hoverSelect.SpawnCore();

	this.clickToTeleportEvent = (event) => {
		this.clickToTeleport(event);
	}
	this.hoverSelect.GetEl().addEventListener('click',this.clickToTeleportEvent);
	this.spawned = true;
},
clickToTeleport: function (event) {
	let user = document.getElementById('playerRig');
	let userView = document.getElementById('camera');
	let auxl = document.querySelector('a-scene').systems.auxl;
	let userPos = user.getAttribute('position');
	let teleportType = auxl.player.layer.transition.teleport;
	let newPosition = new THREE.Vector3();
	let teleportPos = event.detail.intersection.point;
	let allTeleportors = document.querySelectorAll('.teleporter');
	let posTimeout;
	let animTimeout;

	//Remove HoverSelect
	this.hoverSelect.GetEl().removeEventListener('click',this.clickToTeleportEvent);
	this.hoverSelect.DespawnCore();
	this.spawned = false;

	//Prepare Movement
	function prepMove(newPos, telePos){
		//Clone current entity's position User
		newPos.copy(telePos);
		//Reset User's Y back to 0 - Flat Mode
		newPos.y = 0;
	}

	//Teleportation Based on Player Transition Type
	if(teleportType === 'instant') {
		prepMove(newPosition, teleportPos);
		posTimeout = setTimeout(function () {
			user.object3D.position.copy(newPosition);
			clearTimeout(posTimeout);
		}, 250);
	} else if(teleportType === 'fade') {
		auxl.player.PlayerTeleportAnim();
		prepMove(newPosition, teleportPos);
		posTimeout = setTimeout(function () {
			user.object3D.position.copy(newPosition);
			clearTimeout(posTimeout);
		}, 600);
	} else if(teleportType === 'locomotion') {
		//Create locomotion animation based on teleported Pos
		let travelParams = {
			property: 'position',
			from: {x: userPos.x, y: 0, z: userPos.z},
			to: {x: teleportPos.x, y: 0, z: teleportPos.z},
			dur: 1000,
			delay: 0,
			loop: 'false',
			dir: 'normal',
			easing:'easeInOutSine',
			elasticity: 400,
			autoplay: 'true',
			enabled: 'true',
			};
		user.setAttribute('animation__locomotion', travelParams);
	} else if(teleportType === 'sphere') {
		auxl.player.PlayerTeleportAnim();
		prepMove(newPosition, teleportPos);
		posTimeout = setTimeout(function () {
			user.object3D.position.copy(newPosition);
			clearTimeout(posTimeout);
		}, 600);
	} else if(teleportType === 'blink') {
		auxl.player.PlayerTeleportAnim();
		prepMove(newPosition, teleportPos);
		posTimeout = setTimeout(function () {
			user.object3D.position.copy(newPosition);
			clearTimeout(posTimeout);
		}, 600);
	}
},
update: function () {
	this.spawnSelectEvent = (event) => {
		this.spawnSelect(event);
	}
	this.el.addEventListener('click', this.spawnSelectEvent);

},
remove: function () {
	if(this.spawned){
		this.hoverSelect.GetEl().removeEventListener('click',this.clickToTeleportEvent);
		this.hoverSelect.DespawnCore();
	}

	this.el.removeEventListener('click', this.spawnSelectEvent);
},
});
//
//Raycast Teleportation
const raycastTeleportSelect = AFRAME.registerComponent('raycast-teleportation', {
//Uses Player's Scene Transition Type to Teleport
//Locomotion Teleportation also supported 
init: function () {},
clickToTeleport: function (event) {
	let user = document.getElementById('playerRig');
	let userView = document.getElementById('camera');
	let auxl = document.querySelector('a-scene').systems.auxl;
	let userPos = user.getAttribute('position');
	let teleportType = auxl.player.layer.transition.teleport;
	let newPosition = new THREE.Vector3();
	let teleportPos = event.detail.intersection.point;
	let allTeleportors = document.querySelectorAll('.teleporter');
	let posTimeout;
	let animTimeout;

	//Prepare Movement
	function prepMove(newPos, telePos){
		//Clone current entity's position User
		newPos.copy(telePos);
		//Reset User's Y back to 0 - Flat Mode
		newPos.y = 0;
	}

	//Teleportation Based on Player Transition Type
	if(teleportType === 'instant') {
		prepMove(newPosition, teleportPos);
		posTimeout = setTimeout(function () {
			user.object3D.position.copy(newPosition);
			clearTimeout(posTimeout);
		}, 250);
	} else if(teleportType === 'fade') {
		auxl.player.PlayerTeleportAnim();
		prepMove(newPosition, teleportPos);
		posTimeout = setTimeout(function () {
			user.object3D.position.copy(newPosition);
			clearTimeout(posTimeout);
		}, 600);
	} else if(teleportType === 'locomotion') {
		//Create locomotion animation based on teleported Pos
		let travelParams = {
			property: 'position',
			from: {x: userPos.x, y: 0, z: userPos.z},
			to: {x: teleportPos.x, y: 0, z: teleportPos.z},
			dur: 1000,
			delay: 0,
			loop: 'false',
			dir: 'normal',
			easing:'easeInOutSine',
			elasticity: 400,
			autoplay: 'true',
			enabled: 'true',
			};
		user.setAttribute('animation__locomotion', travelParams);
	} else if(teleportType === 'sphere') {
		auxl.player.PlayerTeleportAnim();
		prepMove(newPosition, teleportPos);
		posTimeout = setTimeout(function () {
			user.object3D.position.copy(newPosition);
			clearTimeout(posTimeout);
		}, 600);
	} else if(teleportType === 'blink') {
		auxl.player.PlayerTeleportAnim();
		prepMove(newPosition, teleportPos);
		posTimeout = setTimeout(function () {
			user.object3D.position.copy(newPosition);
			clearTimeout(posTimeout);
		}, 600);
	}
},
update: function () {
	this.raycastTeleport = (event) => {
		this.clickToTeleport(event);
	}
	this.el.addEventListener('click', this.raycastTeleport);
},
remove: function () {
	this.el.removeEventListener('click', this.raycastTeleport);
},
});

//
//Export


/***/ }),

/***/ "./src/support/physics.js":
/*!********************************!*\
  !*** ./src/support/physics.js ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
//
//AUXL : A-Frame UX Library
//v0.3 Engine
//https://github.com/Minty-Crisp/AUXL
//
//Created by Minty-Crisp (mintycrisp.com)
//
//Physics
//
//addPhysics

//
//Physics System
const addPhysics = AFRAME.registerComponent('add-physics', {
	dependencies: ['auxl'],
/*
    schema: {
        idname: {type: 'string', default: 'ui'},
        position: {type: 'vec3'},
    },
*/
    init: function () {
		//Physics Testing
		//var playerEl = document.querySelector('[camera]');
		playerRig.addEventListener('collide', function (e) {
			console.log('Player has collided with body #' + e.detail.body.id);

			e.detail.target.el;  // Original entity (playerEl).
			e.detail.body.el;    // Other entity, which playerEl touched.
			e.detail.contact;    // Stats about the collision (CANNON.ContactEquation).
			e.detail.contact.ni; // Normal (direction) of the collision (CANNON.Vec3).

			// The top of the sphere, relative to the sphere center
			const topPoint = new CANNON.Vec3(0, 0.25 / 2, 0)
			const impulse = new CANNON.Vec3(-10, 0, 0)
			//e.detail.body.el.body.applyImpulse(impulse, topPoint)

			let resetQuat = new THREE.Quaternion(0,0,0,0);
			let resetPos = new THREE.Vector3(0,6,-6);

			e.detail.body.el.body.position.copy(resetPos);

			//e.detail.body.el.body.quaternion.copy(resetQuat);
/*
Stop Moving

 let body = el.body // el = aframe entity
 body.velocity.set(0,0,0);
 body.angularVelocity.set(0,0,0);
 body.vlambda.set(0,0,0);
 body.wlambda.set(0,0,0);
*/


	/*
	var el = sceneEl.querySelector('#nyan');
	el.body.applyImpulse(
	new CANNON.Vec3(0, 1, -1),// impulse
	new CANNON.Vec3().copy(el.getComputedAttribute('position'))// world position
	*/
	//const force = new CANNON.Vec3(-100, new THREE.Vector3(0,0,0))
	//e.detail.body.el.body.applyForce(force)
	/*

	const force = new CANNON.Vec3(-100, 0, 0)
	body.applyForce(force)

	camera.getWorldDirection(cameraDirection);

	// Move ball forward (multiply by -1 * speed to move backwards)

	let cameraForward: THREE.Vector3 = new THREE.Vector3(cameraDirection.x, 0, cameraDirection.z).multiplyScalar(this.speed * this.dir.ud);

	this.body.applyForce(cameraForward as any, this.body.position);

	// Move to the right (multiply by -1 * speed to move to the left)

	let cameraSideways: THREE.Vector3 = new THREE.Vector3(cameraDirection.z, 0, -cameraDirection.x).multiplyScalar(this.speed * -this.dir.lr);

	this.body.applyForce(cameraSideways as any, this.body.position);
	*/

		});
    },

});

//
//Export
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (addPhysics);

/***/ }),

/***/ "./src/support/run.js":
/*!****************************!*\
  !*** ./src/support/run.js ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   clickfunc: () => (/* binding */ clickfunc),
/* harmony export */   clickrun: () => (/* binding */ clickrun),
/* harmony export */   clickrunfunc: () => (/* binding */ clickrunfunc),
/* harmony export */   fusingrun: () => (/* binding */ fusingrun),
/* harmony export */   hoverrun: () => (/* binding */ hoverrun),
/* harmony export */   menurun: () => (/* binding */ menurun),
/* harmony export */   mousedownrun: () => (/* binding */ mousedownrun),
/* harmony export */   mouseenterrun: () => (/* binding */ mouseenterrun),
/* harmony export */   mouseleaverun: () => (/* binding */ mouseleaverun),
/* harmony export */   mouseuprun: () => (/* binding */ mouseuprun),
/* harmony export */   ondelayrun: () => (/* binding */ ondelayrun),
/* harmony export */   ondespawnrun: () => (/* binding */ ondespawnrun),
/* harmony export */   oneventrun: () => (/* binding */ oneventrun),
/* harmony export */   onintervalrun: () => (/* binding */ onintervalrun),
/* harmony export */   onspawnfunc: () => (/* binding */ onspawnfunc),
/* harmony export */   onspawnrun: () => (/* binding */ onspawnrun)
/* harmony export */ });
//
//AUXL : A-Frame UX Library
//v0.3 Engine
//https://github.com/Minty-Crisp/AUXL
//
//Created by Minty-Crisp (mintycrisp.com)
//
//Run
//Event Listener Components to run Auxl.Object.Methods()
//
//clickfunc
//clickrun
//fusingrun
//mousedownrun
//mouseenterrun
//mouseleaverun
//mouseuprun
//menurun
//hoverrun
//onspawnrun
//ondespawnrun
//oneventrun
//ondelayrun
//onintervalrun

//
//Attach to run Object's .Click() method on click
//Legacy | Will be replaced by clickrun
const clickfunc = AFRAME.registerComponent('clickfunc', {
dependencies: ['auxl'],
schema: {
	clickObj: {type: 'string', default: 'auxlObj'}
},
init: function () {
	//AUXL System Connection
	this.auxl = document.querySelector('a-scene').systems.auxl;
},
events: {
	click: function (evt) {
		this.auxl[this.data.clickObj].Click(evt.target);
	}
},
});

//
//Attach to run specified method from Object on click event or method from component if in scene
const clickrun = AFRAME.registerComponent('clickrun', {
dependencies: ['auxl'],
multiple: true,
//multiple: true,
schema: {
	cursorObj: {type: 'string', default: 'auxlObj'},
	component: {type: 'string', default: 'null'},
	method: {type: 'string', default: 'Click'},
	params: {type: 'string', default: 'null'}
},
init: function () {
	//AUXL System Connection
	this.auxl = document.querySelector('a-scene').systems.auxl;
	this.domEnt;
},
events: {
	click: function (evt) {
		if(this.data.component === 'null'){
			if(this.auxl[this.data.cursorObj][this.data.method]){
				if(this.data.params === 'null'){
					this.auxl[this.data.cursorObj][this.data.method]();
				} else if(this.data.params === 'target'){
					this.auxl[this.data.cursorObj][this.data.method](evt.target);
				} else {
					this.auxl[this.data.cursorObj][this.data.method](this.data.params);
				}
			}
		} else {
			//object is a dom entity and the component is attached to that object and the func is in that component
			if(document.getElementById(this.data.cursorObj)){
				this.domEnt = document.getElementById(this.data.cursorObj);
				if(this.data.params === 'null'){
					this.domEnt.components[this.data.component][this.data.method]();
				} else if(this.data.params === 'target'){
					this.domEnt.components[this.data.component][this.data.method](evt.target);
				} else {
					this.domEnt.components[this.data.component][this.data.method](this.data.params);
				}
			}
		}
	}
},
});

//
//Run AUXL Function on Click
const clickrunfunc = AFRAME.registerComponent('clickrunfunc', {
dependencies: ['auxl'],
multiple: true,
//multiple: true,
schema: {
	method: {type: 'string', default: 'Click'},
	params: {type: 'string', default: 'null'}
},
init: function () {
	//AUXL System Connection
	this.auxl = document.querySelector('a-scene').systems.auxl;
},
events: {
	click: function (evt) {
		if(this.data.params === 'null'){
			this.auxl[this.data.method]();
		} else if(this.data.params === 'target'){
			this.auxl[this.data.method](evt.target);
		} else {
			this.auxl[this.data.method](this.data.params);
		}
	}
},
});

//
//Attach to run specified method from Object on fusing event
const fusingrun = AFRAME.registerComponent('fusingrun', {
dependencies: ['auxl'],
multiple: true,
schema: {
	cursorObj: {type: 'string', default: 'auxlObj'},
	component: {type: 'string', default: 'null'},
	method: {type: 'string', default: 'methodName'},
	params: {type: 'string', default: 'null'}
},
init: function () {
	//AUXL System Connection
	this.auxl = document.querySelector('a-scene').systems.auxl;
	this.domEnt;
},
events: {
	fusing: function (evt) {
		if(this.data.component === 'null'){
			if(this.auxl[this.data.cursorObj][this.data.method]){
				if(this.data.params === 'null'){
					this.auxl[this.data.cursorObj][this.data.method]();
				} else if(this.data.params === 'target'){
					this.auxl[this.data.cursorObj][this.data.method](evt.target);
				} else {
					this.auxl[this.data.cursorObj][this.data.method](this.data.params);
				}
			}
		} else {
			//object is a dom entity and the component is attached to that object and the func is in that component
			if(document.getElementById(this.data.cursorObj)){
				this.domEnt = document.getElementById(this.data.cursorObj);
				if(this.data.params === 'null'){
					this.domEnt.components[this.data.component][this.data.method]();
				} else if(this.data.params === 'target'){
					this.domEnt.components[this.data.component][this.data.method](evt.target);
				} else {
					this.domEnt.components[this.data.component][this.data.method](this.data.params);
				}
			}
		}
	}
},
});

//
//Attach to run specified method from Object on mousedown event
const mousedownrun = AFRAME.registerComponent('mousedownrun', {
dependencies: ['auxl'],
multiple: true,
schema: {
	cursorObj: {type: 'string', default: 'auxlObj'},
	component: {type: 'string', default: 'null'},
	method: {type: 'string', default: 'methodName'},
	params: {type: 'string', default: 'null'}
},
init: function () {
	//AUXL System Connection
	this.auxl = document.querySelector('a-scene').systems.auxl;
	this.domEnt;
},
events: {
	mousedown: function (evt) {
		if(this.data.component === 'null'){
			if(this.auxl[this.data.cursorObj][this.data.method]){
				if(this.data.params === 'null'){
					this.auxl[this.data.cursorObj][this.data.method]();
				} else if(this.data.params === 'target'){
					this.auxl[this.data.cursorObj][this.data.method](evt.target);
				} else {
					this.auxl[this.data.cursorObj][this.data.method](this.data.params);
				}
			}
		} else {
			//object is a dom entity and the component is attached to that object and the func is in that component
			if(document.getElementById(this.data.cursorObj)){
				this.domEnt = document.getElementById(this.data.cursorObj);
				if(this.data.params === 'null'){
					this.domEnt.components[this.data.component][this.data.method]();
				} else if(this.data.params === 'target'){
					this.domEnt.components[this.data.component][this.data.method](evt.target);
				} else {
					this.domEnt.components[this.data.component][this.data.method](this.data.params);
				}
			}
		}
	}
},
});

//
//Attach to run specified method from Object on mouseenter event
const mouseenterrun = AFRAME.registerComponent('mouseenterrun', {
dependencies: ['auxl'],
multiple: true,
schema: {
	cursorObj: {type: 'string', default: 'auxlObj'},
	component: {type: 'string', default: 'null'},
	method: {type: 'string', default: 'methodName'},
	params: {type: 'string', default: 'null'}
},
init: function () {
	//AUXL System Connection
	this.auxl = document.querySelector('a-scene').systems.auxl;
	this.domEnt;
},
events: {
	mouseenter: function (evt) {
		if(this.data.component === 'null'){
			if(this.auxl[this.data.cursorObj][this.data.method]){
				if(this.data.params === 'null'){
					this.auxl[this.data.cursorObj][this.data.method]();
				} else if(this.data.params === 'target'){
					this.auxl[this.data.cursorObj][this.data.method](evt.target);
				} else {
					this.auxl[this.data.cursorObj][this.data.method](this.data.params);
				}
			}
		} else {
			//object is a dom entity and the component is attached to that object and the func is in that component
			if(document.getElementById(this.data.cursorObj)){
				this.domEnt = document.getElementById(this.data.cursorObj);
				if(this.data.params === 'null'){
					this.domEnt.components[this.data.component][this.data.method]();
				} else if(this.data.params === 'target'){
					this.domEnt.components[this.data.component][this.data.method](evt.target);
				} else {
					this.domEnt.components[this.data.component][this.data.method](this.data.params);
				}
			}
		}
	}
},
});

//
//Attach to run specified method from Object on mouseleave event
const mouseleaverun = AFRAME.registerComponent('mouseleaverun', {
dependencies: ['auxl'],
multiple: true,
schema: {
	cursorObj: {type: 'string', default: 'auxlObj'},
	component: {type: 'string', default: 'null'},
	method: {type: 'string', default: 'methodName'},
	params: {type: 'string', default: 'null'}
},
init: function () {
	//AUXL System Connection
	this.auxl = document.querySelector('a-scene').systems.auxl;
	this.domEnt;
},
events: {
	mouseleave: function (evt) {
		if(this.data.component === 'null'){
			if(this.auxl[this.data.cursorObj][this.data.method]){
				if(this.data.params === 'null'){
					this.auxl[this.data.cursorObj][this.data.method]();
				} else if(this.data.params === 'target'){
					this.auxl[this.data.cursorObj][this.data.method](evt.target);
				} else {
					this.auxl[this.data.cursorObj][this.data.method](this.data.params);
				}
			}
		} else {
			//object is a dom entity and the component is attached to that object and the func is in that component
			if(document.getElementById(this.data.cursorObj)){
				this.domEnt = document.getElementById(this.data.cursorObj);
				if(this.data.params === 'null'){
					this.domEnt.components[this.data.component][this.data.method]();
				} else if(this.data.params === 'target'){
					this.domEnt.components[this.data.component][this.data.method](evt.target);
				} else {
					this.domEnt.components[this.data.component][this.data.method](this.data.params);
				}
			}
		}
	}
},
});

//
//Attach to run specified method from Object on mouseup event
const mouseuprun = AFRAME.registerComponent('mouseuprun', {
dependencies: ['auxl'],
multiple: true,
schema: {
	cursorObj: {type: 'string', default: 'auxlObj'},
	component: {type: 'string', default: 'null'},
	method: {type: 'string', default: 'methodName'},
	params: {type: 'string', default: 'null'}
},
init: function () {
	//AUXL System Connection
	this.auxl = document.querySelector('a-scene').systems.auxl;
	this.domEnt;
},
events: {
	mouseup: function (evt) {
		if(this.data.component === 'null'){
			if(this.auxl[this.data.cursorObj][this.data.method]){
				if(this.data.params === 'null'){
					this.auxl[this.data.cursorObj][this.data.method]();
				} else if(this.data.params === 'target'){
					this.auxl[this.data.cursorObj][this.data.method](evt.target);
				} else {
					this.auxl[this.data.cursorObj][this.data.method](this.data.params);
				}
			}
		} else {
			//object is a dom entity and the component is attached to that object and the func is in that component
			if(document.getElementById(this.data.cursorObj)){
				this.domEnt = document.getElementById(this.data.cursorObj);
				if(this.data.params === 'null'){
					this.domEnt.components[this.data.component][this.data.method]();
				} else if(this.data.params === 'target'){
					this.domEnt.components[this.data.component][this.data.method](evt.target);
				} else {
					this.domEnt.components[this.data.component][this.data.method](this.data.params);
				}
			}
		}
	}
},
});

//
//MultiMenu Suppot
//Attach to run specified method from Object on click event
const menurun = AFRAME.registerComponent('menurun', {
dependencies: ['auxl'],
//multiple: true,
schema: {
	cursorObj: {type: 'string', default: 'auxlObj'},
	method: {type: 'string', default: 'Click'},
	params: {type: 'string', default: 'null'}
},
init: function () {
	//AUXL System Connection
	this.auxl = document.querySelector('a-scene').systems.auxl;
},
events: {
	click: function (evt) {
		if(this.auxl[this.data.cursorObj][this.data.method]){
			if(this.data.params === 'null'){
				this.auxl[this.data.cursorObj][this.data.method](evt.target);
			} else {
				this.auxl[this.data.cursorObj][this.data.method](this.data.params);
			}
		}
	}
},
});

//
//HoverMenu Support
//Attach to run specified method from Object on mouseenter event
const hoverrun = AFRAME.registerComponent('hoverrun', {
dependencies: ['auxl'],
schema: {
	attached: {type: 'string', default: 'none'},
	menu: {type: 'string', default: 'menuName'},
	action: {type: 'string', default: 'actionName'},
},
init: function () {
	//AUXL System Connection
	this.auxl = document.querySelector('a-scene').systems.auxl;
	this.attached = this.data.attached;
	this.menu = this.data.menu;
	this.action = this.data.action;
},
events: {
	mouseenter: function (evt) {
		//Active
		if(this.attached !== 'none'){
			this.auxl[this.attached][this.menu].hoverMenu.active = this.action;
		} else {
			this.auxl[this.menu].hoverMenu.active = this.action;
		}
	},
	mouseleave: function (evt) {
		//No longer active
		if(this.attached !== 'none'){
			this.auxl[this.attached][this.menu].hoverMenu.active = false;
		} else {
			this.auxl[this.menu].hoverMenu.active = false;
		}
	}
},
});

//
//On Spawn Run
//Run AUXL object method
const onspawnrun = AFRAME.registerComponent('onspawnrun', {
dependencies: ['auxl'],
multiple: true,
schema: {
	cursorObj: {type: 'string', default: 'auxlObj'},
	component: {type: 'string', default: 'null'},
	method: {type: 'string', default: 'Click'},
	params: {type: 'string', default: 'null'}
},
init: function () {
	//AUXL System Connection
	this.auxl = document.querySelector('a-scene').systems.auxl;
	this.domEnt;
	//console.log(this.attrName)
	//console.log(this.id)
	if(this.data.component === 'null'){
		if(this.auxl[this.data.cursorObj][this.data.method]){
			if(this.data.params === 'null'){
				this.auxl[this.data.cursorObj][this.data.method]();
			} else {
				this.auxl[this.data.cursorObj][this.data.method](this.data.params);
			}
		}
	} else {
		//object is a dom entity and the component is attached to that object and the func is in that component
		if(document.getElementById(this.data.cursorObj)){
			this.domEnt = document.getElementById(this.data.cursorObj);
			if(this.data.params === 'null'){
				this.domEnt.components[this.data.component][this.data.method]();
			} else {
				this.domEnt.components[this.data.component][this.data.method](this.data.params);
			}
		}
	}
},
});

//
//On Spawn Run Func
//Run AUXL Function
const onspawnfunc = AFRAME.registerComponent('onspawnfunc', {
dependencies: ['auxl'],
multiple: true,
schema: {
	auxlFunc: {type: 'string', default: 'auxlFunc'},
	params: {type: 'string', default: 'null'},
},
init: function () {
	//AUXL System Connection
	this.auxl = document.querySelector('a-scene').systems.auxl;
	if(this.data.params === 'null'){
		this.auxl[this.data.auxlFunc]();
	} else {
		this.auxl[this.data.auxlFunc](this.data.params);
	}
},
});

//
//On Despawn Run
//Run AUXL object method
const ondespawnrun = AFRAME.registerComponent('ondespawnrun', {
dependencies: ['auxl'],
multiple: true,
schema: {
	cursorObj: {type: 'string', default: 'auxlObj'},
	component: {type: 'string', default: 'null'},
	method: {type: 'string', default: 'Click'},
	params: {type: 'string', default: 'null'}
},
init: function () {
	//AUXL System Connection
	this.auxl = document.querySelector('a-scene').systems.auxl;
	this.domEnt;
	//console.log(this.attrName)
	//console.log(this.id)
},
remove: function () {
	if(this.data.component === 'null'){
		if(this.auxl[this.data.cursorObj][this.data.method]){
			if(this.data.params === 'null'){
				this.auxl[this.data.cursorObj][this.data.method]();
			} else {
				this.auxl[this.data.cursorObj][this.data.method](this.data.params);
			}
		}
	} else {
		//object is a dom entity and the component is attached to that object and the func is in that component
		if(document.getElementById(this.data.cursorObj)){
			this.domEnt = document.getElementById(this.data.cursorObj);
			if(this.data.params === 'null'){
				this.domEnt.components[this.data.component][this.data.method]();
			} else {
				this.domEnt.components[this.data.component][this.data.method](this.data.params);
			}
		}
	}
},
});

//
//On Event Run
//On Event fired, run method
const oneventrun = AFRAME.registerComponent('oneventrun', {
dependencies: ['auxl'],
multiple: true,
schema: {
	event: {type: 'string', default: 'eventName'},
	cursorObj: {type: 'string', default: 'auxlObj'},
	component: {type: 'string', default: 'null'},
	method: {type: 'string', default: 'Click'},
	params: {type: 'string', default: 'null'},
	once: {type: 'boolean', default: false}
},
init: function () {
	//AUXL System Connection
	this.auxl = document.querySelector('a-scene').systems.auxl;
	this.domEnt;
	//console.log(this.attrName)
	//console.log(this.id)
	//console.log(this.data)
},
update: function () {
	//Prep
	this.event = this.data.event;
	this.cursorObj = this.data.cursorObj;
	this.component = this.data.component;
	this.method = this.data.method;
	this.params = this.data.params;
	this.once = this.data.once;
	//Run Function
	this.run = () => {
		if(this.component === 'null'){
			if(this.auxl[this.cursorObj][this.method]){
				if(this.params === 'null'){
					this.auxl[this.cursorObj][this.method]();
				} else {
					this.auxl[this.cursorObj][this.method](this.params);
				}
			}
		} else {
			//object is a dom entity and the component is attached to that object and the func is in that component
			if(document.getElementById(this.cursorObj)){
				this.domEnt = document.getElementById(this.cursorObj);
				if(this.params === 'null'){
					this.domEnt.components[this.component][this.method]();
				} else {
					this.domEnt.components[this.component][this.method](this.params);
				}
			}
		}
	}
	//Add Event Listener
	this.el.addEventListener(this.event,this.run,{once: this.once });
},
remove: function () {
	//Remove Event Listener
	this.el.removeEventListener(this.event,this.run);
},
});

//
//On Delay Run
//On Delay, run method
const ondelayrun = AFRAME.registerComponent('ondelayrun', {
dependencies: ['auxl'],
multiple: true,
schema: {
	delay: {type: 'number', default: 1000},
	cursorObj: {type: 'string', default: 'auxlObj'},
	component: {type: 'string', default: 'null'},
	method: {type: 'string', default: 'Click'},
	params: {type: 'string', default: 'null'}
},
init: function () {
	//AUXL System Connection
	this.auxl = document.querySelector('a-scene').systems.auxl;
	this.domEnt;
	//console.log(this.attrName)
	//console.log(this.id)
	//console.log(this.data)
},
update: function () {
	//Prep
	this.delay = this.data.delay;
	this.cursorObj = this.data.cursorObj;
	this.component = this.data.component;
	this.method = this.data.method;
	this.params = this.data.params;
	//Run Function
	this.run = () => {
		if(this.component === 'null'){
			if(this.auxl[this.cursorObj][this.method]){
				if(this.params === 'null'){
					this.auxl[this.cursorObj][this.method]();
				} else {
					this.auxl[this.cursorObj][this.method](this.params);
				}
			}
		} else {
			//object is a dom entity and the component is attached to that object and the func is in that component
			if(document.getElementById(this.cursorObj)){
				this.domEnt = document.getElementById(this.cursorObj);
				if(this.params === 'null'){
					this.domEnt.components[this.component][this.method]();
				} else {
					this.domEnt.components[this.component][this.method](this.params);
				}
			}
		}
	}
	//Set Timeout
	this.timeout = setTimeout(() => {
		this.run();
		clearTimeout(this.timeout);
	}, this.delay);

},
remove: function () {
	//Clear Timeout
	clearTimeout(this.timeout);
},
});

//
//On Interval Run
//On Interval, run method
const onintervalrun = AFRAME.registerComponent('onintervalrun', {
dependencies: ['auxl'],
multiple: true,
schema: {
	interval: {type: 'number', default: 1000},
	loop: {type: 'number', default: 0},
	end: {type: 'string', default: 'null'},
	cursorObj: {type: 'string', default: 'auxlObj'},
	component: {type: 'string', default: 'null'},
	method: {type: 'string', default: 'Click'},
	params: {type: 'string', default: 'null'}
},
init: function () {
	//AUXL System Connection
	this.auxl = document.querySelector('a-scene').systems.auxl;
	this.domEnt;
	//console.log(this.attrName)
	//console.log(this.id)
	//console.log(this.data)
},
update: function () {
	//Prep
	this.interval = this.data.interval;
	this.loop = this.data.loop;
	if(this.loop === 0){
		this.loop = false;
	}
	this.end = this.data.end;
	this.checkEnd = false;
	if(this.end === 'null'){} else {
		this.checkEnd = true;
	}
	this.running = true;
	this.cursorObj = this.data.cursorObj;
	this.component = this.data.component;
	this.method = this.data.method;
	this.params = this.data.params;
	//Run Function
	this.run = () => {
		if(this.component === 'null'){
			if(this.auxl[this.cursorObj][this.method]){
				if(this.params === 'null'){
					this.auxl[this.cursorObj][this.method]();
				} else {
					this.auxl[this.cursorObj][this.method](this.params);
				}
			}
		} else {
			//object is a dom entity and the component is attached to that object and the func is in that component
			if(document.getElementById(this.cursorObj)){
				this.domEnt = document.getElementById(this.cursorObj);
				if(this.params === 'null'){
					this.domEnt.components[this.component][this.method]();
				} else {
					this.domEnt.components[this.component][this.method](this.params);
				}
			}
		}
	}
	//Set Timeout
	this.repeat = setInterval(() => {
		//Flag End Condition
		if(this.checkEnd){
			if(this.auxl[this.cursorObj].GetFlag(this.end) === true){
				this.running = false;
				clearInterval(this.repeat);
			}
		}
		if(this.running){
			this.run();
		}
		//Loop End Condition
		if(this.loop){
			this.loop--;
			if(this.loop <= 0){
				this.running = false;
				clearInterval(this.repeat);
			}
		}
	}, this.interval);

},
remove: function () {
	//Clear Timeout
	clearInterval(this.repeat);
},
});

//
//Export


/***/ }),

/***/ "./src/system/auxl.js":
/*!****************************!*\
  !*** ./src/system/auxl.js ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _main_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./main.js */ "./src/system/main.js");
/* harmony import */ var _player_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./player.js */ "./src/system/player.js");
/* harmony import */ var _scenes_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./scenes.js */ "./src/system/scenes.js");
/* harmony import */ var _menu_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./menu.js */ "./src/system/menu.js");
/* harmony import */ var _environment_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./environment.js */ "./src/system/environment.js");
/* harmony import */ var _npc_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./npc.js */ "./src/system/npc.js");
/* harmony import */ var _grid_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./grid.js */ "./src/system/grid.js");
/* harmony import */ var _build_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./build.js */ "./src/system/build.js");
/* harmony import */ var _images_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./images.js */ "./src/system/images.js");
//
//AUXL : A-Frame UX Library
//v0.3 Engine
//https://github.com/Minty-Crisp/AUXL
//
//Created by Minty-Crisp (mintycrisp.com)
//
//AUXL System

//Import ObjGens
//Main : Core, Layer, Templates

//Player : Player, Companion

//Scenes : SceneNode, MapZone, Scenario, World

//Menu : Menu, MultiMenu, HoverMenu

//Environment : SkyBox, Horizon, ObjsGenRing, MultiAssetGen, Teleport

//NPC : Book, SpeechSystem, NPC, InfoBubble, Creature

//Grid : Collision, GridLayout, Gate

//Build : BuildIn3D

//Images


//AUXL System
const auxl = AFRAME.registerSystem('auxl', {
schema: {
	id: {type: 'string', default:'#FFFFFF'},
	color: {type: 'string', default: '#FFFFFF'},
	shortname: {type: 'string', default: '#FFFFFF'},
	longname: {type: 'string', default: '#FFFFFF'},
	server: {type: 'string', default: 'localhost'},
	onlineKey: {type: 'string', default: 'FFFFFF'},
},
init: function () {
/*************************************************************/
//System
const auxl = this;
this.expStarted = false;
this.defaultWorld;
this.currentWorld;
this.currentZone;
this.worldLoaded = false;
this.local = {};
this.local.profile = {};
this.rebuildObjects = [];
this.volume = 1;
this.backgroundAudio = false;

//Throttled Scene Loading Function
this.checkSceneLoadThrottled = AFRAME.utils.throttle(this.checkSceneLoad, 30, this);
this.sceneReading = false;
this.loadingScene = false;
this.loadingObjects = new Map();
this.maxLoadTime = 5000;
this.jsLoaded = {};
//JS Scripts Predefined, Ready to be loaded dynamically
this.jsAll = {
['look-at']:'https://unpkg.com/aframe-look-at-component@1.0.0/dist/aframe-look-at-component.min.js',
//threeGradShader: 'https://unpkg.com/@tlaukkan/aframe-three-color-gradient-shader@0.0.1/index.js',//Shaders needs it's own checker
['gltf-morph']:'https://rawcdn.githack.com/elbobo/aframe-gltf-morph-component/07e9b80bd382cc1c19223468d35c453e7c76e9a2/dist/aframe-gltf-morph-component.js',
};

/*************************************************************/
//HTML Elements
const sceneEl = document.querySelector('a-scene');
const head = document.querySelector('head');
const body = document.querySelector('body');
const stickyMenu = document.getElementById('stickyMenu');
const stickyTitle = document.getElementById('stickyTitle');
const systemText = document.getElementById('systemText');
const beginDiv = document.getElementById('beginDiv');
const startButton = document.getElementById('startButton');
const menuModeButton = document.getElementById('menuModeButton');
const audioButton = document.getElementById('audioButton');
const audioVolume = document.getElementById('audioVolume');
const volDownButton = document.getElementById('volDownButton');
const volume = document.getElementById('volume');
const volUpButton = document.getElementById('volUpButton');
const viewInfo = document.getElementById('viewInfo');
const viewData = document.getElementById('viewData');
const expInfo = document.getElementById('expInfo');
const infoClose = document.getElementById('infoClose');
const instructions = document.getElementById('instructions');
const dataInfo = document.getElementById('dataInfo');
const dataClose = document.getElementById('dataClose');
const manageData = document.getElementById('manageData');
const resetData = document.getElementById('resetData');
const scenarioHeaderTitle = document.getElementById('scenarioHeaderTitle');
const scenarioMenuTitle = document.getElementById('scenarioMenuTitle');
const controllerBlock = document.getElementById('controllerBlock');
const vrHandButton = document.getElementById('vrHandButton');
const vrLocomotionType = document.getElementById('vrLocomotionType');
//Mobile HTML Buttons
const mobileUpLeft = document.getElementById('upLeft');
const mobileUp = document.getElementById('up');
const mobileUpRight = document.getElementById('upRight');
const mobileLeft = document.getElementById('left');
const mobileCenter = document.getElementById('center');
const mobileRight = document.getElementById('right');
const mobileDownLeft = document.getElementById('downLeft');
const mobileDown = document.getElementById('down');
const mobileDownRight = document.getElementById('downRight');
const mobileSelect = document.getElementById('select');
const mobileStart = document.getElementById('start');
const mobileA = document.getElementById('a');
const mobileB = document.getElementById('b');
const mobileC = document.getElementById('c');
const mobileD = document.getElementById('d');
const mobileE = document.getElementById('e');
const mobileF = document.getElementById('f');
const mobileL = document.getElementById('l');
const mobileR = document.getElementById('r');

let htmlBackground = [body, beginDiv, startButton, menuModeButton, audioButton, viewInfo, viewData, expInfo, infoClose, instructions, scenarioMenuTitle, dataInfo, dataClose, manageData, resetData, controllerBlock, vrHandButton, vrLocomotionType];

let htmlForeground = [stickyMenu, stickyTitle, scenarioHeaderTitle, controllerBlock, mobileUpLeft, mobileUp, mobileUpRight, mobileLeft, mobileCenter, mobileRight, mobileDownLeft, mobileDown, mobileDownRight, mobileSelect, mobileStart, mobileA, mobileB, mobileC, mobileD, mobileE, mobileF, mobileL, mobileR];

// System Configure
/***********************************************************/
//System Loaded, Runs after World/Scenario/Zone/Scenes loaded
this.systemLoaded = (reset) => {
	setStorage(reset);
	auxl.player.infoText = 'Player : ' + auxl.local.profile.shortname + '\n';
	SystemStart();
	ApplySettings();
}
//System Start
const SystemStart = () => {
	//Init Collision
	auxl.map = auxl.Collision();

}
//Apply System Settings
const ApplySettings = () => {
	ApplyColorScheme();
	ApplySystemText();
	UpdateSystemText(this.local.profile.systemText);
}
//Apply Color Scheme
const ApplyColorScheme = () => {
	//HTML
	for(let element in htmlBackground){
		htmlBackground[element].style.setProperty('background-color', this.local.profile.colorScheme.base);
		htmlBackground[element].style.setProperty('color-text', this.local.profile.colorScheme.compl);
	}
	for(let element in htmlForeground){
		htmlForeground[element].style.setProperty('background-color', 'transparent');
		htmlForeground[element].style.setProperty('color-text', this.local.profile.colorScheme.compl);
		htmlForeground[element].style.setProperty('border-color', this.local.profile.colorScheme.compl);
	}
	//Camera UI
	auxl.cameraUI.ChangeSelf({property: 'material', value: {color: this.local.profile.colorScheme.base,}})
	auxl.cameraUI.ChangeSelf({property: 'text', value: {color: this.local.profile.colorScheme.compl,}})
	//Floor
	auxl.playerFloor.ChangeSelf({property: 'material', value: {color: this.local.profile.colorScheme.base,}})
	auxl.playerFloor.ChangeSelf({property: 'text', value: {color: this.local.profile.colorScheme.compl,}})
	//Hands
	//Floor
	auxl.vrController1UI.ChangeSelf({property: 'material', value: {color: this.local.profile.colorScheme.base,}})
	auxl.vrController1UI.ChangeSelf({property: 'text', value: {color: this.local.profile.colorScheme.compl,}})
	auxl.vrController2UI.ChangeSelf({property: 'material', value: {color: this.local.profile.colorScheme.base,}})
	auxl.vrController2UI.ChangeSelf({property: 'text', value: {color: this.local.profile.colorScheme.compl,}})

	//console.log('Color Applied');
}
//Apply System Text
const ApplySystemText = () => {
	//HTML
	systemText.innerHTML = this.systemText;
	//Player Belt
	auxl.player.UpdateBeltText(this.systemText);
	//Camera UI
	auxl.cameraUI.ChangeSelf({property: 'text', value: {value: this.systemText,}})
	//Hands
	auxl.vrController1UI.ChangeSelf({property: 'text', value: {value: this.systemText,}})
	auxl.vrController2UI.ChangeSelf({property: 'text', value: {value: this.systemText,}})

	//console.log('System Text Applied');
}
//Update System Text
const UpdateSystemText = (text) => {
	this.systemText = text;
	ApplySystemText()
}
//Add Component Rebuild Method
this.toBeRebuilt = (methodName) => {
	auxl.rebuildObjects.push(methodName);
}
//Rebuild Player and All ObjGens
const Rebuild = () => {
	//Clear System Intervals & Timeouts
	clearTimeout(auxl.sceneLoadTimeout);
	//Clear Inventory
	auxl.comp.ClearInventoryNotifications();
	//Reset Player
	auxl.player.Reset();
	//Rebuild All Objects
	for(let each in auxl.rebuildObjects){
		auxl[auxl.rebuildObjects[each]]();
	}
}
//Scene Asset Load Timeout
this.SceneLoadTimeout = () => {
	auxl.sceneLoadTimeout = setTimeout(() => {
		//Empty Loading Objects
		auxl.loadingObjects = new Map();
		clearTimeout(auxl.sceneLoadTimeout);
	}, auxl.maxLoadTime);
}

// Local Storage
/*************************************************************/
/*
localStorage.setItem("myCat", "Tom");
const cat = localStorage.getItem("myCat");
localStorage.removeItem("myCat");
localStorage.clear();

sessionStorage.setItem("myCat", "Tom");
const cat = sessionStorage.getItem("myCat");
sessionStorage.removeItem("myCat");
sessionStorage.clear();
*/
//Save Name
this.save = 'auxl' + window.location.pathname;
//console.log(window.location.href)
//console.log(window.location.hostname)
//console.log(window.location.pathname)
//Default Save Data
const newData = () => {
	this.local = {};
	this.local.profile = {};
	this.local.profile.domain = window.location.hostname;
	this.local.profile.page = window.location.pathname;
	this.local.profile.controls = this.controls;
	this.local.profile.vrHand = this.vrHand;
	this.local.profile.volume = this.volume;
	this.local.profile.time = {};
	this.local.profile.time.creation = time();
	this.local.profile.time.lastVisit = time();
	this.local.profile.colorScheme = auxl.colorTheoryGen();
	this.local.profile.id = this.local.profile.colorScheme.base;
	this.local.profile.color = this.local.profile.colorScheme.base;
	this.local.profile.shortname = this.local.profile.colorScheme.base;
	this.local.profile.longname = this.data.longname;
	this.local.profile.server = this.data.server;
	this.local.profile.onlineKey = this.data.onlineKey;
	//this.local.profile.systemText = 'Welcome ' + this.local.profile.shortname + '! ID :'+ this.local.profile.id + '| AUXL Engine v0.3.3!\n ^-^!\n Starting...';
	this.local.profile.systemText = 'Welcome ' + this.local.profile.shortname;
	this.systemText = this.local.profile.systemText
	//Current Location
	this.local.location = {};
	this.local.location.load = false;
	this.local.location.world = '';
	this.local.location.scenario = '';
	this.local.location.zone = '';
	this.local.location.scene = '';
}
//New
const newStorage = () => {
	//Fresh Session, Initiliaze Site Wide Settings
	console.log('New here. Loading default data.');
	//Clear Local Storage
	window.localStorage.clear();
	//Default Data
	newData();
	//Rebuild All Objects
	Rebuild();
	//Assign Completion to Storage
	window.localStorage.setItem(this.save, JSON.stringify(auxl.local));
	ApplySettings();

	//Update Controls
	vrHandMenu(this.local.profile.vrHand)
	controlsMenu(this.local.profile.controls)
	updateControls();
}
//Load
const loadStorage = () => {
	//Return Session, Load Site Wide Settings
	console.log('Loading previous data.');
	//Overwrite default profile
	this.local = JSON.parse(window.localStorage.getItem(this.save));
	ApplySettings();
	this.local.profile.time.return = time();

	this.local.profile.time.span = timeDif(this.local.profile.time.lastVisit, this.local.profile.time.return);
	console.log('Time since last visit :');
	console.log(this.local.profile.time.span);
	//Update new Last Visit Data
	this.local.profile.time.lastVisit = this.local.profile.time.return;
	//Flag that we are loading data
	if(this.local.location.world === '' ||  this.local.location.scenario === '' || this.local.location.zone === '' || this.local.location.scene === ''){
		this.local.location.load = false;
	}else{
		this.local.location.load = true;
	}

	//Save Last Visit Date
	auxl.saveToProfile();
	UpdateFromLocal();

	//Update Controls
	vrHandMenu(this.local.profile.vrHand)
	controlsMenu(this.local.profile.controls)
	updateControls();

	//Update Audio
	this.volume = this.local.profile.volume;
}
//Set
//If the value exists then we have already entered once, do not repeat link anims
const setStorage = (reset) => {
  	if(reset){
		newStorage();
	} else if(localStorage.getItem(this.save)){
		loadStorage();
	} else {
		newStorage();
	}
}

//Save to Profile and Local
this.saveToProfile = (sync) => {
//sync.auxlObject, sync.type, sync.sub, sync.name, sync.data
	if(!sync){
		//Save Profile Only
	} else {
		if(auxl.local[sync.auxlObject]){
			if(sync.sub){
				if(auxl.local[sync.auxlObject][sync.type][sync.sub]){
					auxl.local[sync.auxlObject][sync.type][sync.sub][sync.name] = sync.data;
				} else {
					auxl.local[sync.auxlObject][sync.type][sync.sub] = {};
					auxl.local[sync.auxlObject][sync.type][sync.sub][sync.name] = sync.data;
				}
			} else {
				auxl.local[sync.auxlObject][sync.type][sync.name] = sync.data;
			}
		} else {
			auxl.local[sync.auxlObject] = {};
			auxl.local[sync.auxlObject][sync.type] = {};
			if(sync.sub){
				auxl.local[sync.auxlObject][sync.type][sync.sub] = {};
				auxl.local[sync.auxlObject][sync.type][sync.sub][sync.name] = sync.data;
			} else {
				auxl.local[sync.auxlObject][sync.type][sync.name] = sync.data;
			}
		}
	}
	window.localStorage.setItem(this.save, JSON.stringify(auxl.local));
	//console.log(auxl.local)
}
//Update from Local
const UpdateFromLocal = () => {
	console.log(auxl.local)
	for(let each in auxl.local){
		if(each === 'profile' || each === 'location'){} else {
			for(let type in auxl.local[each]){
				for(let a in auxl.local[each][type]){
					if(auxl[each]){
						auxl[each][type][a] = auxl.local[each][type][a];
					}
				}
			}
		}
	}
}

//Time
/*************************************************************/
//Get Time
function time(){
	let time = {};
	time.time = new Date();
	time.year = time.time.getFullYear();
	time.month = time.time.getMonth();
	time.date = time.time.getDate();
	time.day = time.time.getDay();
	time.hour = time.time.getHours();
	time.minute = time.time.getMinutes();
	time.second = time.time.getSeconds();
	time.ms = time.time.getTime();
	return time;
}
//Time Difference from returned time() object
function timeDif(start, end){
	let timeDif = {};
	let time = {};
	//Time in MS
	let ms = 1;
	let msSecond = 1000;
	let msMinute = msSecond * 60;
	let msHour = msMinute * 60;
	let msDay = msHour * 24;
	let msMonth = msDay * (365.25/12);
	let msYear = msMonth * 12;
	//Get Amount of Time from MS
	function totalTime(ms){
		let time = {};
		time.ms = ms;
		time.seconds = Math.floor(time.ms / 1000);
		time.minutes = Math.floor(time.seconds / 60);
		time.hours = Math.floor(time.minutes / 60);
		time.days = Math.floor(time.hours / 24);
		time.months = Math.floor(time.days / (365/12));
		time.years = Math.floor(time.months / 12);
		return time;
	}
	//Total Time Difference
	//time.total = end.getTime() - start.getTime();
	time.total = end.ms - start.ms;
	//Current Time Difference
	//let msCurrentDif = end.getTime() - start.getTime();
	let msCurrentDif = end.ms - start.ms;
	timeDif = totalTime(msCurrentDif);
	//Calculate Amounts
	//Year
	msCurrentDif -= (timeDif.years * msYear);
	time.years = timeDif.years;
	timeDif = totalTime(msCurrentDif);
	//Month
	msCurrentDif -= (timeDif.months * msMonth);
	time.months = timeDif.months;
	timeDif = totalTime(msCurrentDif);
	//Days
	msCurrentDif -= (timeDif.days * msDay);
	time.days = timeDif.days;
	timeDif = totalTime(msCurrentDif);
	//Hours
	msCurrentDif -= (timeDif.hours * msHour);
	time.hours = timeDif.hours;
	timeDif = totalTime(msCurrentDif);
	//Minutes
	msCurrentDif -= (timeDif.minutes * msMinute);
	time.minutes = timeDif.minutes;
	timeDif = totalTime(msCurrentDif);
	//Seconds
	msCurrentDif -= (timeDif.seconds * msSecond);
	time.seconds = timeDif.seconds;
	timeDif = totalTime(msCurrentDif);
	//MS
	msCurrentDif -= (timeDif.ms * ms);
	time.ms = timeDif.ms;
	timeDif = totalTime(msCurrentDif);
	return time;
}

/*************************************************************/

//Controls
this.universalControls;
this.controls = 'Desktop';
this.vrHand = 'bothRight';
this.directionType = 'camera';
this.locomotionText = 'WASD Keys';

//Joystick Configurations : 1,4,8
this.joystickLoco = 8;
this.joystickRot = 8;
this.controlsInfo = {};
this.controlsText = '';
//Menu
this.menuOpen = true;
this.infoOpen = false;
this.dataOpen = false;
this.audioEnabled = false;
this.mobilePermissionGranted = false;
//Object Tracking
this.spawned = {};
this.scenarioSpawned = {};
this.zoneSpawned = {};
this.nodeSpawned = {};
this.bookSpawned = {};
//Objects that have sources or components requiring js import storage
this.spawnedWaitingForJS = {};
//Scenario, Zone, Node & Books use this to confirm before using spawnTracker
//All Named Object Spawn Functions
//Unique Spawn/Despawn methods required
this.objGenTracking = {
core:{type:'core', spawn: 'SpawnCore', despawn: 'DespawnCore', altSpawn: 'SpawnCoreOnGrid'},
layer:{type:'layer', spawn: 'SpawnLayer', despawn: 'DespawnLayer', altSpawn: 'SpawnLayerOnGrid'},
menu:{type:'menu', spawn: 'SpawnMenu', despawn: 'DespawnMenu'},
multiMenu:{type:'multiMenu', spawn: 'SpawnMultiMenu', despawn: 'DespawnMultiMenu'},
singleGen:{type:'singleGen', spawn: 'SpawnObjRing', despawn: 'DespawnObjRing'},
multiGen:{type:'multiGen', spawn: 'SpawnMultiAsset', despawn: 'DespawnMultiAsset'},
comp:{type:'comp', spawn: 'SpawnComp', despawn: 'DespawnComp'},
teleport:{type:'teleport', spawn: 'SpawnTeleport', despawn: 'DespawnTeleport'},
npc:{type:'npc', spawn: 'SpawnNPC', despawn: 'DespawnNPC'},
speechSystem:{type:'speechSystem', spawn: 'SpawnSpeech', despawn: 'DespawnSpeech'},
book:{type:'book', spawn: 'SpawnBook', despawn: 'DespawnBook'},
horizon:{type:'horizon', spawn: 'SpawnHorizon', despawn: 'DespawnHorizon'},
skyBox:{type:'skyBox', spawn: 'SpawnSkyBox', despawn: 'DespawnSkyBox'},
gridLayout:{type:'gridLayout', spawn: 'SpawnGridLayout', despawn: 'DespawnGridLayout'},
gate:{type:'gate', spawn: 'SpawnGate', despawn: 'DespawnGate'},
imageSwapper:{type:'imageSwapper', spawn: 'SpawnImgSwap', despawn: 'DespawnImgSwap'},
imageCarousel:{type:'imageCarousel', spawn: 'SpawnImgCarousel', despawn: 'DespawnImgCarousel'},
comboLock:{type:'comboLock', spawn: 'SpawnComboLock', despawn: 'DespawnComboLock'},
//gameMenu:{type:'gameMenu', spawn: 'SpawnGameMenu', despawn: 'DespawnGameMenu'},
highScoreBoard:{type:'highScoreBoard', spawn: 'SpawnBoard', despawn: 'DespawnBoard'},
memory:{type:'memory', spawn: 'SpawnMemGame', despawn: 'DespawnMemGame'},
swipeLaunch:{type:'swipeLaunch', spawn: 'SpawnSLGame', despawn: 'DespawnSLGame'},
guessHit:{type:'guessHit', spawn: 'SpawnGHGame', despawn: 'DespawnGHGame'},
dragDiffuse:{type:'dragDiffuse', spawn: 'SpawnDDGame', despawn: 'DespawnDDGame'},
sharpShooter:{type:'sharpShooter', spawn: 'SpawnSSGame', despawn: 'DespawnSSGame'},
perfectScale:{type:'perfectScale', spawn: 'SpawnPSGame', despawn: 'DespawnPSGame'},
reflex7:{type:'reflex7', spawn: 'SpawnR7Game', despawn: 'DespawnR7Game'},
tapIt:{type:'tapIt', spawn: 'SpawnTIGame', despawn: 'DespawnTIGame'},
popPop:{type:'popPop', spawn: 'SpawnPPGame', despawn: 'DespawnPPGame'},
hordeHalt:{type:'hordeHalt', spawn: 'SpawnHHGame', despawn: 'DespawnHHGame'},
};
//Add Custom Built Object to Tracker
this.AddObjGenToTracker = (type, spawn, despawn, altSpawn) => {
	auxl.objGenTracking[type] = {};
	auxl.objGenTracking[type].type = type;
	auxl.objGenTracking[type].spawn = spawn;
	auxl.objGenTracking[type].altSpawn = spawn;
	auxl.objGenTracking[type].despawn = despawn;
}
//Spawn Tracker
this.spawnTracker = (obj, spawnLocation, bookName) => {
	//Configure Tracker
	let tracker;
	if(spawnLocation === 'scenario'){
		tracker = 'scenarioSpawned';
	} else if(spawnLocation === 'zone'){
		tracker = 'zoneSpawned';
	} else if(spawnLocation === 'node'){
		tracker = 'nodeSpawned';
	} else if(spawnLocation === 'book'){
		tracker = 'bookSpawned';
	} else {
		tracker = 'nodeSpawned';
	}

	//Check for Object Type & ID
	let type;
	let id;
	if(auxl[obj]){
		for(let types in auxl.objGenTracking){
			if(auxl[obj][auxl.objGenTracking[types].spawn] || auxl[obj][auxl.objGenTracking[types].altSpawn]){
				type = auxl.objGenTracking[types].type;
				id = auxl[obj][type].id;
				break;
			}
		}
		if(type){}else{
			console.log('Tracker type error');
		}
	}
	//Add to Tracker
	if(spawnLocation === 'book'){
		if(auxl[tracker][bookName]){}else{
			auxl[tracker][bookName] = {};
		}
		auxl[tracker][bookName][id] = {type, obj};
	} else {
		auxl[tracker][id] = {type, obj};
	}
}
//Clear Spawned from Scenario, Zone, Node or Book
this.clearSpawned = (spawned) => {
	for(let spawn in spawned){
		if(auxl[spawn]){
			auxl[spawn][auxl.objGenTracking[spawned[spawn].type].despawn]();
		} else {
			if(spawned[spawn].parent){
				spawned[spawn].parent[spawn][auxl.objGenTracking[spawned[spawn].type].despawn]();
			} else {
				auxl[spawn].obj[auxl.objGenTracking[spawned[spawn].type].despawn]();
			}
		}
		//console.log(spawned[spawn]);//Book & Page spawned from
		delete spawned[spawn];
		/*
		if(Object.keys(auxl.bookSpawned[bookName]).length === 0){
			delete auxl.bookSpawned[bookName];
		}
		*/
	}
}
//Remove From Tracker
this.RemoveFromTracker = (id, bookname) => {
	if(auxl.scenarioSpawned[id]){
		delete auxl.scenarioSpawned[id];
	} else if(auxl.zoneSpawned[id]){
		delete auxl.zoneSpawned[id];
	} else if(auxl.nodeSpawned[id]){
		delete auxl.nodeSpawned[id];
	} else if(auxl.bookSpawned[id]){
		delete auxl.bookSpawned[bookName][id];
	}
}
//Check if Exists in Tracker
this.ExistsInTracker = (id, bookname) => {
	let book = bookname || false;
	if(auxl.scenarioSpawned[id]){
		return true;
	} else if(auxl.zoneSpawned[id]){
		return true;
	} else if(auxl.nodeSpawned[id]){
		return true;
	} else {
		if(book){
			if(auxl.bookSpawned[book][id]){
				delete auxl.bookSpawned[book][id];
			} else {
				return false;
			}
		} else {
			return false;
		}
	}
}
//Timeout, Interval, Interaction & Events currently running
this.running = {};
this.zoneRunning = {};
this.scenarioRunning = {};
this.timeouts = {};
this.intervals = {};
this.interactions = {};
this.events = {};
//Environmental Settings
//Day|Night Time Length
this.timeInDay = 360000;
//Physics
this.physics = false;
//Collision Maps
this.collisionMap = [[],[]];
this.triggerMap = [[],[]];
this.mapEdge = false;

//
//HTML Menu
function toggleMenu(){
	if(auxl.menuOpen){
		beginDiv.style.display = 'none';
		auxl.menuOpen = false;
		if(auxl.infoOpen){
			toggleInfo();
		}
		if(auxl.backgroundAudio && !auxl.playerAudio.core.inScene){
			auxl.playerAudio.SpawnCore(auxl.playerRig);
		}
	} else {
		beginDiv.style.display = 'flex';
		auxl.menuOpen = true;
	}
}
stickyMenu.addEventListener('click', toggleMenu);

//
//Start Experience
function startExp(){
	if(auxl.worldLoaded){}else{
		if(auxl.local.location.world === ''){
			auxl.defaultWorld.StartWorld();
		} else {
			auxl[auxl.local.location.world].StartWorld();
		}
		startButton.innerHTML = 'Resume';
		updateControls();
		auxl.worldLoaded = true;
	}
	toggleMenu();
}
startButton.addEventListener('click', startExp);

//
//Controls

//VR
function disableVRControls(){
	auxl.vrController1.GetEl().setAttribute('visible',false);
	auxl.vrController2.GetEl().setAttribute('visible',false);
	auxl.vrController1UI.GetEl().setAttribute('visible',false);
	auxl.vrController2UI.GetEl().setAttribute('visible',false);
	auxl.vrController1.GetEl().removeAttribute('cursor');
	auxl.vrController2.GetEl().removeAttribute('cursor');
	auxl.vrController1.GetEl().removeAttribute('laser-controls');
	auxl.vrController2.GetEl().removeAttribute('laser-controls');
}
function enableVRControls(){
	if(auxl.vrHand === 'bothRight'){
		auxl.vrController1.GetEl().setAttribute('visible',true);
		auxl.vrController2.GetEl().setAttribute('visible',true);
		//auxl.vrController1UI.GetEl().setAttribute('visible',true);
		//auxl.vrController2UI.GetEl().setAttribute('visible',true);
		auxl.vrController1.GetEl().setAttribute('laser-controls',{hand: 'left'});
		auxl.vrController2.GetEl().setAttribute('laser-controls',{hand: 'right'});
		auxl.vrController1.GetEl().setAttribute('raycaster',{enabled: false, autoRefresh: false, objects: '.disabled', far: 0, near: 0, interval: 0, lineColor: '#228da7', lineOpacity: 0.5, showLine: false, useWorldCoordinates: false});
		auxl.vrController2.GetEl().setAttribute('raycaster',{enabled: true, autoRefresh: true, objects: '.clickable', far: 'Infinity', near: 0, interval: 0, lineColor: '#228da7', lineOpacity: 0.5, showLine: true, useWorldCoordinates: false});
		auxl.vrController2.GetEl().setAttribute('cursor',{fuse: false, rayOrigin: 'vrController2', mouseCursorStylesEnabled: true});
		auxl.playerRig.GetEl().setAttribute('universal-controls',{update: 1});
		auxl.player.EnableVRLocomotion();
		auxl.locomotionText = 'Left Controller Joystick';
	} else if(auxl.vrHand === 'bothLeft'){
		auxl.vrController1.GetEl().setAttribute('visible',true);
		auxl.vrController2.GetEl().setAttribute('visible',true);
		//auxl.vrController1UI.GetEl().setAttribute('visible',true);
		//auxl.vrController2UI.GetEl().setAttribute('visible',true);
		auxl.vrController1.GetEl().setAttribute('laser-controls',{hand: 'left'});
		auxl.vrController2.GetEl().setAttribute('laser-controls',{hand: 'right'});
		auxl.vrController1.GetEl().setAttribute('raycaster',{enabled: true, autoRefresh: true, objects: '.clickable', far: 'Infinity', near: 0, interval: 0, lineColor: '#228da7', lineOpacity: 0.5, showLine: true, useWorldCoordinates: false});
		auxl.vrController2.GetEl().setAttribute('raycaster',{enabled: false, autoRefresh: false, objects: '.disabled', far: 0, near: 0, interval: 0, lineColor: '#228da7', lineOpacity: 0.5, showLine: false, useWorldCoordinates: false});
		auxl.vrController1.GetEl().setAttribute('cursor',{fuse: false, rayOrigin: 'vrController1', mouseCursorStylesEnabled: true});
		auxl.playerRig.GetEl().setAttribute('universal-controls',{update: 2});
		auxl.player.EnableVRLocomotion();
		auxl.locomotionText = 'Right Controller Joystick';
	} else if(auxl.vrHand === 'bothRightLoco' || auxl.vrHand === 'bothLeftLoco'){
		auxl.vrController1.GetEl().setAttribute('visible',true);
		auxl.vrController2.GetEl().setAttribute('visible',true);
		//auxl.vrController1UI.GetEl().setAttribute('visible',true);
		//auxl.vrController2UI.GetEl().setAttribute('visible',true);
		auxl.vrController1.GetEl().setAttribute('laser-controls',{hand: 'left'});
		auxl.vrController2.GetEl().setAttribute('laser-controls',{hand: 'right'});
		auxl.vrController1.GetEl().setAttribute('raycaster',{enabled: true, autoRefresh: true, objects: '.clickable', far: 'Infinity', near: 0, interval: 0, lineColor: '#228da7', lineOpacity: 0.5, showLine: true, useWorldCoordinates: 'false'});
		auxl.vrController2.GetEl().setAttribute('raycaster',{enabled: true, autoRefresh: true, objects: '.clickable', far: 'Infinity', near: 0, interval: 0, lineColor: '#228da7', lineOpacity: 0.5, showLine: true, useWorldCoordinates: false});
		vrController1.setAttribute('cursor',{fuse: false, rayOrigin: 'vrController1', mouseCursorStylesEnabled: true});
		auxl.vrController2.GetEl().setAttribute('cursor',{fuse: false, rayOrigin: 'vrController2', mouseCursorStylesEnabled: true});
		auxl.playerRig.GetEl().setAttribute('universal-controls',{update: 3});
		auxl.player.EnableVRLocomotion();
		if(auxl.vrHand === 'bothLeftLoco'){
			auxl.locomotionText = 'Left Controller Joystick';
		} else if (auxl.vrHand === 'bothRightLoco'){
			auxl.locomotionText = 'Right Controller Joystick';
		}
	} else if(auxl.vrHand === 'right'){
		auxl.vrController2.GetEl().setAttribute('visible',true);
		//auxl.vrController2UI.GetEl().setAttribute('visible',true);
		auxl.vrController2.GetEl().setAttribute('laser-controls',{hand: 'right'});
		auxl.vrController2.GetEl().setAttribute('raycaster',{enabled: true, autoRefresh: true, objects: '.clickable', far: 'Infinity', near: 0, interval: 0, lineColor: '#228da7', lineOpacity: 0.5, showLine: true, useWorldCoordinates: false});
		auxl.vrController2.GetEl().setAttribute('cursor',{fuse: 'false', rayOrigin: 'vrController2', mouseCursorStylesEnabled: true});
		auxl.playerRig.GetEl().setAttribute('universal-controls',{update: 4});
		auxl.player.EnableVRHoverLocomotion('vrController2');
		auxl.locomotionText = 'Hover on Forward/Backward Belt.';
	} else if(auxl.vrHand === 'left'){
		auxl.vrController1.GetEl().setAttribute('visible',true);
		//auxl.vrController1UI.GetEl().setAttribute('visible',true);
		auxl.vrController1.GetEl().setAttribute('laser-controls',{hand: 'left'});
		auxl.vrController1.GetEl().setAttribute('raycaster',{enabled: true, autoRefresh: true, objects: '.clickable', far: 'Infinity', near: 0, interval: 0, lineColor: '#228da7', lineOpacity: 0.5, showLine: true, useWorldCoordinates: false});
		auxl.vrController1.GetEl().setAttribute('cursor',{fuse: false, rayOrigin: 'vrController1', mouseCursorStylesEnabled: true});
		auxl.playerRig.GetEl().setAttribute('universal-controls',{update: 5});
		auxl.player.EnableVRHoverLocomotion('vrController1');
		auxl.locomotionText = 'Hover on Forward/Backward Belt.';
	}
}
//Desktop
function disableDesktopControls(){
	auxl.mouseController.GetEl().setAttribute('visible',false);
	auxl.mouseController.GetEl().removeAttribute('raycaster');
	auxl.mouseController.GetEl().removeAttribute('cursor');
}
function enableDesktopControls(){
	auxl.mouseController.GetEl().setAttribute('visible',true);
	auxl.mouseController.GetEl().setAttribute('raycaster',{enabled: 'true', autoRefresh: 'true', objects: '.clickable', far: 'Infinity', near: 0, interval: 0, lineColor: 'red', lineOpacity: 0.5, showLine: 'false', useWorldCoordinates: 'false'});
	auxl.mouseController.GetEl().setAttribute('cursor',{fuse: 'false', rayOrigin: 'mouseController', mouseCursorStylesEnabled: 'true',});
	auxl.playerRig.GetEl().setAttribute('universal-controls',{update: 0});
	auxl.player.EnableDesktopLocomotion();
	auxl.locomotionText = 'WASD Keys';
}
//Mobile
function disableMobileControls(){
	auxl.mouseController.GetEl().setAttribute('visible',false);
	auxl.mouseController.GetEl().removeAttribute('raycaster');
	auxl.mouseController.GetEl().removeAttribute('cursor');
	controllerBlock.style.display = 'none';
}
function enableMobileControls(){
	/*
	function mobilePermissionGrantedTrue(){
		auxl.mobilePermissionGranted = true;
	}
	function mobilePermissionGrantedFalse(){
		auxl.mobilePermissionGranted = false;
	}*/
	//deviceorientationpermissiongranted
	//deviceorientationpermissionrejected
	//deviceorientationpermissionrequested
	//sceneEl.setAttribute('device-orientation-permission-ui', {enabled: true});
	//sceneEl.addEventListener('deviceorientationpermissiongranted', mobilePermissionGrantedTrue);
	//sceneEl.addEventListener('deviceorientationpermissionrejected', mobilePermissionGrantedFalse);
	auxl.mouseController.GetEl().setAttribute('visible',true);
	auxl.mouseController.GetEl().setAttribute('raycaster',{enabled: 'true', autoRefresh: 'true', objects: '.clickable', far: 'Infinity', near: 0, interval: 0, lineColor: 'red', lineOpacity: 0.5, showLine: 'false', useWorldCoordinates: 'false'});
	auxl.mouseController.GetEl().setAttribute('cursor',{fuse: 'false', rayOrigin: 'mouseController', mouseCursorStylesEnabled: 'true'});
	controllerBlock.style.display = 'flex';
	auxl.playerRig.GetEl().setAttribute('universal-controls',{update: 6});
	auxl.player.EnableMobileLocomotion();
	auxl.locomotionText = 'Arrow Buttons';
}
//Controls Menu
function controlsMenu(state){
	//Old
	if(auxl.controls === 'Desktop'){
		disableVRControls();
	} else if(auxl.controls === 'Mobile'){
		disableMobileControls();
	} else if(auxl.controls === 'VR'){
		vrHandButton.style.display = 'none';
		vrLocomotionType.style.display = 'none';
		disableVRControls();
	}
	//New
	if(state === 'Desktop'){
		menuModeButton.innerHTML = 'Mode : Desktop'
		enableDesktopControls();
	} else if(state === 'Mobile'){
		menuModeButton.innerHTML = 'Mode : Mobile';
		enableMobileControls();
	} else if(state === 'VR'){
		menuModeButton.innerHTML = 'Mode : VR';
		vrHandButton.style.display = 'flex';
		vrLocomotionType.style.display = 'flex';
		enableVRControls();
	}
	//Update State
	auxl.controls = state;
	updateControls();
}
//VR Hand Menu
function vrHandMenu(state){
	//New
	if(state === 'bothRight'){
		vrHandButton.innerHTML = '2 Hands : Right Ray | Left Move';
	} else if(state === 'bothLeft'){
		vrHandButton.innerHTML = '2 Hands : Left Ray | Right Move';
	} else if(state === 'bothLeftLoco'){
		vrHandButton.innerHTML = '2 Hands : Dual Ray | Left Move';
	} else if(state === 'bothRightLoco'){
		vrHandButton.innerHTML = '2 Hands : Dual Ray | Right Move';
	} else if(state === 'right'){
		vrHandButton.innerHTML = '1 Hand : Right Ray | Belt Move';
	} else if(state === 'left'){
		vrHandButton.innerHTML = '1 Hand : Left Ray | Belt Move';
	}
	//Update State
	auxl.vrHand = state;
}

//Update Control Info
this.UpdateControlText = () => {
	auxl.controlsText = 'Control Configuration : ' + auxl.controls + ' mode\n';
	//Locomotion
	auxl.controlsText += 'Movement | ' + auxl.locomotionText + '\n';
	let actionCommand = '';
	for(let action in auxl.controlsInfo){
		if(action === 'altDown'){
			if(auxl.controls === 'Desktop'){
				actionCommand = 'Mouse Right Click';
			} else if(auxl.controls === 'Mobile'){
				actionCommand = 'Middle Directional Button';
			} else if(auxl.controls === 'VR'){
				actionCommand = 'Grip';
			}
		} else if(action === 'altUp'){
		} else if(action === 'action1Down'){
			if(auxl.controls === 'Desktop'){
				actionCommand = auxl.controlConfig.action1Keys[1] + ' Key';
			} else if(auxl.controls === 'Mobile'){
				actionCommand = 'A Button';
			} else if(auxl.controls === 'VR'){
				actionCommand = 'X Button';
			}
		} else if(action === 'action1Up'){
		} else if(action === 'action2Down'){
			if(auxl.controls === 'Desktop'){
				actionCommand = auxl.controlConfig.action2Keys[1] + ' Key';
			} else if(auxl.controls === 'Mobile'){
				actionCommand = 'B Button';
			} else if(auxl.controls === 'VR'){
				actionCommand = 'Y Button';
			}
		} else if(action === 'action2Up'){
		} else if(action === 'action3Down'){
			if(auxl.controls === 'Desktop'){
				actionCommand = auxl.controlConfig.action3Keys[1] + ' Key';
			} else if(auxl.controls === 'Mobile'){
				actionCommand = 'C Button';
			} else if(auxl.controls === 'VR'){
				actionCommand = 'A Button';
			}
		} else if(action === 'action3Up'){
		} else if(action === 'action4Down'){
			if(auxl.controls === 'Desktop'){
				actionCommand = auxl.controlConfig.action4Keys[1] + ' Key';
			} else if(auxl.controls === 'Mobile'){
				actionCommand = 'D Button';
			} else if(auxl.controls === 'VR'){
				actionCommand = 'B Button';
			}
		} else if(action === 'action4Up'){
		} else if(action === 'action5Down'){
			if(auxl.controls === 'Desktop'){
				actionCommand = auxl.controlConfig.action5Keys[1] + ' Key';
			} else if(auxl.controls === 'Mobile'){
				actionCommand = 'E Button';
			} else if(auxl.controls === 'VR'){
				actionCommand = 'Alt Joystick Down';
			}
		} else if(action === 'action5Up'){
		} else if(action === 'action6Down'){
			if(auxl.controls === 'Desktop'){
				actionCommand = auxl.controlConfig.action6Keys[1] + ' Key';
			} else if(auxl.controls === 'Mobile'){
				actionCommand = 'F Button';
			} else if(auxl.controls === 'VR'){
				actionCommand = 'Alt Joystick Up';
			}
		} else if(action === 'action6Up'){
		} else if(action === 'action7Down'){
			if(auxl.controls === 'Desktop'){
				actionCommand = auxl.controlConfig.action7Keys[1] + ' Key';
			} else if(auxl.controls === 'Mobile'){
				actionCommand = '<- Button';
			} else if(auxl.controls === 'VR'){
				actionCommand = 'Alt Joystick Left';
			}
		} else if(action === 'action7Up'){
		} else if(action === 'action8Down'){
			if(auxl.controls === 'Desktop'){
				actionCommand = auxl.controlConfig.action8Keys[1] + ' Key';
			} else if(auxl.controls === 'Mobile'){
				actionCommand = '-> Button';
			} else if(auxl.controls === 'VR'){
				actionCommand = 'Alt Joystick Right';
			}
		} else if(action === 'action8Up'){
		} else {
			console.log('Failed to identify action')
		}


		auxl.controlsText += actionCommand + ' | ' + auxl.controlsInfo[action].name + ' : ' + auxl.controlsInfo[action].info + '\n';
	}
	auxl.controlsText += 'Click to Close Window'
	//console.log(auxl.controlsText);
}
//Update Controls
function updateControls(){
	auxl.UpdateControlText();
	auxl.local.profile.controls = auxl.controls;
	auxl.local.profile.vrHand = auxl.vrHand;
	auxl.saveToProfile();
}
//Menu Controls Button
function changeControls(){
	if(auxl.controls === 'Desktop'){
		controlsMenu('VR');
	} else if(auxl.controls === 'VR'){
		controlsMenu('Mobile');
	} else if(auxl.controls === 'Mobile'){
		controlsMenu('Desktop');
	}
	updateControls();
}
menuModeButton.addEventListener('click', changeControls);
//Cycle VR Configurations
function changeVRHand(){
	if(auxl.vrHand === 'bothRight'){
		vrHandMenu('bothLeft');
	} else if(auxl.vrHand === 'bothLeft'){
		vrHandMenu('bothLeftLoco');
	} else if(auxl.vrHand === 'bothLeftLoco'){
		vrHandMenu('bothRightLoco');
	} else if(auxl.vrHand === 'bothRightLoco'){
		vrHandMenu('right');
	} else if(auxl.vrHand === 'right'){
		vrHandMenu('left');
	} else if(auxl.vrHand = 'left') {
		vrHandMenu('bothRight');
	}
	updateControls();
}
vrHandButton.addEventListener('click', changeVRHand);
//Change Locomotion Direction Type
function changeLocoDirection(){
	if(auxl.directionType === 'camera'){
		auxl.directionType = 'controller';
		vrLocomotionType.innerHTML = 'Direction : Controller';
	} else {
		auxl.directionType = 'camera';
		vrLocomotionType.innerHTML = 'Direction : Camera';
	}
	updateControls();
}
vrLocomotionType.addEventListener('click', changeLocoDirection);

//
//Toggle Audio
function toggleAudio(){
	if(auxl.audioEnabled){
		auxl.audioEnabled = false;
		audioVolume.style.display = 'none';
		audioButton.innerHTML = 'Sound : Disabled';
	} else {
		auxl.audioEnabled = true;
		audioButton.innerHTML = 'Sound : Enabled';
		audioVolume.style.display = 'flex';
		volume.innerHTML = auxl.volume.toFixed(1);
	}
}
audioButton.addEventListener('click', toggleAudio);

//
//Volume Control
//Up
function audioUp(){
	auxl.volume += 0.1;
	if(auxl.volume > 2){
		auxl.volume = 2;
	}
	volume.innerHTML = auxl.volume.toFixed(1);
	auxl.local.profile.volume = auxl.volume;
	auxl.saveToProfile();
	if(auxl.playerAudio.core.inScene){
		auxl.playerAudio.DespawnCore();
	}
}
volUpButton.addEventListener('click', audioUp);
//Down
function audioDown(){
	auxl.volume -= 0.1;
	if(auxl.volume < 0){
		auxl.volume = 0;
	}
	volume.innerHTML = auxl.volume.toFixed(1);
	auxl.local.profile.volume = auxl.volume;
	auxl.saveToProfile();
	if(auxl.playerAudio.core.inScene){
		auxl.playerAudio.DespawnCore();
	}
}
volDownButton.addEventListener('click', audioDown);

//
//Toggle Background Audio
this.ToggleBackgroundAudio = () => {
	auxl.backgroundAudio = !auxl.backgroundAudio;
	if(auxl.backgroundAudio){
		auxl.playerAudio.SpawnCore(auxl.playerRig);
	} else {
		auxl.playerAudio.DespawnCore();
	}
}

//
//Toggle Instructions
function toggleInfo(){
	if(auxl.infoOpen){
		expInfo.style.display = 'none';
		auxl.infoOpen = false;
	} else {
		expInfo.style.display = 'flex';
		auxl.infoOpen = true;
	}
}
viewInfo.addEventListener('click', toggleInfo);
infoClose.addEventListener('click', toggleInfo);

//
//Toggle Data
function toggleData(){
	if(auxl.dataOpen){
		dataInfo.style.display = 'none';
		auxl.dataOpen = false;
	} else {
		dataInfo.style.display = 'flex';
		auxl.dataOpen = true;
	}
}
viewData.addEventListener('click', toggleData);
dataClose.addEventListener('click', toggleData);
//Reset Storage
function resetSystem(){
	//unload current world and reload default world
	if(auxl.comp.inScene){
		auxl.comp.DespawnComp();
	}
	let resetTimeout = setTimeout(function () {
		if(auxl.worldLoaded){
			auxl.currentWorld.StopWorld();
			startButton.innerHTML = 'Restart';
			auxl.worldLoaded = false;
		}
		auxl.systemLoaded(true);
		toggleData();
		clearTimeout(resetTimeout);
	}, 750);
}
resetData.addEventListener('click', resetSystem);
//Reset and Reload
function resetReload(){
	auxl.systemLoaded(true);
	window.location.reload();
}
//resetData.addEventListener('click', resetReload);

//
//Toggle HTML
this.ToggleHTML = (id, display) => {
	if(display){
		if(id === 'l' || id === 'r'){
			document.getElementById(id).style.display = 'block';
		} else {
			document.getElementById(id).style.display = 'flex';
		}
	} else {
		document.getElementById(id).style.display = 'none';
	}
}

//
//Support

//
//DOM Scene

//Find Entity in Scene
this.findInScene = (item) => {
	let self = item;
	if(self.core){
		//console.log('Core');
		if(self.core.inScene){
			self = self.GetEl();
		} else {
			self = false;
		}
	} else if(self.layer){
		//console.log('Layer');
		if(self.layer.inScene){
			self = self.GetParentEl();
		} else {
			self = false;
		}
	} else if(self.id){
		//console.log('Entity');
	} else if(typeof self === 'string'){
		//console.log('ID');
		if(document.getElementById(self)){
			self = document.getElementById(self);
		} else {
			self = false;
		}
	}
	return self;
}
//Parent DOM Ent to other DOM Ent
this.attach = (child, parent) => {
	//Self
	let item = auxl.findInScene(child);
	//Parent
	let to = auxl.findInScene(parent);
	//Attach
	if(!item || !to){
		console.log('Failed to find Child or Parent');
	} else {
		to.appendChild(item);
	}
}
//Remove DOM Ent from parent DOM ent
this.detach = (child) => {
	//Self
	let item = auxl.findInScene(child);
	//Detach
	if(!item){
		console.log('Failed to find Child')
	} else {
		auxl.sceneEl.appendChild(item);
	}
}

//
//Color Theory Generator
//Generate a color theory palette from a given color, color family or a random color. Exported object contains Base, Complementary, Split-complementary, Triadic, Tetradic, Analagous & Monochrome(Not Yet)
this.colorTheoryGen = (color, family) => {
//color accepts Hex values only at the moment, more options coming soon
let r;
let r0;
let g;
let g0;
let b;
let b0;
let base;
let baseRGB;
let familyCheck = false;
const colorFamily =['red','orange','yellow','lime','blue','cyan','magenta','maroon','olive','green','purple','teal','navy','silver','grey','black','white'];

//Support Functions
function HSLToRGB(h,s,l) {
	let c = (1 - Math.abs(2 * l - 1)) * s,
	  x = c * (1 - Math.abs((h / 60) % 2 - 1)),
	  m = l - c/2,
	  r = 0,
	  g = 0,
	  b = 0;

	if (0 <= h && h < 60) {
	r = c; g = x; b = 0;  
	} else if (60 <= h && h < 120) {
	r = x; g = c; b = 0;
	} else if (120 <= h && h < 180) {
	r = 0; g = c; b = x;
	} else if (180 <= h && h < 240) {
	r = 0; g = x; b = c;
	} else if (240 <= h && h < 300) {
	r = x; g = 0; b = c;
	} else if (300 <= h && h < 360) {
	r = c; g = 0; b = x;
	}
	r = Math.round((r + m) * 255);
	g = Math.round((g + m) * 255);
	b = Math.round((b + m) * 255);

	return {r,g,b};
}
function RGBToHex(r,g,b) {
	r = r.toString(16);
	g = g.toString(16);
	b = b.toString(16);

	if (r.length == 1)
	r = "0" + r;
	if (g.length == 1)
	g = "0" + g;
	if (b.length == 1)
	b = "0" + b;

	return "#" + r + g + b;
}
function hexToRGB(h) {
	let r = 0, g = 0, b = 0;

	if (h.length == 4) {
	r = "0x" + h[1] + h[1];
	g = "0x" + h[2] + h[2];
	b = "0x" + h[3] + h[3];

	} else if (h.length == 7) {
	r = "0x" + h[1] + h[2];
	g = "0x" + h[3] + h[4];
	b = "0x" + h[5] + h[6];
	}

	return {r,g,b};
}
function randomColorFamily(){
	//Ignore last 4 Black/White/Grey/Silver
	return colorFamily[Math.floor(Math.random()*(colorFamily.length-4))];
}

//Check if color input is useable
if(color){
	if(color[0] === '#' && color.length === 4 || color[0] === '#' && color.length === 7){} else {
		color = false;
	}
}
//Check if family input is useable
if(family){
	for(let each in colorFamily){
		if(family === colorFamily[each]){
			familyCheck = true;
			break;
		}
	}
	if(familyCheck){} else {
		family = randomColorFamily();
	}
}

//Generate Color Values
if(color){
	//color is Hex
	base = color;
	baseRGB = hexToRGB(base);

	//convert Hex to RGB
	r = baseRGB.r;
	r0 = r/255;
	g = baseRGB.g;
	g0 = g/255;
	b = baseRGB.b;
	b0 = b/255;
} else {
	if(!family){
		family = randomColorFamily();
	}
	if(family === 'red'){
		r = Math.floor(Math.random()*55)+200;
		g = b = 0;
	} else if(family === 'orange'){
		r = Math.floor(Math.random()*105)+150;
		g = Math.floor(r*0.65);
		b = 0;
	} else if(family === 'yellow'){
		r = g = Math.floor(Math.random()*55)+200;
		b = 0;
	} else if(family === 'lime'){
		g = Math.floor(Math.random()*55)+200;
		r = b = 0;
	} else if(family === 'blue'){
		b = Math.floor(Math.random()*55)+200;
		r = g = 0;
	} else if(family === 'cyan'){
		g = b = Math.floor(Math.random()*55)+200;
		r = 0;
	} else if(family === 'magenta'){
		r = b = Math.floor(Math.random()*55)+200;
		g = 0;
	} else if(family === 'maroon'){
		r = Math.floor(Math.random()*28)+100;
		b = g = 0;
	} else if(family === 'olive'){
		r = g = Math.floor(Math.random()*28)+100;
		b = 0;
	} else if(family === 'green'){
		g = Math.floor(Math.random()*28)+100;
		r = b = 0;
	} else if(family === 'purple'){
		r = b = Math.floor(Math.random()*28)+100;
		g = 0;
	} else if(family === 'teal'){
		g = b = Math.floor(Math.random()*28)+100;
		r = 0;
	} else if(family === 'navy'){
		b = Math.floor(Math.random()*28)+100;
		r = g = 0;
	} else if(family === 'black'){
		r = g = b = Math.floor(Math.random()*42);
	} else if(family === 'white'){
		r = g = b = Math.floor(Math.random()*35)+220;
	} else if(family === 'silver'){
		r = g = b = Math.floor(Math.random()*42)+170;
	} else if(family === 'grey'){
		r = g = b = Math.floor(Math.random()*28)+100;
	}
	r0 = r/255;
	g0 = g/255;
	b0 = b/255;
	base = RGBToHex(r,g,b);
}

//Luminosity
//Find max and min
let max = Math.max(r0, g0, b0);
let min = Math.min(r0, g0, b0);
let lum = (1 / 2) * (max + min);

//Hue
let hue;
if(max === r0){
	if(min === g0){
		//R > B > G
		hue = 60 * (6 * (b0-g0)/(r0-g0));
	} else {
		//R > G > B
		hue = 60 * ((g0-b0)/(r0-b0));
	}
} else if(max === g0){
	if(min === b0){
		//G > R > B
		hue = 60 * (2 - (r0-b0)/(g0-b0));
	} else {
		//G > B > R
		hue = 60 * (2 + (b0-r0)/(g0-r0));
	}
} else if(max === b0){
	if(min === r0){
		//B > G > R
		hue = 60 * (4 - (g0-r0)/(b0-r0));
	} else {
		//B > R > G
		hue = 60 * (4 + (r0-g0)/(b0-g0));
	}
}

//Saturation
let sat;
if(lum === 1){
sat = 0;
} else {
sat = ((max - min) / (1 - (lum*2 - 1)));
}

//Complementary
let complRGB = HSLToRGB(Math.abs((hue + 180) - 360), sat, lum);
let compl = RGBToHex(complRGB.r, complRGB.g, complRGB.b);

//Split-complementary
let splitComplRGB = [
HSLToRGB(Math.abs((hue + 150) - 360), sat, lum),
HSLToRGB(Math.abs((hue + 210) - 360), sat, lum)
];
let splitCompl = [
RGBToHex(splitComplRGB[0].r, splitComplRGB[0].g, splitComplRGB[0].b),
RGBToHex(splitComplRGB[1].r, splitComplRGB[1].g, splitComplRGB[1].b)
];

//Triadic
let triadicRGB = [
HSLToRGB(Math.abs((hue + 120) - 360), sat, lum),
HSLToRGB(Math.abs((hue + 240) - 360), sat, lum)
];
let triadic = [
RGBToHex(triadicRGB[0].r, triadicRGB[0].g, triadicRGB[0].b),
RGBToHex(triadicRGB[1].r, triadicRGB[1].g, triadicRGB[1].b)
];

//Tetradic
let tetradicRGB = [
HSLToRGB(Math.abs((hue + 90) - 360), sat, lum),
HSLToRGB(Math.abs((hue + 180) - 360), sat, lum),
HSLToRGB(Math.abs((hue + 270) - 360), sat, lum)
];
let tetradic = [
RGBToHex(tetradicRGB[0].r, tetradicRGB[0].g, tetradicRGB[0].b),
RGBToHex(tetradicRGB[1].r, tetradicRGB[1].g, tetradicRGB[1].b),
RGBToHex(tetradicRGB[2].r, tetradicRGB[2].g, tetradicRGB[2].b)
];

//Analagous
let analogRGB = [
HSLToRGB(Math.abs((hue + 30) - 360), sat, lum),
HSLToRGB(Math.abs((hue + 60) - 360), sat, lum),
HSLToRGB(Math.abs((hue + 90) - 360), sat, lum)
];
let analog = [
RGBToHex(analogRGB[0].r, analogRGB[0].g, analogRGB[0].b),
RGBToHex(analogRGB[1].r, analogRGB[1].g, analogRGB[1].b),
RGBToHex(analogRGB[2].r, analogRGB[2].g, analogRGB[2].b)
];

//Monochrome (25-60% | 42%)
let mono = [];
const spread = 0.42;
let light = RGBToHex(r*(1+spread),g*(1+spread),b*(1+spread));
mono.push(light);
let dark = RGBToHex(r*(1-spread),g*(1-spread),b*(1-spread));
mono.push(dark);
//red_light = red_primary * (1 + scaling_factor)
//green_light = green_primary * (1 + scaling_factor)
//blue_light = blue_primary * (1 + scaling_factor)

//red_dark = red_primary * (1 - scaling_factor)
//green_dark = green_primary * (1 - scaling_factor)
//blue_dark = blue_primary * (1 - scaling_factor)

return {base, light, dark, compl, splitCompl, triadic, tetradic, analog};

}
/*
let newColor1 = colorTheoryGen();
let newColor1 = colorTheoryGen('#00d3d3');
let newColor1 = colorTheoryGen(false, 'red');
console.log(newColor1.base);
console.log(newColor1.compl);
console.log(newColor1.splitCompl[0]);
console.log(newColor1.splitCompl[1]);
console.log(newColor1.triadic[0]);
console.log(newColor1.triadic[1]);
console.log(newColor1.tetradic[0]);
console.log(newColor1.tetradic[1]);
console.log(newColor1.tetradic[2]);
console.log(newColor1.analog[0]);
console.log(newColor1.analog[1]);
console.log(newColor1.analog[2]);
*/

//
//Name Generator

//Check for Duplicate Object
this.checkDupeName = (id) => {
	let name = id;
	let num = -1;
	idRandomize: while (true){
		if(auxl[name]){
			num++;
			name = id + 'Copy' + num;
			continue idRandomize;
		} else {
			if(id === name){} else {
				console.log(id + ' changed to ' + name);
			}
			return name;
		}
	}
}
//Randomly Generate a Name
this.ranNameGen = () => {
	let name = '';
	let alphabet = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z'];
	let nameLength = Math.floor(Math.random()*12)+4;
	for(let letter = 0; letter < nameLength; letter++){
		name += alphabet[Math.floor(Math.random()*alphabet.length)]
	}
	return name;
}

//
//Pronoun Speech Assist
this.pronoun = (sex) => {
	let you = {};
		if(sex === 'male'){
			you.sex = 'male';
			you.sexe = 'man';
			you.sexes = 'men';
		} else if(sex === 'female'){
			you.sex = 'female';
			you.sexe = 'woman';
			you.sexes = 'women';
		} else if(sex === 'other'){
			you.sex = 'person';
			you.sexe = 'person';
			you.sexes = 'people';
		}
}




//
//Main

//
//Entity Core
//Single Base Object
this.Core = (data) => {
	return (0,_main_js__WEBPACK_IMPORTED_MODULE_0__.Core)(auxl, data);
}
//
//Duplicate Core Data, Core, Layer Data or Layer

//Generate new Core Data from Template
this.coreDataFromTemplate = (data, edit, assign) => {
	return (0,_main_js__WEBPACK_IMPORTED_MODULE_0__.coreDataFromTemplate)(auxl, data, edit, assign);
}
//Generate new Core from Template
this.coreFromTemplate = (core, edit, assign) => {
	return (0,_main_js__WEBPACK_IMPORTED_MODULE_0__.coreFromTemplate)(auxl, core, edit, assign);
}

//
//Layered Cores
//Multiple Entity Cores Combined
this.Layer = (id, all, update) => {
	return (0,_main_js__WEBPACK_IMPORTED_MODULE_0__.Layer)(auxl, id, all, update);
}

//Generate new Layer from Layer Data Template
this.layerDataFromTemplate = (layer, coreBaseName, changeParent, assign) => {
	return (0,_main_js__WEBPACK_IMPORTED_MODULE_0__.layerDataFromTemplate)(auxl, layer, coreBaseName, changeParent, assign);
}
//Generate new Layer from Layer Template
this.layerFromTemplate = (layer, id, changeParent, updateLayer, assign) => {
	return (0,_main_js__WEBPACK_IMPORTED_MODULE_0__.layerFromTemplate)(auxl, layer, id, changeParent, updateLayer, assign);
}

//
//Player

//
//Player
//User Controller, Settings and Actions
this.Player = (id,layer) => {
	return (0,_player_js__WEBPACK_IMPORTED_MODULE_1__.Player) (auxl, id, layer);
}

//
//Companion
//System Menu & Inventory
this.Companion = (id, object, inventory) => {
	return (0,_player_js__WEBPACK_IMPORTED_MODULE_1__.Companion)(auxl, id, object, inventory);
}

//
//Scenes

//
//Scene Node ObjGen
//scenePlaceTownBuildingCastleLabrynthLevelAreaOfInterest
this.SceneNode = (sceneData) => {
	return (0,_scenes_js__WEBPACK_IMPORTED_MODULE_2__.SceneNode)(auxl, sceneData);
}

//
//Map Zone Gen & reader
//mapRegionDistrictTerritoryZoneSection
this.MapZone = (mapZoneData) => {
	return (0,_scenes_js__WEBPACK_IMPORTED_MODULE_2__.MapZone)(auxl, mapZoneData);
}

//
//Scenario Gen
//entireScenarioSpawnLocationAlwaysDisplay
this.Scenario = (scenarioData) => {
	return (0,_scenes_js__WEBPACK_IMPORTED_MODULE_2__.Scenario)(auxl, scenarioData);
}

//
//World Gen
//containAllScenarios
this.World = (worldData) => {
	return (0,_scenes_js__WEBPACK_IMPORTED_MODULE_2__.World)(auxl, worldData);
}

//
//Menu

//
//Menu
//Single Menu | Vertical/Horizontal
this.Menu = (menuData) => {
	return (0,_menu_js__WEBPACK_IMPORTED_MODULE_3__.Menu)(auxl, menuData);
}

//
//MultiMenu
//Multi Sub Menus | Circle/Vertical/Horizontal
this.MultiMenu = (multiMenuData) => {
	return (0,_menu_js__WEBPACK_IMPORTED_MODULE_3__.MultiMenu)(auxl, multiMenuData);
}

//
//Quick Hover Menu
//Hold down button to spawn circle menu, hover on option and let go of button. Active hover selection on button up happens and menu closes
this.HoverMenu = (hoverMenuData) => {
	return (0,_menu_js__WEBPACK_IMPORTED_MODULE_3__.HoverMenu)(auxl, hoverMenuData);
}

//
//Combo Lock
//Enter Correct Sequence to Run Func
this.ComboLock = (id, display, seq, run, position) => {
	return (0,_menu_js__WEBPACK_IMPORTED_MODULE_3__.ComboLock)(auxl, id, display, seq, run, position);
}

//
//Scroll Multi Menu
//Infinite Scroll of Options
this.ScrollMenu = (id) => {
	return (0,_menu_js__WEBPACK_IMPORTED_MODULE_3__.ScrollMenu)(auxl, id);
}

//
//Environment

//SkyBox
//Lights, Sky, Space
this.SkyBox = (skyBoxData) => {
	return (0,_environment_js__WEBPACK_IMPORTED_MODULE_4__.SkyBox)(auxl, skyBoxData);
}

//
//Horizon
//Mountains, Hills, Buildings, Cylinder/Square Wall
this.Horizon = (horizonData) => {
	return (0,_environment_js__WEBPACK_IMPORTED_MODULE_4__.Horizon)(auxl, horizonData);
}

//
//Ring of Objects
//Randomize Set of Objects from Single in a Ring Radius
this.ObjsGenRing = (objRingData) => {
	return (0,_environment_js__WEBPACK_IMPORTED_MODULE_4__.ObjsGenRing)(auxl, objRingData);
}

//
//Multi Asset Generator
//Randomize Sets of Various Sized Objects in various Ring Radius'
this.MultiAssetGen = (multiGenData) => {
	return (0,_environment_js__WEBPACK_IMPORTED_MODULE_4__.MultiAssetGen)(auxl, multiGenData);
}

//
//Teleport
//Generate Teleport Points at Array of Locations
this.Teleport = (id, locations) => {
	return (0,_environment_js__WEBPACK_IMPORTED_MODULE_4__.Teleport)(auxl, id, locations);
}

//
//NPC

//
//Story Book
//Linear, Tree, Quests, Jump, Menu, Conditionals, Flags...
this.Book = (bookData, npc) => {
 return (0,_npc_js__WEBPACK_IMPORTED_MODULE_5__.Book)(auxl, bookData, npc);
}

//
//Speech System
//Speaking Textbubble
this.SpeechSystem = (core, npc, fixed) => {
	return (0,_npc_js__WEBPACK_IMPORTED_MODULE_5__.SpeechSystem)(auxl, core, npc, fixed);
}

//
//NPC
//Core Object w/ Book|Pages & Textbubble
this.NPC = (id, object, bookData, textDisplay, special) => {
	return (0,_npc_js__WEBPACK_IMPORTED_MODULE_5__.NPC)(auxl, id, object, bookData, textDisplay, special);
}

//
//Info Bubble
//Display an Emote or Alert Bubble
this.InfoBubble = (id, object, offset, color) => {
	return (0,_npc_js__WEBPACK_IMPORTED_MODULE_5__.InfoBubble)(auxl, id, object, offset, color);
}

//
//CreatureGen
//Generate a creature object
this.Creature = (id, attach, customizations) => {
	return (0,_npc_js__WEBPACK_IMPORTED_MODULE_5__.Creature)(auxl, id, attach, customizations);
}

//
//Grid

//
//Collision
//Build a collision map in 0.5 meter sections 
//Allow or Deny moving outside of collision map
this.Collision = () => {
	return (0,_grid_js__WEBPACK_IMPORTED_MODULE_6__.Collision)(auxl);
}

//
//Grid Layout
//Spawn coreData, Core, layerData or Layer Objects at Grid Layouts
this.GridLayout = (gridLayoutData) => {
	return (0,_grid_js__WEBPACK_IMPORTED_MODULE_6__.GridLayout)(auxl, gridLayoutData);
}

//
//Gates
//Grid Based One Direction Close Behind Player
this.Gate = (id, object, direction) => {
	return (0,_grid_js__WEBPACK_IMPORTED_MODULE_6__.Gate)(auxl, id, object, direction);
}

//
//Build

//
//Build Core/Layer/Other objects in the 3D environment
this.BuildIn3D = () => {
	return (0,_build_js__WEBPACK_IMPORTED_MODULE_7__["default"])(auxl);
}

//
//Images
//
//Image Swapper
//Main Image and Image Thumbnails Click to Toggle to Main
this.ImageSwapper = (id, mainData, buttonData, ...materials) => {
	return (0,_images_js__WEBPACK_IMPORTED_MODULE_8__.ImageSwapper)(auxl, id, mainData, buttonData, ...materials);
}

//
//ImageCarousel
//View large set of Images in a set of Frames and Button Controls
this.ImageCarousel = (carouselData) => {
	return (0,_images_js__WEBPACK_IMPORTED_MODULE_8__.ImageCarousel)(auxl, carouselData);
}


},
//Delay Player Load in Animation until Scene is Ready
checkSceneLoad: function (time, timeDelta) {
	if(this.loadingObjects.size <= 0){
		let sceneTimeout;
		if(this.player.layer.transition.scene === 'blink'){
			this.blink1Screen.EmitEvent('blinkScene2');
			this.blink2Screen.EmitEvent('blinkScene2');
			this.loadingScene = false;
			sceneTimeout = setTimeout(() => {
				this.blink1Screen.ChangeSelf({property: 'visible', value: 'false'});
				this.blink2Screen.ChangeSelf({property: 'visible', value: 'false'});
				this.player.layer.teleporting = false;
				this.player.EnableClick();
				clearTimeout(sceneTimeout);
			}, 800);
		} else if (this.player.layer.transition.scene === 'fade'){
			this.fadeScreen.EmitEvent('fadeScene2');
			this.loadingScene = false;
			sceneTimeout = setTimeout(() => {
				this.fadeScreen.ChangeSelf({property: 'visible', value: 'false'});
				this.player.layer.teleporting = false;
				this.player.EnableClick();
				clearTimeout(sceneTimeout);
			}, 800);
		} else if (this.player.layer.transition.scene === 'sphere'){
			this.sphereScreen.EmitEvent('sphereScene2');
			this.loadingScene = false;
			sceneTimeout = setTimeout(() => {
				this.sphereScreen.ChangeSelf({property: 'visible', value: 'false'});
				this.player.layer.teleporting = false;
				this.player.EnableClick();
				clearTimeout(sceneTimeout);
			}, 800);
		} else if (this.player.layer.transition.scene === 'instant'){
			this.loadingScene = false;
			this.player.layer.teleporting = false;
			this.player.EnableClick();
		}
	}
},
//AUXL Tick - Running Throttled checkSceneLoad()
tick: function (time, timeDelta) {
	if(this.loadingScene){
		//Run Throttled checkSceneLoad() after scene was read
		if(this.sceneReading){} else {
			this.checkSceneLoadThrottled();
		}
	}

},
});

//
//Export
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (auxl);

/***/ }),

/***/ "./src/system/build.js":
/*!*****************************!*\
  !*** ./src/system/build.js ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
//
//AUXL : A-Frame UX Library
//v0.3 Engine
//https://github.com/Minty-Crisp/AUXL
//
//Created by Minty-Crisp (mintycrisp.com)
//
//Build
//
//BuildIn3D

//
//Build Core/Layer/Other objects in the 3D environment
const BuildIn3D = (auxl) => {

	let one = {};
	one.id = 'build';
	one.player = auxl.player.GetPlayerInfo();
	one.core = {};
	one.core.data = {};
	one.core.made = [];
	one.layer = {};
	one.objGen = {};
	one.null = {};
	one.templates = {};

	one.core.blank = {
		data:'blankData',
		id:'blank',
		sources: false,
		text: false,
		geometry: false,
		material: false,
		position: new THREE.Vector3(0,0,0),
		rotation: new THREE.Vector3(0,0,0),
		scale: new THREE.Vector3(1,1,1),
		animations: false,
		mixins: false,
		classes: ['a-ent'],
		components: false,
	};

	one.states = ['ready', 'building', 'editing', 'deleting', 'settings'];
	one.state = one.states[0];

	one.building = {};
	one.building.current = false;
	one.building.prepped = false;
	one.building.building = false;

	//player.id
//Spawn a multi-menu
// w/ various individual options for each type of Core/Layer/Other
/*
Build
Edit
Delete
Settings


Build
- Core
- - Name
- - Geometry
- - Material
- - Text
- - Position
- - Rotation
- - Scale
- - Animations
- - Clickable
- - Components
- - Done
- Layer
- ObjGen
- Null
- Templates



auxl.avatarSphereData = {
data:'avatarSphereData',
id:'avatarSphere',
sources: false,
text: false,
geometry: false,
material: false,
position: new THREE.Vector3(0,0,0),
rotation: new THREE.Vector3(0,0,0),
scale: new THREE.Vector3(1,1,1),
animations: false,
mixins: false,
classes: ['a-ent','avatar'],
components: false,
};

*/
	one.buildMenuData = {
	info:{
		id: 'buildMenu',
		buttonData: auxl.buildCoreData,
		hoverData: auxl.buildHoverData,
		title: 'Build Mode',
		description: 'Build objects.',
		layout:'circleUp',
		posOffset: new THREE.Vector3(0,1.5,1.5),
		offset: -1,
		parent: false,
		stare: false,
	},
	menu0:{
		button0:{
			id: 'subMenu1',
			style: false,
			title: 'Build',
			description: 'Build a new object.',
			subMenu: 'menu1',
			action: false,
		},
		button1:{
			id: 'subMenu2',
			style: false,
			title: 'Edit',
			description: 'Edit an object in-scene.',
			subMenu: 'menu22',
			action: false,
		},
		button2:{
			id: 'subMenu3',
			style: false,
			title: 'Delete',
			description: 'Delete an object in-scene.',
			subMenu: 'menu23',
			action: false,
		},
		button3:{
			id: 'subMenu4',
			style: false,
			title: 'Settings',
			description: 'Configure system settings.',
			subMenu: 'menu24',
			action: false,
		},
	},
	menu1:{
		button0:{
			id: 'subMenu2',
			style: false,
			title: 'Core',
			description: 'Build a Core object.',
			subMenu: 'menu2',
			action: false,
		},
		button1:{
			id: 'subMenu3',
			style: false,
			title: 'Layer',
			description: 'Build a Layer object.',
			subMenu: 'end',
			action: false,
		},
		button2:{
			id: 'subMenu4',
			style: false,
			title: 'ObjGen',
			description: 'Build an object.',
			subMenu: 'end',
			action: false,
		},
		button3:{
			id: 'subMenu5',
			style: false,
			title: 'Null',
			description: 'Build a Null object.',
			subMenu: 'end',
			action: false,
		},
		button4:{
			id: 'subMenu6',
			style: false,
			title: 'Templates',
			description: 'Build a from a Template.',
			subMenu: 'end',
			action: false,
		},
	},
	menu2:{
		button0:{
			id: 'subMenu0',
			style: false,
			title: 'Generate',
			description: 'Generate a default Core object.',
			subMenu: false,
			action: {
				auxlObj: 'build',
				component: false,
				method: 'StartBuilding',
				params: null,
				menu: 'stay',
			},
		},
		button1:{
			id: 'subMenu1',
			style: false,
			title: 'Name',
			description: 'Update core Name.',
			subMenu: 'coreName',
			action: false,
		},
		button2:{
			id: 'subMenu2',
			style: false,
			title: 'Geometry',
			description: 'Update core Geometry.',
			subMenu: 'coreGeometry',
			action: false,
		},
		button3:{
			id: 'subMenu3',
			style: false,
			title: 'Material',
			description: 'Update core Material.',
			subMenu: 'coreMaterial',
			action: false,
		},
		button4:{
			id: 'subMenu4',
			style: false,
			title: 'Text',
			description: 'Update core Text.',
			subMenu: 'coreText',
			action: false,
		},
		button5:{
			id: 'subMenu5',
			style: false,
			title: 'Position',
			description: 'Update core Position.',
			subMenu: 'corePosition',
			action: false,
		},
		button6:{
			id: 'subMenu6',
			style: false,
			title: 'More',
			description: 'More options.',
			subMenu: 'menu3',
			action: false,
		},
	},
	menu3:{
			button0:{
				id: 'subMenu0',
				style: false,
				title: 'Rotation',
				description: 'Update core Rotation.',
				subMenu: 'coreRotation',
				action: false,
			},
			button1:{
				id: 'subMenu1',
				style: false,
				title: 'Scale',
				description: 'Update core Scale.',
				subMenu: 'coreScale',
				action: false,
			},
			button2:{
				id: 'subMenu2',
				style: false,
				title: 'Animations',
				description: 'Update core Animations.',
				subMenu: 'coreAnimations',
				action: false,
			},
			button3:{
				id: 'subMenu3',
				style: false,
				title: 'Clickable',
				description: 'Toggle core to be clickable in-scene.',
				subMenu: 'coreClickable',
				action: false,
			},
			button4:{
				id: 'subMenu4',
				style: false,
				title: 'Components',
				description: 'Update core Components.',
				subMenu: 'coreComponents',
				action: false,
			},
			button5:{
				id: 'subMenu5',
				style: false,
				title: 'Done',
				description: 'Finalize core updates.',
				subMenu: 'coreDone',
				action: false,
			},
	},
	coreName:{
		button0:{
			id: 'action1',
			style: false,
			title: 'Update Name',
			description: 'Update the cores name and id.',
			subMenu: false,
			action: {
				auxlObj: 'one',
				component: false,
				method: 'UpdateName',
				params: null,
				menu: 'stay',
			},
		},
	},
	coreGeometry:{
		button0:{
			id: 'action0',
			style: false,
			title: 'Plane',
			description: 'A 2D plane.',
			subMenu: false,
			action: {
				auxlObj: 'build',
				component: false,
				method: 'UpdateGeometry',
				params: 'plane',
				menu: 'stay',
			},
		},
		button1:{
			id: 'action1',
			style: false,
			title: 'Cube',
			description: 'A 3D cube.',
			subMenu: false,
			action: {
				auxlObj: 'build',
				component: false,
				method: 'UpdateGeometry',
				params: 'box',
				menu: 'stay',
			},
		},
		button2:{
			id: 'action2',
			style: false,
			title: 'Circle',
			description: 'A 2D circle.',
			subMenu: false,
			action: {
				auxlObj: 'build',
				component: false,
				method: 'UpdateGeometry',
				params: 'circle',
				menu: 'stay',
			},
		},
		button3:{
			id: 'action3',
			style: false,
			title: 'Cylinder',
			description: 'A 3D cylinder.',
			subMenu: false,
			action: {
				auxlObj: 'build',
				component: false,
				method: 'UpdateGeometry',
				params: 'cylinder',
				menu: 'stay',
			},
		},
		button4:{
			id: 'action4',
			style: false,
			title: 'Sphere',
			description: 'A 3D sphere.',
			subMenu: false,
			action: {
				auxlObj: 'build',
				component: false,
				method: 'UpdateGeometry',
				params: 'sphere',
				menu: 'stay',
			},
		},

	},
	coreMaterial:{
		button0:{
			id: 'action1',
			style: false,
			title: 'Update Material',
			description: 'Update the cores Material.',
			subMenu: false,
			action: {
				auxlObj: 'build',
				component: false,
				method: 'UpdateMaterial',
				params: null,
				menu: 'stay',
			},
		},
	},
	coreText:{
		button0:{
			id: 'action1',
			style: false,
			title: 'Update Text',
			description: 'Update the cores text.',
			subMenu: false,
			action: {
				auxlObj: 'build',
				component: false,
				method: 'UpdateText',
				params: null,
				menu: 'stay',
			},
		},
	},
	corePosition:{
		button0:{
			id: 'action1',
			style: false,
			title: 'Update Position',
			description: 'Update the cores position.',
			subMenu: false,
			action: {
				auxlObj: 'build',
				component: false,
				method: 'UpdatePosition',
				params: null,
				menu: 'stay',
			},
		},
	},
	coreRotation:{
		button0:{
			id: 'action1',
			style: false,
			title: 'Update Rotation',
			description: 'Update the cores rotation.',
			subMenu: false,
			action: {
				auxlObj: 'build',
				component: false,
				method: 'UpdateRotation',
				params: null,
				menu: 'stay',
			},
		},
	},
	coreScale:{
		button0:{
			id: 'action1',
			style: false,
			title: 'Update Scale',
			description: 'Update the cores scale.',
			subMenu: false,
			action: {
				auxlObj: 'build',
				component: false,
				method: 'UpdateScale',
				params: null,
				menu: 'stay',
			},
		},
	},
	coreAnimations:{
		button0:{
			id: 'action1',
			style: false,
			title: 'Update Animations',
			description: 'Update the cores animations.',
			subMenu: false,
			action: {
				auxlObj: 'build',
				component: false,
				method: 'UpdateAnimations',
				params: null,
				menu: 'stay',
			},
		},
	},
	coreClickable:{
		button0:{
			id: 'action1',
			style: false,
			title: 'Toggle Clickable',
			description: 'Toggle the core being interactable. ',
			subMenu: false,
			action: {
				auxlObj: 'build',
				component: false,
				method: 'ToggleClickable',
				params: null,
				menu: 'stay',
			},
		},
	},
	coreComponents:{
		button0:{
			id: 'action1',
			style: false,
			title: 'Update Components',
			description: 'Update the cores components.',
			subMenu: false,
			action: {
				auxlObj: 'build',
				component: false,
				method: 'UpdateComponents',
				params: null,
				menu: 'stay',
			},
		},
	},
	coreDone:{
		button0:{
			id: 'action1',
			style: false,
			title: 'Done',
			description: 'Finalize the core.',
			subMenu: false,
			action: {
				auxlObj: 'build',
				component: false,
				method: 'Done',
				params: null,
				menu: 'close',
			},
		},
	},
	end:{
		button0:{
			id: 'subMenu2',
			style: false,
			title: 'Core',
			description: 'Build a Core object.',
			subMenu: 'menu0',
			action: false,
		},
	},

	};
	auxl.buildMenu = auxl.MultiMenu(one.buildMenuData);

	one.building.geometry = {};
	one.building.geometry.plane = {primitive: 'plane', width: 0.5, height: 0.5};
	one.building.geometry.box = {primitive: 'box', depth: 0.5, width: 0.5, height: 0.5};
	one.building.geometry.circle = {primitive: 'circle', radius: 0.5, segments: 32};
	one.building.geometry.cylinder = {primitive: 'cylinder', radius: 0.25, height: 0.75, openEnded: false, segmentsHeight: 2, segmentsRadial: 16, thetaStart: 0, thetaLength: 360};
	one.building.geometry.sphere = {primitive: 'sphere', radius: 0.4, phiStart: 0, phiLength: 360, segmentsWidth: 16, segmentsHeight: 16, thetaStart: 0, thetaLength: 360};


	const SpawnBuild = () => {
		//console.log('Spawning');
		auxl.buildMenu.SpawnMultiMenu();
	}
	const DespawnBuild = () => {
		//console.log('Despawning');
		auxl.buildMenu.DespawnMultiMenu();
		//auxl.RemoveFromTracker(one.id);
	}

	const NewCore = () => {
		if(one.building.prepped){
			console.log('Already Prepped');
		} else {
			console.log('New Core')
			let name = one.core.made.length;
			one.core.data[name+'data'] = {
				data:name+'data',
				id:name,
				sources: false,
				text: false,
				geometry: {primitive: 'box', depth: 0.5, width: 0.5, height: 0.5},
				material: {shader: "standard", color: "#2aad7b", emissive: '#2aad7b', emissiveIntensity: 0.25, opacity: 1},
				position: new THREE.Vector3(0,1.5,1.5),
				rotation: new THREE.Vector3(0,0,0),
				scale: new THREE.Vector3(1,1,1),
				animations: false,
				mixins: false,
				classes: ['a-ent'],
				components: false,
			};
			one.core[name] = auxl.Core(one.core.data[name+'data']);
			one.building.current = one.core[name];
			one.building.prepped = true;
			one.building.building = true;

			one.building.current.SpawnCore();
		}
	}


	const StartBuilding = () => {
		console.log('Start Building')

		NewCore();


	}

	const UpdateName = () => {
		console.log('UpdateName')
	}

	const UpdateGeometry = (geometry) => {
		console.log('UpdateGeometry');
		let geometryData;
		if(geometry === 'plane'){
			geometryData = one.building.geometry.plane;
		} else if(geometry === 'box'){
			geometryData = one.building.geometry.box;
		} else if(geometry === 'circle'){
			geometryData = one.building.geometry.circle;
		} else if(geometry === 'cylinder'){
			geometryData = one.building.geometry.cylinder;
		} else if(geometry === 'sphere'){
			geometryData = one.building.geometry.sphere;
		} 
		//Update Data
		one.core.data[one.building.current.core.id+'data'].geometry = geometryData;
		//Update Preview
		one.building.current.ChangeSelf({property: 'geometry', value: geometryData});
	}
	const UpdateMaterial = () => {
		console.log('UpdateMaterial')
	}
	const UpdateText = () => {
		console.log('UpdateText')
	}
	const UpdatePosition = () => {
		console.log('UpdatePosition')
	}
	const UpdateRotation = () => {
		console.log('UpdateRotation')
	}
	const UpdateScale = () => {
		console.log('UpdateScale')
	}
	const UpdateAnimations = () => {
		console.log('UpdateAnimations')
	}
	const UpdateClickable = () => {
		console.log('UpdateClickable')
	}
	const UpdateComponents = () => {
		console.log('UpdateComponents')
	}
	const UpdateDone = () => {
		console.log('UpdateDone')
	}

	const Testing = () => {
		console.log(one)
	}

	return {one, SpawnBuild, DespawnBuild, StartBuilding, UpdateName, UpdateGeometry, UpdateMaterial, UpdateText, UpdatePosition, UpdateRotation, UpdateScale, UpdateAnimations, UpdateClickable, UpdateComponents, UpdateDone, Testing,}


}

//
//Export
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (BuildIn3D);

/***/ }),

/***/ "./src/system/environment.js":
/*!***********************************!*\
  !*** ./src/system/environment.js ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Horizon: () => (/* binding */ Horizon),
/* harmony export */   MultiAssetGen: () => (/* binding */ MultiAssetGen),
/* harmony export */   ObjsGenRing: () => (/* binding */ ObjsGenRing),
/* harmony export */   SkyBox: () => (/* binding */ SkyBox),
/* harmony export */   Teleport: () => (/* binding */ Teleport)
/* harmony export */ });
//
//AUXL : A-Frame UX Library
//v0.3 Engine
//https://github.com/Minty-Crisp/AUXL
//
//Created by Minty-Crisp (mintycrisp.com)
//
//Environment
//
//SkyBox
//Horizon
//ObjsGenRing
//MultiAssetGen
//Teleport

//
//SkyBox
//Lights, Sky, Space
const SkyBox = (auxl, skyBoxData) => {
	let skyBox = Object.assign({}, skyBoxData);
	skyBox.inScene = false;
	skyBox.time = 5.5;
	skyBox.day = false;
	let dayNightTimeout;
	let dayNightInterval;
	//Spawn All Light Core/Layers
	const SpawnLights = () => {
		for(let each in skyBox.lights){
			if(skyBox.lights[each].SpawnCore){
				skyBox.lights[each].SpawnCore();
			} else if(skyBox.lights[each].SpawnLayer){
				skyBox.lights[each].SpawnLayer();
			} else {
				console.log('Failed to spawn object');
				console.log(skyBox.lights[each]);
			}
		}
	}
	//Despawn All Light Core/Layers
	const DespawnLights = () => {
		for(let each in skyBox.lights){
			if(skyBox.lights[each].DespawnCore){
				skyBox.lights[each].DespawnCore();
			} else if(skyBox.lights[each].DespawnLayer){
				skyBox.lights[each].DespawnLayer();
			} else {
				console.log('Failed to spawn object');
				console.log(skyBox.lights[each]);
			}
		}
	}
	//Spawn All Sky Core/Layers
	const SpawnSky = () => {
		for(let each in skyBox.sky){
			if(skyBox.sky[each].SpawnCore){
				skyBox.sky[each].SpawnCore();
			} else if(skyBox.sky[each].SpawnLayer){
				skyBox.sky[each].SpawnLayer();
			} else {
				console.log('Failed to spawn object');
				console.log(skyBox.sky[each]);
			}
		}
	}
	//Despawn All Sky Core/Layers
	const DespawnSky = () => {
		for(let each in skyBox.sky){
			if(skyBox.sky[each].DespawnCore){
				skyBox.sky[each].DespawnCore();
			} else if(skyBox.sky[each].DespawnLayer){
				skyBox.sky[each].DespawnLayer();
			} else {
				console.log('Failed to spawn object');
				console.log(skyBox.sky[each]);
			}
		}
	}
	//Spawn All Sky Core/Layers
	const SpawnSpace = () => {
		for(let each in skyBox.space){
			if(skyBox.space[each].SpawnCore){
				skyBox.space[each].SpawnCore();
			} else if(skyBox.space[each].SpawnLayer){
				skyBox.space[each].SpawnLayer();
			} else {
				console.log('Failed to spawn object');
				console.log(skyBox.space[each]);
			}
		}
	}
	//Despawn All Sky Core/Layers
	const DespawnSpace = () => {
		for(let each in skyBox.space){
			if(skyBox.space[each].DespawnCore){
				skyBox.space[each].DespawnCore();
			} else if(skyBox.space[each].DespawnLayer){
				skyBox.space[each].DespawnLayer();
			} else {
				console.log('Failed to spawn object');
				console.log(skyBox.space[each]);
			}
		}
	}
	//Spawn SkyBox
	const SpawnSkyBox = () => {
		if(skyBox.inScene){}else{
			SpawnLights();
			SpawnSky();
			SpawnSpace();
			skyBox.inScene = true;
		}
	}
	//Despawn SkyBox
	const DespawnSkyBox = () => {
		if(skyBox.inScene){
			clearTimeout(dayNightTimeout);
			clearInterval(dayNightInterval);
			DespawnLights();
			DespawnSky();
			DespawnSpace();
			auxl.RemoveFromTracker(skyBox.id);
			skyBox.inScene = false;
		}
	}
	//Emit Event for All in Array
	const EmitEventArray = (all, event) => {
		for(let each in all){
			if(all[each].SpawnCore){
				all[each].EmitEvent(event);
			} else if(all[each].SpawnLayer){
				all[each].EmitEventAll(event);
			} else {
				console.log('Failed to emit event to object');
				console.log(all[each]);
			}
		}
	}
	//Toggle Spawn
	const ToggleSpawn = () => {
		if(skyBox.inScene){
			DespawnSkyBox();
		} else {
			SpawnSkyBox();
		}
	}
	//Set Flag & Value to Object - Single or Array
	const SetFlag = (flagValue) => {
		if(Array.isArray(flagValue)){
			for(let each in flagValue){
				skyBox[flagValue[each].flag] = flagValue[each].value;
				auxl.saveToProfile({auxlObject: skyBox.id, type: 'skyBox', sub: false, name: flagValue[each].flag, data: flagValue[each].value});
			}
		} else {
			skyBox[flagValue.flag] = flagValue.value;
			auxl.saveToProfile({auxlObject: skyBox.id, type: 'skyBox', sub: false, name: flagValue.flag, data: flagValue.value});
		}
	}
	//Retreive Flag Value from Object - Single or Array
	const GetFlag = (flag) => {
		if(Array.isArray(flag)){
			let flagArray = [];
			for(let each in flag){
				flagArray.push(skyBox(flag[each]));
			}
			return flagArray;
		} else {
			return skyBox[flag];
		}
	}
	//Sunrise Animation Event
	const Sunrise = () => {
		skyBox.day = true;
		EmitEventArray(skyBox.lights, 'sunrise');
		EmitEventArray(skyBox.sky, 'sunrise');
		EmitEventArray(skyBox.space, 'sunrise');
	}
	//Sunset Animation Event
	const Sunset = () => {
		skyBox.day = false;
		EmitEventArray(skyBox.lights, 'sunset');
		EmitEventArray(skyBox.sky, 'sunset');
		EmitEventArray(skyBox.space, 'sunset');
	}
	//Suspend Day/Night Animation
	const PauseDayNight = () => {
		EmitEventArray(skyBox.lights, 'pauseDayNight');
		EmitEventArray(skyBox.sky, 'pauseDayNight');
		EmitEventArray(skyBox.space, 'pauseDayNight');
	}
	//Resume Day/Night Animation
	const ResumeDayNight = () => {
		EmitEventArray(skyBox.lights, 'resumeDayNight');
		EmitEventArray(skyBox.sky, 'resumeDayNight');
		EmitEventArray(skyBox.space, 'resumeDayNight');
	}
	//Looping Day/Night Cycle
	const DayNightCycle = (dayLength) => {
		if(dayLength){
			if(typeof dayLength === 'number'){
				//shortest day allowed 24 seconds
				if(dayLength >= 24000){
					auxl.timeInDay = dayLength;
				}
			}
		}
		Sunrise();
		dayNightTimeout = setTimeout(() => {
			Sunset();
			dayNightInterval = setInterval(() => {
				if(skyBox.day){
					Sunset();
				}else{
					Sunrise();
				}
			}, auxl.timeInDay/2);
		}, auxl.timeInDay/2 - auxl.timeInDay/24);
	}
	//Restart Day/Night Animation
	const RestartDayNight = (dayLength) => {
		PauseDayNight();
		Despawn();
		Spawn();
		DayNightCycle(dayLength);
	}
	//Set Time
	const SetTime = (time) => {
//Sun|Moon angle
//4 lights intensity and position
//Sky grad colors

		PauseDayNight();
		if(time >= 6 && time <=18 ){
			skyBox.day = true;
		} else {
			skyBox.day = false;
		}
		skyBox.time = time;

		//0 equals -90
		//6 equals 0
		//18 equals 180
		//24 equals 270
		//Each 1 is 15 degrees
		//Each 0.1 is 1.5 degrees

		//Set Sun
		let sunRotX = (skyBox.time * 15) -90;
		if(auxl.sunLayer.layer.inScene){
			auxl.sunLayer.GetChild('sunOuter').ChangeSelf({property: 'rotation', value: new THREE.Vector3(sunRotX,45,0)});
		}
		//Set Moon
		let moonRotX = (skyBox.time * 15) + 90;
		if(auxl.moonLayer.layer.inScene){
			auxl.moonLayer.GetChild('moonOuter').ChangeSelf({property: 'rotation', value: new THREE.Vector3(moonRotX,45,0)});
		}
		//ResumeDayNight();


//To properly start animation at a new time
//Pause current animations and clear current sunrise interval
//Set new animation that moves to end of sequence for which the sunrise interval will take it back over
//At end of this new animation time, reset interval timing sequence

/*
daynight:{property: 'object3D.rotation.x', from: -5, to: 355, dur: auxl.timeInDay, delay: 0, loop: '1', dir: 'normal', easing: 'linear', elasticity: 400, autoplay: false, enabled: true, startEvents: 'sunrise', pauseEvents: 'pauseDayNight', resumeEvents: 'resumeDayNight'}

daynight:{property: 'object3D.rotation.x', from: 175, to: 535, dur: auxl.timeInDay, delay: 0, loop: '1', dir: 'normal', easing: 'linear', elasticity: 400, autoplay: false, enabled: true, startEvents: 'sunrise', pauseEvents: 'pauseDayNight', resumeEvents: 'resumeDayNight'}
*/

/*
auxl.directionalLight
auxl.ambientLight
auxl.directionalLight2
auxl.directionalLight3

set lights

ambientLight
from: 0.5, to: 0.25,
from: '#99154E', to: '#fffb96',

directionalLight
from: 0.1, to: 1,
from: new THREE.Vector3(-1,1,-1), to: new THREE.Vector3(1,1,1)

directionalLight2
from: 0.2, to: 0.1,
from: new THREE.Vector3(1,1,1), to: new THREE.Vector3(-1,1,-1)

directionalLight3
from: 0.05, to: 0.1,
from: new THREE.Vector3(1,1,-1), to: new THREE.Vector3(-1,1,-1)
*/

	}

	return {skyBox, SpawnSkyBox, DespawnSkyBox, ToggleSpawn, SetFlag, GetFlag, DayNightCycle, PauseDayNight, ResumeDayNight, RestartDayNight, SetTime};
}

//
//Horizon
//Mountains, Hills, Buildings, Cylinder/Square Wall
const Horizon = (auxl, horizonData) => {
	let horizon = Object.assign({}, horizonData);
	horizon.inScene = false;

	//Prep Material
	let top;
	let mid;
	let bottom;
	let colorPick;

	//Prep Density
	let spawnAmount;
	if(horizon.density === 'low'){
		spawnAmount = 5;
	} else if(horizon.density === 'normal'){
		spawnAmount = 10;
	} else if(horizon.density === 'high'){
		spawnAmount = 20;
	}

	//Prep Height
	let spawnHeight;
	if(horizon.height === 'low'){
		spawnHeight = 0.5;
	} else if(horizon.height === 'normal'){
		spawnHeight = 1;
	} else if(horizon.height === 'high'){
		spawnHeight = 1.5;
	}

	//Prep Width
	let spawnWidth;
	if(horizon.width === 'low'){
		spawnWidth = 0.5;
	} else if(horizon.width === 'normal'){
		spawnWidth = 1;
	} else if(horizon.width === 'high'){
		spawnWidth = 1.5;
	}

	//Prep Type
	let geometry;
	let position = new THREE.Vector3(0,0,horizon.radius*-1);
	let scale = new THREE.Vector3(1,1,1);
	let height;
	if(horizon.type === 'mountains'){
		height = 100*spawnHeight;
		geometry = {primitive: 'cone', height: height, radiusBottom: 50, radiusTop: 0, openEnded: true, segmentsHeight: 1, segmentsRadial: 9, thetaLength: 180, thetaStart: 90},
		scale.x = 1.5*spawnWidth;
	} else if(horizon.type === 'hills'){
		height = 50*spawnHeight;
		geometry = {primitive: 'circle', radius: height, thetaStart: 0, thetaLength: 180};
		scale.x = 1.5*spawnWidth;
	} else if(horizon.type === 'buildings'){
		height = 100*spawnHeight;
		geometry = {primitive: 'plane', width: 40*spawnWidth, height: height};
	} else if(horizon.type === 'cylinderWall'){
		height = 50*spawnHeight;
		geometry = {primitive: 'cylinder', openEnded: true, radius: horizon.radius, height: height, segmentsHeight: 9, segmentsRadial: 32, thetaStart: 0, thetaLength: 360 };
		position.z = 0;
		spawnAmount = 1;
	} else if(horizon.type === 'squareWall'){
		height = 40*spawnHeight;
		geometry = {primitive: 'plane', width: horizon.radius*2, height: height};
		spawnAmount = 4;
	}
	//Horizon Layer
	let horizonAllData = {
	data:'horizonAllData',
	id:'horizonParent',
	sources:false,
	text: false,
	geometry: false,
	material: false,
	position: new THREE.Vector3(0,-5,0),
	rotation: new THREE.Vector3(0,0,0),
	scale: new THREE.Vector3(1,1,1),
	animations: false,
	mixins: false,
	classes: ['a-ent'],
	components: false,
	};
	let horizonAll = auxl.Core(horizonAllData);
	let horizonLayerData = {
		parent: {core: horizonAll},
	};
	//Horizon Parent
	let horizonParentData = {
	data:'horizonParentData',
	id:'horizonParent',
	sources:false,
	text: false,
	geometry: false,
	material: false,
	position: new THREE.Vector3(0,0,0),
	rotation: new THREE.Vector3(0,0,0),
	scale: new THREE.Vector3(1,1,1),
	animations: false,
	mixins: false,
	classes: ['a-ent'],
	components: false,
	};
	let horizonParentId = 'horizonParent';
	let horizonParentCores = [];
	//Horizon Child
	let horizonChildData = {
	data:'horizonChildData',
	id:'horizonChild',
	sources:false,
	text: false,
	geometry: geometry,
	material: false,
	position: position,
	rotation: new THREE.Vector3(0,0,0),
	scale: scale,
	animations: false,
	mixins: false,
	classes: ['a-ent'],
	components: false,
	};
	let horizonChildId = 'horizonChild';
	let horizonChildCores = [];
	//Build Layer
	for(let a=0; a < spawnAmount; a++){
		//Parent
		horizonParentId = 'horizonParent' + a;
		let parentRotation = new THREE.Vector3(0,0,0);
		parentRotation.y = 360/spawnAmount*a;
		horizonParentData.id = horizonParentId;
		horizonParentData.rotation = parentRotation;
		horizonParentCores[a] = auxl.Core(horizonParentData);
		//Child
		horizonChildId = 'horizonChild' + a;
		horizonChildData.id = horizonChildId;
		if(horizon.type === 'squareWall'){}else{
			horizonChildData.scale.x = (1.5*spawnWidth) +(Math.random()*0.1-0.2);
			horizonChildData.scale.y = 1 + (Math.random()*0.2-0.4);
		}
		if(horizon.type === 'mountains' || horizon.type === 'buildings' || horizon.type === 'cylinderWall' || horizon.type === 'squareWall'){
			horizonChildData.position.y = ((horizonChildData.scale.y*height)/2)-1;
		} else if(horizon.type === 'hills'){
			horizonChildData.position.y = -1;
		}
		//Material
		let material;
		let textureSrc;
		let colorPickBase;
		if(horizon.texture){
			if(horizon.baseColor){
				colorPick = auxl.colorTheoryGen(horizon.baseColor);
			} else if(horizon.baseColorFamily){
				colorPick = auxl.colorTheoryGen(false, horizon.baseColorFamily);
			} else {
				colorPick = auxl.colorTheoryGen();
			}
			colorPickBase = colorPick.base;
			material = {shader: "standard", side: 'double', color: colorPickBase};

			if(horizon.texture.src){
				if(Array.isArray(horizon.texture.src)){
					textureSrc = horizon.texture.src[Math.floor(Math.random()*horizon.texture.src.length)];
				} else {
					textureSrc = horizon.texture.src;
				}
				material.src = textureSrc;
			}
			if(horizon.texture.repeat){
				material.repeat = horizon.texture.repeat;
			}
			if(horizon.texture.opacity){
				material.opacity = horizon.texture.opacity;
			}
			if(horizon.texture.metalness){
				material.metalness = horizon.texture.metalness;
			}
			if(horizon.texture.roughness){
				material.roughness = horizon.texture.roughness;
			}
			if(horizon.texture.emissive){
				material.emissive = colorPickBase;
			}
			if(horizon.texture.emissiveIntensity){
				material.emissiveIntensity = horizon.texture.emissiveIntensity;
			}

		} else if(horizon.baseColor){
			colorPick = auxl.colorTheoryGen(horizon.baseColor);
			mid = colorPick.base;
			top = colorPick.tetradic[0];
			bottom = colorPick.tetradic[1];
			material = {shader: 'threeColorGradientShader', topColor: top, middleColor: mid, bottomColor: bottom, side: 'double'};
		} else if(horizon.baseColorFamily){
			colorPick = auxl.colorTheoryGen(false, horizon.baseColorFamily);
			mid = colorPick.base;
			top = colorPick.tetradic[0];
			bottom = colorPick.tetradic[1];
			material = {shader: 'threeColorGradientShader', topColor: top, middleColor: mid, bottomColor: bottom, side: 'double'};
		} else {
			colorPick = auxl.colorTheoryGen();
			mid = colorPick.base;
			top = colorPick.tetradic[0];
			bottom = colorPick.tetradic[1];
			material = {shader: 'threeColorGradientShader', topColor: top, middleColor: mid, bottomColor: bottom, side: 'double'};
		}
		horizonChildData.material = material;
		//Core
		horizonChildCores[a] = auxl.Core(horizonChildData);
		//Layer
		horizonLayerData['child'+a] = {
			parent: {core: horizonParentCores[a]}, 
			child0: {core: horizonChildCores[a]},
		};
	}
	let horizonLayer = auxl.Layer('horizonLayer',horizonLayerData);
	//Spawn Horizon
	const SpawnHorizon = () => {
		if(horizon.inScene){}else{
			horizonLayer.SpawnLayer();
			horizon.inScene = true;
		}
	}
	//Despawn Horizon
	const DespawnHorizon = () => {
		if(horizon.inScene){
			horizonLayer.DespawnLayer();
			auxl.RemoveFromTracker(horizon.id);
			horizon.inScene = false;
		}
	}
	//Toggle Spawn
	const ToggleSpawn = () => {
		if(horizon.inScene){
			DespawnHorizon();
		} else {
			SpawnHorizon();
		}
	}
	//Set Flag & Value to Object - Single or Array
	const SetFlag = (flagValue) => {
		if(Array.isArray(flagValue)){
			for(let each in flagValue){
				horizon[flagValue[each].flag] = flagValue[each].value;
				auxl.saveToProfile({auxlObject: horizon.id, type: 'horizon', sub: false, name: flagValue[each].flag, data: flagValue[each].value});
			}
		} else {
			horizon[flagValue.flag] = flagValue.value;
			auxl.saveToProfile({auxlObject: horizon.id, type: 'horizon', sub: false, name: flagValue.flag, data: flagValue.value});
		}
	}
	//Retreive Flag Value from Object - Single or Array
	const GetFlag = (flag) => {
		if(Array.isArray(flag)){
			let flagArray = [];
			for(let each in flag){
				flagArray.push(horizon(flag[each]));
			}
			return flagArray;
		} else {
			return horizon[flag];
		}
	}

	return {horizon, SpawnHorizon, DespawnHorizon, ToggleSpawn, SetFlag, GetFlag};
}

//
//Ring of Objects
//Randomize Set of Objects from Single in a Ring Radius
const ObjsGenRing = (auxl, objRingData) => {
	let singleGen = Object.assign({}, objRingData);
	singleGen.inScene = false;
	let ogData = Object.assign({}, objRingData.objData);
	let objData = JSON.parse(JSON.stringify(objRingData.objData));
	singleGen.all = [];
	let posX;
	let posY;
	let posZ;
	let positionVec3;
	let scaleX;
	let scaleY;
	let scaleZ;
	let rotX;
	let rotY;
	let rotZ;
	let color;

	//Function to calculate distance between two points
	function distance(x1, z1, x2, z2) {
		return Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(z2 - z1, 2) * 1.0);
	}
	//Return a random position within Ring radius
	function randomPosition(radius, yPos){
		posX = Math.random() * (radius*2) - radius;
		posZ = Math.random() * (radius*2) - radius;
		return new THREE.Vector3(posX, yPos, posZ);
	}
	//Generate Randomized Cores
	const genCores = () => {
		for(let a = 0; a < singleGen.total; a++){
			objData.id = ogData.id + a;
			//Color
			if(singleGen.ranColor){
				color = auxl.colorTheoryGen().base;
				objData.material.color = color;
				if(objData.material.emissive){
					objData.material.emissive = color;
				}
			}
			//Texture
			if(singleGen.ranTexture){
				objData.material.src = auxl.patterns[Math.floor(Math.random()*auxl.patterns.length)];
			}
			//Rotation
			rotX = objData.rotation.x;
			rotY = objData.rotation.y;
			rotZ = objData.rotation.z;
			if(singleGen.ranRotX){
				rotX += Math.random() * 360;
			}
			if(singleGen.ranRotY){
				rotY += Math.random() * 360;
			}
			if(singleGen.ranRotZ){
				rotZ += Math.random() * 360;
			}
			objData.rotation = new THREE.Vector3(rotX, rotY, rotZ);
			//Scale
			scaleX = singleGen.objData.scale.x;
			scaleY = singleGen.objData.scale.y;
			scaleZ = singleGen.objData.scale.z;
			if(singleGen.ranScaleX){
				scaleX += Math.random() * singleGen.scaleFlex;
			}
			if(singleGen.ranScaleY){
				scaleY += Math.random() * singleGen.scaleFlex;
			}
			if(singleGen.ranScaleZ){
				scaleZ += Math.random() * singleGen.scaleFlex;
			}
			objData.scale = new THREE.Vector3(scaleX, scaleY, scaleZ);
			//Scale affects position
			posY = singleGen.objData.position.y;
			if(singleGen.ranYPos){
				posY += Math.random() * singleGen.yPosFlex;
			}
			//Position
			positionVec3 = randomPosition(singleGen.outerRingRadius, posY);
			objData.position = positionVec3;
			//Max attempts to check for avoiding collision
			let checking = 42;
			checkAllData: while (checking > 0) {
				if(a === 0){
					if(distance(positionVec3.x,positionVec3.z,0,0) < singleGen.innerRingRadius) {
						positionVec3 = randomPosition(singleGen.outerRingRadius, posY);
						checking--;
						continue checkAllData;
					} else {
						objData.position = positionVec3;
					}
				}
				for(let z=0; z < singleGen.all.length; z++) {
					//Check the distance, if too close, change and repeat
					if(distance(positionVec3.x, positionVec3.z, singleGen.all[z].core.position.x, singleGen.all[z].core.position.z) < singleGen.sameTypeRadius || distance(positionVec3.x,positionVec3.z,0,0) < singleGen.innerRingRadius) {
						positionVec3 = randomPosition(singleGen.outerRingRadius, posY);
						checking--;
						continue checkAllData;
					} else {
						objData.position = positionVec3;
					}
				}
				break;
			}
			//Add randomized Core to All
			singleGen.all.push(auxl.Core(objData));
		}
	}
	//Spawn all Randomized Cores
	const SpawnObjRing = () => {
		if(singleGen.inScene){}else{
			genCores();
			for(let a = 0; a < singleGen.total; a++){
				singleGen.all[a].SpawnCore();
			}
			singleGen.inScene = true;
		}
	}
	//Despawn all Randomized Cores
	const DespawnObjRing = () => {
		if(singleGen.inScene){
			for(let a = 0; a < singleGen.total; a++){
				singleGen.all[a].DespawnCore();
			}
			auxl.RemoveFromTracker(singleGen.id);
			singleGen.inScene = false;
		}
	}
	//Toggle Spawn
	const ToggleSpawn = () => {
		if(singleGen.inScene){
			DespawnObjRing();
		} else {
			SpawnObjRing();
		}
	}
	//Set Flag & Value to Object - Single or Array
	const SetFlag = (flagValue) => {
		if(Array.isArray(flagValue)){
			for(let each in flagValue){
				singleGen[flagValue[each].flag] = flagValue[each].value;
				auxl.saveToProfile({auxlObject: singleGen.id, type: 'singleGen', sub: false, name: flagValue[each].flag, data: flagValue[each].value});
			}
		} else {
			singleGen[flagValue.flag] = flagValue.value;
			auxl.saveToProfile({auxlObject: singleGen.id, type: 'singleGen', sub: false, name: flagValue.flag, data: flagValue.value});
		}
	}
	//Retreive Flag Value from Object - Single or Array
	const GetFlag = (flag) => {
		if(Array.isArray(flag)){
			let flagArray = [];
			for(let each in flag){
				flagArray.push(singleGen(flag[each]));
			}
			return flagArray;
		} else {
			return singleGen[flag];
		}
	}

	return {singleGen, SpawnObjRing, DespawnObjRing, ToggleSpawn, SetFlag, GetFlag};
}

//
//Multi Asset Generator
//Randomize Sets of Various Sized Objects in various Ring Radius'
const MultiAssetGen = (auxl, multiGenData) => {
//Add the ability to read an array of different objects for same size
//Need to better optimize each size's radius
	let multiGen = Object.assign({}, multiGenData);
	multiGen.inScene = false;
	multiGen.assets = {}
	multiGen.assets.tiny = [];
	multiGen.assets.small = [];
	multiGen.assets.med = [];
	multiGen.assets.large = [];
	multiGen.assets.huge = [];
	let sizes = ['tiny','small','med','large','huge'];
	multiGen.grid = [];
	multiGen.ring0 = [];
	multiGen.ring1 = [];
	multiGen.ring2 = [];
	multiGen.ring3 = [];
	multiGen.ring4 = [];
	multiGen.ring5 = [];
	//Multi Ring Inner/Outer Radius'
	multiGen.ring = {
		i0:0.5,
		o0:4,
		i1:3,
		o1:25,
		i2:5,
		o2:60,
		i3:6,
		o3:80,
		i4:8,
		o4:100,
		i5:18,
		o5:150,
	};
	//Ring 0 - user spawn area - tiny/small
	//Ring 1 - immeadiately surrounding the spawn area - tiny/small/med
	//Ring 2 - a bit farther from spawn area - small/med/large
	//Ring 3 - medium distance from spawn - med/large
	//Ring 4 - far distance from spawn - large/huge
	//Ring 5 - super far distance from spawn - huge

	//On every loop through the grid creator, it will always use the center to spawn one, allow that one a parent, but do not use it for a spawning location

	//Start with 1 mega mutating grid and add each size's recently added only on grid during generation

	//Generate Distribution Points at Ring Radius'
	let ring5 = [];
	let ring4 = [];
	let ring3 = [];
	let ring2 = [];
	let ring1 = [];
	let ring0 = [];
	let gridRing5 = discSampling('ring5',multiGen.ring.o5,multiGen.ring.i5);
	let gridRing4 = discSampling('ring4',multiGen.ring.o4,multiGen.ring.i4,gridRing5);
	let gridRing3 = discSampling('ring3',multiGen.ring.o3,multiGen.ring.i3,gridRing4);
	let gridRing2 = discSampling('ring2',multiGen.ring.o2,multiGen.ring.i2,gridRing3);
	let gridRing1 = discSampling('ring1',multiGen.ring.o1,multiGen.ring.i1,gridRing2);
	let gridRing0 = discSampling('ring0',multiGen.ring.o0,multiGen.ring.i0,gridRing1);
	let ring5Current = 0;
	let ring4Current = 0;
	let ring3Current = 0;
	let ring2Current = 0;
	let ring1Current = 0;
	let ring0Current = 0;
	//Offset all to center and remove center
	for(let pos in ring5){
		ring5[pos][0] -= multiGen.ring.o5/2;
		ring5[pos][1] -= multiGen.ring.o5/2;
		if(ring5[pos][0] === 0 && ring5[pos][1] === 0){
			ring5[pos][0] = ring5[pos][1] = multiGen.ring.o5/2;
		}
	}
	for(let pos in ring4){
		ring4[pos][0] -= multiGen.ring.o4/2;
		ring4[pos][1] -= multiGen.ring.o4/2;
		if(ring4[pos][0] === 0 && ring4[pos][1] === 0){
			ring4[pos][0] = ring4[pos][1] = multiGen.ring.o4/2;
		}
	}
	for(let pos in ring3){
		ring3[pos][0] -= multiGen.ring.o3/2;
		ring3[pos][1] -= multiGen.ring.o3/2;
		if(ring3[pos][0] === 0 && ring3[pos][1] === 0){
			ring3[pos][0] = ring3[pos][1] = multiGen.ring.o3/2;
		}
	}
	for(let pos in ring2){
		ring2[pos][0] -= multiGen.ring.o2/2;
		ring2[pos][1] -= multiGen.ring.o2/2;
		if(ring2[pos][0] === 0 && ring2[pos][1] === 0){
			ring2[pos][0] = ring2[pos][1] = multiGen.ring.o2/2;
		}
	}
	for(let pos in ring1){
		ring1[pos][0] -= multiGen.ring.o1/2;
		ring1[pos][1] -= multiGen.ring.o1/2;
		if(ring1[pos][0] === 0 && ring1[pos][1] === 0){
			ring1[pos][0] = ring1[pos][1] = multiGen.ring.o1/2;
		}
	}
	for(let pos in ring0){
		ring0[pos][0] -= multiGen.ring.o0/2;
		ring0[pos][1] -= multiGen.ring.o0/2;
		if(ring0[pos][0] === 0 && ring0[pos][1] === 0){
			ring0[pos][0] = ring0[pos][1] = multiGen.ring.o0/2;
		}
	}
	//Shuffle Each Array for better randomness
	function shuffle(array) {
		array.sort(() => Math.random() - 0.5);
	}
	shuffle(ring5);
	shuffle(ring4);
	shuffle(ring3);
	shuffle(ring2);
	shuffle(ring1);
	shuffle(ring0);

	//Disc Sampling Support Function
	function discSampling(ring, area, space, currentGrid){
		//Generates grid starting from 0,0 in the + direction
		let grid;
		let center;
		if(currentGrid){
			center = currentGrid.center;
		} else {
			center = false;
		}
		function* poissonDiscSampler(width, height, radius, center){
			//radius is of the generated area
			//k is maximum number of samples before rejection
			const k = 15
			//radius2 is the minimum distance allowed between spawns
			const radius2 = radius * radius;
			//Math.SQRT1_2 is a constant square root of 0.5 which is ~0.707
			const cellSize = radius * Math.SQRT1_2;
			//Grid
			const gridWidth = Math.ceil(width / cellSize);
			const gridHeight = Math.ceil(height / cellSize);
			let queue = [];
			grid = new Array(gridWidth * gridHeight);
			if(currentGrid){
				for(let each in currentGrid){
					grid[each] = currentGrid[each];
					queue[each] = currentGrid[each];
				}
			}
			//Ignore center object
			if(center){
				yield {add: sample(center, center, null)};
			} else {
				yield {add: sample(width / 2 , height / 2, null)};
			}
			// Pick a random existing sample from the queue.
			pick: while (queue.length) {
				const i = Math.trunc(Math.random() * queue.length);
				const parent = queue[i];
				const seed = Math.random();
				const epsilon = 0.0000001;
				// Make a new candidate.
				for (let j = 0; j < k; ++j) {
					const a = 2 * Math.PI * (seed + 1.0*j/k);
					//Depending on the amount of tries allowed
					//start from 0degrees and move radius to check
					//as the loop continues/fails, keep moving counter-clockwise in equal parts depending on the current attempt number out of max
					//checking each new direction if that space is available
					const r = radius + epsilon;
					const x = parent[0] + r * Math.cos(a);
					const y = parent[1] + r * Math.sin(a);
					//Accept candidates that are inside the allowed extent and farther than 2 * radius to all existing samples.
					//area o0 4 aka outer radiues
					//space i0 0.5 aka inner radius
					if (space <= x && x < area && space <= y && y < area && far(x, y)) {
						//Accepted
						yield {add: sample(x, y), parent};
						//Try Again
						continue pick;
					}
				}
				//Rejected, remove from Queue
				const r = queue.pop();
				if (i < queue.length) queue[i] = r;
					yield {remove: parent};
			}

			function far(x, y) {
				const i = Math.trunc(x / cellSize);
				const j = Math.trunc(y / cellSize);
				const i0 = Math.max(i - 2, 0);
				const j0 = Math.max(j - 2, 0);
				const i1 = Math.min(i + 3, gridWidth);
				const j1 = Math.min(j + 3, gridHeight);
				//Only check surrounding squares of a 2x2 grid from candidate xy center
				//Loop through grid
				for (let j = j0; j < j1; ++j) {
					const o = j * gridWidth;
					for (let i = i0; i < i1; ++i) {
						const s = grid[o + i];
						//only does a check if something on the grid in that position exists
						if (s) {
							//get the difference in grid stored xy with the imported
							const dx = s[0] - x;
							const dy = s[1] - y;
							//pythagorean check for distance. Needs to be at least 2xRadius away from current check point
							if (dx * dx + dy * dy < radius2) return false;
						}
					}
				}
				return true;
			}
			//Accepted Sample, Add to Ring
			function sample(x, y, parent) {
				const s = grid[gridWidth * (Math.trunc(y / cellSize)) + (Math.trunc(x / cellSize))] = [x, y];
				queue.push(s);
				if(ring === 'ring5'){
					ring5.push(s);
				} else if(ring === 'ring4'){
					ring4.push(s);
				} else if(ring === 'ring3'){
					ring3.push(s);
				} else if(ring === 'ring2'){
					ring2.push(s);
				} else if(ring === 'ring1'){
					ring1.push(s);
				} else if(ring === 'ring0'){
					ring0.push(s);
				}
				return s;
			}
		}
		//Init Disc Sampling of Grid
		let gridSample = poissonDiscSampler(area,area,space,center);
		//Continue Disc Sampling
		function next(){
			gridSample.done = gridSample.next().done;
			if(gridSample.done){} else {
				next();
			}
		}
		//Start Disc Sampling of Grid
		next();
		//Prep Grid Array
		let goodGrid = [];
		for(let each in grid){
			if(grid[each]){
				goodGrid.push(grid[each]);
			}
		}
		return goodGrid;
	}
	//Generate Multi Objects Ring Cores w/ Randomization Support
	const genCores = () => {
		//Each Size
		for(let type in sizes){
			let size = Object.assign({}, multiGen[sizes[type]]);
			//Each Object Data
			for(let each in size.objs){
				let ogData = Object.assign({}, size.objs[each]);
				let objData = JSON.parse(JSON.stringify(size.objs[each]));
				let posX;
				let posY;
				let posZ;
				let positionVec3;
				let scaleX;
				let scaleY;
				let scaleZ;
				let rotX;
				let rotY;
				let rotZ;
				let color;
//instanced-mesh="positioning: local"
//instanced-mesh-member="mesh:#instanceTest1"
				//Each Object
				for(let a = 0; a < size.max/size.objs.length; a++){
					objData.id = ogData.id + a;
/* Instanced Mesh struggles with GLTF layers
<script src="https://cdn.jsdelivr.net/gh/diarmidmackenzie/instanced-mesh@v0.5.0/src/instanced-mesh.min.js"></script>
if(a === 0){
	objData.components['instanced-mesh'] = {positioning: 'world'};
} else {
	//Remove gltf component and add instanced mesh
	delete objData.components['gltf-model'];
	objData.components['instanced-mesh-member'] = {mesh: '#'+ogData.id+0};
}*/
					//Color
					if(size.ranColor){
						color = auxl.colorTheoryGen().base;
						objData.material.color = color;
						if(objData.material.emissive){
							objData.material.emissive = color;
						}
					}
					//Texture
					if(size.ranTexture){
						objData.material.src = auxl.patterns[Math.floor(Math.random()*auxl.patterns.length)];
					}
					//Rotation
					rotX = ogData.rotation.x;
					rotY = ogData.rotation.y;
					rotZ = ogData.rotation.z;
					if(size.ranRotX){
						rotX += Math.random() * 360;
					}
					if(size.ranRotY){
						rotY += Math.random() * 360;
					}
					if(size.ranRotZ){
						rotZ += Math.random() * 360;
					}
					objData.rotation = new THREE.Vector3(rotX, rotY, rotZ);
					//Scale
					scaleX = ogData.scale.x;
					scaleY = ogData.scale.y;
					scaleZ = ogData.scale.z;
					if(size.ranScaleX){
						scaleX += Math.random() * size.scaleFlex;
					}
					if(size.ranScaleY){
						scaleY += Math.random() * size.scaleFlex;
					}
					if(size.ranScaleZ){
						scaleZ += Math.random() * size.scaleFlex;
					}
					objData.scale = new THREE.Vector3(scaleX, scaleY, scaleZ);
					//Position
					posY = ogData.position.y;
					if(size.ranYPos){
						posY += Math.random() * size.yPosFlex;
					}
					//If ran out of predefined positions, choose random
					if(size.rings === 0){
						if(ring0Current < ring0.length){
							posX = ring0[ring0Current][0];
							posZ = ring0[ring0Current][1];
							ring0Current++;
						} else {
							posX = (Math.random() * (multiGen.ring.o0*2) - multiGen.ring.o0) + multiGen.ring.i0;
							posZ = (Math.random() * (multiGen.ring.o0*2) - multiGen.ring.o0) + multiGen.ring.i0;
						}
					} else if(size.rings === 1){
						if(ring1Current < ring1.length){
							posX = ring1[ring1Current][0];
							posZ = ring1[ring1Current][1];
							ring1Current++;
						} else {
							posX = (Math.random() * (multiGen.ring.o1*2) - multiGen.ring.o1) + multiGen.ring.i1;
							posZ = (Math.random() * (multiGen.ring.o1*2) - multiGen.ring.o1) + multiGen.ring.i1;
						}
					} else if(size.rings === 2){
						if(ring2Current < ring2.length){
							posX = ring2[ring2Current][0];
							posZ = ring2[ring2Current][1];
							ring2Current++;
						} else {
							posX = (Math.random() * (multiGen.ring.o2*2) - multiGen.ring.o2) + multiGen.ring.i2;
							posZ = (Math.random() * (multiGen.ring.o2*2) - multiGen.ring.o2) + multiGen.ring.i2;
						}
					} else if(size.rings === 3){
						if(ring3Current < ring3.length){
							posX = ring3[ring3Current][0];
							posZ = ring3[ring3Current][1];
							ring3Current++;
						} else {
							posX = (Math.random() * (multiGen.ring.o3*2) - multiGen.ring.o3) + multiGen.ring.i3;
							posZ = (Math.random() * (multiGen.ring.o3*2) - multiGen.ring.o3) + multiGen.ring.i3;
						}
					} else if(size.rings === 4){
						if(ring4Current < ring4.length){
							posX = ring4[ring4Current][0];
							posZ = ring4[ring4Current][1];
							ring4Current++;
						} else {
							posX = (Math.random() * (multiGen.ring.o4*2) - multiGen.ring.o4) + multiGen.ring.i4;
							posZ = (Math.random() * (multiGen.ring.o4*2) - multiGen.ring.o4) + multiGen.ring.i4;
						}
					} else if(size.rings === 5){
						if(ring5Current < ring5.length){
							posX = ring5[ring5Current][0];
							posZ = ring5[ring5Current][1];
							ring5Current++;
						} else {
							posX = (Math.random() * (multiGen.ring.o5*2) - multiGen.ring.o5) + multiGen.ring.i5;
							posZ = (Math.random() * (multiGen.ring.o5*2) - multiGen.ring.o5) + multiGen.ring.i5;
						}
					} 
					objData.position = new THREE.Vector3(posX, posY, posZ);
					//Add randomized Core to All
					multiGen.assets[sizes[type]].push(auxl.Core(objData));
				}
			}
		}
	}
	//Spawn All Assets
	const SpawnMultiAsset = () => {
		if(multiGen.inScene){}else{
			genCores();
			for(let type in sizes){
				let size = multiGen.assets[sizes[type]];
				for(let each in size){
					size[each].SpawnCore();
				}
			}
			multiGen.inScene = true;
		}
	}
	//Despawn All Assets
	const DespawnMultiAsset = () => {
		if(multiGen.inScene){
			for(let type in sizes){
				let size = multiGen.assets[sizes[type]];
				for(let each in size){
					size[each].DespawnCore();
				}
			}
			auxl.RemoveFromTracker(multiGen.id);
			multiGen.inScene = false;
		}
	}
	//Toggle Spawn
	const ToggleSpawn = () => {
		if(multiGen.inScene){
			DespawnMultiAsset();
		} else {
			SpawnMultiAsset();
		}
	}
	//Set Flag & Value to Object - Single or Array
	const SetFlag = (flagValue) => {
		if(Array.isArray(flagValue)){
			for(let each in flagValue){
				multiGen[flagValue[each].flag] = flagValue[each].value;
				auxl.saveToProfile({auxlObject: multiGen.id, type: 'multiGen', sub: false, name: flagValue[each].flag, data: flagValue[each].value});
			}
		} else {
			multiGen[flagValue.flag] = flagValue.value;
			auxl.saveToProfile({auxlObject: multiGen.id, type: 'multiGen', sub: false, name: flagValue.flag, data: flagValue.value});
		}
	}
	//Retreive Flag Value from Object - Single or Array
	const GetFlag = (flag) => {
		if(Array.isArray(flag)){
			let flagArray = [];
			for(let each in flag){
				flagArray.push(multiGen(flag[each]));
			}
			return flagArray;
		} else {
			return multiGen[flag];
		}
	}

	return {multiGen, SpawnMultiAsset, DespawnMultiAsset, ToggleSpawn, SetFlag, GetFlag}

}

//
//Teleport
//Generate Teleport Points at Array of Locations
const Teleport = (auxl, id, locations) => {
//Allow to select mutli-interactino circle, light beam and more.
	let teleport = {};
	teleport.id = id;
	teleport.inScene = false;
	teleport.all = [];
	let teleportLayer;
	let teleportLayerData;
	let teleportParent;
	let teleportParentId = '';
	let teleportChild0;//Confirm
	let teleportChild0Id = '';
	let teleportChild1;//Cancel
	let teleportChild1Id = '';
	let spotColor;

	//Build Teleport Multi-Interaction Layer
	for(let spot in locations){
		spotColor = auxl.colorTheoryGen().base;
		teleportParentId = 'teleport' + spot + 'Parent';
		auxl.teleportParentData.id = teleportParentId;
		auxl.teleportParentData.position = locations[spot];
		teleportParent = auxl.Core(auxl.teleportParentData);
		teleportChild0Id = 'teleport' + spot + 'Confirm';
		auxl.teleportConfirmData.id = teleportChild0Id;
		auxl.teleportConfirmData.material.color = spotColor;
		auxl.teleportConfirmData.material.emissive = spotColor;
		teleportChild0 = auxl.Core(auxl.teleportConfirmData);
		teleportChild1Id = 'teleport' + spot + 'Cancel';
		auxl.teleportCancelData.id = teleportChild1Id;
		auxl.teleportCancelData.material.color = spotColor.compl;
		auxl.teleportCancelData.material.emissive = spotColor.compl;
		teleportChild1 = auxl.Core(auxl.teleportCancelData);
		teleportLayerData = {
			parent: {core: teleportParent},
			child0: {core: teleportChild0},
			child1: {core: teleportChild1},
		}
		teleport.all[spot] = auxl.Layer('teleport'+spot, teleportLayerData);
	}
	//Spawn Teleports
	const SpawnTeleport = () => {
		if(teleport.inScene){}else{
			for(let each in teleport.all){
				teleport.all[each].SpawnLayer();
			}
			teleport.inScene = true;
		}
	}
	//Despawn Teleports
	const DespawnTeleport = () => {
		if(teleport.inScene){
			for(let each in teleport.all){
				teleport.all[each].DespawnLayer();
			}
			auxl.RemoveFromTracker(teleport.id);
			teleport.inScene = false;
		}
	}
	//Toggle Spawn
	const ToggleSpawn = () => {
		if(teleport.inScene){
			DespawnTeleport();
		} else {
			SpawnTeleport();
		}
	}
	//Set Flag & Value to Object - Single or Array
	const SetFlag = (flagValue) => {
		if(Array.isArray(flagValue)){
			for(let each in flagValue){
				teleport[flagValue[each].flag] = flagValue[each].value;
				auxl.saveToProfile({auxlObject: teleport.id, type: 'teleport', sub: false, name: flagValue[each].flag, data: flagValue[each].value});
			}
		} else {
			teleport[flagValue.flag] = flagValue.value;
			auxl.saveToProfile({auxlObject: teleport.id, type: 'teleport', sub: false, name: flagValue.flag, data: flagValue.value});
		}
	}
	//Retreive Flag Value from Object - Single or Array
	const GetFlag = (flag) => {
		if(Array.isArray(flag)){
			let flagArray = [];
			for(let each in flag){
				flagArray.push(teleport(flag[each]));
			}
			return flagArray;
		} else {
			return teleport[flag];
		}
	}

	return {teleport, SpawnTeleport, DespawnTeleport, ToggleSpawn, SetFlag, GetFlag,};
}

//
//Export


/***/ }),

/***/ "./src/system/grid.js":
/*!****************************!*\
  !*** ./src/system/grid.js ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Collision: () => (/* binding */ Collision),
/* harmony export */   Gate: () => (/* binding */ Gate),
/* harmony export */   GridLayout: () => (/* binding */ GridLayout)
/* harmony export */ });
//
//AUXL : A-Frame UX Library
//v0.3 Engine
//https://github.com/Minty-Crisp/AUXL
//
//Created by Minty-Crisp (mintycrisp.com)
//
//Grid
//
//Collision
//GridLayout
//Gate

//
//Collision
//Build a collision map in 0.5 meter sections 
//Allow or Deny moving outside of collision map
const Collision = (auxl) => {
//lower to higher number
//0.5 increments per grid square
//start cube grid position
//end cube grid position

	let grid = {};
	grid.size = 0;
	grid.topHeight = 0;
	grid.bottomHeight = 0;
	grid.collide = {};
	grid.trigger = {};
	grid.triggersActive = false;
	grid.edgeSpawned = false;
	grid.edges = {};
	grid.edge = auxl.mapEdgeBasic;
	grid.waiting = false;
	grid.spawnWaiting = {};
	grid.waitingMove = false;
	grid.moveWaiting = {};

	//Enable Collision Checks for Locomotion
	const EnableCollision = () => {
		auxl.collision = true;
	}
	EnableCollision();
	//Disable Collision Checks for Locomotion
	const DisableCollision = () => {
		auxl.collision = false;
	}

	//Build Blank Collision & Trigger Map
	const BuildMap = (size, height) => {
		grid.size = size;
		grid.topHeight = height.top || 2;
		grid.bottomHeight = height.bottom || 0;
		BlankMap();
		BlankMapTrigger();
	}

	//
	//Collision
	//Blank Map @ Size
	const BlankMap = () => {
		//Clear Current Map and Objects
		grid.collide = {};
		auxl.collisionMap[0] = [];
		auxl.collisionMap[1] = [];

		//Build Top Map
		if(grid.topHeight > 0){
			for(let level = 0; level < grid.topHeight; level++){
				BlankMapLevel(auxl.collisionMap[0], level);
			}
		}
		//Build Bottom Map
		if(grid.bottomHeight > 0){
			for(let level = 0; level < grid.bottomHeight; level++){
				BlankMapLevel(auxl.collisionMap[1], level);
			}
		}
	}
	//Build a Single Height Level Collision Map
	const BlankMapLevel = (array, level) => {
		//Blank Level
		let levelMap = [[],[],[],[]];
		//Top Left
		levelMap[0] = [];
		levelMap[0] = Array(grid.size/2).fill(0, 0);
		for(let each in levelMap[0]){
			levelMap[0][each] = Array(grid.size/2).fill(0, 0);
		}
		//Top Right
		levelMap[1] = [];
		levelMap[1] = Array(grid.size/2).fill(0, 0);
		for(let each in levelMap[1]){
			levelMap[1][each] = Array(grid.size/2).fill(0, 0);
		}
		//Bottom Left
		levelMap[2] = [];
		levelMap[2] = Array(grid.size/2).fill(0, 0);
		for(let each in levelMap[2]){
			levelMap[2][each] = Array(grid.size/2).fill(0, 0);
		}
		//Bottom Right
		levelMap[3] = [];
		levelMap[3] = Array(grid.size/2).fill(0, 0);
		for(let each in levelMap[3]){
			levelMap[3][each] = Array(grid.size/2).fill(0, 0);
		}
		//Add to System
		array.push(levelMap);
	}
	//Add to Map
	const OnMap = (obj) => {
		if(grid.collide[obj.name]){} else {
			grid.collide[obj.name] = {};
		}
		grid.collide[obj.name]['space'+obj.spaces] = {};
		grid.collide[obj.name]['space'+obj.spaces].pos = obj.pos;
		
	}
	//Remove from Map
	const OffMap = (name) => {
		delete grid.collide[name];
	}
	//Check Map for no other Overlapping Objects
	const CheckMapOverlap = (obj) => {
		for(let each in grid.collide){
			if(each === obj.name){}else{
				for(let space in grid.collide[each]){
					if(grid.collide[each][space].pos.x === obj.pos.x && grid.collide[each][space].pos.y === obj.pos.y && grid.collide[each][space].pos.z === obj.pos.z){
						return false;
					}
				}
			}
		}
		return true;
	}
	//Update Map Multi Space
	const UpdateMapArea = (name,start,end,collide) => {
		let pos = {x: start.x, y: start.y, z: start.z};
		let xSpaces;
		let xCurrent;
		let ySpaces;
		let yCurrent;
		let zSpaces;
		let zCurrent;
		let mapKey;
		let spaces = 0;
		//Assign Map Key Code Add or Remove
		if(collide){
			mapKey = 1;
		} else {
			mapKey = 0;
		}
		//Calc X
		function calcXPos(){
			if(start.x === end.x){
				xSpaces = 1;
			} else {
				xSpaces = start.x - end.x;
				xSpaces *= 2;
				if(xSpaces < 0){
					xSpaces *= -1;
				}
				xSpaces += 1;
			}
			pos.x = start.x;
			xCurrent = xSpaces;
		}
		//Calc Y
		function calcYPos(){
			if(start.y === end.y){
				ySpaces = 1;
			} else {
				ySpaces = Math.abs(start.y) + Math.abs(end.y);
				ySpaces += 1;
			}
			pos.y = start.y;
			yCurrent = ySpaces;
		}
		//Calc Z
		function calcZPos(){
			if(start.z === end.z){
				zSpaces = 1;
			} else {
				zSpaces = start.z - end.z;
				zSpaces *= 2;
				if(zSpaces < 0){
					zSpaces *= -1;
				}
				zSpaces += 1;
			}
			pos.z = start.z;
			zCurrent = zSpaces;
		}
		//Assign Map Collisions
		calcYPos();
		for(let y = 0; y < ySpaces;y++){
			calcZPos();
			for(let z = 0; z < zSpaces;z++){
				calcXPos();
				for(let x = 0; x < xSpaces;x++){
					if(mapKey === 0){
						//Removing
						//If another object doesn't exist in same space, clear it
						if(CheckMapOverlap({name, pos:{x:pos.x, y:pos.y, z:pos.z}})){
							UpdateMap(pos,mapKey);
						}
						spaces++;
					} else if(mapKey === 1){
						//Adding
						UpdateMap(pos,mapKey);
						spaces++;
						OnMap({name, spaces, pos:{x:pos.x, y:pos.y, z:pos.z}});
					}
					//Next X Space
					xCurrent--;
					if(xCurrent > 0){
						pos.x += 0.5;
					}
				}
				//Next Z Space
				zCurrent--;
				if(zCurrent > 0){
					pos.z += 0.5;
				}
			}
			//Next Y Space
			yCurrent--;
			if(yCurrent > 0){
				pos.y += 1;
			}
		}
		//Remove from grid.collide
		if(mapKey === 0){
			OffMap(name);
		}
	}
	//Update Map Single Space
	const UpdateMap = (pos, mapKey) => {
		//0.5 meter to integer grid adjustment
		let xPos = pos.x * 2;
		let yPos = pos.y;
		let zPos = pos.z * 2;
		//console.log({x: xPos, z: zPos})
		let map;
		if(yPos >= 0){
			//Top
			map = 0;
		} else {
			//Bottom
			map = 1;
		}
		//Add a mechanism to detect if the collision it is adding is the same sq that the player is in. If so, do not add until the player has moved out of the square.
		if(xPos < 0 && zPos < 0){
			//Top Left - 0
			//Loop 1 : -Z
			//Loop 2 : -X
			auxl.collisionMap[map][yPos][0][zPos * -1][xPos * -1] = mapKey;
		} else if(pos.x >= 0 && zPos < 0){
			//Top Right - 1
			//Loop 1 : -Z
			//Loop 2 : +X
			auxl.collisionMap[map][yPos][1][zPos * -1][xPos] = mapKey
		} else if(xPos < 0 && zPos >= 0){
			//Bottom Left - 2
			//Loop 1 : +Z
			//Loop 2 : -X
			auxl.collisionMap[map][yPos][2][zPos][xPos * -1] = mapKey;
		} else if(xPos >= 0 && zPos >= 0){
			//Bottom Right - 3
			//Loop 1 : +Z
			//Loop 2 : +X
			auxl.collisionMap[map][yPos][3][zPos][xPos] = mapKey;
		} else {
			console.log('Update out of bounds')
			//resize map
		}
	}
	//Check for Player Collision
	const CheckForPlayer = (grid) => {
		let playerGrid = auxl.player.GetPlayerInfo().grid;
		if(grid.start.x <= playerGrid.x && grid.end.x >= playerGrid.x && grid.start.y <= playerGrid.y && grid.end.y >= playerGrid.y && grid.start.z <= playerGrid.z && grid.end.z >= playerGrid.z){
			//Player Occupied
			return false;
		} else {
			if(auxl.player.layer.standing){
				playerGrid.y += 1;
				if(grid.start.x <= playerGrid.x && grid.end.x >= playerGrid.x && grid.start.y <= playerGrid.y && grid.end.y >= playerGrid.y && grid.start.z <= playerGrid.z && grid.end.z >= playerGrid.z){
					return false;
				} else {
					return true;
				}
			} else {
				return true;
			}
		}
	}
	//Check for Map Obstacles 0.5 Meter Forward or Side
	const CheckMapObstacles = (pos) => {

		let newPos = {};
		newPos.x = pos.x * 2;
		newPos.y = pos.y || 0;
		newPos.z = pos.z * 2;
		let map;
		if(newPos.y >= 0){
			//Top
			map = 0;
		} else {
			//Bottom
			map = 1;
		}

		//Height map checks for overflow
		if(newPos.y >= 0){
			if(auxl.collisionMap[map].length <= newPos.y){
				console.log('height out of bounds');
				if(auxl.mapEdge){
					return false;
				} else {
					return true;
				}
			}
		} else {
			if(auxl.collisionMap[map].length >= newPos.y*-1){
				console.log('height out of bounds');
				if(auxl.mapEdge){
					return false;
				} else {
					return true;
				}
			}
		}
		//Quadrant Checks
		if(newPos.x < 0 && newPos.z < 0){
			//Top Left - 0
			//Loop 1 : -Z
			//Loop 2 : -X
			if(auxl.collisionMap[map][newPos.y][0].length > newPos.z * -1){
				if(auxl.collisionMap[map][newPos.y][0][newPos.z * -1].length > newPos.x * -1){
					//console.log('Within Map');
					if(auxl.collisionMap[map][newPos.y][0][newPos.z * -1][newPos.x * -1] === 0){
						return true;
					} else {
						return false;
					}
				} else {
					//console.log('Out of Map');
					if(auxl.mapEdge){
						return false;
					} else {
						return true;
					}
				}
			} else {
				//console.log('Out of Map');
				if(auxl.mapEdge){
					return false;
				} else {
					return true;
				}
			}
		} else if(newPos.x >= 0 && newPos.z < 0){
			//Top Right - 1
			//Loop 1 : -Z
			//Loop 2 : +X
			if(auxl.collisionMap[map][newPos.y][1].length > newPos.z * -1){
				if(auxl.collisionMap[map][newPos.y][1][newPos.z * -1].length > newPos.x){
					//console.log('Within Map');
					if(auxl.collisionMap[map][newPos.y][1][newPos.z * -1][newPos.x] === 0){
						//User can move
						return true;
					} else {
						return false;
					}
				} else {
					//console.log('Out of Map');
					if(auxl.mapEdge){
						return false;
					} else {
						return true;
					}
				}
			} else {
				//console.log('Out of Map');
				if(auxl.mapEdge){
					return false;
				} else {
					return true;
				}
			}
		} else if(newPos.x < 0 && newPos.z >= 0){
			//Bottom Left - 2
			//Loop 1 : +Z
			//Loop 2 : -X
			if(auxl.collisionMap[map][newPos.y][2].length > newPos.z){
				if(auxl.collisionMap[map][newPos.y][2][newPos.z].length > newPos.x * -1){
					//console.log('Within Map');
					if(auxl.collisionMap[map][newPos.y][2][newPos.z][newPos.x * -1] === 0){
						//User can move
						return true;
					} else {
						return false;
					}
				} else {
					//console.log('Out of Map');
					if(auxl.mapEdge){
						return false;
					} else {
						return true;
					}
				}
			} else {
				//console.log('Out of Map');
				if(auxl.mapEdge){
					return false;
				} else {
					return true;
				}
			}
		} else if(newPos.x >= 0 && newPos.z >= 0){
			//Bottom Right - 3
			//Loop 1 : +Z
			//Loop 2 : +X
			if(auxl.collisionMap[map][newPos.y][3].length > newPos.z){
				if(auxl.collisionMap[map][newPos.y][3][newPos.z].length > newPos.x){
					if(auxl.collisionMap[map][newPos.y][3][newPos.z][newPos.x] === 0){
						//User can move
						return true;
					} else {
						return false;
					}
				} else {
					//console.log('Out of Map');
					if(auxl.mapEdge){
						return false;
					} else {
						return true;
					}
				}
			} else {
				//console.log('Out of Map');
				if(auxl.mapEdge){
					return false;
				} else {
					return true;
				}
			}
		} else {
			return false;
		}
	}
	//Check for Map Obstacles 0.5 Meter and block diagonal movement if forward and side are blocked, but not the actual diagonal spot
	const CheckMapObstaclesDiagonal = (goPos, atPos) => {

		let pos = {};
		pos.x = atPos.x;
		pos.y = atPos.y;
		pos.z = atPos.z;
		pos.x *= 2;
		pos.z *= 2;
		let map;
		if(pos.y >= 0){
			//Top
			map = 0;
		} else {
			//Bottom
			map = 1;
		}

		let newPos = {};
		newPos.x = goPos.x;
		newPos.y = goPos.y;
		newPos.z = goPos.z;
		newPos.x *= 2;
		newPos.z *= 2;
		let newMap;
		if(newPos.y >= 0){
			//Top
			newMap = 0;
		} else {
			//Bottom
			newMap = 1;
		}

		let travelDirection;
		let travelElevation;

		//World direction of movement
		if(newPos.x === pos.x && newPos.z === pos.z){
			//console.log('Same Square')
			travelDirection = 'same';
		} else {
			if(newPos.x === pos.x || newPos.z === pos.z){
				if(newPos.x === pos.x){
					//console.log('Forward|Backward');
					travelDirection = 'z';
				} else if(newPos.z === pos.z){
					//console.log('Side to Side');
					travelDirection = 'x';
				}
			} else {
				//console.log('Diagonal');
				if(newPos.x > pos.x){
					//Right
					if(newPos.z > pos.z){
						//Backward
						travelDirection = 'reverseRight';
					} else {
						//Forward
						travelDirection = 'forwardRight';
					}
				} else {
					//Left
					if(newPos.z > pos.z){
						//Backward
						travelDirection = 'reverseLeft';
					} else {
						//Forward
						travelDirection = 'forwardLeft';
					}
				}
			}
		}
		//Travel Elevation
		if(newPos.y === pos.y){
			//console.log('Same Square')
			travelElevation = 'same';
		} else {
			//console.log('Diagonal');
			if(newPos.y > pos.y){
				travelElevation = 'up';
			} else {
				travelElevation = 'down';
			}
		}
		//Height map checks for overflow
		if(newPos.y >= 0){
			if(auxl.collisionMap[map].length <= newPos.y){
				console.log('height out of bounds');
				if(auxl.mapEdge){
					return false;
				} else {
					return true;
				}
			}
		} else {
			if(auxl.collisionMap[map].length >= newPos.y*-1){
				console.log('height out of bounds');
				if(auxl.mapEdge){
					return false;
				} else {
					return true;
				}
			}
		}

		//Map Lookup
		function mapLookup(m,q,x,y,z){
			if(typeof auxl.collisionMap[m][y] === 'undefined'){
				//console.log({q,x,y,z});
				//console.log('Undefined')
				if(m === 0){
					if(y < 0){
						if(auxl.collisionMap[1] === 'undefined'){
							//console.log('Bottom map missing')
						} else {
							mapLookup(1,q,x,y*-1,z);
						}
					}
				} else if(m === 1){
					if(y < 0){
						if(auxl.collisionMap[0] === 'undefined'){
							//console.log('Top map missing')
						} else {
							mapLookup(0,q,x,y*-1,z);
						}
					}
				}
			} else if(typeof auxl.collisionMap[m][y][q][z] === 'undefined'){
				//console.log({q,x,y,z});
				//console.log('Undefined')
				if(q === 0){
					if(z < 0){
						mapLookup(m,2,x,y,z*-1);
					}
				} else if(q === 1){
					if(z < 0){
						mapLookup(m,3,x,y,z*-1);
					}
				} else if(q === 2){
					if(z < 0){
						mapLookup(m,0,x,y,z*-1);
					}
				} else if(q === 3){
					if(z < 0){
						mapLookup(m,1,x,y,z*-1);
					}
				}
			} else if(typeof auxl.collisionMap[m][y][q][z][x] === 'undefined'){
				//console.log({q,x,y,z});
				//console.log('Undefined')
				if(q === 0){
					if(x < 0){
						mapLookup(m,1,x*-1,y,z);
					}
				} else if(q === 1){
					if(x < 0){
						mapLookup(m,0,x*-1,y,z);
					}
				} else if(q === 2){
					if(x < 0){
						mapLookup(m,3,x*-1,y,z);
					}
				} else if(q === 3){
					if(x < 0){
						mapLookup(m,2,x*-1,y,z);
					}
				}
			} else {
				//console.log(auxl.collisionMap[m][y][q][z][x])
				return auxl.collisionMap[m][y][q][z][x];
			}
		}

		//Check Map in Direction
		if(newPos.x < 0 && newPos.z < 0){
			//Top Left - 0
			//Loop 1 : -Z
			//Loop 2 : -X
			if(auxl.collisionMap[newMap][newPos.y][0].length > newPos.z * -1){
				if(auxl.collisionMap[newMap][newPos.y][0][newPos.z * -1].length > newPos.x * -1){
					//console.log('Within Map');
					//if(auxl.collisionMap[newMap][newPos.y][0][newPos.z * -1][newPos.x * -1] === 0){
if(mapLookup(newMap,0,newPos.x*-1,newPos.y,newPos.z*-1) === 0){
						//Block diagonal movement if both adjacent squares are occupied
						if(travelDirection === 'forwardRight'){
							//-Z
							//+X
							//if(auxl.collisionMap[newMap][newPos.y][0][(newPos.z * -1)+1][newPos.x * -1] === 1 && auxl.collisionMap[newMap][newPos.y][0][newPos.z * -1][(newPos.x * -1)-1] === 1){
if(mapLookup(newMap,0,newPos.x*-1,newPos.y,(newPos.z*-1)+1) !== 0 && mapLookup(newMap,0,(newPos.x*-1)-1,newPos.y,newPos.z*-1) !== 0){
								return false;
							} else {
								return true;
							}
						} else if(travelDirection === 'forwardLeft'){
							//-Z
							//-X
//auxl.collisionMap[newMap][newPos.y][0][((newPos.z * -1) + 1)] is undefined
							//if(auxl.collisionMap[newMap][newPos.y][0][(newPos.z * -1)+1][newPos.x * -1] !== 0 && auxl.collisionMap[newMap][newPos.y][0][newPos.z * -1][(newPos.x * -1)+1] !== 0){
if(mapLookup(newMap,0,newPos.x*-1,newPos.y,(newPos.z*-1)+1) !== 0 && mapLookup(newMap,0,(newPos.x*-1)+1,newPos.y,newPos.z*-1) !== 0){
								return false;
							} else {
								return true;
							}
						} else if(travelDirection === 'reverseRight'){
							//+Z
							//+X
							//if(auxl.collisionMap[newMap][newPos.y][0][(newPos.z * -1)-1][newPos.x * -1] !== 0 && auxl.collisionMap[newMap][newPos.y][0][newPos.z * -1][(newPos.x * -1)-1] !== 0){
if(mapLookup(newMap,0,newPos.x*-1,newPos.y,(newPos.z*-1)-1) !== 0 && mapLookup(newMap,0,(newPos.x*-1)-1,newPos.y,newPos.z*-1) !== 0){
								return false;
							} else {
								return true;
							}
						} else if(travelDirection === 'reverseLeft'){
							//+Z
							//-X
							//if(auxl.collisionMap[newMap][newPos.y][0][(newPos.z * -1)-1][newPos.x * -1] !== 0 && auxl.collisionMap[newMap][newPos.y][0][newPos.z * -1][(newPos.x * -1)+1] !== 0){
if(mapLookup(newMap,0,newPos.x*-1,newPos.y,(newPos.z*-1)-1) !== 0 && mapLookup(newMap,0,(newPos.x*-1)+1,newPos.y,newPos.z*-1) !== 0){
								return false;
							} else {
								return true;
							}
						} else {
							return true;
						}
					} else {
						return false;
					}
				} else {
					//console.log('Out of Map');
					if(auxl.mapEdge){
						return false;
					} else {
						return true;
					}
				}
			} else {
				//console.log('Out of Map');
				if(auxl.mapEdge){
					return false;
				} else {
					return true;
				}
			}
		} else if(newPos.x >= 0 && newPos.z < 0){
			//Top Right - 1
			//Loop 1 : -Z
			//Loop 2 : +X
			if(auxl.collisionMap[newMap][newPos.y][1].length > newPos.z * -1){
				if(auxl.collisionMap[newMap][newPos.y][1][newPos.z * -1].length > newPos.x){
					//console.log('Within Map');
					//if(auxl.collisionMap[newMap][newPos.y][1][newPos.z * -1][newPos.x] === 0){
if(mapLookup(newMap,1,newPos.x,newPos.y,newPos.z*-1) === 0){
						//Block diagonal movement if both adjacent squares are occupied
						if(travelDirection === 'forwardRight'){
							//-Z
							//+X
							//if(auxl.collisionMap[newMap][newPos.y][1][(newPos.z * -1)+1][newPos.x] !== 0 && auxl.collisionMap[newMap][newPos.y][1][newPos.z * -1][(newPos.x)-1] !== 0){
if(mapLookup(newMap,1,newPos.x,newPos.y,(newPos.z*-1)+1) !== 0 && mapLookup(newMap,1,newPos.x-1,newPos.y,newPos.z*-1) !== 0){
								return false;
							} else {
								return true;
							}
						} else if(travelDirection === 'forwardLeft'){
							//-Z
							//-X
							//if(auxl.collisionMap[newMap][newPos.y][1][(newPos.z * -1)+1][newPos.x] !== 0 && auxl.collisionMap[newMap][newPos.y][1][newPos.z * -1][(newPos.x)+1] !== 0){
if(mapLookup(newMap,1,newPos.x,newPos.y,(newPos.z*-1)+1) !== 0 && mapLookup(newMap,1,newPos.x+1,newPos.y,newPos.z*-1) !== 0){
								return false;
							} else {
								return true;
							}
						} else if(travelDirection === 'reverseRight'){
							//+Z
							//+X
							//if(auxl.collisionMap[newMap][newPos.y][1][(newPos.z * -1)-1][newPos.x] !== 0 && auxl.collisionMap[newMap][newPos.y][1][newPos.z * -1][(newPos.x)-1] !== 0){
if(mapLookup(newMap,1,newPos.x,newPos.y,(newPos.z*-1)-1) !== 0 && mapLookup(newMap,1,newPos.x-1,newPos.y,newPos.z*-1) !== 0){
								return false;
							} else {
								return true;
							}
						} else if(travelDirection === 'reverseLeft'){
							//+Z
							//-X
							//if(auxl.collisionMap[newMap][newPos.y][1][(newPos.z * -1)-1][newPos.x] !== 0 && auxl.collisionMap[newMap][newPos.y][1][newPos.z * -1][(newPos.x)+1] !== 0){
if(mapLookup(newMap,1,newPos.x,newPos.y,(newPos.z*-1)-1) !== 0 && mapLookup(newMap,1,newPos.x+1,newPos.y,newPos.z*-1) !== 0){
								return false;
							} else {
								return true;
							}
						} else {
							return true;
						}
					} else {
						return false;
					}
				} else {
					//console.log('Out of Map');
					if(auxl.mapEdge){
						return false;
					} else {
						return true;
					}
				}
			} else {
				//console.log('Out of Map');
				if(auxl.mapEdge){
					return false;
				} else {
					return true;
				}
			}
		} else if(newPos.x < 0 && newPos.z >= 0){
			//Bottom Left - 2
			//Loop 1 : +Z
			//Loop 2 : -X
			if(auxl.collisionMap[newMap][newPos.y][2].length > newPos.z){
				if(auxl.collisionMap[newMap][newPos.y][2][newPos.z].length > newPos.x * -1){
					//console.log('Within Map');
					//if(auxl.collisionMap[newMap][newPos.y][2][newPos.z][newPos.x * -1] === 0){
if(mapLookup(newMap,2,newPos.x*-1,newPos.y,newPos.z) === 0){
						//Block diagonal movement if both adjacent squares are occupied
						if(travelDirection === 'forwardRight'){
							//-Z
							//+X
							//if(auxl.collisionMap[newMap][newPos.y][2][(newPos.z)+1][newPos.x * -1] !== 0 && auxl.collisionMap[newMap][newPos.y][2][newPos.z][(newPos.x * -1)-1] !== 0){
if(mapLookup(newMap,2,newPos.x*-1,newPos.y,newPos.z+1) !== 0 && mapLookup(newMap,2,(newPos.x*-1)-1,newPos.y,newPos.z) !== 0){
								return false;
							} else {
								return true;
							}
						} else if(travelDirection === 'forwardLeft'){
							//-Z
							//-X
							//if(auxl.collisionMap[newMap][newPos.y][2][(newPos.z)+1][newPos.x * -1] !== 0 && auxl.collisionMap[newMap][newPos.y][2][newPos.z][(newPos.x * -1)+1] !== 0){
if(mapLookup(newMap,2,newPos.x*-1,newPos.y,newPos.z+1) !== 0 && mapLookup(newMap,2,(newPos.x*-1)+1,newPos.y,newPos.z) !== 0){
								return false;
							} else {
								return true;
							}
						} else if(travelDirection === 'reverseRight'){
							//+Z
							//+X
//uxl.collisionMap[newMap][newPos.y][2][(newPos.z - 1)] is undefined
							//if(auxl.collisionMap[newMap][newPos.y][2][(newPos.z)-1][newPos.x * -1] !== 0 && auxl.collisionMap[newMap][newPos.y][2][newPos.z][(newPos.x * -1)-1] !== 0){
if(mapLookup(newMap,2,newPos.x*-1,newPos.y,newPos.z-1) !== 0 && mapLookup(newMap,2,(newPos.x*-1)-1,newPos.y,newPos.z) !== 0){
								return false;
							} else {
								return true;
							}
						} else if(travelDirection === 'reverseLeft'){
							//+Z
							//-X
							//if(auxl.collisionMap[newMap][newPos.y][2][(newPos.z)-1][newPos.x * -1] !== 0 && auxl.collisionMap[newMap][newPos.y][2][newPos.z][(newPos.x * -1)+1] !== 0){
if(mapLookup(newMap,2,newPos.x*-1,newPos.y,newPos.z-1) !== 0 && mapLookup(newMap,2,(newPos.x*-1)+1,newPos.y,newPos.z) !== 0){
								return false;
							} else {
								return true;
							}
						} else {
							return true;
						}
					} else {
						return false;
					}
				} else {
					//console.log('Out of Map');
					if(auxl.mapEdge){
						return false;
					} else {
						return true;
					}
				}
			} else {
				//console.log('Out of Map');
				if(auxl.mapEdge){
					return false;
				} else {
					return true;
				}
			}
		} else if(newPos.x >= 0 && newPos.z >= 0){
			//Bottom Right - 3
			//Loop 1 : +Z
			//Loop 2 : +X
			if(auxl.collisionMap[newMap][newPos.y][3].length > newPos.z){
				if(auxl.collisionMap[newMap][newPos.y][3][newPos.z].length > newPos.x){
					//if(auxl.collisionMap[newMap][newPos.y][3][newPos.z][newPos.x] === 0){
if(mapLookup(newMap,3,newPos.x,newPos.y,newPos.z) === 0){
						//Block diagonal movement if both adjacent squares are occupied
						if(travelDirection === 'forwardRight'){
							//-Z
							//+X
							//if(auxl.collisionMap[newMap][newPos.y][3][newPos.z+1][newPos.x] !== 0 && auxl.collisionMap[newMap][newPos.y][3][newPos.z][newPos.x-1] !== 0){
if(mapLookup(newMap,3,newPos.x,newPos.y,newPos.z+1) !== 0 && mapLookup(newMap,3,newPos.x-1,newPos.y,newPos.z) !== 0){
								return false;
							} else {
								return true;
							}
						} else if(travelDirection === 'forwardLeft'){
							//-Z
							//-X
							//if(auxl.collisionMap[newMap][newPos.y][3][newPos.z+1][newPos.x] !== 0 && auxl.collisionMap[newMap][newPos.y][3][newPos.z][newPos.x+1] !== 0){
if(mapLookup(newMap,3,newPos.x,newPos.y,newPos.z+1) !== 0 && mapLookup(newMap,3,newPos.x+1,newPos.y,newPos.z) !== 0){
								return false;
							} else {
								return true;
							}
						} else if(travelDirection === 'reverseRight'){
							//+Z
							//+X
// auxl.collisionMap[newMap][newPos.y][3][(newPos.z - 1)] is undefined
//auxl.collisionMap[newMap][newPos.y][3][(newPos.z - 1)] is undefined
//auxl.collisionMap[newMap][newPos.y][3][(newPos.z - 1)] is undefined
							//if(auxl.collisionMap[newMap][newPos.y][3][newPos.z-1][newPos.x] !== 0 && auxl.collisionMap[newMap][newPos.y][3][newPos.z][newPos.x-1] !== 0){
if(mapLookup(newMap,3,newPos.x,newPos.y,newPos.z-1) !== 0 && mapLookup(newMap,3,newPos.x-1,newPos.y,newPos.z) !== 0){
								return false;
							} else {
								return true;
							}
						} else if(travelDirection === 'reverseLeft'){
							//+Z
							//-X
//auxl.collisionMap[newMap][newPos.y][3][(newPos.z - 1)] is undefined
//auxl.collisionMap[newMap][newPos.y][3][(newPos.z - 1)] is undefined
//auxl.collisionMap[newMap][newPos.y][3][(newPos.z - 1)] is undefined
							//if(auxl.collisionMap[newMap][newPos.y][3][newPos.z-1][newPos.x] === 1 && auxl.collisionMap[newMap][newPos.y][3][newPos.z][newPos.x+1] === 1){
if(mapLookup(newMap,3,newPos.x,newPos.y,newPos.z-1) !== 0 && mapLookup(newMap,3,newPos.x+1,newPos.y,newPos.z) !== 0){
								return false;
							} else {
								return true;
							}
						} else {
							return true;
						}
					} else {
						return false;
					}
				} else {
					//console.log('Out of Map');
					if(auxl.mapEdge){
						return false;
					} else {
						return true;
					}
				}
			} else {
				//console.log('Out of Map');
				if(auxl.mapEdge){
					return false;
				} else {
					return true;
				}
			}
		} else {
			return false;
		}
	}
	//NOT USED
	//Check for Map Obstacles in an Area 
	const CheckMapObstaclesArea = (start,end) => {
		let pos = {x: start.x, z: start.z};
		let xSpaces;
		let xCurrent;
		let zSpaces;
		let zCurrent;
		let spaces = 0;
		//Calc X
		function calcXPos(){
			if(start.x === end.x){
				xSpaces = 1;
			} else {
				xSpaces = start.x - end.x;
				xSpaces *= 2;
				if(xSpaces < 0){
					xSpaces *= -1;
				}
				xSpaces += 1;
			}
			pos.x = start.x;
			xCurrent = xSpaces;
		}
		//Calc Z
		function calcZPos(){
			if(start.z === end.z){
				zSpaces = 1;
			} else {
				zSpaces = start.z - end.z;
				zSpaces *= 2;
				if(zSpaces < 0){
					zSpaces *= -1;
				}
				zSpaces += 1;
			}
			pos.z = start.z;
			zCurrent = zSpaces;
		}
		//Assign Map Collisions
		calcZPos();
		//Check for Player Collision
		if(CheckForPlayer({start,end})){}else{
			console.log('Hit Player')
			return false;
		}
		for(let z = 0; z < zSpaces;z++){
			calcXPos();
			for(let x = 0; x < xSpaces;x++){
				//Check for Other Object Collision
				if(CheckMapObstacles(pos)){}else{
					console.log('Hit Object')
					console.log(pos)
					return false;
				}
				spaces++;
				//Next X Space
				xCurrent--;
				if(xCurrent > 0){
					pos.x += 0.5;
				}
			}
			//Next Z Space
			zCurrent--;
			if(zCurrent > 0){
				pos.z += 0.5;
			}
		}
		return true;
	}
	//Build an Array for the Area
	const BuildAreaArray = (start, end, height) => {
		let pos = {x: start.x, y: start.y, z: start.z};
		let xSpaces;
		let xCurrent;
		let ySpaces;
		let yCurrent;
		let zSpaces;
		let zCurrent;
		//let spaces = 0;
		let area = [];
		//Build Area Dual Array
		let yMovement = Math.abs(start.y) + Math.abs(end.y) + height;
		//Using array.fill causes a stupid issue, don't use
		for(let a = 0; a < yMovement+1; a++){
			area.push(new Array());
		}
		//Calc X
		function calcXPos(){
			if(start.x === end.x){
				xSpaces = 1;
			} else {
				xSpaces = start.x - end.x;
				xSpaces *= 2;
				if(xSpaces < 0){
					xSpaces *= -1;
				}
				xSpaces += 1;
			}
			pos.x = start.x;
			xCurrent = xSpaces;
		}
		//Calc Y
		function calcYPos(){
			if(start.y === end.y){
				ySpaces = 1;
			} else {
				ySpaces = Math.abs(start.y) + Math.abs(end.y);
				ySpaces += 1;
			}
			pos.y = start.y;
			yCurrent = ySpaces;
		}
		//Calc Z
		function calcZPos(){
			if(start.z === end.z){
				zSpaces = 1;
			} else {
				zSpaces = start.z - end.z;
				zSpaces *= 2;
				if(zSpaces < 0){
					zSpaces *= -1;
				}
				zSpaces += 1;
			}
			pos.z = start.z;
			zCurrent = zSpaces;
		}
		//Assign Map Collisions
		calcYPos();
		for(let y = 0; y < ySpaces;y++){
			calcZPos();
			for(let z = 0; z < zSpaces;z++){
				calcXPos();
				for(let x = 0; x < xSpaces;x++){
					//Add to Area Array
					area[pos.y].push({x:pos.x,z:pos.z});
					//spaces++;
					//Next X Space
					xCurrent--;
					if(xCurrent > 0){
						pos.x += 0.5;
					}
				}
				//Next Z Space
				zCurrent--;
				if(zCurrent > 0){
					pos.z += 0.5;
				}
			}
			//Next Y Space
			yCurrent--;
			if(yCurrent > 0){
				pos.y += 1;
			}
		}
		return area;
	}
	//Check for Map Obstacles in an Area and Avoid Checking an Area
	const CheckMapAreaSansArea = (from, to, height) => {
		//to is the area moving into
		//from is the area moving from, do not check any of these spaces
		let original = BuildAreaArray(from.start, from.end, height);
		let skip = false;
		let pos = {x: to.start.x, y: to.start.y, z: to.start.z};
		let xSpaces;
		let xCurrent;
		let ySpaces;
		let yCurrent;
		let zSpaces;
		let zCurrent;
		let spaces = 0;
		//Calc X
		function calcXPos(){
			if(to.start.x === to.end.x){
				xSpaces = 1;
			} else {
				xSpaces = to.start.x - to.end.x;
				xSpaces *= 2;
				if(xSpaces < 0){
					xSpaces *= -1;
				}
				xSpaces += 1;
			}
			pos.x = to.start.x;
			xCurrent = xSpaces;
		}
		//Calc Y
		function calcYPos(){
			if(to.start.y === to.end.y){
				ySpaces = 1;
			} else {
				ySpaces = Math.abs(to.start.y) + Math.abs(to.end.y);
				ySpaces += 1;
			}
			pos.y = to.start.y;
			yCurrent = ySpaces;
		}
		//Calc Z
		function calcZPos(){
			if(to.start.z === to.end.z){
				zSpaces = 1;
			} else {
				zSpaces = to.start.z - to.end.z;
				zSpaces *= 2;
				if(zSpaces < 0){
					zSpaces *= -1;
				}
				zSpaces += 1;
			}
			pos.z = to.start.z;
			zCurrent = zSpaces;
		}
		//Check for Player Collision
		if(CheckForPlayer(to)){}else{
			//console.log('Hit Player')
			return false;
		}
		//Check Map Collisions
		calcYPos();
		for(let y = 0; y < ySpaces;y++){
			calcZPos();
			for(let z = 0; z < zSpaces;z++){
				calcXPos();
				for(let x = 0; x < xSpaces;x++){
					//Check if within From
					for(let each in original[pos.y]){
						//if(pos.x === original[each].x && pos.x === original[each].x && pos.z === original[each].z && pos.z === original[each].z){
						if(pos.x === original[pos.y][each].x && pos.z === original[pos.y][each].z){
							skip = true;
							break;
						}
					}
					//Check for Other Object Collision
					if(skip){}else{
						if(CheckMapObstacles(pos)){}else{
							//console.log('Hit Object')
							return false;
						}
					}
					spaces++;
					skip = false;
					//Next X Space
					xCurrent--;
					if(xCurrent > 0){
						pos.x += 0.5;
					}
				}
				//Next Z Space
				zCurrent--;
				if(zCurrent > 0){
					pos.z += 0.5;
				}
			}
			//Next Y Space
			yCurrent--;
			if(yCurrent > 0){
				pos.y += 1;
			}
		}
		return true;
	}

	//
	//Triggers
	//Blank Map @ Size
	const BlankMapTrigger = () => {
		//Clear Current Map and Objects
		grid.triggers = {};
		auxl.triggerMap[0] = [];
		auxl.triggerMap[1] = [];

		//Build Top Map
		if(grid.topHeight > 0){
			for(let level = 0; level < grid.topHeight; level++){
				BlankMapLevel(auxl.triggerMap[0], level);
			}
		}
		//Build Bottom Map
		if(grid.bottomHeight > 0){
			for(let level = 0; level < grid.bottomHeight; level++){
				BlankMapLevel(auxl.triggerMap[1], level);
			}
		}
	}
	//Add to Map
	const OnMapTrigger = (obj) => {
		if(grid.trigger[obj.name]){} else {
			grid.trigger[obj.name] = {};
		}
		grid.trigger[obj.name]['space'+obj.spaces] = {};
		grid.trigger[obj.name]['space'+obj.spaces].pos = obj.pos;
		
	}
	//Remove from Map
	const OffMapTrigger = (name) => {
		delete grid.trigger[name];
	}
	//Check Map for no other Overlapping Objects
	const CheckMapOverlapTrigger = (obj) => {
		for(let each in grid.trigger){
			if(each === obj.name){}else{
				for(let space in grid.trigger[each]){
					if(grid.trigger[each][space].pos.x === obj.pos.x && grid.trigger[each][space].pos.y === obj.pos.y && grid.trigger[each][space].pos.z === obj.pos.z){
						return false;
					}
				}
			}
		}
		return true;
	}
	//Update Map Multi Space
	const UpdateMapAreaTrigger = (name,start,end,trigger) => {
		let pos = {x: start.x, y: start.y, z: start.z};
		let xSpaces;
		let xCurrent;
		let ySpaces;
		let yCurrent;
		let zSpaces;
		let zCurrent;
		let mapKey;
		let spaces = 0;
		//Assign Map Key Code Add or Remove
		if(trigger){
			mapKey = 1;
		} else {
			mapKey = 0;
		}
		//Calc X
		function calcXPos(){
			if(start.x === end.x){
				xSpaces = 1;
			} else {
				xSpaces = start.x - end.x;
				xSpaces *= 2;
				if(xSpaces < 0){
					xSpaces *= -1;
				}
				xSpaces += 1;
			}
			pos.x = start.x;
			xCurrent = xSpaces;
		}
		//Calc Y
		function calcYPos(){
			if(start.y === end.y){
				ySpaces = 1;
			} else {
				ySpaces = Math.abs(start.y) + Math.abs(end.y);
				ySpaces += 1;
			}
			pos.y = start.y;
			yCurrent = ySpaces;
		}
		//Calc Z
		function calcZPos(){
		if(start.z === end.z){
			zSpaces = 1;
		} else {
			zSpaces = start.z - end.z;
			zSpaces *= 2;
			if(zSpaces < 0){
				zSpaces *= -1;
			}
			zSpaces += 1;
		}
		pos.z = start.z;
		zCurrent = zSpaces;
		}
		//Assign Map Collisions
		calcYPos();
		for(let y = 0; y < ySpaces;y++){
			calcZPos();
			for(let z = 0; z < zSpaces;z++){
				calcXPos();
				for(let x = 0; x < xSpaces;x++){
					if(mapKey === 0){
						//Removing
						//If another object doesn't exist in same space, clear it
						if(CheckMapOverlapTrigger({name, pos:{x:pos.x,y:pos.y,z:pos.z}})){
							UpdateMapTrigger(pos,mapKey);
						}
						spaces++;
					} else if(mapKey === 1){
						//Adding
						UpdateMapTrigger(pos,mapKey);
						spaces++;
						OnMapTrigger({name, spaces, pos:{x:pos.x,y:pos.y,z:pos.z}});
					}
					//Next X Space
					xCurrent--;
					if(xCurrent > 0){
						pos.x += 0.5;
					}
				}
				//Next Z Space
				zCurrent--;
				if(zCurrent > 0){
					pos.z += 0.5;
				}
			}
			//Next Y Space
			yCurrent--;
			if(yCurrent > 0){
				pos.y += 1;
			}
		}
		//Remove from grid.trigger
		if(mapKey === 0){
			OffMapTrigger(name);
		}
	}
	//Update Map Single Space
	const UpdateMapTrigger = (pos, mapKey) => {
		//0.5 meter to integer grid adjustment
		let xPos = pos.x * 2;
		let yPos = pos.y;
		let zPos = pos.z * 2;
		//console.log({x: xPos, z: zPos})
		let map;
		if(pos.y >= 0){
			//Top
			map = 0;
		} else {
			//Bottom
			map = 1;
		}
		//Add a mechanism to detect if the collision it is adding is the same sq that the player is in. If so, do not add until the player has moved out of the square.

		if(xPos < 0 && zPos < 0){
			//Top Left - 0
			//Loop 1 : -Z
			//Loop 2 : -X
			auxl.triggerMap[map][yPos][0][zPos * -1][xPos * -1] = mapKey;
		} else if(pos.x >= 0 && zPos < 0){
			//Top Right - 1
			//Loop 1 : -Z
			//Loop 2 : +X
			auxl.triggerMap[map][yPos][1][zPos * -1][xPos] = mapKey
		} else if(xPos < 0 && zPos >= 0){
			//Bottom Left - 2
			//Loop 1 : +Z
			//Loop 2 : -X
			auxl.triggerMap[map][yPos][2][zPos][xPos * -1] = mapKey;
		} else if(xPos >= 0 && zPos >= 0){
			//Bottom Right - 3
			//Loop 1 : +Z
			//Loop 2 : +X
			auxl.triggerMap[map][yPos][3][zPos][xPos] = mapKey;
		} else {
			console.log('Update out of bounds')
			//resize map
		}

	}

	//Check for Map Trigger in an Area and Avoid Checking an Area
	//Not working well
	const UpdateMapAreaSansAreaTrigger = (name, from, to) => {
		//to is the area moving into
		//from is the area moving from, do not check any of these spaces
		let original = BuildAreaArray(from.start, from.end);
		let skip = false;
		let pos = {x: to.start.x, z: to.start.z};
		let xSpaces;
		let xCurrent;
		let zSpaces;
		let zCurrent;
		let spaces = 0;
		//Calc X
		function calcXPos(){
			if(to.start.x === to.end.x){
				xSpaces = 1;
			} else {
				xSpaces = to.start.x - to.end.x;
				xSpaces *= 2;
				if(xSpaces < 0){
					xSpaces *= -1;
				}
				xSpaces += 1;
			}
			pos.x = to.start.x;
			xCurrent = xSpaces;
		}
		//Calc Z
		function calcZPos(){
			if(to.start.z === to.end.z){
				zSpaces = 1;
			} else {
				zSpaces = to.start.z - to.end.z;
				zSpaces *= 2;
				if(zSpaces < 0){
					zSpaces *= -1;
				}
				zSpaces += 1;
			}
			pos.z = to.start.z;
			zCurrent = zSpaces;
		}
		//Assign Map Collisions
		calcZPos();
		//Check for Player Collision
		if(CheckForPlayer(to)){}else{
			console.log('Hit Player')
			return false;
		}
		for(let z = 0; z < zSpaces;z++){
			calcXPos();
			for(let x = 0; x < xSpaces;x++){



				//Check if within From
				for(let each in original){
					if(pos.x === original[each].x && pos.z === original[each].z){
original.splice(original.indexOf(each), 1);
						skip = true;
						break;
					}
				}
				//Check for Other Object Collision
				if(skip){}else{
					UpdateMapTrigger(pos,mapKey);
					OnMapTrigger({name, spaces, pos:{x:pos.x,z:pos.z}});
				}
				//OffMapTrigger(name);

				spaces++;
				skip = false;
				//Next X Space
				xCurrent--;
				if(xCurrent > 0){
					pos.x += 0.5;
				}
			}
			//Next Z Space
			zCurrent--;
			if(zCurrent > 0){
				pos.z += 0.5;
			}
		}
		console.log(original)
	}
	//Check for Map Triggers 0.5 Meter
	//Returns True if Hit Trigger
	//Corners need 3 squares in L shape to completely block travel
	const CheckMapTriggers = (pos) => {

		let newPos = {};
		newPos.x = pos.x * 2;
		newPos.y = pos.y;
		newPos.z = pos.z * 2;
		let map;
		if(newPos.y >= 0){
			//Top
			map = 0;
		} else {
			//Bottom
			map = 1;
		}
		if(newPos.x < 0 && newPos.z < 0){
			//Top Left - 0
			//Loop 1 : -Z
			//Loop 2 : -X
			if(auxl.triggerMap[map][newPos.y][0].length > newPos.z * -1){
				if(auxl.triggerMap[map][newPos.y][0][newPos.z * -1].length > newPos.x * -1){
					//console.log('Within Map');
					if(auxl.triggerMap[map][newPos.y][0][newPos.z * -1][newPos.x * -1] === 1){
						return true;
					} else {
						return false;
					}
				}
			}
		} else if(newPos.x >= 0 && newPos.z < 0){
			//Top Right - 1
			//Loop 1 : -Z
			//Loop 2 : +X
			if(auxl.triggerMap[map][newPos.y][1].length > newPos.z * -1){
				if(auxl.triggerMap[map][newPos.y][1][newPos.z * -1].length > newPos.x){
					//console.log('Within Map');
					if(auxl.triggerMap[map][newPos.y][1][newPos.z * -1][newPos.x] === 1){
						//User can move
						return true;
					} else {
						return false;
					}
				}
			}
		} else if(newPos.x < 0 && newPos.z >= 0){
			//Bottom Left - 2
			//Loop 1 : +Z
			//Loop 2 : -X
			if(auxl.triggerMap[map][newPos.y][2].length > newPos.z){
				if(auxl.triggerMap[map][newPos.y][2][newPos.z].length > newPos.x * -1){
					//console.log('Within Map');
					if(auxl.triggerMap[map][newPos.y][2][newPos.z][newPos.x * -1] === 1){
						//User can move
						return true;
					} else {
						return false;
					}
				}
			}
		} else if(newPos.x >= 0 && newPos.z >= 0){
			//Bottom Right - 3
			//Loop 1 : +Z
			//Loop 2 : +X
			if(auxl.triggerMap[map][newPos.y][3].length > newPos.z){
				if(auxl.triggerMap[map][newPos.y][3][newPos.z].length > newPos.x){
					if(auxl.triggerMap[map][newPos.y][3][newPos.z][newPos.x] === 1){
						//User can move
						return true;
					} else {
						return false;
					}
				}
			}
		} else {
			return false;
		}



	}
	//Trigger Event
	const TriggerEvent = (obj, active) => {
		if(auxl[obj.name]){
			if(active){
				//Trigger Enter
				if(grid.trigger[obj.name].active){} else {
					//console.log('Trigger Enter')
					if(auxl[obj.name].EmitEvent){
						auxl[obj.name].EmitEvent('triggerEnter');
					} else if(auxl[obj.name].EmitEventParent){
						auxl[obj.name].EmitEventParent('triggerEnter');
					}
					grid.trigger[obj.name].active = true;
				}
			} else {
				//Trigger Exit
				if(grid.trigger[obj.name].active){
					//console.log('Trigger Exit')
					if(auxl[obj.name].EmitEvent){
						auxl[obj.name].EmitEvent('triggerExit');
					} else if(auxl[obj.name].EmitEventParent){
						auxl[obj.name].EmitEventParent('triggerExit');
					}
					grid.trigger[obj.name].active = false;
				}
			}
		} else {
			console.log(obj.name)
			console.log('Trigger is not an AUXL object')
		}
	}
	//Check Which Trigger was Hit
	const TriggerEnterHit = (pos) => {
		let triggers = [];
		for(let each in grid.trigger){
			for(let space in grid.trigger[each]){
				if(space === 'active'){}else{
					if(grid.trigger[each][space].pos.x === pos.x && grid.trigger[each][space].pos.z === pos.z){
						//Trigger Match
						triggers.push({name: each, pos: grid.trigger[each][space]})
					}
				}
			}
		}
		if(triggers.length > 0){
			grid.triggersActive = true;
			for(let each in triggers){
				TriggerEvent(triggers[each], true);
			}
		}
	}
	//Check Active Triggers for Exit
	const CheckActiveTriggers = (pos) => {
		if(grid.triggersActive){
			let clear = false;
			let keep = false;
			for(let each in grid.trigger){
				keep = false;
				if(grid.trigger[each].active){
					//currently active
					for(let space in grid.trigger[each]){
						if(grid.trigger[each][space].pos){
							if(grid.trigger[each][space].pos.x === pos.x && grid.trigger[each][space].pos.z === pos.z){
								keep = true;
							}
						}
					}
					if(keep){}else{
						TriggerEvent({name: each}, false);
					}
				}
			}
			if(clear){
				grid.triggersActive = false;
			}
		}
	}
	//Clear Triggers
	const ClearTriggers = () => {
		for(let each in grid.trigger){
			for(let space in grid.trigger[each]){
				if(space === 'active'){
					grid.trigger[each][space] = false;
				}
			}
		}
		grid.triggersActive = false;
	}

	//
	//Edges
	//Update Edge Core
	const UpdateEdge = (core) => {
		grid.edge = core;
	}
	//Update Edge Core Material
	const UpdateEdgeMaterial = (material) => {
		grid.edge.core.material = material;
	}
	//Spawn Map Edge Object
	const SpawnEdges = (updates) => {
		if(updates){
			UpdateEdgeMaterial(updates);
		}
		let pos = (grid.size/4) +1;
		let length = (grid.size/2) +2.5;

		//North
		grid.edges.northEdge = auxl.coreFromTemplate(grid.edge,{id: 'northEdge', geometry: {primitive: 'box', depth: 0.5, width: length, height: 0.5}, position: new THREE.Vector3(0,0.25,pos*-1)}, true);
		grid.edges.northEdge.SpawnCore();
		//South
		grid.edges.southEdge = auxl.coreFromTemplate(grid.edge,{id: 'southEdge', geometry: {primitive: 'box', depth: 0.5, width: length, height: 0.5}, position: new THREE.Vector3(0,0.25,pos)}, true);
		grid.edges.southEdge.SpawnCore();
		//West
		grid.edges.westEdge = auxl.coreFromTemplate(grid.edge,{id: 'westEdge', geometry: {primitive: 'box', depth: length, width: 0.5, height: 0.5}, position: new THREE.Vector3(pos*-1,0.25,0)}, true);
		grid.edges.westEdge.SpawnCore();
		//East
		grid.edges.eastEdge = auxl.coreFromTemplate(grid.edge,{id: 'eastEdge', geometry: {primitive: 'box', depth: length, width: 0.5, height: 0.5}, position: new THREE.Vector3(pos,0.25,0)}, true);
		grid.edges.eastEdge.SpawnCore();

		grid.edgeSpawned = true;

	}
	//Spawn Map Edge Object
	const DespawnEdges = (map) => {
		grid.edges.northEdge.DespawnCore();
		delete grid.edges.northEdge;
		grid.edges.southEdge.DespawnCore();
		delete grid.edges.southEdge;
		grid.edges.westEdge.DespawnCore();
		delete grid.edges.westEdge;
		grid.edges.eastEdge.DespawnCore();
		delete grid.edges.eastEdge;

		grid.edgeSpawned = false;
	}

	//
	//Wait to Spawn
	//Objects that need to wait to be Spawned
	const WaitToSpawn = (obj) => {
		if(grid.waiting){}else{
			grid.waiting = true;
		}
		grid.spawnWaiting[obj.name] = obj;
	}
	//Object Was Spawned
	const Spawned = (name) => {
		delete grid.spawnWaiting[name];
		if(Object.keys(grid.spawnWaiting).length === 0){
			grid.waiting = false;
		}
	}
	//Attempt Spawning of Waiting Objects
	const WaitingToSpawn = () => {
		if(grid.waiting){
			for(let each in grid.spawnWaiting){
				auxl[each][grid.spawnWaiting[each].func]();
				if(auxl[each].inScene){
					Spawned(each);
				}
			}
		}
	}
	//Clear Waiting
	const ClearWaiting = () => {
		grid.waiting = false;
		grid.spawnWaiting = {};
	}



	//OLD
	//Move to Grid
	const MoveToGrid = (move, obj) => {
		//Depending on X or Z direction of movement, the grid for which the object will occupy will get 0.5 bigger in either direction. Once it lands on the space, it will remove the attachment to the previous grid it has since moved out of (with a grace period).
console.log(move)//{z:-3, time: 1000, type: 'direct'}
console.log(obj)//core's data

let animMoveXData;
let animRotXData;
let animRotZData;
let animMoveZData;

//Move x space +/-
//Move z space +/-
//move.x is +5, means move to the right 5 spaces
//move.z is +3, means move to the front 3 spaces
//move.time is how long the total movement will take
//move.type can be direct which if both x and z are defined would make up a diagonal path
//move.type can be long which if both x and z are defined take the longest path first
//move.type can be short which if both x and z are defined take the shortest path first

//need parent core to attach move anim and rotate anim as well as emit each anim event

/*
//Check if Object as all 4 spin rotations, otherwise add them
let prepSpin = false;
if(Object.keys(auxl[obj.id].core.animations).length === 0){
	prepSpin = true;
} else {
	if(auxl[obj.id].core.animations.animspinright){} else {
		prepSpin = true;
	}
}
if(prepSpin){
	//Spin Right
	animRotData = {
		name: 'animspinright',
		property: 'object3D.rotation.y', 
		to: -90, 
		dur: 500, 
		delay: 0, 
		loop: false, 
		dir: 'normal', 
		easing: 'linear', 
		elasticity: 400, 
		autoplay: false, 
		enabled: true,
		startEvents: 'spinRightStart',
		pauseEvents: 'spinRightStop',
	};
	auxl[obj.id].Animate(animRotData);
	//Spin Left
	animRotData.name = 'animspinleft';
	animRotData.to = 90;
	animRotData.startEvents = 'spinLeftStart';
	animRotData.pauseEvents = 'spinLeftStop';
	auxl[obj.id].Animate(animRotData);
	//Spin Forward
	animRotData.name = 'animspinforward';
	animRotData.to = 1;
	animRotData.startEvents = 'spinForwardStart';
	animRotData.pauseEvents = 'spinForwardStop';
	auxl[obj.id].Animate(animRotData);
	//Spin Backward
	animRotData.name = 'animspinbackward';
	animRotData.to = 180;
	animRotData.startEvents = 'spinBackwardStart';
	animRotData.pauseEvents = 'spinBackwardStop';
	auxl[obj.id].Animate(animRotData);
}
*/









console.log(auxl[obj.id])

	}

	//Path on Grid
	const PathOnGrid = (path) => {

		//path.move is an array of grid locations in order from start to finish
		//path.pause is the amount of time to pause in between each move
		//path.loop is the amount of times to complete path or infinite
		//path.type is what kind of path, wether a loop were object ends where it starts or destination where the object ends elsewhere
		//path.collide is what to do on collision with player or other object like wait or reverse direction
		//path.direction is which way the object will move each path like normal (continue in same direction), alternate (at end of path go backwards), random (after each move, may go forward or back)

		//Apply move anim and rotate animation on new direction

	}


	//
	//Map Spawning
	//Spawn Map
	const SpawnMap = (map) => {
		//Could easily do a list of objects that have grid info, but what would be the best way to do a dual array map?
		//A single object would take up 1+ squares and any duplicates would be automatically generated as new objects

		//Basic Block Spawner
		function sectionSpawner(map,quadrant) {
			//Loop through Z array set
			for (let i = 0; i < map.length; i++) {
				//Loop through X array set
				for (let j = 0; j < map[i].length; j++) {
					//Check for objects
					if(map[i][j] === 0){}else{
						//map[i][j] object identifier

						//Set position
						let posX;
						let posY = 0.5;//half the height of object
						let posZ;

						if(quadrant === 'topLeft'){
							posX = j * -1;
							posZ = i * -1;
						} else if(quadrant === 'topRight'){
							posX = j;
							posZ = i * -1;
						} else if(quadrant === 'bottomLeft'){
							posX = j * -1;
							posZ = i;
						} else if(quadrant === 'bottomRight'){
							posX = j;
							posZ = i;
						}
						posX /= 2;
						posZ /= 2;
						//Set Position
						let positionVec3 = new THREE.Vector3(posX, posY, posZ);
						//Update object grid position
						//object.SpawnOnGrid();
					}
				}
			}
		}

		//Loop map set
		for (let h = 0; h < map.length; h++) {
			if (h === 0){
				sectionSpawner(map[h],'topLeft');
			} else if (h === 1){
				sectionSpawner(map[h],'topRight');
			} else if (h === 2){
				sectionSpawner(map[h],'bottomLeft');
			} else if (h === 3){
				sectionSpawner(map[h],'bottomRight');
			}
		}
	}
	//Despawn Map
	const DespawnMap = (map) => {

	}

	return {grid, BuildMap, BlankMap, UpdateMap, UpdateMapArea, EnableCollision, DisableCollision, CheckMapObstacles, CheckMapObstaclesDiagonal, CheckMapObstaclesArea, CheckMapAreaSansArea, SpawnEdges, DespawnEdges, UpdateEdge, BlankMapTrigger, OnMapTrigger, OffMapTrigger, CheckMapOverlapTrigger, UpdateMapAreaTrigger, UpdateMapTrigger, CheckMapTriggers, TriggerEnterHit, CheckActiveTriggers, ClearTriggers, WaitToSpawn, WaitingToSpawn, ClearWaiting, MoveToGrid, PathOnGrid,};

}

//
//Grid Layout
//Spawn coreData, Core, layerData or Layer Objects at Grid Layouts
const GridLayout = (auxl, gridLayoutData) => {
	let gridLayout = Object.assign({}, gridLayoutData);
	gridLayout.inScene = false;
	gridLayout.current = false;
	//Object Type
	gridLayout.type;
	gridLayout.objInfo = 'single';
	if(gridLayout.coreData){
		gridLayout.type = 'coreData';
		if(Array.isArray(gridLayout.coreData)){
			gridLayout.objInfo = 'array';
		}
	} else if(gridLayout.core){
		gridLayout.type = 'core';
		if(Array.isArray(gridLayout.core)){
			gridLayout.objInfo = 'array';
		}
	} else if(gridLayout.layerData){
		gridLayout.type = 'layerData';
		if(Array.isArray(gridLayout.layerData)){
			gridLayout.objInfo = 'array';
		}
	} else if(gridLayout.layer){
		gridLayout.type = 'layer';
		if(Array.isArray(gridLayout.layer)){
			gridLayout.objInfo = 'array';
		}
	}
	//Objects Holder
	gridLayout.objs = [];
	gridLayout.amount = 0;
	//Get the max amount of cores needed
	for(let grid in gridLayout.grids){
		if(gridLayout.grids[grid].length > gridLayout.amount){
			gridLayout.amount = gridLayout.grids[grid].length;
		}
	}

//Randomize
//Randomize texture color shade, scale of material, offset of material
//colorShade
//['red','orange','yellow','lime','blue','cyan','magenta','maroon','olive','green','purple','teal','navy',];
//matOffsetRange
//matRepeatRange

	//Prep Objects from Single
	const PrepObjectsSingle = () => {
		for(let each = 0; each < gridLayout.amount; each++){
			let data = {};
			let obj = {};

			if(gridLayout.type === 'coreData'){
				data = auxl.coreDataFromTemplate(gridLayout.coreData,{id: gridLayout.id+each}, true);
				obj = auxl.Core(data);
				gridLayout.objs.push(obj);
			} else if(gridLayout.type === 'core'){
				obj = auxl.coreFromTemplate(gridLayout.core,{id: gridLayout.id+each}, true);
				gridLayout.objs.push(obj);
			} else if(gridLayout.type === 'layerData'){
				data = auxl.layerDataFromTemplate(gridLayout.layerData,{id: gridLayout.id+each}, true);
				obj = auxl.Layer(gridLayout.id+'layer', data);
				gridLayout.objs.push(obj);
			} else if(gridLayout.type === 'layer'){
				obj = auxl.layerFromTemplate(gridLayout.layer, gridLayout.id+each, {id: gridLayout.id+each}, false, true);
				gridLayout.objs.push(obj);
			}
		}
	}
	//Prep Objects from Array
	const PrepObjectsAll = () => {
		let current = 0;
		let max = 1;
		if(gridLayout.type === 'coreData'){
			max = gridLayout.coreData.length;
		} else if(gridLayout.type === 'core'){
			max = gridLayout.core.length;
		} else if(gridLayout.type === 'layerData'){
			max = gridLayout.layerData.length;
		} else if(gridLayout.type === 'layer'){
			max = gridLayout.layer.length;
		}
		for(let each = 0; each < gridLayout.amount; each++){
			let data = {};
			let obj = {};

			if(gridLayout.type === 'coreData'){
				data = auxl.coreDataFromTemplate(gridLayout.coreData[current],{id: gridLayout.id+each}, true);
				obj = auxl.Core(data);
				gridLayout.objs.push(obj);
			} else if(gridLayout.type === 'core'){
				obj = auxl.coreFromTemplate(gridLayout.core[current],{id: gridLayout.id+each}, true);
				gridLayout.objs.push(obj);
			} else if(gridLayout.type === 'layerData'){
				data = auxl.layerDataFromTemplate(gridLayout.layerData[current],{id: gridLayout.id+each}, true);
				obj = auxl.Layer(gridLayout.id+'layer', data);
				gridLayout.objs.push(obj);
			} else if(gridLayout.type === 'layer'){
				obj = auxl.layerFromTemplate(gridLayout.layer[current], gridLayout.id+each, {id: gridLayout.id+each}, false, true);
				gridLayout.objs.push(obj);
			}
			current++
			if(current >= max){
				current = 0;
			}
		}
	}
	//Prep All Needed Core/Layers
	if(gridLayout.objInfo === 'single'){
		PrepObjectsSingle();
	} else {
		PrepObjectsAll();
	}
	//Generate Grid Objects
	const GenGrid = (name) => {
		for(let each in gridLayout.grids[name]){
			if(gridLayout.type === 'coreData' || gridLayout.type === 'core'){
				gridLayout.objs[each].core.grid = gridLayout.grids[name][each];
			} else if(gridLayout.type === 'data' || gridLayout.type === 'core'){
				gridLayout.objs[each].layer.grid = gridLayout.grids[name][each];
			}
		}
	}
	//Randomized Grid
	const GenGridRandomizeOld = () => {
		for(let a = 0; a<gridLayout.amount; a++){
			let data = {};
			let obj = {};
			let color = false;
			let repeatX = false;
			let repeatZ = false;
			let offset = Math.random();

			//Color
			if(gridLayout.colorShade){
				color = auxl.colorTheoryGen(false, gridLayout.colorShade).base;
			}
			//Repeat
			if(gridLayout.minRepeatX && gridLayout.maxRepeatX){
				repeatX = (Math.random()*gridLayout.maxRepeatX)+gridLayout.minRepeatX;
			} else if(gridLayout.minRepeatX){
				repeatX = Math.random()+gridLayout.minRepeatX;
			} else if(gridLayout.maxRepeatX){
				repeatX = Math.random()*gridLayout.maxRepeatX;
			}
			if(gridLayout.minRepeatZ && gridLayout.maxRepeatX){
				repeatZ = (Math.random()*gridLayout.maxRepeatZ)+gridLayout.minRepeatZ;
			} else if(gridLayout.minRepeatZ){
				repeatZ = Math.random()+gridLayout.minRepeatZ;
			} else if(gridLayout.maxRepeatZ){
				repeatZ = Math.random()*gridLayout.maxRepeatZ;
			}


			if(gridLayout.type === 'data'){
				data = auxl.coreDataFromTemplate(gridLayout.data,{id: gridLayout.id+a, grid: gridLayout.grid[a]}, true);
//Color
if(color){
	data.material.color = color;
	if(data.material.emissive){
		data.material.emissive = color;
	}
}
//Repeat
if(repeatX && repeatZ){
	data.material.repeat = repeatX+' '+repeatZ;
} else if(repeatX){
	data.material.repeat = repeatX+' 1';
} else if(repeatZ){
	data.material.repeat = '1 '+repeatZ;
}
//Offset
if(repeatX || repeatZ){
	data.material.offset = offset+' '+offset;
}

				obj = auxl.Core(data);
				gridLayout.objs.push(obj);
			} else if(gridLayout.type === 'core'){
				obj = auxl.coreFromTemplate(gridLayout.core,{id: gridLayout.id+a, grid: gridLayout.grid[a]}, true);
				gridLayout.objs.push(obj);
			} else if(gridLayout.type === 'layer'){
				obj = auxl.layerFromTemplate(gridLayout.layer, gridLayout.id+a, {id: gridLayout.id+a}, {grid: gridLayout.grid[a]}, true);
				gridLayout.objs.push(obj);
			}
		}
	}
	//Spawn Grid Layout
	const SpawnGridLayout = (name) =>{
		if(gridLayout.inScene){}else{
			GenGrid(name);
			for(let each in gridLayout.grids[name]){
				if(gridLayout.type === 'coreData' || gridLayout.type === 'core'){
					gridLayout.objs[each].SpawnCoreOnGrid();
				} else if(gridLayout.type === 'layerData' || gridLayout.type === 'layer'){
					gridLayout.objs[each].SpawnLayerOnGrid();
				}
			}
			gridLayout.current = name;
			gridLayout.inScene = true;
		}
	}
	//Despawn Grid Layout
	const DespawnGridLayout = () =>{
		if(gridLayout.inScene){
			for(let each in gridLayout.grids[gridLayout.current]){
				if(gridLayout.type === 'coreData' || gridLayout.type === 'core'){
					gridLayout.objs[each].DespawnCore();
				} else if(gridLayout.type === 'layerData' || gridLayout.type === 'layer'){
					gridLayout.objs[each].DespawnLayer();
				}
			}
			gridLayout.current = false;
			gridLayout.inScene = false;
			auxl.RemoveFromTracker(gridLayout.id)
		}
	}

	return {gridLayout, SpawnGridLayout, DespawnGridLayout};
}

//
//Gates
//Grid Based One Direction Close Behind Player
const Gate = (auxl, id, object, direction) => {

	let gate = {};
	gate.id = id;
	gate.object = object;
	gate.objType;
	if(gate.object.core){
		gate.objType = 'core';
	} else if(gate.object.core){
		gate.objType = 'layer';
	}
	gate.direction = direction;
	gate.directions = [];
	gate.inScene = false;
	gate.open = false;

	const ResetGate = (direction) => {
		if(direction){
			gate.direction = direction;
			gate.directions = [];
			if(gate.direction === 'forward'){
				gate.directions.push('forwardright');
				gate.directions.push('forwardleft');
				gate.directions.push('forward');
			} else if(gate.direction === 'reverse'){
				gate.directions.push('reverseright');
				gate.directions.push('reverseleft');
				gate.directions.push('reverse');
			} else if(gate.direction === 'right'){
				gate.directions.push('forwardright');
				gate.directions.push('reverseright');
				gate.directions.push('right');
			} else if(gate.direction === 'left'){
				gate.directions.push('reverseleft');
				gate.directions.push('forwardleft');
				gate.directions.push('left');
			}
		}
		if(gate.objType === 'core'){
			if(Object.keys(gate.object.core.components).length === 0){
				gate.object.core.components = {};
			}
			gate.object.core.components.oneventrun__closegate = {event: 'triggerExit', cursorObj: gate.id, component: 'null', method: 'CloseGate', params: 'null'};
		} else if(gate.objType === 'layer'){
			if(Object.keys(gate.object.layer.all.parent.core.core.components.length === 0)){
				gate.object.layer.all.parent.core.core.components = {};
			}
			gate.object.layer.all.parent.core.core.components.oneventrun__closegate = {event: 'triggerExit', cursorObj: gate.id, component: 'null', method: 'CloseGate', params: 'null'};
		}
		gate.open = true;
	}

	const SpawnGate = () => {
		if(gate.inScene){}else{
			if(gate.objType === 'core'){
				gate.object.SpawnCoreOnGrid();
			} else if(gate.objType === 'layer'){
				gate.object.SpawnLayerOnGrid();
			}
			gate.inScene = true;
		}
	}

	const DespawnGate = () => {
		if(gate.inScene){
			if(gate.objType === 'core'){
				gate.object.DespawnCore();
			} else if(gate.objType === 'layer'){
				gate.object.DespawnLayer();
			}
			gate.inScene = false;
			auxl.RemoveFromTracker(gate.id);
		}
	}

	const RemoveGate = () => {
		if(gate.inScene){
			if(gate.objType === 'core'){
				gate.object.DespawnCore();
			} else if(gate.objType === 'layer'){
				gate.object.DespawnLayer();
			}
			gate.inScene = false;
		}
	}

	const CloseGate = () => {
		if(gate.open){
			for(let each in gate.directions){
				if(auxl.player.layer.gridDirection === gate.directions[each]){
					console.log('closing gate')
					if(gate.objType === 'core'){
						gate.object.core.grid.trigger = false;
						gate.object.core.grid.collide = true;
						delete gate.object.core.components.oneventrun__closegate;
						gate.object.core.material.opacity = 1;
					} else if(gate.objType === 'layer'){
						gate.object.layer.all.parent.core.core.grid.trigger = false;
						gate.object.layer.all.parent.core.core.grid.collide = true;
						delete gate.object.layer.all.parent.core.core.components.oneventrun__closegate;
						gate.object.layer.all.parent.core.core.material.opacity = 1;
					}
					RemoveGate();
					SpawnGate();
					gate.open = false;
//testing
let timeout = setTimeout(() => {
console.log('Re-opening Gate')
OpenGate();
clearTimeout(timeout);
}, 3000);
				}
			}
		}
	}

	const OpenGate = () => {
		if(gate.open){}else{
			console.log('opening gate')
			RemoveGate();
			if(gate.objType === 'core'){
				gate.object.core.grid.collide = false;
				gate.object.core.grid.trigger = true;
				gate.object.core.material.opacity = 0;
			} else if(gate.objType === 'layer'){
				gate.object.layer.all.parent.core.core.grid.collide = false;
				gate.object.layer.all.parent.core.core.grid.trigger = true;
				gate.object.layer.all.parent.core.core.material.opacity = 0;
			}
			ResetGate();
			SpawnGate();
		}
	}

	ResetGate(gate.direction);

	return {gate, SpawnGate, DespawnGate, CloseGate, OpenGate,  ResetGate};
}

//
//Export


/***/ }),

/***/ "./src/system/images.js":
/*!******************************!*\
  !*** ./src/system/images.js ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ImageCarousel: () => (/* binding */ ImageCarousel),
/* harmony export */   ImageSwapper: () => (/* binding */ ImageSwapper)
/* harmony export */ });
//
//AUXL : A-Frame UX Library
//v0.3 Engine
//https://github.com/Minty-Crisp/AUXL
//
//Created by Minty-Crisp (mintycrisp.com)
//
//Images
//
//ImageSwapper
//ImageCarousel

//
//Image Swapper
const ImageSwapper = (auxl,id,mainData,buttonData,...materials) => {
//ToDo
//Add autoplay and pause on hovering
//Controls either left/right or thumbnails for each
	let imageSwapper = {};
	imageSwapper.id = id;
	imageSwapper.inScene = false;
	let imageSwapperCore;
	imageSwapper.thumbnailCores = [];
	let thumbnailPos = new THREE.Vector3(0,-0.3,0.05);
	imageSwapper.layerData = {}
	//Prep Layer Core Objects
	for(let mat in materials){
		if(mat === '0'){
			mainData.material = materials[mat];
			imageSwapperCore = auxl.Core(mainData);
			imageSwapper.layerData['parent'] = {};
			imageSwapper.layerData['parent'].core = imageSwapperCore;
		} else {
			buttonData.id = 'thumbnail' + mat;
			buttonData.material = materials[mat];
			if(materials.length === 3){
				if(mat === '1'){
					thumbnailPos.x = -0.25;
				} else if(mat === '2'){
					thumbnailPos.x = 0.25;
				}
			} else if(materials.length === 4){
				if(mat === '1'){
					thumbnailPos.x = -0.33;
				} else if(mat === '2'){
					thumbnailPos.x = 0;
				} else if(mat === '3'){
					thumbnailPos.x = 0.33;
				}
			} else if(materials.length === 5){
				if(mat === '1'){
					thumbnailPos.x = -0.375;
				} else if(mat === '2'){
					thumbnailPos.x = -0.125;
				} else if(mat === '3'){
					thumbnailPos.x = 0.125;
				} else if(mat === '4'){
					thumbnailPos.x = 0.375;
				}
			}
			buttonData.position = thumbnailPos;
			imageSwapper.thumbnailCores[mat] = auxl.Core(buttonData);
			imageSwapper.layerData['child'+mat] = {};
			imageSwapper.layerData['child'+mat].core = imageSwapper.thumbnailCores[mat];
		}
	}
	imageSwapper.layer = auxl.Layer('imageSwapper',imageSwapper.layerData);
	//Swap Material Sources with Parent
	const Click = (el) => {
		let selectedMat = el.getAttribute('material').src;
		let replacedMat = JSON.parse(JSON.stringify(el.parentNode.getAttribute('material').src));
		el.parentNode.setAttribute('material',{src: selectedMat})
		el.setAttribute('material',{src: replacedMat})
	}
	//Spawn ImageSwapper
	const SpawnImgSwap = () => {
		if(imageSwapper.inScene){}else{
			imageSwapper.layer.SpawnLayer();
			imageSwapper.inScene = true;
		}
	}
	//Despawn ImageSwapper
	const DespawnImgSwap = () => {
		if(imageSwapper.inScene){
			imageSwapper.layer.DespawnLayer();
			RemoveFromTracker(imageSwapper.id);
			imageSwapper.inScene = false;
		}
	}
	//Toggle Spawn
	const ToggleSpawn = () => {
		if(imageSwapper.inScene){
			DespawnImgSwap();
		} else {
			SpawnImgSwap();
		}
	}
	//Set Flag & Value to Object - Single or Array
	const SetFlag = (flagValue) => {
		if(Array.isArray(flagValue)){
			for(let each in flagValue){
			imageSwapper[flagValue[each].flag] = flagValue[each].value;
			}
		} else {
			imageSwapper[flagValue.flag] = flagValue.value;
		}
	}
	//Retreive Flag Value from Object - Single or Array
	const GetFlag = (flag) => {
		if(Array.isArray(flag)){
			let flagArray = [];
			for(let each in flag){
				flagArray.push(imageSwapper(flag[each]));
			}
			return flagArray;
		} else {
			return imageSwapper[flag];
		}
	}

	return {imageSwapper, Click, SpawnImgSwap, DespawnImgSwap, ToggleSpawn, SetFlag, GetFlag};
}

//
//ImageCarousel
const ImageCarousel = (auxl,carouselData) => {
//ToDo
//Allow the amount of frames to be adjusted
//Add 180 view non-movement functions
//Bug
//Changing between Forward & Reverse either way messes up which frames should be updated
	let imageCarousel = Object.assign({}, carouselData);
	imageCarousel.inScene = false;
	imageCarousel.frames = 8;//temp
	let playInterval;
	let updateTimeout;
	let scaleTimeout;
	imageCarousel.framesPerPage = 8;
	currentImageForward = -1;
	currentImageBackward = imageCarousel.images.length - imageCarousel.framesPerPage;
	let frameRotationEach = 360/imageCarousel.framesPerPage;
	let frameRotation = 0;
	currentRotation = -1;
	//Prep Movement Flags
	let notMoving = true;
	let notPlaying = true;
	let autoRotate = 0;
	let loadingPage = false;
	let animating = false;
	let scale = 0;
	let info = false;
	//Frame Templates & Prep
	let artFrameParentData = {
	data: 'artFrameParentData',
	id:'artFrameParent',
	sources: false,
	text: false,
	geometry: false,
	material: false,
	position: new THREE.Vector3(0,0,0),
	rotation: new THREE.Vector3(0,0,0),
	scale: new THREE.Vector3(1,1,1),
	animations: false,
	mixins: false,
	classes: ['a-ent'],
	components: false,
	};
	let artFrameData = {
	data: 'artFrameData',
	id:'artFrame',
	sources: false,
	text: false,
	geometry: {primitive: 'box', depth: 0.01, width: 4.4, height: 2.55},
	material: {shader: "flat", color: "#55a5be", opacity: 1, alphaTest: 0.1},
	position: new THREE.Vector3(0,1.75,-6),
	rotation: new THREE.Vector3(0,0,0),
	scale: new THREE.Vector3(1,1,1),
	animations: {
	scale0:{property: 'scale', from: '1 1 1', to: '2 2 2', dur: 2000, delay: 0, loop: 'false', dir: 'normal', easing: 'easeInOutSine', elasticity: 400, autoplay: false, enabled: true, startEvents: 'to0'},
	position0:{property: 'position', from: '0 1.75 -6', to: '0 3.5 -12', dur: 2000, delay: 0, loop: 'false', dir: 'normal', easing: 'easeInOutSine', elasticity: 400, autoplay: false, enabled: true, startEvents: 'to0'},
	scale1:{property: 'scale', from: '2 2 2', to: '1 1 1', dur: 2000, delay: 0, loop: 'false', dir: 'normal', easing: 'easeInOutSine', elasticity: 400, autoplay: false, enabled: true, startEvents: 'to1'},
	position1:{property: 'position', from: '0 3.5 -12', to: '0 1.75 -6', dur: 2000, delay: 0, loop: 'false', dir: 'normal', easing: 'easeInOutSine', elasticity: 400, autoplay: false, enabled: true, startEvents: 'to1'},
	},
	mixins: false,
	classes: ['a-ent'],
	components: false,
	};
	let artFrameTextData = {
	data: 'artFrameTextData',
	id:'artFrameText',
	sources: false,
	text: {value:'Art Frame Text', width: 3, color: "#FFFFFF", align: "center", font: "exo2bold", zOffset: 0, side: 'double'},
	geometry: false,
	material: false,
	position: new THREE.Vector3(0,-1.5,0),
	rotation: new THREE.Vector3(0,0,0),
	scale: new THREE.Vector3(1,1,1),
	animations: false,
	mixins: false,
	classes: ['a-ent'],
	components: false,
	};
	artFrameParentData.id = 'artFrameParentAll';
	artFrameParentData.rotation = new THREE.Vector3(0,1,0);
	let artFrameParentAll = auxl.Core(artFrameParentData);
	let artFrameAllLayerData = {
		parent: {core: artFrameParentAll},
	};
	let parentId = 'artFrameParent';
	let parentFrameCores = [];
	let frameId = 'artFrame';
	let imageFrameCores = [];
	let textId = 'artFrameText';
	let textFrameCores = [];
	//Build Cores
	for(let a=0; a < imageCarousel.frames; a++){

		//Temp
		if(a === 0){
			frameRotation = -45;
		} else if(a === 1){
			frameRotation = 0;
		} else if(a === 2){
			frameRotation = -315;
		} else if(a === 3){
			frameRotation = -270;
		} else if(a === 4){
			frameRotation = -225;
		} else if(a === 5){
			frameRotation = -180;
		} else if(a === 6){
			frameRotation = -135;
		} else if(a === 7){
			frameRotation = -90;
		}

		//Parent
		parentId = 'artFrameParent' + a;
		let parentRotation = new THREE.Vector3(0,0,0);
		parentRotation.y = frameRotation;
		artFrameParentData.id = parentId;
		artFrameParentData.rotation = parentRotation;
		parentFrameCores[a] = auxl.Core(artFrameParentData);
		//Frame
		frameId = 'artFrame' + a;
		artFrameData.id = frameId;
		imageFrameCores[a] = auxl.Core(artFrameData);
		//Text
		textId = 'artFrameText' + a;
		artFrameTextData.id = textId;
		textFrameCores[a] = auxl.Core(artFrameTextData);
		//Layer
		artFrameAllLayerData['child'+a] = {
			parent: {core: parentFrameCores[a]}, 
			child0: {
				parent: {core: imageFrameCores[a]}, 
				child0: {core: textFrameCores[a]}, 
			},
		};
	}
	let artFrameAllLayer = auxl.Layer('artFrameAllLayer',artFrameAllLayerData);
	//Main Button Color
	let mainColor = auxl.colorTheoryGen('#6ab0db');
	//Button Templates
	//Button Parent
	let buttonParentData = {
	data: 'Button Parent',
	id:'buttonParent',
	sources: false,
	text: false,
	geometry: false,
	material: false,
	position: new THREE.Vector3(0,0,0),
	rotation: new THREE.Vector3(0,80,0),
	scale: new THREE.Vector3(1,1,1),
	animations:{
	scaleclick:{property: 'scale', from: '1 1 1', to: '1.05 1.05 1.05', dur: 125, delay: 0, loop: '1', dir: 'alternate', easing: 'easeInOutSine', elasticity: 400, autoplay: false, enabled: true, startEvents: 'click'},
	},
	mixins: false,
	classes: ['a-ent'],
	components: false,
	};
	//Button Obj
	let buttonObjData = {
	data: 'Button Obj',
	id:'buttonObj',
	sources: false,
	text: false,
	geometry: false,
	material: {shader: "flat", color: mainColor.base, opacity: 1},
	position: new THREE.Vector3(0,0.4,-2.5),
	rotation: new THREE.Vector3(-30,0,0),
	scale: new THREE.Vector3(0.1,0.1,0.1),
	animations:false,
	mixins: false,
	classes: ['a-ent'],
	components: false,
	};
	//Button Border
	let buttonBorderData = {
	data: 'Button Border',
	id:'buttonBorder',
	sources: false,
	text: false,
	geometry: false,
	material: {shader: "flat", color: mainColor.splitCompl[0], opacity: 1},
	position: new THREE.Vector3(0,0,0),
	rotation: new THREE.Vector3(0,0,0),
	scale: new THREE.Vector3(1,1,1),
	animations:false,
	mixins: false,
	classes: ['a-ent'],
	components: {
	['obj-model']:{obj: './assets/3d/buttons/border.obj'},
	//['model-loaded']:null,
	},
	};
	//Button Click Background
	let buttonClickData = {
	data: 'Button Click Background',
	id:'buttonClick',
	sources: false,
	text: false,
	geometry: {primitive: 'circle', radius: 2, segments: 12},
	material: {shader: "flat", color: mainColor.splitCompl[1], opacity: 0.5, side: 'double'},
	position: new THREE.Vector3(0,0,0),
	rotation: new THREE.Vector3(0,0,0),
	scale: new THREE.Vector3(1,1,1),
	animations:false,
	mixins: false,
	classes: ['clickable','a-ent'],
	components: false,
	};
	//Button Click Background
	let buttonTextData = {
	data: 'Button Text',
	id:'buttonText',
	sources: false,
	text: {value:'Button', width: 20, color: mainColor.base, align: "center", font: "exo2bold", zOffset: 0, side: 'double'},
	geometry: false,
	material: false,
	position: new THREE.Vector3(0,-2.75,0),
	rotation: new THREE.Vector3(0,0,0),
	scale: new THREE.Vector3(1,1,1),
	animations:false,
	mixins: false,
	classes: ['clickable','a-ent'],
	components: false,
	};
	//Button Layers
	//Backward
	buttonParentData.id = 'buttonBackwardParent';
	buttonParentData.rotation = new THREE.Vector3(0,22.5,0);
	let buttonBackwardParent = auxl.Core(buttonParentData);
	buttonObjData.components = {['obj-model']:{obj: './assets/3d/buttons/backward.obj'}};
	buttonObjData.id = 'buttonBackward';
	buttonBorderData.id = 'buttonBackwardBorder';
	buttonClickData.id = 'buttonBackwardClick';
	buttonTextData.id = 'buttonBackwardText';
	buttonTextData.text.value = 'Back';
	let buttonBackward = auxl.Core(buttonObjData);
	let buttonBackwardBorder = auxl.Core(buttonBorderData);
	let buttonBackwardClick = auxl.Core(buttonClickData);
	let buttonBackwardText = auxl.Core(buttonTextData);
	let buttonBackwardLayerData = {
	parent: {core: buttonBackwardParent}, 
	child0: {
		parent: {core: buttonBackward}, 
		child0: {core: buttonBackwardBorder},
		child1: {core: buttonBackwardClick},
		child2: {core: buttonBackwardText},
	},
	};
	let buttonBackwardLayer = auxl.Layer('buttonBackwardLayer',buttonBackwardLayerData);
	//Forward
	buttonParentData.id = 'buttonForwardParent';
	buttonParentData.rotation = new THREE.Vector3(0,-22.5,0);
	let buttonForwardParent = auxl.Core(buttonParentData);
	buttonObjData.components = {['obj-model']:{obj: './assets/3d/buttons/forward.obj'}};
	buttonObjData.id = 'buttonForward';
	buttonBorderData.id = 'buttonForwardBorder';
	buttonClickData.id = 'buttonForwardClick';
	buttonTextData.id = 'buttonForwardText';
	buttonTextData.text.value = 'Forward';
	let buttonForward = auxl.Core(buttonObjData);
	let buttonForwardBorder = auxl.Core(buttonBorderData);
	let buttonForwardClick = auxl.Core(buttonClickData);
	let buttonForwardText = auxl.Core(buttonTextData);
	let buttonForwardLayerData = {
	parent: {core: buttonForwardParent}, 
	child0: {
		parent: {core: buttonForward}, 
		child0: {core: buttonForwardBorder},
		child1: {core: buttonForwardClick},
		child2: {core: buttonForwardText},
	},
	};
	let buttonForwardLayer = auxl.Layer('buttonForwardLayer',buttonForwardLayerData);
	//Left Skip
	buttonParentData.id = 'buttonLeftSkipParent';
	buttonParentData.rotation = new THREE.Vector3(0,37.5,0);
	let buttonLeftSkipParent = auxl.Core(buttonParentData);
	buttonObjData.components = {['obj-model']:{obj: './assets/3d/buttons/left_skip.obj'}};
	buttonObjData.id = 'buttonLeftSkip';
	buttonBorderData.id = 'buttonLeftSkipBorder';
	buttonClickData.id = 'buttonLeftSkipClick';
	buttonTextData.id = 'buttonLeftSkipText';
	buttonTextData.text.value = 'Back Page';
	let buttonLeftSkip = auxl.Core(buttonObjData);
	let buttonLeftSkipBorder = auxl.Core(buttonBorderData);
	let buttonLeftSkipClick = auxl.Core(buttonClickData);
	let buttonLeftSkipText = auxl.Core(buttonTextData);
	let buttonLeftSkipLayerData = {
	parent: {core: buttonLeftSkipParent}, 
	child0: {
		parent: {core: buttonLeftSkip}, 
		child0: {core: buttonLeftSkipBorder},
		child1: {core: buttonLeftSkipClick},
		child2: {core: buttonLeftSkipText},
	},
	};
	let buttonLeftSkipLayer = auxl.Layer('buttonLeftSkipLayer',buttonLeftSkipLayerData);
	//Play
	buttonParentData.id = 'buttonPlayParent';
	buttonParentData.rotation = new THREE.Vector3(0,-7.5,0);
	let buttonPlayParent = auxl.Core(buttonParentData);
	buttonObjData.components = {['obj-model']:{obj: './assets/3d/buttons/play.obj'}};
	buttonObjData.id = 'buttonPlay';
	buttonBorderData.id = 'buttonPlayBorder';
	buttonClickData.id = 'buttonPlayClick';
	buttonTextData.id = 'buttonPlayText';
	buttonTextData.text.value = 'Play';
	let buttonPlay = auxl.Core(buttonObjData);
	let buttonPlayBorder = auxl.Core(buttonBorderData);
	let buttonPlayClick = auxl.Core(buttonClickData);
	let buttonPlayText = auxl.Core(buttonTextData);
	let buttonPlayLayerData = {
	parent: {core: buttonPlayParent}, 
	child0: {
		parent: {core: buttonPlay}, 
		child0: {core: buttonPlayBorder},
		child1: {core: buttonPlayClick},
		child2: {core: buttonPlayText},
	},
	};
	let buttonPlayLayer = auxl.Layer('buttonPlayLayer',buttonPlayLayerData);
	//Right Skip
	buttonParentData.id = 'buttonRightSkipParent';
	buttonParentData.rotation = new THREE.Vector3(0,-37.5,0);
	let buttonRightSkipParent = auxl.Core(buttonParentData);
	buttonObjData.components = {['obj-model']:{obj: './assets/3d/buttons/right_skip.obj'}};
	buttonObjData.id = 'buttonRightSkip';
	buttonBorderData.id = 'buttonRightSkipBorder';
	buttonClickData.id = 'buttonRightSkipClick';
	buttonTextData.id = 'buttonRightSkipText';
	buttonTextData.text.value = 'Next Page';
	let buttonRightSkip = auxl.Core(buttonObjData);
	let buttonRightSkipBorder = auxl.Core(buttonBorderData);
	let buttonRightSkipClick = auxl.Core(buttonClickData);
	let buttonRightSkipText = auxl.Core(buttonTextData);
	let buttonRightSkipLayerData = {
	parent: {core: buttonRightSkipParent}, 
	child0: {
		parent: {core: buttonRightSkip}, 
		child0: {core: buttonRightSkipBorder},
		child1: {core: buttonRightSkipClick},
		child2: {core: buttonRightSkipText},
	},
	};
	let buttonRightSkipLayer = auxl.Layer('buttonRightSkipLayer',buttonRightSkipLayerData);
	//Settings
	buttonParentData.id = 'buttonSettingsParent';
	buttonParentData.rotation = new THREE.Vector3(0,-52.5,0);
	let buttonSettingsParent = auxl.Core(buttonParentData);
	buttonObjData.components = {['obj-model']:{obj: './assets/3d/buttons/settings.obj'}};
	buttonObjData.id = 'buttonSettings';
	buttonBorderData.id = 'buttonSettingsBorder';
	buttonClickData.id = 'buttonSettingsClick';
	buttonTextData.id = 'buttonSettingsText';
	buttonTextData.text.value = 'Scale';
	let buttonSettings = auxl.Core(buttonObjData);
	let buttonSettingsBorder = auxl.Core(buttonBorderData);
	let buttonSettingsClick = auxl.Core(buttonClickData);
	let buttonSettingsText = auxl.Core(buttonTextData);
	let buttonSettingsLayerData = {
	parent: {core: buttonSettingsParent}, 
	child0: {
		parent: {core: buttonSettings}, 
		child0: {core: buttonSettingsBorder},
		child1: {core: buttonSettingsClick},
		child2: {core: buttonSettingsText},
	},
	};
	let buttonSettingsLayer = auxl.Layer('buttonSettingsLayer',buttonSettingsLayerData);
	//Stop
	buttonParentData.id = 'buttonStopParent';
	buttonParentData.rotation = new THREE.Vector3(0,7.5,0);
	buttonStopParent = auxl.Core(buttonParentData);
	buttonObjData.components = {['obj-model']:{obj: './assets/3d/buttons/stop.obj'}};
	buttonObjData.id = 'buttonStop';
	buttonBorderData.id = 'buttonStopBorder';
	buttonClickData.id = 'buttonStopClick';
	buttonTextData.id = 'buttonStopText';
	buttonTextData.text.value = 'Info';
	let buttonStop = auxl.Core(buttonObjData);
	let buttonStopBorder = auxl.Core(buttonBorderData);
	let buttonStopClick = auxl.Core(buttonClickData);
	let buttonStopText = auxl.Core(buttonTextData);
	let buttonStopLayerData = {
	parent: {core: buttonStopParent}, 
	child0: {
		parent: {core: buttonStop}, 
		child0: {core: buttonStopBorder},
		child1: {core: buttonStopClick},
		child2: {core: buttonStopText},
	},
	};
	let buttonStopLayer = auxl.Layer('buttonStopLayer',buttonStopLayerData);
	//Hashtag
	buttonParentData.id = 'buttonHashtagParent';
	buttonParentData.rotation = new THREE.Vector3(0,52.5,0);
	let buttonHashtagParent = auxl.Core(buttonParentData);
	buttonObjData.components = {['obj-model']:{obj: './assets/3d/buttons/hashtag.obj'}};
	buttonObjData.id = 'buttonHashtag';
	buttonBorderData.id = 'buttonHashtagBorder';
	buttonClickData.id = 'buttonHashtagClick';
	buttonTextData.id = 'buttonHashtagText';
	buttonTextData.text.value = 'Random Page';
	let buttonHashtag = auxl.Core(buttonObjData);
	let buttonHashtagBorder = auxl.Core(buttonBorderData);
	let buttonHashtagClick = auxl.Core(buttonClickData);
	let buttonHashtagText = auxl.Core(buttonTextData);
	let buttonHashtagLayerData = {
	parent: {core: buttonHashtagParent}, 
	child0: {
		parent: {core: buttonHashtag}, 
		child0: {core: buttonHashtagBorder},
		child1: {core: buttonHashtagClick},
		child2: {core: buttonHashtagText},
	},
	};
	let buttonHashtagLayer = auxl.Layer('buttonHashtagLayer',buttonHashtagLayerData);
	//Animations
	//Rotate 45
	let anim45Data = {
		name: 'anim45',
		property: 'object3D.rotation.y',
		from: '0',
		to: '45', 
		dur: 1000, 
		delay: 0, 
		loop: 'false', 
		dir: 'normal', 
		easing: 'easeInOutSine', 
		elasticity: 400, 
		autoplay: true, 
		enabled: true,
	};
	//Rotate 45 from Misc
	let anim45MiscData = {
		name: 'anim45misc',
		property: 'object3D.rotation.y',
		from: '0',
		to: '1', 
		dur: 500, 
		delay: 0, 
		loop: 'false', 
		dir: 'normal', 
		easing: 'easeInOutSine', 
		elasticity: 400, 
		autoplay: true, 
		enabled: true,
	};
	//Rotate 90
	let anim90Data = {
		name: 'anim90',
		property: 'object3D.rotation.y',
		from: '0',
		to: '90', 
		dur: 2500,
		delay: 0, 
		loop: 'false', 
		dir: 'normal', 
		easing: 'easeInOutSine', 
		elasticity: 400, 
		autoplay: true, 
		enabled: true,
	};
	//Rotate 360
	let anim360Data = {
		name: 'anim360',
		property: 'object3D.rotation.y',
		from: '0',
		to: '360', 
		dur: 120000, 
		delay: 0, 
		loop: 'true', 
		dir: 'normal', 
		easing: 'linear', 
		elasticity: 400, 
		autoplay: false, 
		enabled: true,
		startEvents: 'play',
		pauseEvents: 'pause',
	};
	//Update Frame's Image & Text Description
	const UpdateFrame = (frame, textValue, imgSrc) => {
		artFrameAllLayerData[frame].child0.parent.core.ChangeSelf({property: 'material', value:{src: imgSrc,shader: "flat", color: "#FFFFFF", opacity: 1}});
		artFrameAllLayerData[frame].child0.child0.core.ChangeSelf({property: 'text', value:{value: textValue, width: 3, color: "#FFFFFF", align: "center", font: "exo2bold", zOffset: 0, side: 'double'}})
	}
	//Update Frame from Direction
	const Update = (frame, direction) => {
		if(direction === 'forward'){
			currentImageForward++;
			currentImageBackward++;
			if(currentImageForward >= imageCarousel.images.length){
				currentImageForward = 0
			}
			if(currentImageBackward >= imageCarousel.images.length){
				currentImageBackward = 0
			}
			UpdateFrame('child'+frame, imageCarousel.images[currentImageForward].text, imageCarousel.images[currentImageForward].image);
		} else if(direction === 'backward'){
			currentImageBackward--;
			currentImageForward--;
			if(currentImageBackward < 0){
				currentImageBackward = imageCarousel.images.length-1;
			}
			if(currentImageForward < 0){
				currentImageForward = imageCarousel.images.length-1;
			}
			UpdateFrame('child'+frame, imageCarousel.images[currentImageBackward].text, imageCarousel.images[currentImageBackward].image);
		}
	}
	//Update All Frames
	const UpdateAll = (direction) => {
		for(let a = 0; a < imageCarousel.frames; a++){
			Update(a,direction);
		}
		loadingPage = false;
	}
	//Update Back 2 Frames
	const UpdateBackTwo = (direction) => {
		let update2 = [];
		let num;
		if(direction === 'forward'){
			if(currentRotation === 0){
				update2 = [0,1];
			} else if(currentRotation === 1){
				update2 = [2,3];
			} else if(currentRotation === 2){
				update2 = [4,5];
			} else if(currentRotation === 3){
				update2 = [6,7];
			}
		} else if(direction === 'backward'){
			if(currentRotation === 0){
				update2 = [6,7];
			} else if(currentRotation === 1){
				update2 = [0,1];
			} else if(currentRotation === 2){
				update2 = [2,3];
			} else if(currentRotation === 3){
				update2 = [4,5];
			}
			update2.reverse();
		}
		for(let each in update2){
			num = update2[each];
			Update(num,direction);
		}
	}
	//Update Back Frame
	const UpdateBack = (direction) => {
		let current = autoRotate;
		let num;
		if(current === 0){
			num = 3;
		} else if(current === 1){
			num = 2;
		} else if(current === 2){
			num = 1;
		} else if(current === 3){
			num = 0;
		} else if(current === 4){
			num = 7;
		} else if(current === 5){
			num = 6;
		} else if(current === 6){
			num = 5;
		} else if(current === 7){
			num = 4;
		}
		Update(num,direction);
	}
	//Spawn Image Carousel
	const SpawnImgCarousel = () => {
		if(imageCarousel.inScene){}else{
			artFrameAllLayer.SpawnLayer();
			buttonBackwardLayer.SpawnLayer();
			buttonHashtagLayer.SpawnLayer();
			buttonForwardLayer.SpawnLayer();
			buttonLeftSkipLayer.SpawnLayer();
			buttonPlayLayer.SpawnLayer();
			buttonRightSkipLayer.SpawnLayer();
			buttonSettingsLayer.SpawnLayer();
			buttonStopLayer.SpawnLayer();
			buttonBackwardClick.GetEl().addEventListener('click', Backward);
			buttonForwardClick.GetEl().addEventListener('click', Forward);
			buttonLeftSkipClick.GetEl().addEventListener('click', PrevPage);
			buttonPlayClick.GetEl().addEventListener('click', PlayPause);
			buttonRightSkipClick.GetEl().addEventListener('click', NextPage);
			buttonSettingsClick.GetEl().addEventListener('click', Scale);
			//buttonStopClick.GetEl().addEventListener('click', Stop);
			buttonHashtagClick.GetEl().addEventListener('click', RandomPage);
			Init();
			imageCarousel.inScene = true;
		}
	}
	//Despawn Image Carousel
	const DespawnImgCarousel = () => {
		if(imageCarousel.inScene){
			buttonBackwardClick.GetEl().removeEventListener('click', Backward);
			buttonForwardClick.GetEl().removeEventListener('click', Forward);
			buttonLeftSkipClick.GetEl().removeEventListener('click', PrevPage);
			buttonPlayClick.GetEl().removeEventListener('click', PlayPause);
			buttonRightSkipClick.GetEl().removeEventListener('click', NextPage);
			buttonSettingsClick.GetEl().removeEventListener('click', Scale);
			//buttonStopClick.GetEl().removeEventListener('click', Stop);
			buttonHashtagClick.GetEl().removeEventListener('click', RandomPage);
			artFrameAllLayer.DespawnLayer();
			buttonBackwardLayer.DespawnLayer();
			buttonHashtagLayer.DespawnLayer();
			buttonForwardLayer.DespawnLayer();
			buttonLeftSkipLayer.DespawnLayer();
			buttonPlayLayer.DespawnLayer();
			buttonRightSkipLayer.DespawnLayer();
			buttonSettingsLayer.DespawnLayer();
			buttonStopLayer.DespawnLayer();
			RemoveFromTracker(imageCarousel.id);
			imageCarousel.inScene = false;
		}
	}
	//Toggle Spawn
	const ToggleSpawn = () => {
		if(imageCarousel.inScene){
			DespawnImgCarousel();
		} else {
			SpawnImgCarousel();
		}
	}
	//Set Flag & Value to Object - Single or Array
	const SetFlag = (flagValue) => {
		if(Array.isArray(flagValue)){
			for(let each in flagValue){
			imageCarousel[flagValue[each].flag] = flagValue[each].value;
			}
		} else {
			imageCarousel[flagValue.flag] = flagValue.value;
		}
	}
	//Retreive Flag Value from Object - Single or Array
	const GetFlag = (flag) => {
		if(Array.isArray(flag)){
			let flagArray = [];
			for(let each in flag){
				flagArray.push(imageCarousel(flag[each]));
			}
			return flagArray;
		} else {
			return imageCarousel[flag];
		}
	}
	//Move Frames Forward 90 Degrees
	const Forward = () => {
		if(notMoving){
			notMoving = false;
			let rotY = artFrameAllLayer.GetParentEl().getAttribute('rotation').y;
			anim90Data.from = rotY;
			anim90Data.to = rotY - 90;
			artFrameAllLayer.AnimateParent(anim90Data);
			updateTimeout = setTimeout(() => {
				currentRotation++;
				if(currentRotation > 3){
					currentRotation = 0;
				}
				UpdateBackTwo('forward');
				notMoving = true;
				clearTimeout(updateTimeout);
			}, anim90Data.dur+10);
		}
	}
	//Move Frames Backward 90 Degrees
	const Backward = () => {
		if(notMoving){
			notMoving = false;
			let rotY = artFrameAllLayer.GetParentEl().getAttribute('rotation').y;
			anim90Data.from = rotY;
			anim90Data.to = rotY + 90;
			artFrameAllLayer.AnimateParent(anim90Data);
			updateTimeout = setTimeout(() => {
				currentRotation--;
				if(currentRotation < 0){
					currentRotation = 3;
				}
				console.log(currentRotation);
				UpdateBackTwo('backward');
				notMoving = true;
				clearTimeout(updateTimeout);
			}, anim90Data.dur+10);
		}
	}
	//Toggle Rotating View Animation
	const PlayPause = () => {
		if(notPlaying){
			notPlaying = false;
			notMoving = false;
				playInterval = setInterval(() => {
					UpdateBack();
					currentRotation = autoRotate;
					if(currentRotation === 7){
						currentRotation = 0;
					} else {
						currentRotation++;
					}
				}, anim360Data.dur/8);
			let rotY = artFrameAllLayer.GetParentEl().getAttribute('rotation').y;
			anim360Data.from = rotY;
			anim360Data.to = rotY - 360;
			artFrameAllLayer.AnimateParent(anim360Data);
			artFrameAllLayer.layer.all.parent.core.EmitEvent('play');

			buttonPlay.ChangeSelf({property: 'obj-model', value:{obj: './assets/3d/buttons/pause.obj'} });
			buttonPlayText.ChangeSelf({property: 'text', value: {value:'Pause', width: 20, color: mainColor.base, align: "center", font: "exo2bold", zOffset: 0, side: 'double'} })
		} else {
			notPlaying = true;
			notMoving = true;
			clearInterval(playInterval);
			artFrameAllLayer.layer.all.parent.core.EmitEvent('pause');
			buttonPlay.ChangeSelf({property: 'obj-model', value:{obj: './assets/3d/buttons/play.obj'} })
			buttonPlayText.ChangeSelf({property: 'text', value: {value:'Play', width: 20, color: mainColor.base, align: "center", font: "exo2bold", zOffset: 0, side: 'double'} })
		}
	}
	//Stops View Animation & Resets - Disabled
	const Stop = () => {
		if(notPlaying){} else {
			let rotY = artFrameAllLayer.GetParentEl().getAttribute('rotation').y;
			anim45MiscData.from = rotY;
			anim45MiscData.to = 1;
			artFrameAllLayer.AnimateParent(anim45MiscData);
			buttonPlay.ChangeSelf({property: 'obj-model', value:{obj: './assets/3d/buttons/play.obj'} });
			notPlaying = true;
			notMoving = true;
		}
	}
	//Load Next Page of Images
	const NextPage = () => {
		if(loadingPage){} else {
			loadingPage = true;
			UpdateAll('forward');
		}
	}
	//Load Previous Page of Images
	const PrevPage = () => {
		if(loadingPage){} else {
			loadingPage = true;
			UpdateAll('backward');
		}
	}
	//Load Randomized Page of Images
	const RandomPage = () => {
		if(loadingPage){} else {
			loadingPage = true;
			currentImageForward = Math.floor(Math.random()*imageCarousel.images.length);
			UpdateAll('forward');
		}
	}
	//Adjust Frame Scale w/ Animation
	const Scale = () => {
		//limit effects to the amount of spawned frames
		if(animating){} else {
			animating = true;
			scaleTimeout = setTimeout(() => {
				animating = false;
				clearTimeout(scaleTimeout);
			}, 2050);
			if(scale === 0){
				scale = 1;
				artFrameAllLayerData.child0.child0.parent.core.EmitEvent('to0');
				artFrameAllLayerData.child1.child0.parent.core.EmitEvent('to0');
				artFrameAllLayerData.child2.child0.parent.core.EmitEvent('to0');
				artFrameAllLayerData.child3.child0.parent.core.EmitEvent('to0');
				artFrameAllLayerData.child4.child0.parent.core.EmitEvent('to0');
				artFrameAllLayerData.child5.child0.parent.core.EmitEvent('to0');
				artFrameAllLayerData.child6.child0.parent.core.EmitEvent('to0');
				artFrameAllLayerData.child7.child0.parent.core.EmitEvent('to0');
			} else {
				scale = 0;
				artFrameAllLayerData.child0.child0.parent.core.EmitEvent('to1');
				artFrameAllLayerData.child1.child0.parent.core.EmitEvent('to1');
				artFrameAllLayerData.child2.child0.parent.core.EmitEvent('to1');
				artFrameAllLayerData.child3.child0.parent.core.EmitEvent('to1');
				artFrameAllLayerData.child4.child0.parent.core.EmitEvent('to1');
				artFrameAllLayerData.child5.child0.parent.core.EmitEvent('to1');
				artFrameAllLayerData.child6.child0.parent.core.EmitEvent('to1');
				artFrameAllLayerData.child7.child0.parent.core.EmitEvent('to1');
			}
		}
	}
	//Toggle Display of Detail Info
	const Info = () => {
		if(info){
			info = false;
		} else {
			info = true;
		}
	}
	//Prep Images and Detail Info after Spawn
	const Init = () => {
		buttonStopClick.EnableDetail({text: imageCarousel.description, position: new THREE.Vector3(0,1.5,-2)});
		UpdateAll('forward');
	}

	return {imageCarousel, SpawnImgCarousel, DespawnImgCarousel, ToggleSpawn, SetFlag, GetFlag, PlayPause, Forward, Backward, NextPage, PrevPage, RandomPage, Scale, Info};
}

//
//Export


/***/ }),

/***/ "./src/system/main.js":
/*!****************************!*\
  !*** ./src/system/main.js ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Core: () => (/* binding */ Core),
/* harmony export */   Layer: () => (/* binding */ Layer),
/* harmony export */   coreDataFromTemplate: () => (/* binding */ coreDataFromTemplate),
/* harmony export */   coreFromTemplate: () => (/* binding */ coreFromTemplate),
/* harmony export */   layerDataFromTemplate: () => (/* binding */ layerDataFromTemplate),
/* harmony export */   layerFromTemplate: () => (/* binding */ layerFromTemplate)
/* harmony export */ });
//
//AUXL : A-Frame UX Library
//v0.3 Engine
//https://github.com/Minty-Crisp/AUXL
//
//Created by Minty-Crisp (mintycrisp.com)
//
//Main
//
//Core
//Core & Data Copying
//Layer
//Layer & Data Copying

//
//Entity Core
//Single Base Object
const Core = (auxl, data) => {
	let core = JSON.parse(JSON.stringify(data));
	core.inScene = false;
	core.el = {};
	core.dom = false;
	core.domTimeout;
	core.events = {};
	core.parent = false;
	core.gridSpawned = false;
	core.gridPath = [];
	core.pathSpeed = 1000;
	core.pathWait = 1000;
	core.pathRoute = 'any';
	core.pathLoop = 'infinite';
	core.pathType = 'jump';
	core.currentPath = -1;
	core.gridPathInterval;
	core.gridPathTimeout;
	let details = false;
	let load3D = false;
	let loadMat = false;
	let loadNewMat = false;

	//Import external JS script
	async function getJsSrc(url){
		const response = await fetch(url)
		await __webpack_require__("./src/system lazy recursive")(response.url);
		return true;
	}
	//Loading Asset
	function loading(){
		auxl.loadingObjects.set(core.id,true);
		if(auxl.loadingScene){} else {
			auxl.loadingScene = true;
		}
	}
	//Asset Loaded
	function loaded(){
		auxl.loadingObjects.delete(core.id);
	}
	//Generate Entity Element
	const Generate = () => {
		core.el = {};
		//Instead of adding a source to each object that uses a component, add it to auxl.jsAll to dynamically load instead
		if(core.sources){
			let propertyKeys = Object.keys(core.sources);
			let propertyValues = Object.values(core.sources);
			for (let propKey in propertyKeys) {
				//if js key exists and is false, it is not ready yet, delay
				if(auxl.jsLoaded.hasOwnProperty(propertyKeys[propKey])){
					if(auxl.jsLoaded[propertyKeys[propKey]] === false){
						console.log(core.id);
						console.log('JS is not yet loaded');
						//add to this.spawnedWaitingForJS for reapplication of component info when finished loading
						auxl.spawnedWaitingForJS[propertyKeys[propKey]].push({id:core.id, properties: core.components[propertyKeys[propKey]]});
					}
				} else {
					auxl.spawnedWaitingForJS[propertyKeys[propKey]] = [];
					console.log(propertyKeys[propKey]);
					console.log(propertyValues[propKey]);
					auxl.jsLoaded[propertyKeys[propKey]] = false;
					function doneImporting(){
						console.log(propertyKeys[propKey]);
						console.log('Done');
						auxl.jsLoaded[propertyKeys[propKey]] = true;
						//re-apply component
						ChangeSelf({property:propertyKeys[propKey], value:core.components[propertyKeys[propKey]]});
						//auxl.spawnedWaitingForJS
						console.log(auxl.spawnedWaitingForJS);
						for(let each in auxl.spawnedWaitingForJS[propertyKeys[propKey]]){
					let name = auxl.spawnedWaitingForJS[propertyKeys[propKey]][each].id;
					let properties = auxl.spawnedWaitingForJS[propertyKeys[propKey]][each].properties;
					console.log(name);
					console.log(properties);
					document.getElementById(name).setAttribute(propertyKeys[propKey],properties);
						}
					//clear pending array after reapplications
					delete auxl.spawnedWaitingForJS[propertyKeys[propKey]];
					console.log(auxl.spawnedWaitingForJS);
					}
					getJsSrc(propertyValues[propKey]).then(doneImporting);
				}
			}
		}
		//Entity Type
		if(core.entity === 'preAdded'){
			if(document.getElementById(core.id)){
				core.el = document.getElementById(core.id);
			} else {
				core.el = document.createElement('a-entity');
			}
		} else if(core.entity){
			core.el = document.createElement(core.entity);
		} else {
			core.el = document.createElement('a-entity');
		}
		//Sound
		if(auxl.audioEnabled){
			let sound = {};
			if(core.sound){
				sound = JSON.parse(JSON.stringify(core.sound));
				if(!sound.volume){
					sound.volume = 1;
				}
				sound.volume *= auxl.volume;
				core.el.setAttribute('sound', sound);
			};
			if(core.sounds){
				for(let each in core.sounds){
					sound = JSON.parse(JSON.stringify(core.sounds[each]));
					if(!sound.volume){
						sound.volume = 1;
					}
					sound.volume *= auxl.volume;
					core.el.setAttribute('sound__'+each, sound);
				}
			};
		}
		//Text
		if(core.text){core.el.setAttribute('text', core.text)};
		//ID
		core.el.setAttribute('id', core.id);
		//Geometry
		if(core.geometry){
			core.el.setAttribute('geometry', core.geometry);
		}
		//Material
		if(core.material){
			if(core.material.src){
				loadMat = true;
			}
			core.el.setAttribute('material', core.material);
		}
		//Position
		if(core.position){
			core.el.setAttribute('position', core.position);
		}
		//Rotation
		if(core.rotation){
			core.el.setAttribute('rotation', core.rotation);
		}
		//Scale
		if(core.scale){
			core.el.setAttribute('scale', core.scale);
		}
		//Mixins
		if(core.mixins){
			core.el.setAttribute('mixins', core.mixins);
		}
		//Class
		for (let key in core.classes) {
			core.el.classList.add(core.classes[key]);
		}
		//Animations
		let animationKeys = Object.keys(core.animations);
		let animationValues = Object.values(core.animations);
		for (let key in animationKeys) {
			if(key === 0){} else {
				core.el.setAttribute('animation__'+animationKeys[key], animationValues[key]);
			}
		}
		//Wait for Model to Load?
		if(core.components['gltf-model'] || core.components['obj-model']){
			load3D = true;
		}
		//Components with auxl.jsAll dynamic JS loading support
		if(core.components){
			let componentKeys = Object.keys(core.components);
			let componentValues = Object.values(core.components);
			for (let key in componentKeys) {
				if(key === 0){} else {
					if(auxl.jsAll.hasOwnProperty(componentKeys[key])){
						if(auxl.jsLoaded.hasOwnProperty(componentKeys[key])){
							//JS has started loading or is loaded
							if(auxl.jsLoaded[componentKeys[key]] === false){
								//JS is Pending
								auxl.spawnedWaitingForJS[componentKeys[key]].push({id:core.id, properties: core.components[componentKeys[key]]});
							} else {
								//JS is Ready
								core.el.setAttribute(componentKeys[key],componentValues[key]);
							}
						} else {
							//Start to load JS
							auxl.spawnedWaitingForJS[componentKeys[key]] = [];
							auxl.jsLoaded[componentKeys[key]] = false;
							function doneImporting(){
								auxl.jsLoaded[componentKeys[key]] = true;
								//re-apply component
								ChangeSelf({property:componentKeys[key], value:core.components[componentKeys[key]]});
								for(let each in auxl.spawnedWaitingForJS[componentKeys[key]]){
							let name = auxl.spawnedWaitingForJS[componentKeys[key]][each].id;
							let properties = auxl.spawnedWaitingForJS[componentKeys[key]][each].properties;
							document.getElementById(name).setAttribute(componentKeys[key],properties);
								}
							//clear pending array after reapplications
							delete auxl.spawnedWaitingForJS[componentKeys[key]];
							}
							getJsSrc(auxl.jsAll[componentKeys[key]]).then(doneImporting);
								}
					} else {
						//Does not exist in jsAll, so it's an internal component or property
						core.el.setAttribute(componentKeys[key],componentValues[key]);
					}
				}
			}
		}
		//Object element generation done
		return core.el;
	}
	//Spawn Entity Object
	const SpawnCore = (parent) => {
		core.parent = parent || false;
		let preAdded = false;
		if(core.inScene){}else{
			//Generate Entity Element
			Generate();
			//Loading should only apply to gltf, obj and material textures
			if(load3D || loadMat){
				loading();
			}
			//Add to Scene or Parent
			if(core.entity === 'preAdded'){
				if(document.getElementById(core.id)){
					preAdded = true;
				}
			}
			if(preAdded){} else {
				if(core.parent){
					if(core.parent.core){
						//console.log('Core');
						if(core.parent.core.inScene){
							core.parent = core.parent.GetEl();
						} else {
							core.parent = false;
						}
					} else if(core.parent.layer){
						//console.log('Layer');
						if(parent.layer.inScene){
							core.parent = core.parent.GetParentEl();
						} else {
							core.parent = false;
						}
					} else if(core.parent.id){
						//console.log('Entity');
					} else if(typeof core.parent === 'string'){
						//console.log('ID');
						if(document.getElementById(core.parent)){
							core.parent = document.getElementById(core.parent);
						} else {
							core.parent = false;
						}
					}
					if(!core.parent){
						console.log(id);
						console.log(core.parent);
						console.log(document.getElementById(core.parent));
						console.log('Parent is not in scene!');
					} else {
						core.parent.appendChild(core.el);
					}
				} else {
					auxl.sceneEl.appendChild(core.el);
				}
			}
			//Loaded Events
			if(load3D){
				core.el.addEventListener('model-loaded', loaded);
			}
			if(loadMat){
				core.el.addEventListener('loaded', loaded);
			}
			//Link to DOM
			core.domTimeout = setTimeout(() => {
				core.dom = document.getElementById(core.id);
				//console.log(core.dom)
				clearTimeout(core.domTimeout);
			}, 100);

			core.inScene = true;
		}
	}
	//Despawn Entity Object
	const DespawnCore = () => {
		if(core.inScene){
			//Clear Core Timeout/Intervals
			clearTimeout(core.domTimeout);
			clearTimeout(core.gridPathTimeout);
			clearInterval(core.gridPathInterval);
			//Loaded Events
			if(load3D){
				core.el.removeEventListener('model-loaded', loaded);
			}
			if(loadMat || loadNewMat){
				core.el.removeEventListener('loaded', loaded);
			}
			//Remove all core.components to remove all event listeners before clearing from scene
			let componentKeys = Object.keys(core.components);
			for (let key in componentKeys) {
				if(key === 0){} else {
					GetEl().removeAttribute(componentKeys[key])
				}
			}
			//Collision
			if(core.gridSpawned){
				if(core.grid.collide){
					auxl.map.UpdateMapArea(core.id, core.grid.start, core.grid.end, false);
				} else if(core.grid.trigger){
					auxl.map.UpdateMapAreaTrigger(core.id, core.grid.start, core.grid.end, false);
				}
				core.gridSpawned = false;
			}
			//Remove from Scene or Parent
			if(core.parent){
				core.parent.removeChild(core.el);
			} else {
				auxl.sceneEl.removeChild(core.el);
			}
			//Scene Tracking Support
			if(auxl.ExistsInTracker(core.id)){
				auxl.RemoveFromTracker(core.id);
			}
			core.dom = false;
			core.inScene = false;
		}
	}
	//Toggle Spawn
	const ToggleSpawn = (parent, track) => {
		let newParent = parent || false;
		if(newParent){
			core.parent = newParent;
		}
		if(core.inScene){
			DespawnCore();
		} else {
			SpawnCore(core.parent);
			if(track){
				auxl.spawnTracker(core.id, track);
			}
		}
	}
	//PosOnGrid
	function posOnGrid(grid){
		let pos = new THREE.Vector3(0,0,0);
		if(grid.start.x === grid.end.x && grid.start.z === grid.end.z){
			pos.x = grid.start.x;
			pos.z = grid.start.z;
		} else {
			let xDif = (grid.start.x - grid.end.x)*-1;
			let zDif = (grid.start.z - grid.end.z)*-1;
			xDif /= 2;
			zDif /= 2;
			pos.x = grid.start.x + xDif;
			pos.z = grid.start.z + zDif;
		}
		pos.y = grid.start.y;
		return pos;
	}
	//Spawn on Grid
	const SpawnCoreOnGrid = (grid) => {
		//Start should always be less than or equal to end
		//Start from top left to bottom right

		//Grid goes from 0 - 2 takes up 5 grid spaces of 0, 0.5, 1, 1.5, 2
		//5 spaces of 0.5 equals 2.5, so width or height would be 2.5
		if(core.inScene){}else{
			if(grid){
				core.grid = grid;
			}
			//Ensure Grid Y Level is Set
			if(core.grid.start.y){} else {
				core.grid.start.y = 0;
			}
			if(core.grid.end.y){} else {
				core.grid.end.y = 0;
			}
			if(core.grid.yOffset){} else {
				core.grid.yOffset = 0;
			}
			core.grid.height = Math.abs(core.grid.start.y) + Math.abs(core.grid.end.y) + 1;
			//Prevent Player Collision Overlap
			let playerGrid = auxl.player.GetPlayerInfo().grid;
			if(core.grid.start.x <= playerGrid.x && core.grid.end.x >= playerGrid.x && core.grid.start.y <= playerGrid.y && core.grid.end.y >= playerGrid.y && core.grid.start.z <= playerGrid.z && core.grid.end.z >= playerGrid.z){
				//Wait to Spawn till Player moves out of Range
				auxl.map.WaitToSpawn({name:core.id, func: 'SpawnCoreOnGrid'});
			} else {
				//Grid Position
				let startPos = posOnGrid(core.grid);
				core.position.x = startPos.x;
				core.position.y = core.grid.yOffset + startPos.y;
				core.position.z = startPos.z;
				//Spawn Core
				SpawnCore();
				//Collision or Trigger Map Update
				if(core.grid.collide){
					auxl.map.UpdateMapArea(core.id, core.grid.start, core.grid.end, core.grid.collide);
				} else if(core.grid.trigger){
					auxl.map.UpdateMapAreaTrigger(core.id, core.grid.start, core.grid.end, core.grid.trigger);
				}
				core.gridSpawned = true;
			}
		}
	}
	//Toggle Grid Spawn
	const ToggleCoreGridSpawn = (grid) => {
		if(core.inScene){
			DespawnFromGrid();
		} else {
			SpawnOnGrid(grid);
		}
	}
	//Move on Grid
	const GridMove = (move, type) => {
		//with new start/end coords, check if free, if so move, otherwise wait till it is cleared
		//let gridMovement = {start:{x:0, z:-5}, end: {x:0, z:-5}};
		let gridMovement = {start:{}, end: {}};
		gridMovement.start.x = core.grid.start.x;
		gridMovement.start.y = core.grid.start.y;
		gridMovement.start.z = core.grid.start.z;
		gridMovement.end.x = core.grid.end.x;
		gridMovement.end.y = core.grid.end.y;
		gridMovement.end.z = core.grid.end.z;
		//Calc X
		if(move.x){
			gridMovement.start.x += move.x;
			gridMovement.end.x += move.x;
		}
		//Calc Y
		if(move.y){
			gridMovement.start.y += move.y;
			gridMovement.end.y += move.y;
		}
		//Calc Z
		if(move.z){
			gridMovement.start.z += move.z;
			gridMovement.end.z += move.z;
		}
		//Actual Position to Move Into
		let movePos = posOnGrid(gridMovement);
		//movePos.y = core.position.y;
		//Collision Move Checks
		if(core.grid.collide){
			if(auxl.map.CheckMapAreaSansArea(core.grid, gridMovement, core.grid.height)){
				//console.log('free')
				//Clear previous grid pos
				auxl.map.UpdateMapArea(core.id, core.grid.start, core.grid.end, false);
				//Update new grid pos
				auxl.map.UpdateMapArea(core.id, gridMovement.start, gridMovement.end, true);
				//Move Object
				if(core.pathType === 'anim'){
					//Animate Object Move
					if(move.x){
						EmitEvent('animstartx' + movePos.x);
					} else if(move.y){
						EmitEvent('animstarty' + movePos.y);
					} else if(move.z){
						EmitEvent('animstartz' + movePos.z);
					}
				} else if(core.pathType === 'jump'){
					//Jump Object Move
					ChangeSelf({property: 'position', value: movePos});
				}
				//Update core.grid with new grid pos
				core.grid.start.x = gridMovement.start.x;
				core.grid.start.y = gridMovement.start.y;
				core.grid.start.z = gridMovement.start.z;
				core.grid.end.x = gridMovement.end.x;
				core.grid.end.y = gridMovement.end.y;
				core.grid.end.z = gridMovement.end.z;
				return true;
			} else {
				//console.log('not free')
				return false;
			}
		} else if(core.grid.trigger){
			//Clear previous grid pos
			auxl.map.UpdateMapAreaTrigger(core.id, core.grid.start, core.grid.end, false);
			//Update new grid pos
			auxl.map.UpdateMapAreaTrigger(core.id, gridMovement.start, gridMovement.end, true);
			//Move Object
			if(core.pathType === 'anim'){
				//Animate Object Move
				if(move.x){
					EmitEvent('animstartx' + movePos.x);
				} else if(move.y){
					EmitEvent('animstarty' + movePos.y);
				} else if(move.z){
					EmitEvent('animstartz' + movePos.z);
				}
			} else if(core.pathType === 'jump'){
				//Jump Object Move
				move.pos.y + core.grid.yOffset;
				ChangeSelf({property: 'position', value: movePos});
			}
			//Update core.grid with new grid pos
			core.grid.start.x = gridMovement.start.x;
			core.grid.start.y = gridMovement.start.y;
			core.grid.start.z = gridMovement.start.z;
			core.grid.end.x = gridMovement.end.x;
			core.grid.end.y = gridMovement.end.y;
			core.grid.end.z = gridMovement.end.z;

			return true;
		}
	}
	//Build Path
	const GridPath = (grid) => {
		//Update Speed & Type
		core.pathSpeed = grid.speed || 1000;
		core.pathWait = grid.wait || 1000;
		core.pathPatience = grid.patience || 3;
		core.pathRoute = grid.route || 'any';
		core.pathLoop = grid.loop || 'infinite';
		core.pathType = grid.type || 'jump';

		//Any will walk in either direction along path, each loop may continue or reverse, if blocked will reverse to start/end of path. Closed loops only
		//Circuit follows path from start to finish, if blocked it will go back to start and try again, otherwise it will keep looping. Closed loops only.
		//Alternate will walk to end of path and back, if blocked it will reverse to start/end of path and try again. Point A to Point B or Closed loops

		//Ensure Starting Position is Correct
		let startPos = posOnGrid(core.grid);

		core.position.x = startPos.x;
		if(startPos.y){
			core.position.y = startPos.y;
		}
		core.position.z = startPos.z;
		//Add Path Grid Points
		let step = 0.5;
		for(let each in grid.path){
			let steps = 1;
			for(let pos in grid.path[each]){
				if(pos === 'y'){
					if(grid.path[each][pos] > 0){
						step = 1;
					} else {
						step = -1;
					}
					steps = Math.abs(grid.path[each][pos]);
				} else {
					if(grid.path[each][pos] > 0){
						step = 0.5;
					} else {
						step = -0.5;
					}
					steps = Math.abs(grid.path[each][pos]/0.5);
				}
				for(let a = 0; a < steps; a++){
					core.gridPath.push({[pos]:step});
				}
			}
		}
		//Step Animations
		let key;
		let move;
		let currentX = core.position.x;
		let currentY = core.position.y;
		let currentZ = core.position.z;

		//Build Step Animations
		if(core.pathType === 'anim'){
			//Add 90 degree rotation anims
			for(let each in core.gridPath){
				let animMoveData = {
					name: 'animmove',
					property: 'object3D.position.x',
					to: 0,
					dur: core.pathSpeed,
					delay: 0,
					loop: false,
					dir: 'normal',
					easing: 'linear',
					elasticity: 400,
					autoplay: false,
					enabled: true,
					startEvents: 'moveXStart',
					pauseEvents: 'moveXStop',
				};
				//console.log(core.gridPath[each])
				//console.log(Object.keys(core.gridPath[each])[0])
				key = Object.keys(core.gridPath[each])[0];
				move = core.gridPath[each][key];

				animMoveData.property = 'object3D.position.' + key;
				if(key === 'x'){
					animMoveData.to = (currentX += move);
					animMoveData.name = 'animmove' + key + currentX;
					animMoveData.startEvents = 'animstart' + key + currentX;
					animMoveData.pauseEvents = 'animstop' + key + currentX;
				} else if(key === 'y'){
					animMoveData.to = (currentY += move) + core.grid.yOffset;
					animMoveData.name = 'animmove' + key + currentY;
					animMoveData.startEvents = 'animstart' + key + currentY;
					animMoveData.pauseEvents = 'animstop' + key + currentY;
				} else if(key === 'z'){
					animMoveData.to = (currentZ += move);
					animMoveData.name = 'animmove' + key + currentZ;
					animMoveData.startEvents = 'animstart' + key + currentZ;
					animMoveData.pauseEvents = 'animstop' + key + currentZ;
				}
				//Add Step Animations
				if(core.inScene){
					Animate(animMoveData);
				} else {
					if(Object.keys(core.animations).length === 0){
						core.animations = {};
					}
					delete animMoveData.name;
					core.animations['move'+each] = animMoveData;
				}
			}
		}
	}
	//Walk Along Path
	const WalkPath = () => {
		let movedX = true;
		let moveX = false;
		let movedY = true;
		let moveY = false;
		let movedZ = true;
		let moveZ = false;
		let loop = 0;
		let alternate = false;
		let stopped = 0;

		//Randomize Direction for Path Any
		if(core.pathRoute === 'any'){
			if(Math.random()*100 >50){
				alternate = true;
			}
		}
		//Alternate Direction
		function changeDirection(){
			if(alternate){
				alternate = false;
			} else {
				alternate = true;
			}
		}
		//Walk from Start of Path
		function walkFromStart(){
			core.currentPath = 0;
		}
		//Walk Forward Along Path
		function forward(){
			core.currentPath++;
			if(core.currentPath >= core.gridPath.length){
				if(core.pathLoop === 'infinite'){
				} else if(loop >= core.pathLoop){
					clearInterval(core.gridPathInterval);
				} else {
					loop++;
				}
				if(core.pathRoute === 'circuit'){
					walkFromStart();
				} else if(core.pathRoute === 'alternate'){
					walkFromEnd();
					changeDirection();
				} else if(core.pathRoute === 'any'){
					if(Math.random()*100 >50){
						walkFromStart();
					} else {
						walkFromEnd();
						changeDirection();
					}
				}
			}
		}
		//Walk from End of Path
		function walkFromEnd(){
			core.currentPath = core.gridPath.length-1;
		}
		//Walk Reverse Along Path
		function reverse(){
			core.currentPath--;
			if(core.currentPath < 0){
				if(core.pathLoop === 'infinite'){
				} else if(loop >= core.pathLoop){
					clearInterval(core.gridPathInterval);
				} else {
					loop++;
				}
				if(core.pathRoute === 'circuit'){
					if(alternate){
						walkFromStart();
						changeDirection();
					}
				} else if(core.pathRoute === 'alternate'){
					walkFromStart();
					changeDirection();
				} else if(core.pathRoute === 'any'){
					if(Math.random()*100 >50){
						walkFromStart();
						changeDirection();
					} else {
						walkFromEnd();
					}
				}
			}
		}
		//Walk Interval
		core.gridPathInterval = setInterval(() => {
			//Path Step Completed, Calc Next
			if(movedX && movedY && movedZ){
				//Path Direction
				if(core.pathRoute === 'circuit'){
					//forward();
					if(alternate){
						reverse();
					} else {
						forward();
					}
				} else if(core.pathRoute === 'alternate'){
					if(alternate){
						reverse();
					} else {
						forward();
					}
				} else if(core.pathRoute === 'any'){
					if(alternate){
						reverse();
					} else {
						forward();
					}
				}
				//Reset Path Step
				movedX = false;
				movedY = false;
				movedZ = false;
				//Step XYZ Movement
				if(core.gridPath[core.currentPath].x){
					moveX = true;
				} else {
					moveX = false;
				}
				if(core.gridPath[core.currentPath].y){
					moveY = true;
				} else {
					moveY = false;
				}
				if(core.gridPath[core.currentPath].z){
					moveZ = true;
				} else {
					moveZ = false;
				}
			}

			//X then Y then Z Movement
			if(moveX){
				if(alternate){
					movedX = GridMove({x:core.gridPath[core.currentPath].x*-1});
				} else {
					movedX = GridMove({x:core.gridPath[core.currentPath].x});
				}
				if(movedX){
					moveX = false;
					stopped = 0;
					//If X move only, ensure YZ is reset
					if(moveY){}else{
						movedY = true;
					}
					if(moveZ){}else{
						movedZ = true;
					}
				} else {
					//Patience before reversing direction if blocked
					stopped++;
					if(stopped >= core.pathPatience){
						//reverse and restart
						movedX = true;
						movedY = true;
						movedZ = true;
						changeDirection();
					}
				}
			} else if(moveY){
				if(alternate){
					movedY = GridMove({y:core.gridPath[core.currentPath].y*-1});
				} else {
					movedY = GridMove({y:core.gridPath[core.currentPath].y});
				}
				if(movedY){
					moveY = false;
					stopped = 0;
					//If Y move only, ensure XZ is reset
					if(moveX){}else{
						movedX = true;
					}
					if(moveZ){}else{
						movedZ = true;
					}
				} else {
					//Patience before reversing direction if blocked
					stopped++;
					if(stopped >= core.pathPatience){
						//reverse and restart
						movedX = true;
						movedY = true;
						movedZ = true;
						changeDirection();
					}
				}
			} else {
				if(moveZ){
					if(alternate){
						movedZ = GridMove({z:core.gridPath[core.currentPath].z*-1});
					} else {
						movedZ = GridMove({z:core.gridPath[core.currentPath].z});
					}
					if(movedZ){
						moveZ = false;
						stopped = 0;
						//If Z move only, ensure XY is reset
						if(moveX){}else{
							movedX = true;
						}
						if(moveY){}else{
							movedY = true;
						}
					} else {
						//Patience before reversing direction if blocked
						stopped++;
						if(stopped >= core.pathPatience){
							//reverse and restart
							movedX = true;
							movedY = true;
							movedZ = true;
							changeDirection();
						}
					}
				}
			}

		}, core.pathSpeed + core.pathWait);
/*
		core.gridPathInterval = setInterval(() => {
			//Path Step Completed, Calc Next
			if(movedX && movedZ){
				//Path Direction
				if(core.pathRoute === 'circuit'){
					//forward();
					if(alternate){
						reverse();
					} else {
						forward();
					}
				} else if(core.pathRoute === 'alternate'){
					if(alternate){
						reverse();
					} else {
						forward();
					}
				} else if(core.pathRoute === 'any'){
					if(alternate){
						reverse();
					} else {
						forward();
					}
				}
				//Reset Path Step
				movedX = false;
				movedZ = false;
				//Step XZ Movement
				if(core.gridPath[core.currentPath].x){
					moveX = true;
				} else {
					moveX = false;
				}
				if(core.gridPath[core.currentPath].z){
					moveZ = true;
				} else {
					moveZ = false;
				}
			}

			//X than Z Movement
			if(moveX){
				if(alternate){
					movedX = GridMove({x:core.gridPath[core.currentPath].x*-1});
				} else {
					movedX = GridMove({x:core.gridPath[core.currentPath].x});
				}
				if(movedX){
					moveX = false;
					stopped = 0;
					//If X move only, ensure movedZ is reset
					if(moveZ){}else{
						movedZ = true;
					}
				} else {
					//Patience before reversing direction if blocked
					stopped++;
					if(stopped >= core.pathPatience){
						//reverse and restart
						movedX = true;
						movedZ = true;
						changeDirection();
					}
				}
			} else {
				if(moveZ){
					if(alternate){
						movedZ = GridMove({z:core.gridPath[core.currentPath].z*-1});
					} else {
						movedZ = GridMove({z:core.gridPath[core.currentPath].z});
					}
					if(movedZ){
						moveZ = false;
						stopped = 0;
						//If Z move only, ensure movedX is reset
						if(moveX){}else{
							movedX = true;
						}
					} else {
						//Patience before reversing direction if blocked
						stopped++;
						if(stopped >= core.pathPatience){
							//reverse and restart
							movedX = true;
							movedZ = true;
							changeDirection();
						}
					}
				}
			}

		}, core.pathSpeed + core.pathWait);
*/
	}
	//Change Element - Single or Array
	const ChangeSelf = (propertyValue) => {
		if(Array.isArray(propertyValue)){
			for(let each in propertyValue){
				if(propertyValue[each].value){
					if(propertyValue[each].value.src){
						if(auxl.loadingScene){
							if(loadNewMat){}else{
								loadNewMat = true;
								loading();
								core.el.addEventListener('loaded', loaded);
							}
						}
					}
				}
				GetEl().setAttribute(propertyValue[each].property, propertyValue[each].value);
			}
		} else {
			if(propertyValue.value){
				if(propertyValue.value.src){
					if(auxl.loadingScene){
						if(loadNewMat){}else{
							loadNewMat = true;
							loading();
							core.el.addEventListener('loaded', loaded);
						}
					}
				}
			}
			GetEl().setAttribute(propertyValue.property, propertyValue.value);
		}
	}
	//Change Core - Single or Array
	const ChangeCore = (propertyValue) => {
		if(Array.isArray(propertyValue)){
			core.el[propertyValue[each].property] = propertyValue[each].value;
		} else {
			core.el[propertyValue.property] = propertyValue.value;
		}
		if(core.inScene){
			ChangeSelf(propertyValue);
		}
	}
	//Remove Element Component
	const RemoveComponent = (property) => {
		if(Array.isArray(property)){
			for(let each in property){
				GetEl().removeAttribute(property[each]);
			}
		} else {
			GetEl().removeAttribute(property);
		}
	}
	//Physics Position
	const PhysPos = (pos) => {
		//Requires Dynamic or Static Body
 		if(typeof core.el.getAttribute('static-body') === 'object' || typeof core.el.getAttribute('dynamic-body') === 'object'){
			if(core.inScene){
				core.el.body.position.copy(pos);
			}
		} else {
			console.log('No physics body attached!');
		}
	}
	//Update Physics
	const UpdatePhys = (update) => {
		//Requires Dynamic or Static Body
 		if(typeof core.el.getAttribute('static-body') === 'object' || typeof core.el.getAttribute('dynamic-body') === 'object'){
			if(core.inScene){
				//core.el.body.position.copy(pos);
console.log(update)
/*
    [position] Vec3 optional
    [velocity] Vec3 optional
    [angularVelocity] Vec3 optional
    [quaternion] Quaternion optional
    [mass] Number optional
    [material] Material optional
    [type] Number optional
    [linearDamping=0.01] Number optional
    [angularDamping=0.01] Number optional
    [allowSleep=true] Boolean optional
    [sleepSpeedLimit=0.1] Number optional
    [sleepTimeLimit=1] Number optional
    [collisionFilterGroup=1] Number optional
    [collisionFilterMask=1] Number optional
    [fixedRotation=false] Boolean optional
    [shape] Body optional
*/
			}
		} else {
			console.log('No physics body attached!');
		}
	}
	//Prepare Animation Input for Animate()
	function prepAnimation(animProps){
		let name = 'animation__' + animProps.name || 0;
		let property = animProps.property;
		let from = animProps.from || false;
		let to = animProps.to || false;
		let dur = animProps.dur || false;
		let delay = animProps.delay || false;
		let loop = animProps.loop || false;
		let dir = animProps.dir || false;
		let easing = animProps.easing || false;
		let elasticity = animProps.elasticity || false;
		let autoplay = animProps.autoplay || false;
		let enabled = animProps.enabled || false;
		let startEvents = animProps.startEvents || false;
		let pauseEvents = animProps.pauseEvents || false;
		let resumeEvents = animProps.resumeEvents || false;
		let anim = {
			property: 'object3D.rotation.y',
			to: 360,
			dur: 1000,
			delay: 0,
			loop: 'false',
			dir: 'normal',
			easing:'easeInOutSine',
			elasticity: 400,
			autoplay: 'true',
			enabled: 'true',
		};
		if(property){anim.property = property};
		if(from){anim.from = from};
		if(to){anim.to = to};
		if(dur){anim.dur = dur};
		if(delay){anim.delay = delay};
		if(loop){anim.loop = loop};
		if(dir){anim.dir = dir};
		if(easing){anim.easing = easing};
		if(elasticity){anim.elasticity = elasticity};
		if(autoplay){anim.autoplay = autoplay};
		if(enabled){anim.enabled = enabled};
		if(startEvents){anim.startEvents = startEvents};
		if(pauseEvents){anim.pauseEvents = pauseEvents};
		if(resumeEvents){anim.resumeEvents = resumeEvents};

		return {name, anim}
	}
	//Add Animation to Element - Single or Array
	const Animate = (animProps) => {
		if(Array.isArray(animProps)){
			for(let each in animProps){
				let animation = prepAnimation(animProps[each]);
				GetEl().setAttribute(animation.name, animation.anim);
			}
		} else {
			let animation = prepAnimation(animProps);
			GetEl().setAttribute(animation.name, animation.anim);
		}
	}
	//Return Element in Scene
	const GetEl = (refresh) => {
		if(refresh){
			core.dom = document.getElementById(core.id);
		} else if(core.dom){} else {
			core.dom = document.getElementById(core.id);
		}
		return core.dom;
	}
	//Emit Event from Entity Element - Single or Array
	const EmitEvent = (eventName) => {
		if(Array.isArray(eventName)){
			for(let each in eventName){
				GetEl().emit(eventName[each],{bubbles: false});
			}
		} else {
			GetEl().emit(eventName,{bubbles: false});
		}
	}
	//Set Flag & Value to Object - Single or Array
	const SetFlag = (flagValue) => {
		if(Array.isArray(flagValue)){
			for(let each in flagValue){
				core[flagValue[each].flag] = flagValue[each].value;
				auxl.saveToProfile({auxlObject: core.id, type: 'core', sub: false, name: flagValue[each].flag, data: flagValue[each].value});
			}
		} else {
			core[flagValue.flag] = flagValue.value;
			auxl.saveToProfile({auxlObject: core.id, type: 'core', sub: false, name: flagValue.flag, data: flagValue.value});
		}
	}
	//Retreive Flag Value from Object - Single or Array
	const GetFlag = (flag) => {
		if(Array.isArray(flag)){
			let flagArray = [];
			for(let each in flag){
				flagArray.push(core(flag[each]));
			}
			return flagArray;
		} else {
			return core[flag];
		}
	}
	//Prep Details for Scene Display
	const prepDetails = (text, position, textColor, windowColor, windowWidth, windowHeight) => {
		core.isOpen = false;
		//Main Screen
		core.detailMain = auxl.Core(auxl.detailMainData);
		//Close Button
		core.detailClose = auxl.Core(auxl.detailCloseData);
		//Update Position
		if(position){
			core.detailMain.core.position.x = position.x;
			core.detailMain.core.position.y = position.y;
			core.detailMain.core.position.z = position.z;
		} else {
			core.detailMain.core.position.x = core.position.x + 0.1;
			core.detailMain.core.position.y = core.position.y + 0.75;
			core.detailMain.core.position.z = core.position.z + 0.25;
		}
		if(windowColor){
			core.detailMain.core.material.color = windowColor;
		}

		if(text){
			core.detailMain.core.text.value = text;
		} else {
			if(core.detail){
				core.detailMain.core.text.value = core.detail;
			}
		}
		if(textColor){
			core.detailMain.core.text.color = textColor;
		}

		if(windowWidth){
			core.detailMain.core.geometry.width = windowWidth;
			//update close position based on geometry change
			core.detailClose.core.position.x = windowHeight/2;
		}
		if(windowHeight){
			core.detailMain.core.geometry.height = windowHeight;
			//update close position based on geometry change
			core.detailClose.core.position.y = windowHeight/2;
		}

		//Detail Layer
		core.detailLayer = {
			parent: {core: core.detailMain}, 
			child0: {core: core.detailClose},
		}
		core.detailAll = auxl.Layer('detailAll',core.detailLayer);
		details = true;
	}
	//Open Details Support
	function detailPrompt_open(){
	let elGenDelay = setTimeout(function () {
		core.detailMain.core.el.emit('open',{});
		core.detailClose.core.el.emit('open',{});
		core.isOpen = true;
		clearTimeout(elGenDelay);
	}, 25);
	}
	//Close Details Support
	function detailPrompt_close(){
		core.detailMain.core.el.emit('close',{});
		core.detailClose.core.el.emit('close',{});
		let elDelDelay = setTimeout(function () {
			core.detailAll.DespawnLayer();
			core.isOpen = false;
			clearTimeout(elDelDelay);
		}, 550);
	}
	//Toggle Details Support
	function openClose(){
		function closePrompt(){
			core.detailClose.core.el.removeEventListener('click',closePrompt);
			core.isOpen = detailPrompt_close();
		}
		if(core.isOpen){
			core.isOpen = detailPrompt_close();
			core.detailClose.core.el.removeEventListener('click',closePrompt);
		} else {
			core.detailAll.SpawnLayer();
			core.isOpen = detailPrompt_open();
			core.detailClose.core.el.addEventListener('click', closePrompt);
		}
	}
	//Enable Details Window on Click
	const EnableDetail = (detailInfo) => {
		if(details){} else {
			prepDetails(detailInfo.text, detailInfo.position, detailInfo.textColor, detailInfo.windowColor, detailInfo.windowWidth, detailInfo.windowHeight);
		}
			GetEl().addEventListener('click', openClose);
	}
	//Disable Details Window
	const DisableDetail = () => {
		GetEl().removeEventListener('click', openClose);
	}

	return {core, Generate, SpawnCore, DespawnCore, ToggleSpawn, SpawnCoreOnGrid, ToggleCoreGridSpawn, RemoveComponent, GridMove, GridPath, WalkPath, ChangeSelf, ChangeCore, PhysPos, UpdatePhys, Animate, GetEl, EmitEvent, SetFlag, GetFlag, EnableDetail, DisableDetail};
}
//
//Generate new Core Data from Template
const coreDataFromTemplate = (auxl, data, edit, assign) => {
	//Omit 2 Keys from Object
	function omit(key1, key2, obj) {
	  const {[key1]: omitted1, [key2]: omitted2, ...rest} = obj;
	  return rest;
	}
	//Omit element/parent key that contains reference to original Core
	let newCoreData = omit('el', 'parent', data);
	newCoreData = JSON.parse(JSON.stringify(newCoreData));
	//Apply Edits
	if(edit){
		for(let each in edit){
			newCoreData[each] = edit[each];
		}
	}
	//Prevent Overwritting
	if(assign){}else{
		if(!edit.id){
			newCoreData.id = auxl.ranNameGen();
		}
		newCoreData.id = auxl.checkDupeName(newCoreData.id);
	}
	//Output
	if(assign){
		return newCoreData;
	} else {
		auxl[newCoreData.id] = newCoreData;
	}
}
//Generate new Core from Template
const coreFromTemplate = (auxl, core, edit, assign) => {
	//Prevent Overwritting
	if(assign){}else{
		if(edit){
			if(!edit.id){
				edit.id = auxl.ranNameGen();
			}
		} else {
			edit = {};
			edit.id = auxl.ranNameGen();
		}
		edit.id = auxl.checkDupeName(edit.id);
	}
	let newCoreData = auxl.coreDataFromTemplate(core.core, edit, true);
	//Output
	if(assign){
		return auxl.Core(newCoreData)
	} else {
		auxl[newCoreData.id] = auxl.Core(newCoreData);
	}
}

//
//Layered Cores
//Multiple Entity Cores Combined
const Layer = (auxl, id, all, update) => {
	let layer = {id, all};
	layer.inScene = false;
	layer.allNames = [];
	layer.children = {};
	layer.tempParents = [];
	layer.parent = false;
	layer.gridSpawned = false;
	layer.gridPath = [];
	layer.pathSpeed = 1000;
	layer.pathWait = 1000;
	layer.pathRoute = 'any';
	layer.pathLoop = 'infinite';
	layer.pathType = 'jump';
	layer.currentPath = -1;
	layer.gridPathInterval;
	layer.gridPathTimeout;
	if(update){
		for(let each in update){
			layer[each] = update[each];
		}
	}
	//Order of Elements Added to Scene
	let accessOrder = [];

	//Spawn Multi Entity Object
	const SpawnLayer = (parent) => {
		layer.parent = parent || false;
		if(parent){
			if(parent.core){
				//console.log('Core')
				if(parent.core.inScene){
					layer.parent = parent.GetEl();
				} else {
					layer.parent = false;
				}
			} else if(parent.layer){
				//console.log('Layer')
				if(parent.layer.inScene){
					layer.parent = parent.GetParentEl();
				} else {
					layer.parent = false;
				}
			} else if(parent.id){
				//console.log('Entity')
				layer.parent = parent;
			} else if(typeof parent === 'string'){
				//console.log('ID')
				if(document.getElementById(parent)){
					layer.parent = document.getElementById(parent);
				} else {
					layer.parent = false;
				}
			}
			if(!layer.parent){
				console.log(id);
				console.log(parent);
				console.log(document.getElementById(parent));
				console.log('Parent is not in scene!');
			}
		}
		if(layer.inScene){}else{
			let currentParent = layer.parent;
			let previousParent = false
			function spawnSection(sectionParent, object, depth) {
				currentParent = sectionParent || false;
				//New Depth Parent
				if(object.parent){
					layer.tempParents[depth] = object.parent.core.core.id;
				}
				for(let key in object){
					if(object.hasOwnProperty(key)){
						if(key === 'core'){
						//Access Order
						if(accessOrder.length === depth){
							accessOrder.push([]);
						}
						accessOrder[depth].push(object[key]);
						layer.allNames.push(object[key].core.id);
						//Skip Parent Spawns
						if(object[key].core.id === layer.all.parent.core.core.id || object[key].core.id === currentParent || object[key].core.id === layer.tempParents[depth] || object[key].core.id === layer.tempParents[depth-1]){} else {
							//Spawning Child
							layer.children[object[key].core.id] = {obj: object[key], parent: currentParent};
							object[key].SpawnCore(currentParent);
						}
						} else if(key === "parent" && object[key].hasOwnProperty('core')){
							//Access Order of Elements
							if(accessOrder.length === depth){
								accessOrder.push([]);
							}
							accessOrder[depth].push(object[key].core);

							//Update Current Parent
							if(object[key].core.core.id === layer.all.parent.core.core.id){
								//Main Layer Parent
								currentParent = layer.parent;
							} else if(object[key].core.core.id === currentParent || object[key].core.core.id === layer.tempParents[depth]){
								//Previous Depth Parent
								currentParent = layer.tempParents[depth-1];
							} else {
								//Current Depth Parent
								currentParent = layer.tempParents[depth];
							}

							//Spawn
							layer.children[object[key].core.id] = {obj: object[key], parent: currentParent};
							object[key].core.SpawnCore(currentParent);

							//Continue
							spawnSection(currentParent, object[key], depth + 1);
						} else if(typeof object[key] === 'object'){
							//Update Current Parent
							if(object[key].parent){
								currentParent = object[key].parent;
							} else {
								currentParent = layer.tempParents[depth];
							}
							//Continue
							spawnSection(currentParent, object[key], depth + 1);
						}
					}
				}
			}
			spawnSection(layer.parent, layer.all, 0);
			layer.inScene = true;
		}
	}
	//Despawn Multi Entity Object
	const DespawnLayer = () => {
		if(layer.inScene){
			//Clear Core Timeout/Intervals
			clearTimeout(layer.gridPathTimeout);
			clearInterval(layer.gridPathInterval);
			//Collision
			if(layer.gridSpawned){
				if(layer.grid.collide){
					auxl.map.UpdateMapArea(layer.id, layer.grid.start, layer.grid.end, false);
				} else if(layer.grid.trigger){
					auxl.map.UpdateMapAreaTrigger(layer.id, layer.grid.start, layer.grid.end, false);
				}
			}
			let removeOrder = [...accessOrder];
			removeOrder.reverse();
			let levelOrder;
			for(let layer of removeOrder){
				levelOrder = [...layer];
				levelOrder.reverse();
				for(let each of levelOrder){
					each.DespawnCore();
				}
			}
			//Scene Tracking Support
			if(auxl.ExistsInTracker(layer.id)){
				auxl.RemoveFromTracker(layer.id);
			}
			layer.inScene = false;
		}
	}
	//Toggle Spawn
	const ToggleSpawn = (parent) => {
		let newParent = parent || false;
		if(newParent){
			layer.parent = newParent;
		}
		if(layer.inScene){
			DespawnLayer();
		} else {
			SpawnLayer(layer.parent);
		}
	}
	//PosOnGrid
	function posOnGrid(grid){
		let pos = new THREE.Vector3(0,0,0);
		if(grid.start.x === grid.end.x && grid.start.z === grid.end.z){
			pos.x = grid.start.x;
			pos.z = grid.start.z;
		} else {
			let xDif = (grid.start.x - grid.end.x)*-1;
			let zDif = (grid.start.z - grid.end.z)*-1;
			xDif /= 2;
			zDif /= 2;
			pos.x = grid.start.x + xDif;
			pos.z = grid.start.z + zDif;
		}
		pos.y = grid.start.y;
		return pos;
	}
	//Spawn on Grid
	const SpawnLayerOnGrid = (grid) => {
		//Start should always be less than or equal to end
		//Start from top left to bottom right

		//Grid goes from 0 - 2 takes up 5 grid spaces of 0, 0.5, 1, 1.5, 2
		//5 spaces of 0.5 equals 2.5, so width or height would be 2.5
		if(layer.inScene){}else{
			if(grid){
				layer.grid = grid;
			}
			//Ensure Grid Y Level is Set
			if(layer.grid.start.y){} else {
				layer.grid.start.y = 0;
			}
			if(layer.grid.end.y){} else {
				layer.grid.end.y = 0;
			}
			if(layer.grid.yOffset){} else {
				layer.grid.yOffset = 0;
			}
			layer.grid.height = Math.abs(layer.grid.start.y) + Math.abs(layer.grid.end.y) + 1;
			//Prevent Player Collision Overlap
			let playerGrid = auxl.player.GetPlayerInfo().grid;
			if(layer.grid.start.x <= playerGrid.x && layer.grid.end.x >= playerGrid.x && layer.grid.start.y <= playerGrid.y && layer.grid.end.y >= playerGrid.y && layer.grid.start.z <= playerGrid.z && layer.grid.end.z >= playerGrid.z){
				//Wait to Spawn till Player moves out of Range
				auxl.map.WaitToSpawn({name:layer.id, func: 'SpawnLayerOnGrid'});
			} else {
				//Grid Position
				let startPos = posOnGrid(layer.grid);
				layer.all.parent.core.core.position.x = startPos.x;
				//layer.all.parent.core.core.position.y = layer.all.parent.core.core.position.y + startPos.y;
				layer.all.parent.core.core.position.y = layer.grid.yOffset + startPos.y;
				layer.all.parent.core.core.position.z = startPos.z;
				//Spawn Layer
				SpawnLayer();
				//Collision or Trigger Map Update
				if(layer.grid.collide){
					auxl.map.UpdateMapArea(layer.id, layer.grid.start, layer.grid.end, layer.grid.collide);
				} else if(layer.grid.trigger){
					auxl.map.UpdateMapAreaTrigger(layer.id, layer.grid.start, layer.grid.end, layer.grid.trigger);
				}
				layer.gridSpawned = true;
			}
		}
	}
	//Toggle Grid Spawn
	const ToggleLayerGridSpawn = (grid) => {
		if(layer.inScene){
			DespawnFromGrid();
		} else {
			SpawnOnGrid(grid);
		}
	}
	//Move on Grid
	const GridMove = (move, type) => {
		//with new start/end coords, check if free, if so move, otherwise wait till it is cleared
		//let gridMovement = {start:{x:0, z:-5}, end: {x:0, z:-5}};
		let gridMovement = {start:{}, end: {}};
		gridMovement.start.x = layer.grid.start.x;
		gridMovement.start.y = layer.grid.start.y;
		gridMovement.start.z = layer.grid.start.z;
		gridMovement.end.x = layer.grid.end.x;
		gridMovement.end.y = layer.grid.end.y;
		gridMovement.end.z = layer.grid.end.z;
		//Calc X
		if(move.x){
			gridMovement.start.x += move.x;
			gridMovement.end.x += move.x;
		}
		//Calc Y
		if(move.y){
			gridMovement.start.y += move.y;
			gridMovement.end.y += move.y;
		}
		//Calc Z
		if(move.z){
			gridMovement.start.z += move.z;
			gridMovement.end.z += move.z;
		}
		//Actual Position to Move Into
		let movePos = posOnGrid(gridMovement);
		movePos.y = layer.all.parent.core.core.position.y + movePos.y;
		//Collision Move Checks
		if(layer.grid.collide){
			if(auxl.map.CheckMapAreaSansArea(layer.grid, gridMovement, layer.grid.height)){
				//console.log('free')
				//Clear previous grid pos
				auxl.map.UpdateMapArea(layer.id, layer.grid.start, layer.grid.end, false);
				//Update new grid pos
				auxl.map.UpdateMapArea(layer.id, gridMovement.start, gridMovement.end, true);
				//Move Object
				if(layer.pathType === 'anim'){
					//Animate Object Move
					if(move.x){
						EmitEventParent('animstartx' + movePos.x);
					} else if(move.y){
						EmitEventParent('animstarty' + movePos.y);
					} else if(move.z){
						EmitEventParent('animstartz' + movePos.z);
					}
				} else if(layer.pathType === 'jump'){
					//Jump Object Move
					ChangeParent({property: 'position', value: movePos});
				}
				//Update core.grid with new grid pos
				layer.grid.start.x = gridMovement.start.x;
				layer.grid.start.y = gridMovement.start.y;
				layer.grid.start.z = gridMovement.start.z;
				layer.grid.end.x = gridMovement.end.x;
				layer.grid.end.y = gridMovement.end.y;
				layer.grid.end.z = gridMovement.end.z;
				return true;
			} else {
				//console.log('not free')
				return false;
			}
		} else if(layer.grid.trigger){
			//Clear previous grid pos
			auxl.map.UpdateMapAreaTrigger(layer.id, layer.grid.start, layer.grid.end, false);
			//Update new grid pos
			auxl.map.UpdateMapAreaTrigger(layer.id, gridMovement.start, gridMovement.end, true);
			//Move Object
			if(layer.pathType === 'anim'){
				//Animate Object Move
				if(move.x){
					EmitEventParent('animstartx' + movePos.x);
				} else if(move.y){
					EmitEventParent('animstarty' + movePos.y);
				} else if(move.z){
					EmitEventParent('animstartz' + movePos.z);
				}
			} else if(layer.pathType === 'jump'){
				//Jump Object Move
				ChangeParent({property: 'position', value: movePos});
			}
			//Update core.grid with new grid pos
			layer.grid.start.x = gridMovement.start.x;
			layer.grid.start.y = gridMovement.start.y;
			layer.grid.start.z = gridMovement.start.z;
			layer.grid.end.x = gridMovement.end.x;
			layer.grid.end.y = gridMovement.end.y;
			layer.grid.end.z = gridMovement.end.z;
			return true;
		}
	}
	//Build Path
	const GridPath = (grid) => {
		//Update Speed & Type
		layer.pathSpeed = grid.speed || 1000;
		layer.pathWait = grid.wait || 1000;
		layer.pathPatience = grid.patience || 3;
		layer.pathRoute = grid.route || 'any';
		layer.pathLoop = grid.loop || 'infinite';
		layer.pathType = grid.type || 'jump';

		//Any will walk in either direction along path, each loop may continue or reverse, if blocked will reverse to start/end of path. Closed loops only
		//Circuit follows path from start to finish, if blocked it will go back to start and try again, otherwise it will keep looping. Closed loops only.
		//Alternate will walk to end of path and back, if blocked it will reverse to start/end of path and try again. Point A to Point B or Closed loops

		//Ensure Starting Position is Correct
		let startPos = posOnGrid(layer.grid);
		layer.all.parent.core.core.position.x = startPos.x;
		if(startPos.y){
			layer.all.parent.core.core.position.y = layer.all.parent.core.core.position.y + startPos.y;
		}
		layer.all.parent.core.core.position.z = startPos.z;

		//Add Path Grid Points
		let step = 0.5;
		for(let each in grid.path){
			let steps = 1;
			for(let pos in grid.path[each]){
				if(grid.path[each][pos] > 0){
					step = 0.5;
				} else {
					step = -0.5;
				}
				if(pos === 'y'){
					steps = Math.abs(grid.path[each][pos]);
				} else {
					steps = Math.abs(grid.path[each][pos])/0.5;
				}
				for(let a = 0; a < steps; a++){
					layer.gridPath.push({[pos]:step});
				}
			}
		}

		//Step Animations
		let key;
		let move;
		let currentX = layer.all.parent.core.core.position.x;
		let currentY = layer.all.parent.core.core.position.y;
		let currentZ = layer.all.parent.core.core.position.z;

		//Build Step Animations
		if(layer.pathType === 'anim'){
			//Add 90 degree rotation anims

			for(let each in layer.gridPath){
				let animMoveData = {
					name: 'animmove',
					property: 'object3D.position.x',
					to: 0,
					dur: layer.pathSpeed,
					delay: 0,
					loop: false,
					dir: 'normal',
					easing: 'linear',
					elasticity: 400,
					autoplay: false,
					enabled: true,
					startEvents: 'moveXStart',
					pauseEvents: 'moveXStop',
				};
				//console.log(layer.gridPath[each])
				//console.log(Object.keys(layer.gridPath[each])[0])
				key = Object.keys(layer.gridPath[each])[0];
				move = layer.gridPath[each][key];

				animMoveData.property = 'object3D.position.' + key;
				if(key === 'x'){
					animMoveData.to = (currentX += move);
					animMoveData.name = 'animmove' + key + currentX;
					animMoveData.startEvents = 'animstart' + key + currentX;
					animMoveData.pauseEvents = 'animstop' + key + currentX;
				} else if(key === 'y'){
					animMoveData.to = (currentY += move);
					animMoveData.name = 'animmove' + key + currentY;
					animMoveData.startEvents = 'animstart' + key + currentY;
					animMoveData.pauseEvents = 'animstop' + key + currentY;
				} else if(key === 'z'){
					animMoveData.to = (currentZ += move);
					animMoveData.name = 'animmove' + key + currentZ;
					animMoveData.startEvents = 'animstart' + key + currentZ;
					animMoveData.pauseEvents = 'animstop' + key + currentZ;
				}
				//Add Step Animations
				if(layer.inScene){
					AnimateParent(animMoveData);
				} else {
					if(Object.keys(layer.all.parent.core.core.animations).length === 0){
						layer.all.parent.core.core.animations = {};
					}
					delete animMoveData.name;
					layer.all.parent.core.core.animations['move'+each] = animMoveData;
				}
			}
		}
	}
	//Walk Along Path
	const WalkPath = () => {
		let movedX = true;
		let moveX = false;
		let movedY = true;
		let moveY = false;
		let movedZ = true;
		let moveZ = false;
		let loop = 0;
		let alternate = false;
		let stopped = 0;

		//Randomize Direction for Path Any
		if(layer.pathRoute === 'any'){
			if(Math.random()*100 >50){
				alternate = true;
			}
		}
		//Alternate Direction
		function changeDirection(){
			if(alternate){
				alternate = false;
			} else {
				alternate = true;
			}
		}
		//Walk from Start of Path
		function walkFromStart(){
			layer.currentPath = 0;
		}
		//Walk Forward Along Path
		function forward(){
			layer.currentPath++;
			if(layer.currentPath >= layer.gridPath.length){
				if(layer.pathLoop === 'infinite'){
				} else if(loop >= layer.pathLoop){
					clearInterval(layer.gridPathInterval);
				} else {
					loop++;
				}
				if(layer.pathRoute === 'circuit'){
					walkFromStart();
				} else if(layer.pathRoute === 'alternate'){
					walkFromEnd();
					changeDirection();
				} else if(layer.pathRoute === 'any'){
					if(Math.random()*100 >50){
						walkFromStart();
					} else {
						walkFromEnd();
						changeDirection();
					}
				}
			}
		}
		//Walk from End of Path
		function walkFromEnd(){
			layer.currentPath = layer.gridPath.length-1;
		}
		//Walk Reverse Along Path
		function reverse(){
			layer.currentPath--;
			if(layer.currentPath < 0){
				if(layer.pathLoop === 'infinite'){
				} else if(loop >= layer.pathLoop){
					clearInterval(layer.gridPathInterval);
				} else {
					loop++;
				}
				if(layer.pathRoute === 'circuit'){
					if(alternate){
						walkFromStart();
						changeDirection();
					}
				} else if(layer.pathRoute === 'alternate'){
					walkFromStart();
					changeDirection();
				} else if(layer.pathRoute === 'any'){
					if(Math.random()*100 >50){
						walkFromStart();
						changeDirection();
					} else {
						walkFromEnd();
					}
				}
			}
		}
		//Walk Interval
		layer.gridPathInterval = setInterval(() => {
			//Path Step Completed, Calc Next
			if(movedX && movedY && movedZ){
				//Path Direction
				if(layer.pathRoute === 'circuit'){
					//forward();
					if(alternate){
						reverse();
					} else {
						forward();
					}
				} else if(layer.pathRoute === 'alternate'){
					if(alternate){
						reverse();
					} else {
						forward();
					}
				} else if(layer.pathRoute === 'any'){
					if(alternate){
						reverse();
					} else {
						forward();
					}
				}
				//Reset Path Step
				movedX = false;
				movedY = false;
				movedZ = false;
				//Step XYZ Movement
				if(layer.gridPath[layer.currentPath].x){
					moveX = true;
				} else {
					moveX = false;
				}
				if(layer.gridPath[layer.currentPath].y){
					moveY = true;
				} else {
					moveY = false;
				}
				if(layer.gridPath[layer.currentPath].z){
					moveZ = true;
				} else {
					moveZ = false;
				}
			}

			//X then Y then Z Movement
			if(moveX){
				if(alternate){
					movedX = GridMove({x:layer.gridPath[layer.currentPath].x*-1});
				} else {
					movedX = GridMove({x:layer.gridPath[layer.currentPath].x});
				}
				if(movedX){
					moveX = false;
					stopped = 0;
					//If X move only, ensure YZ is reset
					if(moveY){}else{
						movedY = true;
					}
					if(moveZ){}else{
						movedZ = true;
					}
				} else {
					//Patience before reversing direction if blocked
					stopped++;
					if(stopped >= layer.pathPatience){
						//reverse and restart
						movedX = true;
						movedY = true;
						movedZ = true;
						changeDirection();
					}
				}
			} else if(moveY){
				if(alternate){
					movedY = GridMove({y:layer.gridPath[layer.currentPath].y*-1});
				} else {
					movedY = GridMove({y:layer.gridPath[layer.currentPath].y});
				}
				if(movedY){
					moveY = false;
					stopped = 0;
					//If Y move only, ensure XZ is reset
					if(moveX){}else{
						movedX = true;
					}
					if(moveZ){}else{
						movedZ = true;
					}
				} else {
					//Patience before reversing direction if blocked
					stopped++;
					if(stopped >= layer.pathPatience){
						//reverse and restart
						movedX = true;
						movedY = true;
						movedZ = true;
						changeDirection();
					}
				}
			} else {
				if(moveZ){
					if(alternate){
						movedZ = GridMove({z:layer.gridPath[layer.currentPath].z*-1});
					} else {
						movedZ = GridMove({z:layer.gridPath[layer.currentPath].z});
					}
					if(movedZ){
						moveZ = false;
						stopped = 0;
						//If Z move only, ensure XY is reset
						if(moveX){}else{
							movedX = true;
						}
						if(moveY){}else{
							movedY = true;
						}
					} else {
						//Patience before reversing direction if blocked
						stopped++;
						if(stopped >= layer.pathPatience){
							//reverse and restart
							movedX = true;
							movedY = true;
							movedZ = true;
							changeDirection();
						}
					}
				}
			}

		}, layer.pathSpeed + layer.pathWait);
	}
	//Return Parent Element in Scene
	const GetParentEl = (refresh) => {
		return layer.all.parent.core.GetEl(refresh);
	}
	//Return a Child Element in Scene
	const GetChildEl = (child, refresh) => {
		let childCore = GetChild(child);
		if(childCore){
			return childCore.GetEl(refresh);
		}
	}
	//Return Only Child Elements in Scene
	const GetAllChildEl = (refresh) => {
		let allEl = [];
		for(let each in layer.allNames){
			if(layer.allNames[each] === layer.all.parent.core.core.id){} else {
				allEl.push(GetChildEl(layer.allNames[each], refresh));
			}
		}
		return allEl;
	}
	//Return All Elements in Scene
	const GetAllEl = (refresh) => {
		let allEl = [];
		for(let each in layer.allNames){
			allEl.push(GetChildEl(layer.allNames[each], refresh));
		}
		return allEl;
	}
	//Emit Event from Parent Entity Element - Single or Array
	const EmitEventParent = (eventName) => {
		if(Array.isArray(eventName)){
			for(let each in eventName){
				all.parent.core.EmitEvent(eventName[each]);
			}
		} else {
			all.parent.core.EmitEvent(eventName);
		}
	}
	//Emit Event from a Child Entity Element - Single or Array
	const EmitEventChild = (child, eventName) => {
		let childCore = GetChild(child);

		if(Array.isArray(eventName)){
			for(let each in eventName){
				childCore.EmitEvent(eventName[each]);
			}
		} else {
			childCore.EmitEvent(eventName);
		}
	}
	//Emit Event from All Entity Elements - Single or Array
	const EmitEventAll = (eventName) => {
		if(Array.isArray(eventName)){
			for(let each in eventName){
				for(let section of accessOrder){
					for(let indv of section){
						indv.EmitEvent(eventName[each]);
					}
				}
			}
		} else {
			for(let section of accessOrder){
				for(let indv of section){
					indv.EmitEvent(eventName);
				}
			}
		}
	}
	//Change Parent Element - Single or Array
	const ChangeParent = (propertyValue) => {
		if(Array.isArray(propertyValue)){
			for(let each in propertyValue){
				all.parent.core.ChangeSelf(propertyValue[each]);
			}
		} else {
			all.parent.core.ChangeSelf(propertyValue);
		}
	}
	//Change Child Element - Single or Array
	const ChangeChild = (child, propertyValue) => {
		let childCore = GetChild(child);
		if(Array.isArray(propertyValue)){
			for(let each in propertyValue){
				childCore.ChangeSelf(propertyValue[each]);
			}
		} else {
			childCore.ChangeSelf(propertyValue);
		}
	}
	//Change All Elements - Single or Array
	const ChangeAll = (propertyValue) => {
		if(Array.isArray(propertyValue)){
			for(let each in propertyValue){
				for(let section of accessOrder){
					for(let indv of section){
						indv.ChangeSelf(propertyValue[each]);
					}
				}
			}
		} else {
			for(let section of accessOrder){
				for(let indv of section){
					indv.ChangeSelf(propertyValue);
				}
			}
		}
	}
	//Remove Parent Element Component - Single or Array
	const RemoveComponentParent = (property) => {
		if(Array.isArray(property)){
			for(let each in property){
				all.parent.core.RemoveComponent(property[each]);
			}
		} else {
			all.parent.core.RemoveComponent(property);
		}
	}
	//Remove Child Element Component - Single or Array
	const RemoveComponentChild = (child, property) => {
		let childCore = GetChild(child);
		if(Array.isArray(property)){
			for(let each in property){
				childCore.RemoveComponent(property[each]);
			}
		} else {
			childCore.RemoveComponent(property);
		}
	}
	//Remove All Elements Component - Single or Array
	const RemoveComponentAll = (property) => {
		if(Array.isArray(property)){
			for(let each in property){
				for(let section of accessOrder){
					for(let indv of section){
						indv.RemoveComponent(property[each]);
					}
				}
			}
		} else {
			for(let section of accessOrder){
				for(let indv of section){
					indv.RemoveComponent(property);
				}
			}
		}
	}
	//Add Animation to Parent Element - Single or Array
	const AnimateParent = (animProps) => {
		if(Array.isArray(animProps)){
			for(let each in animProps){
				all.parent.core.Animate(animProps[each]);
			}
		} else {
			all.parent.core.Animate(animProps);
		}
	}
	//Add Animation to Child Element - Single or Array
	const AnimateChild = (child, animProps) => {
		let childCore = GetChild(child);
		if(Array.isArray(animProps)){
			for(let each in animProps){
				childCore.Animate(animProps[each]);
			}
		} else {
			childCore.Animate(animProps);
		}
	}
	//Add Animation to All Elements - Single or Array
	const AnimateAll = (animProps) => {
		if(Array.isArray(animProps)){
			for(let each in animProps){
				for(let section of accessOrder){
					for(let indv of section){
						indv.Animate(animProps[each]);
					}
				}
			}
		} else {
			for(let section of accessOrder){
				for(let indv of section){
					indv.Animate(animProps);
				}
			}
		}
	}
	//Set Flag & Value to Parent Object - Single or Array
	const SetFlagParent = (flagValue) => {
		if(Array.isArray(flagValue)){
			for(let each in flagValue){
				all.parent.core.SetFlag(flagValue[each]);
			}
		} else {
			all.parent.core.SetFlag(flagValue);
		}
	}
	//Set Flag & Value to Child Object - Single or Array
	const SetFlagChild = (child, flagValue) => {
		let childCore = GetChild(child);
		if(Array.isArray(flagValue)){
			for(let each in flagValue){
				childCore.SetFlag(flagValue[each]);
			}
		} else {
			childCore.SetFlag(flagValue);
		}
	}
	//Set Flag & Value to All Objects - Single or Array
	const SetFlagAll = (flagValue) => {
		if(Array.isArray(flagValue)){
			for(let each in flagValue){
				for(let section of accessOrder){
					for(let indv of section){
						indv.SetFlag(flagValue[each]);
					}
				}
			}
		} else {
			for(let section of accessOrder){
				for(let indv of section){
					indv.SetFlag(flagValue);
				}
			}
		}
	}
	//Retreive Flag Value from Parent Object - Single or Array
	const GetFlagParent = (flag) => {
		if(Array.isArray(flag)){
			let flagArray = [];
			for(let each in flag){
				flagArray.push(all.parent.core.GetFlag(flag[each]));
			}
			return flagArray;
		} else {
			return all.parent.core.GetFlag(flag);
		}
	}
	//Retreive Flag Value from Child Object - Single or Array
	const GetFlagChild = (child, flag) => {
		let childCore = GetChild(child);
		if(Array.isArray(flag)){
			let flagArray = [];
			for(let each in flag){
				flagArray.push(childCore.GetFlag(flag[each]));
			}
			return flagArray;
		} else {
			return childCore.GetFlag(flag);
		}
	}
	//Retreive Flag Value from All Objects - Single or Array
	const GetFlagAll = (flag) => {
		let allObjects = [];
		if(Array.isArray(flag)){
			for(let each in flag){
				let flagArray = [];
				for(let section of accessOrder){
					for(let indv of section){
						flagArray.push(indv.GetFlag(flag[each]));
					}
				}
				allObjects.push(flagArray);
			}
			return allObjects;
		} else {
			for(let section of accessOrder){
				for(let indv of section){
					allObjects.push(indv.GetFlag(flag));
				}
			}
			return allObjects;
		}
	}
	//Enable Details for Parent Object
	const EnableDetailParent = (detailInfo) => {
		all.parent.core.EnableDetail(detailInfo);
	}
	//Enable Details for Child Object
	const EnableDetailChild = (child, detailInfo) => {
		GetChild(child).EnableDetail(detailInfo);
	}
	//Enable Details for All Objects
	const EnableDetailAll = (detailInfo) => {
		for(let section of accessOrder){
			for(let indv of section){
				indv.EnableDetail(detailInfo);
			}
		}
	}
	//Disable Details for Parent Object
	const DisableDetailParent = () => {
		all.parent.core.DisableDetail();
	}
	//Disable Details for Child Object
	const DisableDetailChild = (child) => {
		GetChild(child).DisableDetail();
	}
	//Disable Details for All Objects
	const DisableDetailAll = () => {
		for(let section of accessOrder){
			for(let indv of section){
				indv.DisableDetail();
			}
		}
	}
	//Support by returning child core object from name
	const GetChild = (childName) => {
		let result = [];
		function traverse(object, depth) {
			for (let key in object) {
				if (object.hasOwnProperty(key)) {
					if (key === 'core') {
						if(object[key].core.id === childName){
							result.push(object[key]);
							return;
						}
					} else if (key === "parent" && object[key].hasOwnProperty('core')) {
						if(object[key].core.core.id === childName){
							result.push(object[key].core);
							return;
						}
					} else if (typeof object[key] === 'object') {
						traverse(object[key], depth + 1);
					}
				}
			}
		}

		traverse(layer.all, 0);
		if(result[0]){
			return result[0];
		} else {
			console.log('Unable to find child');
			console.log(childName)
			return false;
		}
	}

	return {layer, SpawnLayer, DespawnLayer, ToggleSpawn, SpawnLayerOnGrid, ToggleLayerGridSpawn, GridMove, GridPath, WalkPath, GetParentEl, GetChildEl, GetAllChildEl, GetAllEl, EmitEventParent, EmitEventChild, EmitEventAll, ChangeParent, ChangeChild, ChangeAll, RemoveComponentParent, RemoveComponentChild, RemoveComponentAll, AnimateParent, AnimateChild, AnimateAll, SetFlagParent, SetFlagChild, SetFlagAll, GetFlagParent, GetFlagChild, GetFlagAll, EnableDetailParent, EnableDetailChild, EnableDetailAll, DisableDetailParent, DisableDetailChild, DisableDetailAll, GetChild};
}
//
//Generate new Layer from Layer Data Template
const layerDataFromTemplate = (auxl, layer, coreBaseName, changeParent, assign) => {
	let id = coreBaseName || auxl.ranNameGen();
	id = auxl.checkDupeName(id);
	let newStruct = {};
	let num = 0;
	//Prep Parent Core Name
	if(changeParent){
		if(changeParent.id){}else{
			changeParent.id = id+num;
		}
	} else {
		changeParent = {};
		changeParent.id = id+num;
	}
	changeParent.id = auxl.checkDupeName(changeParent.id);
	//Traverse Layer Data Object
	function layerTraverse(structure, newStructure){
		for(let level in structure){
			if(structure[level].core){
				newStructure[level] = {};
				if(num === 0){
					newStructure[level].core = auxl.coreFromTemplate(structure[level].core, changeParent, true);
				} else {
					newStructure[level].core = auxl.coreFromTemplate(structure[level].core, {id:auxl.checkDupeName(id+num)}, true);
				}
				num++;
			} else {
				newStructure[level] = {};
				layerTraverse(structure[level], newStructure[level]);
			}
		}
	}
	layerTraverse(layer, newStruct);
	//Update Parent
	if(changeParent){
		for(let each in changeParent){
			newStruct.parent.core.core[each] = changeParent[each];
		}
	}
	//Output
	if(assign){
		return newStruct;
	} else {
		auxl[id] = newStruct;
	}
}
//Generate new Layer from Layer Template
const layerFromTemplate = (auxl, layer, id, changeParent, updateLayer, assign) => {
	let struct;
	let newStruct = {};
	let num = 0;
	//Prevent Overwritting
	if(assign){}else{
		if(!id){
			id = auxl.ranNameGen();
		}
		id = auxl.checkDupeName(id);
	}
	//Prep Parent Core Name
	if(changeParent){
		if(changeParent.id){}else{
			changeParent.id = id+num;
		}
	} else {
		changeParent = {};
		changeParent.id = id+num;
	}
	changeParent.id = auxl.checkDupeName(changeParent.id);
	//Assign Layout from Existing Layer or Layer Data
	if(layer.layer){
		struct = layer.layer.all;
	} else {
		struct = layer;
	}
	//Traverse Layer Data Object
	function layerTraverse(structure, newStructure){
		for(let level in structure){
			if(structure[level].core){
				newStructure[level] = {};
				if(num === 0){
					newStructure[level].core = auxl.coreFromTemplate(structure[level].core, changeParent, true);
				} else {
					newStructure[level].core = auxl.coreFromTemplate(structure[level].core, {id:auxl.checkDupeName(id+num)}, true);
				}
				num++;
			} else {
				newStructure[level] = {};
				layerTraverse(structure[level], newStructure[level]);
			}
		}
	}
	layerTraverse(struct, newStruct);
	//Update Parent
	if(changeParent){
		for(let each in changeParent){
			newStruct.parent.core.core[each] = changeParent[each];
		}
	}
	//Output
	if(assign){
		return auxl.Layer(id, newStruct, updateLayer)
	} else {
		auxl[id] = auxl.Layer(id, newStruct, updateLayer);
	}
}

//
//Export


/***/ }),

/***/ "./src/system/menu.js":
/*!****************************!*\
  !*** ./src/system/menu.js ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ComboLock: () => (/* binding */ ComboLock),
/* harmony export */   HoverMenu: () => (/* binding */ HoverMenu),
/* harmony export */   Menu: () => (/* binding */ Menu),
/* harmony export */   MultiMenu: () => (/* binding */ MultiMenu),
/* harmony export */   ScrollMenu: () => (/* binding */ ScrollMenu)
/* harmony export */ });
//
//AUXL : A-Frame UX Library
//v0.3 Engine
//https://github.com/Minty-Crisp/AUXL
//
//Created by Minty-Crisp (mintycrisp.com)
//
//Menu
//
//Menu
//MultiMenu
//HoverMenu
//ComboLock
//ScrollMenu

//
//Menu
//Single Menu | Vertical/Horizontal
const Menu = (auxl, menuData) => {
	let menu = {};
	menu.inScene = false;
	menu.data = Object.assign({}, menuData.data);
	menu.id = menuData.id || 'menu';
	menu.prompt = menuData.prompt;
	menu.options = menuData.options;
	menu.actions = menuData.actions;
	menu.layers = {};
	menu.layer = {};
	let prompt = {};
	let menuOption = {};
	let menuOptions = [];
	let menuNum = 0;
	let menuLength = Object.keys(menu.options).length;
	//Reset component data
	menu.clickrun = {};
	menu.clickrun.cursorObj = menuData.cursorObj || false;
	menu.clickrun.method = menuData.method || 'Click';
	menu.clickrun.params = menuData.params || 'target';
	//Menu Style
	menu.layout = menuData.layout;
	//Default Start Position
	menu.data.position = new THREE.Vector3(0,0,0);
	menu.data.position.x = menuData.pos.x;
	menu.data.position.y = menuData.pos.y;
	menu.data.position.z = menuData.pos.z;

	//Generate & Spawn Menu
	const SpawnMenu = () => {
		if(menu.inScene){}else{
			menuNum=0;
			menuOptions = [];
			menuOption = {};
			//Layer Parent Prompt
			//menu.data.id = menu.id + 'prompt';
			menu.data.id = menu.id;
			menu.data.text.value = menu.prompt;
			menu.data.material.color, menu.data.material.emissive = auxl.colorTheoryGen().base;
			prompt = auxl.Core(menu.data);
			menu.layers = {
			parent: {core: prompt},}
			menu.data.position.x = menu.data.geometry.width * 1.15;
			menu.data.position.z = 0;
			if(menuLength === 1 || menu.layout === 'horizontal'){
				menu.data.position.y = 0;
			} else {
				menu.data.position.y = (menu.data.geometry.height*0.75) * menuLength/2;
			}
			//Reset component data
			menu.data.sources = {};
			menu.data.components = {};
			menu.data.components.clickrun = {};
			menu.data.components.clickrun.cursorObj = menu.clickrun.cursorObj ;
			menu.data.components.clickrun.method = menu.clickrun.method;
			menu.data.components.clickrun.params = menu.clickrun.params;
			//Layer Children Options
			for(let menuItem in menu.options){
				if(menuLength === 1 || menuNum === 0){} else {
					if(menu.layout === 'vertical'){
						menu.data.position.y -= (menu.data.geometry.height*1.15);
					} else if(menu.layout === 'horizontal'){
						menu.data.position.x += (menu.data.geometry.width*1.15);
					} else {
						//backup for legacy, classic vertical mode
						menu.data.position.y -= (menu.data.geometry.height*1.15);
					}
				}
				menu.data.material.color, menu.data.material.emissive = auxl.colorTheoryGen().base;
				menu.data.text.value = menu.options[menuItem];
				menu.data.id = menu.id + 'option' + menuNum;
				menu.data.components.result = menu.actions['action'+menuNum];
				menuOption = auxl.Core(menu.data);
				menuOptions.push(menuOption);
				menu.layers['child'+menuNum] = {core: menuOptions[menuNum]}
				menuNum++;
			}
			menu.layer = auxl.Layer(menu.id, menu.layers);
			menu.layer.SpawnLayer();
			menu.inScene = true;
		}
	}
	//Despawn Menu
	const DespawnMenu = () => {
		if(menu.inScene){
			menu.layer.DespawnLayer();
			menu.inScene = false;
		}
	}
	//Attach Menu to Tracker matching object generator 
	const AddToParentSpawnTracker = (obj, parent) => {
		if(auxl.scenarioSpawned[parent.id]){
			auxl.scenarioSpawned[menu.id] = {type: 'menu', obj, parent};
		} else if(auxl.zoneSpawned[parent.id]){
			auxl.zoneSpawned[menu.id] = {type: 'menu', obj, parent};
		} else if(auxl.nodeSpawned[parent.id]){
			auxl.nodeSpawned[menu.id] = {type: 'menu', obj, parent};
		} else if(auxl.bookSpawned[parent.id]){
			auxl.bookSpawned[menu.id] = {type: 'menu', obj, parent};
		}
	}
	//Remove Menu from Tracker matching object generator 
	const RemoveMenuFromSceneTracker = () => {
		if(auxl.scenarioSpawned[menu.id]){
			delete auxl.scenarioSpawned[menu.id];
		} else if(auxl.zoneSpawned[menu.id]){
			delete auxl.zoneSpawned[menu.id];
		} else if(auxl.nodeSpawned[menu.id]){
			delete auxl.nodeSpawned[menu.id];
		} else if(auxl.bookSpawned[menu.id]){
			delete auxl.bookSpawned[menu.id];
		}
	}

	return {menu, SpawnMenu, DespawnMenu, AddToParentSpawnTracker, RemoveMenuFromSceneTracker};
}

//
//MultiMenu
//Multi Sub Menus | Circle/Vertical/Horizontal
const MultiMenu = (auxl, multiMenuData) => {
	let multiMenu = {};
	multiMenu.data = Object.assign({}, multiMenuData);
	multiMenu.inScene = false;
	multiMenu.menuOpen = false;
	multiMenu.descriptionOpen = false;
	multiMenu.buttonHover = '';
	multiMenu.currentMenu = 'menu0';
	multiMenu.menuPath = ['menu0'];
	multiMenu.switching = false;
	multiMenu.switchingTimeout;
	multiMenu.id = multiMenuData.info.id || 'multiMenu';
	multiMenu.layout = multiMenuData.info.layout || 'circleUp';
	multiMenu.posOffset = multiMenuData.info.posOffset || new THREE.Vector3(0,0,0);
	multiMenu.offset = multiMenuData.info.offset || -1;
	multiMenu.parent = multiMenu.data.info.parent || false;
	multiMenu.stare = multiMenu.data.info.stare || false;

	//circle
	//vertical
	//horizontal
	let circleRot = -45;
	let maxNulls = 0;
	let switchDelay = 250;

	multiMenu.buttonData = JSON.parse(JSON.stringify(multiMenu.data.info.buttonData));

	multiMenu.hoverData = JSON.parse(JSON.stringify(multiMenu.data.info.hoverData));

	multiMenu.nullParentData = {
		data:'nullParentData',
		id:'nullParent',
		sources:false,
		text: false,
		geometry: false,
		material: false,
		position: multiMenu.posOffset,
		rotation: new THREE.Vector3(0,0,0),
		scale: new THREE.Vector3(1,1,1),
		animations: false,
		mixins: false,
		classes: ['a-ent'],
		components: false,
	};

	if(multiMenu.stare){
		multiMenu.nullParentData.components['stare'] = {id: multiMenu.stare.id, twist: multiMenu.stare.twist,}
	}
	multiMenu.cores = {};
	multiMenu.cores.hover = {};
	//Main Menu Null
	multiMenu.nullParentData.id = multiMenu.id;
	//Default Position
	if(multiMenu.data.info.position){
		multiMenu.nullParentData.position = multiMenu.data.info.position;
	}
	multiMenu.cores.parent = auxl.Core(multiMenu.nullParentData);
	//Reset Null Parent
	multiMenu.nullParentData.position = new THREE.Vector3(0,0,0);
	multiMenu.nullParentData.components = {};
	//Main Button Parent Core
	multiMenu.buttonData.id = multiMenu.data.info.id + 'menu';
	//Layout
	if(multiMenu.layout === 'circleUp' || multiMenu.layout === 'circleDown' ){
		multiMenu.buttonData.position.x = multiMenu.offset;
	}
	multiMenu.cores.main = auxl.Core(multiMenu.buttonData);
	//Sub Button Cores

	//Init each main menu array storage
	for(let menu in multiMenu.data){
		//console.log(menu)
		//console.log(multiMenu.data[menu])
		if(menu === 'info'){}else{
			multiMenu.cores[menu] = [];
			multiMenu.cores.hover[menu] = [];
			let buttonTotal = 0;
			for(let button in multiMenu.data[menu]){
				buttonTotal++;
				//Generate Button Core
				multiMenu.buttonData.id = multiMenu.data[menu][button].id;
				multiMenu.buttonData.text.value = multiMenu.data[menu][button].title;
				//Layout
				if(multiMenu.layout === 'circleUp'){
					multiMenu.buttonData.rotation.z = (circleRot*buttonTotal)*-1;
				} else if(multiMenu.layout === 'circleDown'){
					multiMenu.buttonData.rotation.z = circleRot*buttonTotal;
				} else if(multiMenu.layout === 'vertical'){
					multiMenu.buttonData.position.y = buttonTotal*multiMenu.offset;
				} else if(multiMenu.layout === 'horizontal'){
					multiMenu.buttonData.position.x = buttonTotal*multiMenu.offset;
				}
				//Reset Button Actions
				multiMenu.buttonData.components = {};
				//Add Button Actions
				if(multiMenu.data[menu][button].action){
					multiMenu.buttonData.components.clickrun = {};
					multiMenu.buttonData.components.clickrun.cursorObj = multiMenu.data[menu][button].action.auxlObj;
					multiMenu.buttonData.components.clickrun.method = multiMenu.data[menu][button].action.method;
					if(multiMenu.data[menu][button].action.component){
						multiMenu.buttonData.components.clickrun.component = multiMenu.data[menu][button].action.component;
					}
					if(multiMenu.data[menu][button].action.params){
						multiMenu.buttonData.components.clickrun.params = multiMenu.data[menu][button].action.params;
					}
					//Menu Controls
					if(multiMenu.data[menu][button].action.menu){
						//menu: 'close', close menu
						//menu: 'back', go back 1 menu
						//menu: 'stay', stay in same subMenu
						if(multiMenu.data[menu][button].action.menu === 'stay'){} else if(multiMenu.data[menu][button].action.menu === 'back'){

							multiMenu.buttonData.components.menurun = {};
							multiMenu.buttonData.components.menurun.cursorObj = multiMenu.id;
							multiMenu.buttonData.components.menurun.method = 'ToggleMenu';
							multiMenu.buttonData.components.menurun.params = null;
						} else if(multiMenu.data[menu][button].action.menu === 'close'){
							multiMenu.buttonData.components.menurun = {};
							multiMenu.buttonData.components.menurun.cursorObj = multiMenu.id;
							multiMenu.buttonData.components.menurun.method = 'ResetMenu';
						}
					} else {
						multiMenu.buttonData.components.menurun = {};
						multiMenu.buttonData.components.menurun.cursorObj = multiMenu.id;
						multiMenu.buttonData.components.menurun.method = 'ResetMenu';
					}

				} else {
					multiMenu.buttonData.components.menurun = {};
					multiMenu.buttonData.components.menurun.cursorObj = multiMenu.id;
					multiMenu.buttonData.components.menurun.method = 'SubMenu';
					multiMenu.buttonData.components.menurun.params = multiMenu.data[menu][button].subMenu;
				}

				//Gen Hover
				multiMenu.buttonData.components.mouseenterrun = {};
				multiMenu.buttonData.components.mouseenterrun.cursorObj = multiMenu.id;
				multiMenu.buttonData.components.mouseenterrun.method = 'SpawnDescription';
				multiMenu.buttonData.components.mouseenterrun.params = button;

				multiMenu.buttonData.components.mouseleaverun = {};
				multiMenu.buttonData.components.mouseleaverun.cursorObj = multiMenu.id;
				multiMenu.buttonData.components.mouseleaverun.method = 'DespawnDescription';
				multiMenu.buttonData.components.mouseleaverun.params = button;

				multiMenu.hoverData.id = multiMenu.data[menu][button].id + 'hover';
				multiMenu.hoverData.text.value = multiMenu.data[menu][button].description;
				multiMenu.cores.hover[menu][button] = auxl.Core(multiMenu.hoverData);

				//Gen Button
				multiMenu.cores[menu][button] = auxl.Core(multiMenu.buttonData);

			}
			if(buttonTotal > maxNulls){
				maxNulls = buttonTotal;
			}
		}
	}

	//Circle Rotation Degree
	//let circleRot = (360/maxNulls+1)*-1;
	//Generate a null parent for the maximum amount of buttons and main button
	multiMenu.cores.nulls = [];
	//If you update the menu to hold more then any preconfigured menu amount of nulls then this breaks, so might as well configure to the max
	//for(let a = 0; a <= maxNulls+1; a++){
	for(let a = 0; a <= 8; a++){
		multiMenu.nullParentData.id = multiMenu.id + 'null' + a;
		if(multiMenu.layout === 'circleUp'){
			multiMenu.nullParentData.rotation.z = circleRot*a;
		} else if(multiMenu.layout === 'circleDown'){
			multiMenu.nullParentData.rotation.z = (circleRot*a)*-1;
		}
		multiMenu.cores.nulls.push(auxl.Core(multiMenu.nullParentData));
	}
	//console.log(maxNulls)
	//console.log(multiMenu.cores.nulls);
	//Init Layer
	multiMenu.menuLayerData = {
		parent: {core: multiMenu.cores.parent},
		child0: {
			parent: {core: multiMenu.cores.nulls[0]},
			child0: {core: multiMenu.cores.main},
		},
	}
	//Init Null Children
	for(let a = 1; a < multiMenu.cores.nulls.length; a++){
		multiMenu.menuLayerData['child'+a] = {};
		multiMenu.menuLayerData['child'+a].core = multiMenu.cores.nulls[a];
	}
	//console.log(multiMenu.menuLayerData);
	//Init Layer
	multiMenu.menuLayer = auxl.Layer(multiMenu.id, multiMenu.menuLayerData);
	//Spawn Menu
	const SpawnMultiMenu = (open) => {
		if(multiMenu.inScene){}else{
			multiMenu.menuLayer.SpawnLayer(multiMenu.parent);
			multiMenu.menuLayer.GetChildEl(multiMenu.id+'null0').addEventListener('click',ToggleMenu);
			multiMenu.cores.main.ChangeSelf({property: 'text', value:{value:'Open'}});
			if(open){
				ToggleMenu();
			}
			multiMenu.inScene = true;
		}
	}
	//New Menu Parent
	const UpdateParent = (parent) => {
		let newParent = parent || false;
		if(multiMenu.inScene){}else{
			multiMenu.parent = newParent;
		}
	}
	//Update Button Styles
	const UpdateButtons = (changes) => {
		console.log(multiMenu.cores)
	}
	//Update a Menu
	const UpdateSubMenu = (menu,buttons) => {
		if(multiMenu.currentMenu === menu){}else{
			//Purge and Rebuild SubMenu
			multiMenu.cores[menu] = [];
			multiMenu.cores.hover[menu] = [];
			let buttonTotal = 0;
			for(let button in buttons){
				buttonTotal++;
				//Generate Button Core
				multiMenu.buttonData.id = buttons[button].id;
				multiMenu.buttonData.text.value = buttons[button].title;
				//Layout
				if(multiMenu.layout === 'circleUp'){
					multiMenu.buttonData.rotation.z = (circleRot*buttonTotal)*-1;
				} else if(multiMenu.layout === 'circleDown'){
					multiMenu.buttonData.rotation.z = circleRot*buttonTotal;
				} else if(multiMenu.layout === 'vertical'){
					multiMenu.buttonData.position.y = buttonTotal*multiMenu.offset;
				} else if(multiMenu.layout === 'horizontal'){
					multiMenu.buttonData.position.x = buttonTotal*multiMenu.offset;
				}
				//Reset Button Actions
				multiMenu.buttonData.components = {};
				//Add Button Actions
				if(buttons[button].action){
					multiMenu.buttonData.components.clickrun = {};
					multiMenu.buttonData.components.clickrun.cursorObj = buttons[button].action.auxlObj;
					multiMenu.buttonData.components.clickrun.method = buttons[button].action.method;
					if(buttons[button].action.component){
						multiMenu.buttonData.components.clickrun.component = buttons[button].action.component;
					}
					if(buttons[button].action.params){
						multiMenu.buttonData.components.clickrun.params = buttons[button].action.params;
					}
					//Menu Controls
					if(buttons[button].action.menu){
						//menu: 'close', close menu
						//menu: 'back', go back 1 menu
						//menu: 'stay', stay in same subMenu
						if(buttons[button].action.menu === 'stay'){} else if(buttons[button].action.menu === 'back'){

							multiMenu.buttonData.components.menurun = {};
							multiMenu.buttonData.components.menurun.cursorObj = multiMenu.id;
							multiMenu.buttonData.components.menurun.method = 'ToggleMenu';
							multiMenu.buttonData.components.menurun.params = null;
						} else if(buttons[button].action.menu === 'close'){
							multiMenu.buttonData.components.menurun = {};
							multiMenu.buttonData.components.menurun.cursorObj = multiMenu.id;
							multiMenu.buttonData.components.menurun.method = 'ResetMenu';
						}
					} else {
						multiMenu.buttonData.components.menurun = {};
						multiMenu.buttonData.components.menurun.cursorObj = multiMenu.id;
						multiMenu.buttonData.components.menurun.method = 'ResetMenu';
					}

				} else {
					multiMenu.buttonData.components.menurun = {};
					multiMenu.buttonData.components.menurun.cursorObj = multiMenu.id;
					multiMenu.buttonData.components.menurun.method = 'SubMenu';
					multiMenu.buttonData.components.menurun.params = buttons[button].subMenu;
				}

				//Gen Hover
				multiMenu.buttonData.components.mouseenterrun = {};
				multiMenu.buttonData.components.mouseenterrun.cursorObj = multiMenu.id;
				multiMenu.buttonData.components.mouseenterrun.method = 'SpawnDescription';
				multiMenu.buttonData.components.mouseenterrun.params = button;

				multiMenu.buttonData.components.mouseleaverun = {};
				multiMenu.buttonData.components.mouseleaverun.cursorObj = multiMenu.id;
				multiMenu.buttonData.components.mouseleaverun.method = 'DespawnDescription';
				multiMenu.buttonData.components.mouseleaverun.params = button;

				multiMenu.hoverData.id = buttons[button].id + 'hover';
				multiMenu.hoverData.text.value = buttons[button].description;
				multiMenu.cores.hover[menu][button] = auxl.Core(multiMenu.hoverData);

				//Gen Button
				multiMenu.cores[menu][button] = auxl.Core(multiMenu.buttonData);
			}
			if(buttonTotal > maxNulls){
				maxNulls = buttonTotal;
			}
		}
	}
	//Spawn Sub Menu
	const SpawnMenu = () => {
		if(multiMenu.menuPath.length > 1){
			multiMenu.cores.main.ChangeSelf({property: 'text', value:{value:'Back'}});
		} else {
			multiMenu.cores.main.ChangeSelf({property: 'text', value:{value:'Close'}});
		}
		multiMenu.menuOpen = true;
		multiMenu.switching = true;
		let currentMenu = multiMenu.currentMenu;
		let nullNum = 1;
		let spawnParent;
		let spawnTimeout = setTimeout(() => {
			for(let button in multiMenu.cores[currentMenu]){
				spawnParent = multiMenu.menuLayer.GetChildEl(multiMenu.id+'null'+nullNum);
				multiMenu.cores[currentMenu][button].SpawnCore(spawnParent);
				nullNum++;
			}
			clearTimeout(spawnTimeout);
		}, switchDelay);
		multiMenu.switchingTimeout = setTimeout(() => {
			multiMenu.switching = false;
			clearTimeout(multiMenu.switchingTimeout);
		}, switchDelay*2);
	}
	//Despawn Sub Menu
	const DespawnMenu = (instant) => {
		multiMenu.menuOpen = false;
		multiMenu.switching = true;
		let currentMenu = multiMenu.currentMenu;
		let nullNum = 1;
		let spawnParents = {};
		let despawnDelay;
		if(instant){
			despawnDelay = 25;
		} else {
			despawnDelay = switchDelay;
		}
		if(multiMenu.descriptionOpen){
			DespawnDescription(multiMenu.buttonHover);
		}
		let despawnTimeout = setTimeout(() => {
			for(let button in multiMenu.cores[currentMenu]){
				spawnParents[button] = multiMenu.menuLayer.GetChildEl(multiMenu.id+'null'+nullNum);
				multiMenu.cores[currentMenu][button].DespawnCore();
				nullNum++;
			}
			clearTimeout(despawnTimeout);
		}, despawnDelay);
		multiMenu.switchingTimeout = setTimeout(() => {
			multiMenu.switching = false;
			clearTimeout(multiMenu.switchingTimeout);
		}, despawnDelay*2);
	}
	//Toggle Menu
	const ToggleMenu = () => {
		if(multiMenu.switching){}else{
			if(multiMenu.menuOpen){
				if(multiMenu.menuPath.length > 1){
					SubMenu(multiMenu.menuPath[multiMenu.menuPath.length-2]);
				} else {
					ResetMenu();
				}
			} else {
				SpawnMenu();
			}
		}
	}
	//Default Menu
	const DefaultMenu = () => {
		multiMenu.currentMenu = 'menu0';
		multiMenu.menuPath = ['menu0'];
		multiMenu.menuOpen = false;
	}
	//Reset Menu
	const ResetMenu = (instant) => {
		multiMenu.cores.main.ChangeSelf({property: 'text', value:{value:'Open'}});
		let despawnDelay;
		if(instant){
			despawnDelay = 0;
		} else {
			despawnDelay = switchDelay;
		}
		if(multiMenu.switching){}else{
			if(multiMenu.menuOpen){
				let resetTimeout = setTimeout(() => {
					DespawnMenu(instant);
					DefaultMenu();
					clearTimeout(resetTimeout);
				}, despawnDelay);
			}
		}
	}
	//Open a Sub Menu
	const SubMenu = (newMenu) => {
		if(multiMenu.switching){}else{
			DespawnMenu();
			multiMenu.currentMenu = newMenu;
			if(multiMenu.menuPath.includes(multiMenu.currentMenu)){
				multiMenu.menuPath.pop();
			} else {
				multiMenu.menuPath.push(multiMenu.currentMenu);
			}
			SpawnMenu();
		}
	}
	//Despawn Menu
	const DespawnMultiMenu = () => {
		if(multiMenu.inScene){
			ResetMenu(true);
			let resetTimeout = setTimeout(() => {
				multiMenu.menuLayer.GetChildEl(multiMenu.id+'null0').removeEventListener('click',ToggleMenu);
				multiMenu.menuLayer.DespawnLayer();
				multiMenu.inScene = false;
				auxl.RemoveFromTracker(multiMenu.id);
				clearTimeout(resetTimeout);
			}, switchDelay);

		}
	}
	//Display Description
	const SpawnDescription = (button) => {
		if(multiMenu.descriptionOpen){}else{
			multiMenu.buttonHover = button;
			let spawnParent = multiMenu.cores[multiMenu.currentMenu][button].GetEl();

			multiMenu.cores.hover[multiMenu.currentMenu][button].SpawnCore(spawnParent);
			multiMenu.descriptionOpen = true;
		}
	}
	//Despawn Description
	const DespawnDescription = (button) => {
		if(multiMenu.descriptionOpen){
			let spawnParent = multiMenu.cores[multiMenu.currentMenu][button].GetEl();
			multiMenu.cores.hover[multiMenu.currentMenu][button].DespawnCore();
			multiMenu.buttonHover = '';
			multiMenu.descriptionOpen = false;
		}
	}

	return {multiMenu, SpawnMultiMenu, DespawnMultiMenu, ToggleMenu, UpdateParent, UpdateButtons, UpdateSubMenu, SubMenu, ResetMenu, SpawnDescription, DespawnDescription};
}

//Quick Hover Menu :
//Hold down button to spawn circle menu, hover on option and let go of button. Active hover selection on button up happens and menu closes
const HoverMenu = (auxl, hoverMenuData) => {
	let hoverMenu = {};
	hoverMenu.data = Object.assign({}, hoverMenuData);
	hoverMenu.inScene = false;
	hoverMenu.menuOpen = false;
	hoverMenu.active = false;
	hoverMenu.descriptionOpen = false;
	hoverMenu.buttonHover = '';
	hoverMenu.currentMenu = 'menu';
	hoverMenu.menuPath = ['menu'];
	hoverMenu.switching = false;
	hoverMenu.switchingTimeout;
	hoverMenu.id = hoverMenuData.info.id || 'hoverMenu';
	hoverMenu.name = hoverMenuData.info.name || 'Quick Menu';
	hoverMenu.layout = hoverMenuData.info.layout || 'circleUp';
	hoverMenu.posOffset = hoverMenuData.info.posOffset || new THREE.Vector3(0,0,0);
	hoverMenu.offset = hoverMenuData.info.offset || -1;
	hoverMenu.parent = hoverMenu.data.info.parent || false;
	hoverMenu.spawnPos = new THREE.Vector3(0,0,0);
	hoverMenu.attached =  hoverMenu.data.info.attached || false;

	//circle
	//vertical
	//horizontal
	let circleRot = -45;
	let maxNulls = 0;
	let switchDelay = 50;

	hoverMenu.buttonData = JSON.parse(JSON.stringify(hoverMenu.data.info.buttonData));

	hoverMenu.hoverData = JSON.parse(JSON.stringify(hoverMenu.data.info.hoverData));

	hoverMenu.nullParentData = {
		data:'nullParentData',
		id:'nullParent',
		sources:false,
		text: false,
		geometry: false,
		material: false,
		position: hoverMenu.posOffset,
		rotation: new THREE.Vector3(0,0,0),
		scale: new THREE.Vector3(1,1,1),
		animations: false,
		mixins: false,
		classes: ['a-ent'],
		components: {
			//['look-at-xyz']:{match: 'camera', x:false, y:true, z:false},
			stare:{id: 'playerRig'},
		},
	};

	hoverMenu.cores = {};
	hoverMenu.cores.hover = {};
	//Main Menu Null
	hoverMenu.nullParentData.id = hoverMenu.id;
	//Default Position
	if(hoverMenu.data.info.position){
		hoverMenu.nullParentData.position = hoverMenu.data.info.position;
	}
	hoverMenu.cores.parent = auxl.Core(hoverMenu.nullParentData);
	//Reset Null Parent
	hoverMenu.nullParentData.position = new THREE.Vector3(0,0,0);
	hoverMenu.nullParentData.components = {};
	//Main Button Parent Core
	hoverMenu.buttonData.id = hoverMenu.data.info.id + 'menu';
	//Layout
	if(hoverMenu.layout === 'circleUp' || hoverMenu.layout === 'circleDown' ){
		hoverMenu.buttonData.position.x = hoverMenu.offset;
	}
	hoverMenu.buttonData.text.value = hoverMenu.name;
	hoverMenu.cores.main = auxl.Core(hoverMenu.buttonData);
	//Sub Button Cores

	//Init each main menu array storage
	for(let menu in hoverMenu.data){
		//console.log(menu)
		//console.log(hoverMenu.data[menu])
		if(menu === 'info'){}else{
			hoverMenu.cores[menu] = [];
			hoverMenu.cores.hover[menu] = [];
			let buttonTotal = 0;
			for(let button in hoverMenu.data[menu]){
				buttonTotal++;
				//Generate Button Core
				hoverMenu.buttonData.id = hoverMenu.data[menu][button].id;
				hoverMenu.buttonData.text.value = hoverMenu.data[menu][button].title;
				//Layout
				if(hoverMenu.layout === 'circleUp'){
					hoverMenu.buttonData.rotation.z = (circleRot*buttonTotal)*-1;
				} else if(hoverMenu.layout === 'circleDown'){
					hoverMenu.buttonData.rotation.z = circleRot*buttonTotal;
				} else if(hoverMenu.layout === 'vertical'){
					hoverMenu.buttonData.position.y = buttonTotal*hoverMenu.offset;
				} else if(hoverMenu.layout === 'horizontal'){
					hoverMenu.buttonData.position.x = buttonTotal*hoverMenu.offset;
				}
				//Reset Button Actions
				hoverMenu.buttonData.components = {};
				//Add Hover Active/Deactive
				hoverMenu.buttonData.components.hoverrun = {};
				hoverMenu.buttonData.components.hoverrun.menu = hoverMenu.id;
				hoverMenu.buttonData.components.hoverrun.action = button;
				if(hoverMenu.attached){
					hoverMenu.buttonData.components.hoverrun.attached = hoverMenu.attached;
				}
				//Gen Hover
				hoverMenu.buttonData.components.mouseenterrun = {};
				hoverMenu.buttonData.components.mouseenterrun.cursorObj = hoverMenu.id;
				hoverMenu.buttonData.components.mouseenterrun.method = 'SpawnDescription';
				hoverMenu.buttonData.components.mouseenterrun.params = button;

				hoverMenu.buttonData.components.mouseleaverun = {};
				hoverMenu.buttonData.components.mouseleaverun.cursorObj = hoverMenu.id;
				hoverMenu.buttonData.components.mouseleaverun.method = 'DespawnDescription';
				hoverMenu.buttonData.components.mouseleaverun.params = button;

				hoverMenu.hoverData.id = hoverMenu.data[menu][button].id + 'hover';
				hoverMenu.hoverData.text.value = hoverMenu.data[menu][button].description;
				hoverMenu.cores.hover[menu][button] = auxl.Core(hoverMenu.hoverData);

				//Gen Button
				hoverMenu.cores[menu][button] = auxl.Core(hoverMenu.buttonData);

			}
			if(buttonTotal > maxNulls){
				maxNulls = buttonTotal;
			}
		}
	}

	//Circle Rotation Degree
	//let circleRot = (360/maxNulls+1)*-1;
	//Generate a null parent for the maximum amount of buttons and main button
	hoverMenu.cores.nulls = [];
	//If you update the menu to hold more then any preconfigured menu amount of nulls then this breaks, so might as well configure to the max
	//for(let a = 0; a <= maxNulls+1; a++){
	for(let a = 0; a <= 8; a++){
		hoverMenu.nullParentData.id = hoverMenu.id + 'null' + a;
		if(hoverMenu.layout === 'circleUp'){
			hoverMenu.nullParentData.rotation.z = circleRot*a;
		} else if(hoverMenu.layout === 'circleDown'){
			hoverMenu.nullParentData.rotation.z = (circleRot*a)*-1;
		}
		hoverMenu.cores.nulls.push(auxl.Core(hoverMenu.nullParentData));
	}
	//console.log(maxNulls)
	//console.log(hoverMenu.cores.nulls);
	//Init Layer
	hoverMenu.menuLayerData = {
		parent: {core: hoverMenu.cores.parent},
		child0: {
			parent: {core: hoverMenu.cores.nulls[0]},
			child0: {core: hoverMenu.cores.main},
		},
	}
	//Init Null Children
	for(let a = 1; a < hoverMenu.cores.nulls.length; a++){
		hoverMenu.menuLayerData['child'+a] = {};
		hoverMenu.menuLayerData['child'+a].core = hoverMenu.cores.nulls[a];
	}
	//console.log(hoverMenu.menuLayerData);
	//Init Layer
	hoverMenu.menuLayer = auxl.Layer(hoverMenu.id, hoverMenu.menuLayerData);

	//Return Position Direction of Camera
	function cameraDirection(){
		//Get the direction vector in world space
		let direction = new THREE.Vector3();
		auxl.camera.GetEl().object3D.getWorldDirection(direction);
		//Calculate the position based on the direction and distance
		let position = new THREE.Vector3();
		//position.copy(auxl.camera.GetEl().object3D.position).add(new THREE.Vector3(direction.x, 0, direction.z).normalize().multiplyScalar(hoverMenu.posOffset.z));
		position.copy(auxl.camera.GetEl().object3D.position).add(new THREE.Vector3(direction.x, direction.y, direction.z).normalize().multiplyScalar(hoverMenu.posOffset.z));
		return position;
	}
	//Run AUXL Method
	function run(action){
		if(!action.component || action.component === 'null'){
			if(auxl[action.auxlObj][action.method]){
				if(!action.params || action.params === 'null'){
					auxl[action.auxlObj][action.method]();
				} else {
					auxl[action.auxlObj][action.method](action.params);
				}
			}
		} else {
			//object is a dom entity and the component is attached to that object and the func is in that component
			if(document.getElementById(action.auxlObj)){
				let domEnt = document.getElementById(action.auxlObj);
				if(!action.params || action.params === 'null'){
					domEnt.components[action.component][action.method]();
				} else {
					domEnt.components[action.component][action.method](action.params);
				}
			}
		}
	}
	//Spawn Menu
	const SpawnHoverMenu = () => {
		if(hoverMenu.inScene){}else{
			hoverMenu.active = false;
			hoverMenu.menuLayer.layer.all.parent.core.core.position = cameraDirection();
			hoverMenu.menuLayer.SpawnLayer(hoverMenu.parent);
			SpawnMenu();
			hoverMenu.inScene = true;
		}
	}
	//Update Parent
	const UpdateParent = (parent) => {
		let newParent = parent || false;
		if(hoverMenu.inScene){}else{
			hoverMenu.parent = newParent;
		}
	}
	//Update Sub Menu
	const UpdateSubMenu = (menu,buttons) => {
		if(hoverMenu.currentMenu === menu){}else{
			//Purge and Rebuild SubMenu
			hoverMenu.cores[menu] = [];
			hoverMenu.cores.hover[menu] = [];
			let buttonTotal = 0;
			for(let button in buttons){
				buttonTotal++;
				//Generate Button Core
				hoverMenu.buttonData.id = buttons[button].id;
				hoverMenu.buttonData.text.value = buttons[button].title;
				//Layout
				if(hoverMenu.layout === 'circleUp'){
					hoverMenu.buttonData.rotation.z = (circleRot*buttonTotal)*-1;
				} else if(hoverMenu.layout === 'circleDown'){
					hoverMenu.buttonData.rotation.z = circleRot*buttonTotal;
				} else if(hoverMenu.layout === 'vertical'){
					hoverMenu.buttonData.position.y = buttonTotal*hoverMenu.offset;
				} else if(hoverMenu.layout === 'horizontal'){
					hoverMenu.buttonData.position.x = buttonTotal*hoverMenu.offset;
				}
				//Reset Button Actions
				hoverMenu.buttonData.components = {};
				//Add Button Actions
				if(buttons[button].action){
					hoverMenu.buttonData.components.clickrun = {};
					hoverMenu.buttonData.components.clickrun.cursorObj = buttons[button].action.auxlObj;
					hoverMenu.buttonData.components.clickrun.method = buttons[button].action.method;
					if(buttons[button].action.component){
						hoverMenu.buttonData.components.clickrun.component = buttons[button].action.component;
					}
					if(buttons[button].action.params){
						hoverMenu.buttonData.components.clickrun.params = buttons[button].action.params;
					}
				}
				//Gen Hover
				hoverMenu.buttonData.components.mouseenterrun = {};
				hoverMenu.buttonData.components.mouseenterrun.cursorObj = hoverMenu.id;
				hoverMenu.buttonData.components.mouseenterrun.method = 'SpawnDescription';
				hoverMenu.buttonData.components.mouseenterrun.params = button;

				hoverMenu.buttonData.components.mouseleaverun = {};
				hoverMenu.buttonData.components.mouseleaverun.cursorObj = hoverMenu.id;
				hoverMenu.buttonData.components.mouseleaverun.method = 'DespawnDescription';
				hoverMenu.buttonData.components.mouseleaverun.params = button;

				hoverMenu.hoverData.id = buttons[button].id + 'hover';
				hoverMenu.hoverData.text.value = buttons[button].description;
				hoverMenu.cores.hover[menu][button] = auxl.Core(hoverMenu.hoverData);

				//Gen Button
				hoverMenu.cores[menu][button] = auxl.Core(hoverMenu.buttonData);
			}
			if(buttonTotal > maxNulls){
				maxNulls = buttonTotal;
			}
		}
	}
	//Spawn Sub Menu
	const SpawnMenu = () => {
		hoverMenu.menuOpen = true;
		hoverMenu.switching = true;
		let currentMenu = hoverMenu.currentMenu;
		let nullNum = 1;
		let spawnParent;
		let spawnTimeout = setTimeout(() => {
			for(let button in hoverMenu.cores[currentMenu]){
				spawnParent = hoverMenu.menuLayer.GetChildEl(hoverMenu.id+'null'+nullNum);
				hoverMenu.cores[currentMenu][button].SpawnCore(spawnParent);
				nullNum++;
			}
			clearTimeout(spawnTimeout);
		}, switchDelay);
		hoverMenu.switchingTimeout = setTimeout(() => {
			hoverMenu.switching = false;
			clearTimeout(hoverMenu.switchingTimeout);
		}, switchDelay*2);
	}
	//Despawn Sub Menu
	const DespawnMenu = (instant) => {
		hoverMenu.menuOpen = false;
		hoverMenu.switching = true;
		let currentMenu = hoverMenu.currentMenu;
		let nullNum = 1;
		let spawnParents = {};
		let despawnDelay;
		if(instant){
			despawnDelay = 25;
		} else {
			despawnDelay = switchDelay;
		}
		if(hoverMenu.descriptionOpen){
			DespawnDescription(hoverMenu.buttonHover);
		}
		let despawnTimeout = setTimeout(() => {
			for(let button in hoverMenu.cores[currentMenu]){
				spawnParents[button] = hoverMenu.menuLayer.GetChildEl(hoverMenu.id+'null'+nullNum);
				hoverMenu.cores[currentMenu][button].DespawnCore();
				nullNum++;
			}
			clearTimeout(despawnTimeout);
		}, despawnDelay);
		hoverMenu.switchingTimeout = setTimeout(() => {
			hoverMenu.switching = false;
			clearTimeout(hoverMenu.switchingTimeout);
		}, despawnDelay*2);
	}
	//Reset Menu
	const ResetMenu = (instant) => {
		let despawnDelay;
		if(instant){
			despawnDelay = 0;
		} else {
			despawnDelay = switchDelay;
		}
		if(hoverMenu.switching){}else{
			if(hoverMenu.menuOpen){
				let resetTimeout = setTimeout(() => {
					DespawnMenu(instant);
					clearTimeout(resetTimeout);
				}, despawnDelay);
			}
		}
	}
	//Despawn Menu
	const DespawnHoverMenu = () => {
		if(hoverMenu.inScene){
			//check which one is hovering if any to activate
			console.log(hoverMenu.active)
			if(hoverMenu.active){
				run(hoverMenu.data.menu[hoverMenu.active].action)
			}

			ResetMenu(true);
			let resetTimeout = setTimeout(() => {
				hoverMenu.menuLayer.DespawnLayer();
				hoverMenu.inScene = false;
				clearTimeout(resetTimeout);
			}, switchDelay);

		}
	}
	//Spawn Description
	const SpawnDescription = (button) => {
		if(hoverMenu.descriptionOpen){}else{
			hoverMenu.buttonHover = button;
			let spawnParent = hoverMenu.cores[hoverMenu.currentMenu][button].GetEl();

			hoverMenu.cores.hover[hoverMenu.currentMenu][button].SpawnCore(spawnParent);
			hoverMenu.descriptionOpen = true;
		}
	}
	//Despawn Description
	const DespawnDescription = (button) => {
		if(hoverMenu.descriptionOpen){
			let spawnParent = hoverMenu.cores[hoverMenu.currentMenu][button].GetEl();
			hoverMenu.cores.hover[hoverMenu.currentMenu][button].DespawnCore();
			hoverMenu.buttonHover = '';
			hoverMenu.descriptionOpen = false;
		}
	}

	return {hoverMenu, SpawnHoverMenu, DespawnHoverMenu, UpdateParent, UpdateSubMenu, ResetMenu, SpawnDescription, DespawnDescription};
}

//
//Combo Lock
//Enter Correct Sequence to Run Func
const ComboLock = (auxl, id, display, seq, run, position) => {

	let comboLock = {};
	comboLock.id = id;
	let layerId = comboLock.id + 'layer';
	let combo0Id = comboLock.id + 'combo0';
	let combo1Id = comboLock.id + 'combo1';
	let combo2Id = comboLock.id + 'combo2';
	let combo3Id = comboLock.id + 'combo3';
	let combo4Id = comboLock.id + 'combo4';
	comboLock.sequence = seq;
	comboLock.run = run;
	comboLock.current = 0;
	comboLock.locked = true;
	comboLock.correctSoFar = true;
	comboLock.lockedTimeout;
	comboLock.unlockedTimeout;
	comboLock.position = position || new THREE.Vector3(0,0,0);

	comboLock.texts = [];

	if(display){
		for(let each in display){
			comboLock.texts[each] = {value:display[each], color: "#FFFFFF", align: "center", font: "exo2bold", zOffset: 0.051, side: 'front', wrapCount: 2, baseline: 'center'}
		}
	} else {
		comboLock.texts[0] = false;
		comboLock.texts[1] = false;
		comboLock.texts[2] = false;
		comboLock.texts[3] = false;
		comboLock.texts[4] = false;
	}



	//Combo Parent
	comboLock.comboParentData = {
	data:'comboParentData',
	id:'comboParent',
	sources: false,
	text: false,
	geometry: false,
	material: false,
	position: comboLock.position,
	rotation: new THREE.Vector3(0,0,0),
	scale: new THREE.Vector3(1,1,1),
	animations: false,
	mixins: false,
	classes: ['a-ent'],
	components: false,
	};
	comboLock.comboParent = auxl.Core(comboLock.comboParentData);
	//Combo 0
	comboLock.combo0Data = {
	data:'combo0Data',
	id:combo0Id,
	sources: false,
	text: comboLock.texts[0],
	geometry: {primitive: 'box', depth: 0.1, width: 0.2, height: 0.3},
	material: {shader: "standard", color: "#e02574", emissive: '#e02574', emissiveIntensity: 0.25, opacity: 1},
	position: new THREE.Vector3(-0.4,0,0),
	rotation: new THREE.Vector3(0,0,0),
	scale: new THREE.Vector3(1,1,1),
	animations:{
		click: {property: 'material.emissiveIntensity', from: '0.25', to: '1', dur: 125, delay: 0, loop: '1', dir: 'alternate', easing: 'easeInOutElastic', elasticity: 400, autoplay: false, enabled: true, startEvents: 'click'},
		locked: {property: 'material.emissiveIntensity', from: '0.25', to: '1', dur: 250, delay: 0, loop: false, dir: 'normal', easing: 'easeInSine', elasticity: 400, autoplay: false, enabled: true, startEvents: 'locked'},
		locked2: {property: 'material.emissiveIntensity', from: '1', to: '0.25', dur: 250, delay: 1750, loop: false, dir: 'normal', easing: 'easeOutSine', elasticity: 400, autoplay: false, enabled: true, startEvents: 'locked'},
		unlocked: {property: 'material.emissiveIntensity', from: '0.25', to: '1', dur: 250, delay: 0, loop: '8', dir: 'alternate', easing: 'easeInOutElastic', elasticity: 400, autoplay: false, enabled: true, startEvents: 'unlocked'},
	},
	mixins: false,
	classes: ['clickable','a-ent'],
	components: {
		clickrun:{
			cursorObj: comboLock.id,
			component: 'null',
			method: 'KeyClick',
			params: '0',
		},
	},
	};
	comboLock[combo0Id] = auxl.Core(comboLock.combo0Data);
	//Combo 1
	comboLock.combo1Data = auxl.coreDataFromTemplate(comboLock.combo0Data,{id: combo1Id, text: comboLock.texts[1], position: new THREE.Vector3(-0.2,0,0), material: {shader: "standard", color: "#66e025", emissive: '#66e025', emissiveIntensity: 0.25, opacity: 1},components:{clickrun:{cursorObj: comboLock.id, component: 'null', method: 'KeyClick', params: '1',},},}, true);
	comboLock[combo1Id] = auxl.Core(comboLock.combo1Data);
	//Combo 2
	comboLock.combo2Data = auxl.coreDataFromTemplate(comboLock.combo0Data,{id: combo2Id, text: comboLock.texts[2], position: new THREE.Vector3(0,0,0), material: {shader: "standard", color: "#256de0", emissive: '#256de0', emissiveIntensity: 0.25, opacity: 1},components:{clickrun:{cursorObj: comboLock.id, component: 'null', method: 'KeyClick', params: '2',},},}, true);
	comboLock[combo2Id] = auxl.Core(comboLock.combo2Data);
	//Combo 3
	comboLock.combo3Data = auxl.coreDataFromTemplate(comboLock.combo0Data,{id: combo3Id, text: comboLock.texts[3], position: new THREE.Vector3(0.2,0,0), material: {shader: "standard", color: "#e0e025", emissive: '#e0e025', emissiveIntensity: 0.25, opacity: 1},components:{clickrun:{cursorObj: comboLock.id, component: 'null', method: 'KeyClick', params: '3',},},}, true);
	comboLock[combo3Id] = auxl.Core(comboLock.combo3Data);
	//Combo 4
	comboLock.combo4Data = auxl.coreDataFromTemplate(comboLock.combo0Data,{id: combo4Id, text: comboLock.texts[4], position: new THREE.Vector3(0.4,0,0), material: {shader: "standard", color: "#e09825", emissive: '#e09825', emissiveIntensity: 0.25, opacity: 1},components:{clickrun:{cursorObj: comboLock.id, component: 'null', method: 'KeyClick', params: '4',},},}, true);
	comboLock[combo4Id] = auxl.Core(comboLock.combo4Data);

	comboLock.comboAll = {
		parent: {core: comboLock.comboParent}, 
		child0: {core: comboLock[combo0Id]}, 
		child1: {core: comboLock[combo1Id]},
		child2: {core: comboLock[combo2Id]},
		child3: {core: comboLock[combo3Id]},
		child4: {core: comboLock[combo4Id]},
	}
	comboLock[layerId] = auxl.Layer(layerId,comboLock.comboAll);
	//Key Click
	const KeyClick = (key) => {
		if(comboLock.locked){
			CheckSeq(key);
		}
	}
	//Check Sequence
	const CheckSeq = (key) => {
		if(comboLock.correctSoFar){
			if(key === comboLock.sequence[comboLock.current]){
				comboLock.correctSoFar = true;
			} else {
				comboLock.correctSoFar = false;
			}
		}
		//Continue
		comboLock.current++;
		if(comboLock.current >= comboLock.sequence.length){
			if(comboLock.correctSoFar){
				//Correct Sequence
				Unlock();
			} else {
				//Incorrect Sequence
				Reset();
				LockedAnim();
				ToggleClick();
				comboLock.unlockedTimeout = setTimeout(() => {
					ToggleClick();
					clearTimeout(comboLock.unlockedTimeout)
				}, 2000);
			}
		}
	}
	//Run
	const Run = () => {
		if(comboLock.run.component && comboLock.run.component !== 'null'){
			let domEnt = document.getElementById(comboLock.run.cursorObj);
			domEnt.components[comboLock.run.component][comboLock.run.method](comboLock.run.params);

		} else {
			auxl[comboLock.run.cursorObj][comboLock.run.method](comboLock.run.params);
		}
	}
	//Unlock
	const Unlock = () => {
		comboLock.locked = false;
		UnlockAnim();
		ToggleClick();
		comboLock.unlockedTimeout = setTimeout(() => {
			Run();
			ToggleClick();
			DespawnComboLock();
			clearTimeout(comboLock.lockedTimeout)
		}, 2250);
	}
	//Unlock Anim
	const UnlockAnim = () => {
		comboLock[layerId].EmitEventAll('unlocked');
	}
	//Locked Anim
	const LockedAnim = () => {
		comboLock[layerId].EmitEventAll('locked');
	}
	//Toggle Clickable
	const ToggleClick = () => {
		comboLock[layerId].GetAllChildEl().forEach(each => each.classList.toggle('clickable'))
	}
	//Update Sequence
	const NewSequence = (newSeq) => {
		clearTimeout(comboLock.lockedTimeout)
		clearTimeout(comboLock.unlockedTimeout)
		comboLock.sequence = newSeq;
		Reset();
	}
	//Reset Lock
	const Reset = () => {
		comboLock.current = 0;
		comboLock.correctSoFar = true;
		comboLock.locked = true;
	}
	//Spawn Combo Lock
	const SpawnComboLock = () => {
		comboLock.locked = true;
		comboLock[layerId].SpawnLayer();
	}
	//Despawn Combo Lock
	const DespawnComboLock = () => {
		clearTimeout(comboLock.lockedTimeout)
		clearTimeout(comboLock.unlockedTimeout)
		comboLock[layerId].DespawnLayer();
	}

	return {comboLock, SpawnComboLock, DespawnComboLock, KeyClick, NewSequence};

}

//
//Scroll Multi Menu
//Infinite Scroll of Options
const ScrollMenu = (auxl, id) => {

//2 Types
//Objects scroll vertically/horizontally over a flat plane. Flat plane handles scroll clicks
//
//Objects scroll vertically/horizontally over a rotated cylinder. Cylinder handles scroll clicks

//Menu Options
//Menu Size
//Options to display
//Options Size
//Option Spacing Size


	let scrollMenu = {};
	scrollMenu.id = id;

	//All Parent
	scrollMenu.AllParentData = {
	data:'AllParentData',
	id:'allParent',
	sources: false,
	text: false,
	geometry: false,
	material: false,
	position: new THREE.Vector3(0,1.5,-1.5),
	rotation: new THREE.Vector3(0,0,0),
	scale: new THREE.Vector3(1,1,1),
	animations: false,
	mixins: false,
	classes: ['a-ent'],
	components: false,
	};
	scrollMenu.allParent = auxl.Core(scrollMenu.AllParentData);
	//Scroll Bkgd Clickable
	scrollMenu.scrollBkgdData = {
	data:'scrollBkgdData',
	id:'scrollBkgd',
	sources: false,
	text: false,
	geometry: {primitive: 'box', depth: 0.1, width: 0.5, height: 1.4},
	material: {shader: "standard", color: "#e02574", emissive: '#e02574', emissiveIntensity: 0.25, opacity: 0.5},
	position: new THREE.Vector3(0,0,0),
	rotation: new THREE.Vector3(0,0,0),
	scale: new THREE.Vector3(1,1,1),
	animations: false,
	mixins: false,
	classes: ['clickable','a-ent'],
	components: {
		scroll: {type: 'plane', axis: 'vertical', parent: 'scrollParent', length: 1, options: 5, elements: ['scroll0','scroll1','scroll2','scroll3','scroll4','scroll5','scroll6','scroll7']},
	},
	};
	scrollMenu.scrollBkgd = auxl.Core(scrollMenu.scrollBkgdData);
	//Scroll Parent
	scrollMenu.scrollParentData = {
	data:'scrollParentData',
	id:'scrollParent',
	sources: false,
	text: false,
	geometry: false,
	material: false,
	position: new THREE.Vector3(0,0,0),
	rotation: new THREE.Vector3(0,0,0),
	scale: new THREE.Vector3(1,1,1),
	animations: false,
	mixins: false,
	classes: ['a-ent'],
	components: false,
	};
	scrollMenu.scrollParent = auxl.Core(scrollMenu.scrollParentData);
	//Scroll 0
	scrollMenu.scroll0Data = {
	data:'scroll0Data',
	id: 'scroll0',
	sources: false,
	text: false,
	geometry: {primitive: 'box', depth: 0.025, width: 0.1, height: 0.1},
	material: {shader: "standard", color: "#e02574", emissive: '#e02574', opacity: 0},
	position: new THREE.Vector3(0,-0.6,0.1),
	rotation: new THREE.Vector3(0,0,0),
	scale: new THREE.Vector3(1,1,1),
	animations:{
		click: {property: 'material.emissiveIntensity', from: '0.25', to: '1', dur: 125, delay: 0, loop: '1', dir: 'alternate', easing: 'easeInOutElastic', elasticity: 400, autoplay: false, enabled: true, startEvents: 'click'},
	},
	mixins: false,
	classes: ['clickable','a-ent'],
	components: false,
	};
	scrollMenu.scroll0 = auxl.Core(scrollMenu.scroll0Data);
	//Scroll 1
	scrollMenu.scroll1Data = auxl.coreDataFromTemplate(scrollMenu.scroll0Data,{id: 'scroll1', position: new THREE.Vector3(0,-0.4,0.1), material: {shader: "standard", color: "#66e025", emissive: '#66e025', opacity: 1},}, true);
	scrollMenu.scroll1 = auxl.Core(scrollMenu.scroll1Data);
	//Scroll 2
	scrollMenu.scroll2Data = auxl.coreDataFromTemplate(scrollMenu.scroll0Data,{id: 'scroll2', position: new THREE.Vector3(0,-0.2,0.1), material: {shader: "standard", color: "#256de0", emissive: '#256de0', opacity: 1},}, true);
	scrollMenu.scroll2 = auxl.Core(scrollMenu.scroll2Data);
	//Scroll 3
	scrollMenu.scroll3Data = auxl.coreDataFromTemplate(scrollMenu.scroll0Data,{id: 'scroll3', position: new THREE.Vector3(0,0,0.1), material: {shader: "standard", color: "#e0e025", emissive: '#e0e025', opacity: 1},}, true);
	scrollMenu.scroll3 = auxl.Core(scrollMenu.scroll3Data);
	//Scroll 4
	scrollMenu.scroll4Data = auxl.coreDataFromTemplate(scrollMenu.scroll0Data,{id: 'scroll4', position: new THREE.Vector3(0,0.2,0.1), material: {shader: "standard", color: "#e09825", emissive: '#e09825', opacity: 1},}, true);
	scrollMenu.scroll4 = auxl.Core(scrollMenu.scroll4Data);
	//Scroll 5
	scrollMenu.scroll5Data = auxl.coreDataFromTemplate(scrollMenu.scroll0Data,{id: 'scroll5', position: new THREE.Vector3(0,0.4,0.1), material: {shader: "standard", color: "#e02525", emissive: '#e02525', opacity: 1},}, true);
	scrollMenu.scroll5 = auxl.Core(scrollMenu.scroll5Data);
	//Scroll 6
	scrollMenu.scroll6Data = auxl.coreDataFromTemplate(scrollMenu.scroll0Data,{id: 'scroll6', position: new THREE.Vector3(0,0.6,0.1), material: {shader: "standard", color: "#25e0d9", emissive: '#25e0d9', opacity: 0},}, true);
	scrollMenu.scroll6 = auxl.Core(scrollMenu.scroll6Data);
	//Scroll 7
	scrollMenu.scroll7Data = auxl.coreDataFromTemplate(scrollMenu.scroll0Data,{id: 'scroll7', position: new THREE.Vector3(0,0.8,0.1), material: {shader: "standard", color: "#ffffff", emissive: '#ffffff', opacity: 0},}, true);
	scrollMenu.scroll7 = auxl.Core(scrollMenu.scroll7Data);

	scrollMenu.scrollAllData = {
		parent: {core: scrollMenu.allParent}, 
		child0: {core: scrollMenu.scrollBkgd}, 
		child1: {
			parent: {core: scrollMenu.scrollParent}, 
			child0: {core: scrollMenu.scroll0}, 
			child1: {core: scrollMenu.scroll1},
			child2: {core: scrollMenu.scroll2},
			child3: {core: scrollMenu.scroll3},
			child4: {core: scrollMenu.scroll4},
			child5: {core: scrollMenu.scroll5},
			child6: {core: scrollMenu.scroll6},
			child7: {core: scrollMenu.scroll7},
		},
	}
	scrollMenu.scrollAll = auxl.Layer('scrollAll',scrollMenu.scrollAllData);

	//Spawn Scroll
	const SpawnScrollMenu = () => {
		scrollMenu.scrollAll.SpawnLayer();
	}

	//Despawn Scroll
	const DespawnScrollMenu = () => {
		scrollMenu.scrollAll.DespawnLayer();
	}

	return {scrollMenu, SpawnScrollMenu, DespawnScrollMenu};
};

//
//Export


/***/ }),

/***/ "./src/system/npc.js":
/*!***************************!*\
  !*** ./src/system/npc.js ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Book: () => (/* binding */ Book),
/* harmony export */   Creature: () => (/* binding */ Creature),
/* harmony export */   InfoBubble: () => (/* binding */ InfoBubble),
/* harmony export */   NPC: () => (/* binding */ NPC),
/* harmony export */   SpeechSystem: () => (/* binding */ SpeechSystem)
/* harmony export */ });
//
//AUXL : A-Frame UX Library
//v0.3 Engine
//https://github.com/Minty-Crisp/AUXL
//
//Created by Minty-Crisp (mintycrisp.com)
//
//NPC
//
//Book
//SpeechSystem
//NPC
//InfoBubble
//Creature

//
//Story Book
//Linear, Tree, Quests, Jump, Menu, Conditionals, Flags...
const Book = (auxl, bookData, npc) => {
	let progress = 0;
	let currentPage = 0;
	let currentPageIdle = 0;
	let pagesTimelineLength = 0;
	for(let page in bookData.pages){
		pagesTimelineLength += Object.keys(bookData.pages[page]).length-1;
	}

	//let type = bookData.pages.page0.info.timeline;
	//let idleType = bookData.idle.page0.info.timeline;
	let type = bookData.pages['page'+currentPage].info.timeline;
	let idleType = bookData.idle['page'+currentPageIdle].info.timeline;

	let timelineLength = Object.keys(bookData.pages.page0).length;
	let random = Math.floor(Math.random()*timelineLength-1)+1;
	let previousRandom = 0;

	let timelineLengthIdle = Object.keys(bookData.idle.page0).length;
	let randomIdle = Math.floor(Math.random()*timelineLengthIdle-1)+1;
	let previousRandomIdle = 0;

	//Run Object Generator Function within Book w/Scene Tracking
	const auxlObjMethod = (object, func, params) => {
		if(object === 'self'){
			object = npc.id;
		}
		//Check if spawning to add to Tracker
		for (let types in auxl.objGenTracking) {
			if(func === auxl.objGenTracking[types].spawn || func === auxl.objGenTracking[types].altSpawn){
				auxl.spawnTracker(object, 'book', npc.id);
			}
		}
		auxl[object][func](params);
	}
	//Yield Timeline
	function* lineReader(book,time){
		//Update and Check Book Progress
		progress++;
		if(progress >= pagesTimelineLength){
			npc.bookEnd = true;
		} else {
			npc.bookEnd = false;
		}
		//Run Line
		for(let line in time){
			//Ignore Page Data
			if(line === 'id' || line === 'description' ||line === 'tags' ||line === 'nextPage' ||line === 'prevPage' ||line === 'timeline'){
				//page data only
			} else if(line === 'pureFunction'){
				//pure functions
				//not object generated methods
				//Need a good check condition for this.func() and not this.obj.func()
				auxl[line](time[line])
			} else {
				for(let a in time[line]){
					auxlObjMethod(line,a,time[line][a]);
				}
			}
		}
		yield;
	}
	//Yield Time
	function* timeReader(book,page){
		for(let time in page){
			book.currentTimeline = time;
			book.timelineQue.push([time,page[time]]);
			//Skip|Ignore Data til timeline# reach if jumping
			if(time === bookData.jumpTo){
				bookData.jumping = false;
			}
			if(bookData.jumping){}else{
				yield* lineReader(book, page[time]);
			}
		}
	}
	//Yield Page
	function* pageReader(book){
		for(let page in book.pages){
			book.currentPage = page;
			book.pageQue.push([page,book.pages[page]]);
			yield* timeReader(book, book.pages[page]);
		}
	}
	//Yield Book
	function* bookReader(book){
		//book.currentPage = 0;
		book.currentTimeline = 0;
		book.currentEntry = 0;
		book.currentDialog = 0;
		book.pageQue = [];
		book.timelineQue = [];
		book.entryQue = [];
		book.textBubbleQue = [];
		book.speaker = '';
		book.speaking = false;
		book.jumping = false;
		book.jumpTo;
		book.selectJumpMenu;
		progress = 0;
		npc.bookEnd = false;
		//Book Info & Contents
		//for(let setting in book.info){
			//console.log(setting);
			//console.log(book.info[setting]);
			//Book Info
			//id
			//description
			//tags
		//};

		//Start reading Pages
		yield* pageReader(book);
	};
	//Init Yield Gen Book
	let book = bookReader(bookData);
	//Yield Timeline
	function* idleLineReader(book,time){
		for(let line in time){
			//Ignore Page Data
			if(line === 'id' || line === 'description' ||line === 'tags' ||line === 'nextPage' ||line === 'prevPage' ||line === 'timeline'){
				//page data only
			} else if(line === 'pureFunction'){
				//pure functions
				//not object generated methods
				//Need a good check condition for this.func() and not this.obj.func()
				auxl[line](time[line])
			} else {
				for(let a in time[line]){
					auxlObjMethod(line,a,time[line][a]);
				}
			}
		}
		yield;
	}
	//Yield Time
	function* idleTimeReader(book,page){
		for(let time in page){
			book.currentTimeline = time;
			book.timelineQue.push([time,page[time]]);
			//Skip|Ignore Data til timeline# reach if jumping
			if(time === bookData.jumpTo){
				bookData.jumping = false;
			}
			if(bookData.jumping){}else{
				yield* idleLineReader(book, page[time]);
			}
		}
	}
	//Yield Page
	function* idlePageReader(book){
		for(let page in book.idle){
			book.currentPage = page;
			book.pageQue.push([page,book.idle[page]]);
			yield* idleTimeReader(book, book.idle[page]);
		}
	}
	//Yield Book
	function* idleBookReader(book){
		book.currentPage = 0;
		book.currentTimeline = 0;
		book.currentEntry = 0;
		book.currentDialog = 0;
		book.pageQue = [];
		book.timelineQue = [];
		book.entryQue = [];
		book.textBubbleQue = [];
		book.speaker = '';
		book.speaking = false;
		book.jumping = false;
		book.jumpTo;
		book.selectJumpMenu;
		//Book Info & Contents
		//for(let setting in book.info){
			//console.log(setting);
			//console.log(book.info[setting]);
			//Book Info
			//id
			//description
			//tags
		//};

		//Start reading Pages
		yield* idlePageReader(book);
	};
	//Build Idle Book
	let idleBook = false;
	if(bookData.idle){
		idleBook = idleBookReader(bookData);
	}
	//Read Book Timeline
	function readTimeline({page,time}){
		for(let line in bookData.pages[page][time]){
			if(line === 'pureFunction'){
				//Need a good check condition for this.func() and not this.obj.func()
				auxl[line](time[line])
			} else {
				for(let a in bookData.pages[page][time][line]){
					auxl[line][a](bookData.pages[page][time][line][a]);
				}
			}
		}
		return;
	}
	//Init Book
	const Init = () => {
		//Jump to 1st Line
		book.done = book.next().done;
		book.done = book.next().done;
		npc.loadingTimeline = false;
	}
	//Next
	const Next = (timeline) => {
		if(type === 'random'){
			Random(timeline);
		}
		book.done = book.next().done;
		let nextTimeout = setTimeout(function () {
			npc.loadingTimeline = false;
			clearTimeout(nextTimeout);
		}, 1000);
	}
	//New Page
	const NewPage = ({page, timeline}) => {
		let newPage;
		if(page){
			newPage = page;
		} else {
			currentPage += 1;
			newPage = 'page' + currentPage;
		}
		let newTimeline = timeline || 'timeline0';
		Jump({timeline: newTimeline, page: newPage});
		let pageTimeout = setTimeout(function () {
			Next();
			clearTimeout(pageTimeout);
		}, 250);
		type = bookData.pages['page'+currentPage].info.timeline;
	}
	//Random
	const Random = (timeline) => {
		if(timeline){
			random = timeline;
		} else {
			random = Math.floor(Math.random()*timelineLength);
			randomNum: while (true) {
				if(random >= timelineLength-1 || random === previousRandom){
					random = Math.floor(Math.random()*timelineLength-1)+1;
					continue randomNum;
				} else {
					break;
				}
			}
			if(random <= previousRandom){
				//reset
				auxl[npc.id].ResetBookRandom(true);
			}
		}
		let randomJump = 'timeline' + random;
		Jump({timeline: randomJump, page: 'page'+currentPage});
		previousRandom = random;
	}
	//Init Idle
	const IdleInit = () => {
		idleBook.done = idleBook.next().done;
		npc.loadingTimeline = false;
	}
	//Idle Next
	const IdleNext = (timeline) => {
		if(idleType === 'random'){
			RandomIdle(timeline);
		}
		idleBook.done = idleBook.next().done;
		let idleNextTimeout = setTimeout(function () {
			npc.loadingTimeline = false;
			clearTimeout(idleNextTimeout);
		}, 1000);
	}
	//Random
	const RandomIdle = (timeline) => {
		if(timeline){
			randomIdle = timeline
		} else {
			randomIdle = Math.floor(Math.random()*timelineLengthIdle)+1;
			randomNumIdle: while (true) {
				if(randomIdle >= timelineLengthIdle-1 || randomIdle === previousRandomIdle){
					randomIdle = Math.floor(Math.random()*timelineLengthIdle-1)+1;
					continue randomNumIdle;
				} else {
					break;
				}
			}
			if(randomIdle <= previousRandomIdle){
				//reset
				auxl[npc.id].ResetIdleRandom(true, randomIdle);
			}
		}
		let randomJumpIdle = 'timeline' + randomIdle;
		JumpIdle({timeline: randomJumpIdle, page: 'page0'});
		previousRandomIdle = randomIdle;
	}
	//Jump to Idle Timeline
	const JumpIdle = ({timeline, page}) => {
		let toPage = page || bookData.currentPage;
		bookData.jumpTo = timeline;
		if(bookData.idle[toPage][bookData.jumpTo]){
			bookData.jumping = true;
		}
	}
	//Jump to Timeline
	const Jump = ({timeline, page}) => {
		let toPage = page || bookData.currentPage;
		bookData.jumpTo = timeline;
		if(bookData.pages[toPage][bookData.jumpTo]){
			bookData.jumping = true;
		}
	}
	//Jump Menu
	const SelectJump = (jumpOptions) => {
		let selectedTime;
		let selectedPage = false;
		let selectJumpData = {
			id: 'selectJumpMenu',
			prompt: jumpOptions[0],
			options: {},
			actions: {},
			data: auxl.menuBaseData,
			cursorObj: npc.id,
			pos: new THREE.Vector3(1,1.5,-0.5),
			method: 'Click',
		}
		for(let a = 1; a < jumpOptions.length; a++){
			selectJumpData.options['option'+(a-1)] = jumpOptions[a][0];
			selectJumpData.actions['action'+(a-1)] = jumpOptions[a][1];
		}
		npc.selectJumpMenu = auxl.Menu(selectJumpData);
		npc.selectJumpMenu.SpawnMenu();
		npc.selectJumpMenu.AddToParentSpawnTracker(npc.selectJumpMenu, npc, 'book');
		if(npc.bubble.type === 'core'){
			npc.bubble.GetEl().classList.toggle('clickable', false);
		} else {
			npc.bubble.GetParentEl().classList.toggle('clickable', false);
		}
		if(npc.avatarType === 'core'){
			npc.avatar.GetEl().classList.toggle('clickable', false);
		} else {
			let all = npc.avatar.GetAllEl();
			for(let each in all){
				all[each].classList.toggle('clickable', false);
			}
		}
	}

	return {bookData, book, idleBook, Init, Next, NewPage, Random, IdleInit, IdleNext, RandomIdle, Jump, JumpIdle, SelectJump, readTimeline};
}

//
//Speech System
//Speaking Textbubble
const SpeechSystem = (auxl, core, npc, fixed) => {
	core.on = false;
	core.speaking = false;
	core.blinking = false;
	core.blinkNextText = '';
	core.blinkText0 = '';
	core.blinkText1 = '';
	core.textDisplayInterval;
	let bubbleDespawnTimeout;
	let bubbleSpawnTimeout;
	let id = 'speech'
	core.type = 'core';
	if(core.core){
		core.type = 'core';
		id = core.core.id;
	} else {
		core.type = 'layer';
		id = core.layer.id;
	}
	let parent = false;
	if(npc){
		if(npc.avatar.core){
			parent = 'core';
		} else {
			parent = 'layer';
		}
	}
	//Start Textbubble
	const Start = () => {
		let spawnParent = false;
		if(parent === 'core'){
			spawnParent = npc.avatar.GetEl();
		} else if(parent === 'layer'){
			spawnParent = npc.avatar.GetParentEl();
		}
		if(core.type === 'core'){
			core.SpawnCore(spawnParent);
			core.GetEl().addEventListener('mouseenter', Skip);
			bubbleSpawnTimeout = setTimeout(() => {
				core.EmitEvent('loadin');
				clearTimeout(bubbleDespawnTimeout);
			}, 25);
		} else {
			core.SpawnLayer(spawnParent);
			core.GetParentEl().addEventListener('mouseenter', Skip);
			StartCloseReset();
			bubbleSpawnTimeout = setTimeout(() => {
				core.EmitEventAll('loadin');
				clearTimeout(bubbleDespawnTimeout);
			}, 25);
		}
		core.on = true;
	}
	//Skip to end of speech
	const Skip = () => {
		if(core.type === 'core'){
			core.GetEl().emit('skip',{});
		} else {
			core.GetParentEl().emit('skip',{});
		}
	}
	//Stop Textbubble
	const Stop = () => {
		if(core.on){
			if(core.type === 'core'){
				core.GetEl().removeEventListener('mouseenter', Skip);
				core.EmitEvent('loadout');
				bubbleDespawnTimeout = setTimeout(() => {
					core.DespawnCore();
					core.on = false;
					clearTimeout(bubbleDespawnTimeout);
				}, 1000);
			} else {
				core.GetParentEl().removeEventListener('mouseenter', Skip);
				core.EmitEventAll('loadout');
				StopCloseReset();
				bubbleDespawnTimeout = setTimeout(() => {
					core.DespawnLayer();
					core.on = false;
					clearTimeout(bubbleDespawnTimeout);
				}, 1000);
			}
		}
	}
	//Start Close & Reset
	const StartCloseReset = () => {
		//Close
		core.layer.all.child0.core.GetEl().addEventListener('click',auxl[npc.id].ResetSpeech)
		//Reset
		core.layer.all.child1.core.GetEl().addEventListener('click',auxl[npc.id].ForceResetBook)
	}
	//Stop Close & Reset
	const StopCloseReset = () => {
		//Close
		core.layer.all.child0.core.GetEl().removeEventListener('click',npc.ResetSpeech)
		//Reset
		core.layer.all.child1.core.GetEl().removeEventListener('click',npc.ForceResetBook)
	}
	//Kill Speech
	const Kill = () => {
		core.speaking = false;
		clearInterval(auxl.intervals[id]);
		delete auxl.intervals[id];
	}
	//Kill Blink
	const KillBlink = () => {
		core.blinking = false;
		clearInterval(auxl.intervals[id+'blink']);
		delete auxl.intervals[id+'blink'];
	}
	//Kill Speech & Stop Textbuble
	const KillStop = () => {
		Kill();
		KillBlink();
		Stop();
	}
	//Change Textbubble - Single or Array
	const ChangeCore = (setAlt) => {
		if(core.type === 'core'){
			if(Array.isArray(setAlt)){
				for(let each in setAlt){
					core.ChangeSelf(setAlt[each])
				}
			} else {
				core.ChangeSelf(setAlt)
			}
		} else {
			if(Array.isArray(setAlt)){
				for(let each in setAlt){
					core.ChangeParent(setAlt[each])
				}
			} else {
				core.ChangeParent(setAlt)
			}
		}

	}
	//Speaking Controls
	const DisplaySpeech = ({role,speech}) => {
		KillBlink();
		let startText = role + ' : ';
		let currText = startText;
		let currChar = 0;
		if(core.type === 'core'){
			//Scene text which uses a Core to display has an issue with re-using core.dom, so a forced refresh is needed with GetEl(true)
			core.GetEl(true).setAttribute('text',{value: currText});
		} else {
			core.GetParentEl().setAttribute('text',{value: currText});
		}
		core.speaking = true;

		function skipText(){
			if(core.type === 'core'){
				core.GetEl().setAttribute('text',{value: startText + speech});
			} else {
				core.GetParentEl().setAttribute('text',{value: startText + speech});
			}
			core.speaking = false;
			Kill();
			if(core.blink){
				core.blinkText0 = startText + speech;
				core.blinkText1 = startText + speech;
				if(npc.bookEnd){
					core.blinkNextText = ' X';
				} else {
					core.blinkNextText = ' ->';
				}
				core.blinkText1 += core.blinkNextText;
				Blink();
			}
			if(core.type === 'core'){
				core.GetEl().removeEventListener('skip',skipText);
			} else {
				core.GetParentEl().removeEventListener('skip',skipText);
			}

		}
		if(core.type === 'core'){
			core.GetEl().addEventListener('skip', skipText);
		} else {
			core.GetParentEl().addEventListener('skip', skipText);
		}

		AddToTimeIntEvtTracker({name: 'textDisplayInterval', type: 'interval', id: id});
		auxl.intervals[id] = setInterval(() => {
			//Interval Functions
			if(currChar < speech.length){
				currText += speech[currChar];
				currChar++;
			}
			if(currChar >= speech.length){
				core.speaking = false;
				if(core.type === 'core'){
					core.GetEl().removeEventListener('skip',skipText);

				} else {
					core.GetParentEl().removeEventListener('skip',skipText);
				}
				Kill();
				if(core.blink){
					core.blinkText0 = currText;
					core.blinkText1 = currText;
					if(npc.bookEnd){
						core.blinkNextText = ' X';
					} else {
						core.blinkNextText = ' ->';
					}
					core.blinkText1 += core.blinkNextText;
					Blink();
				}
			}
			if(core.on){
				if(core.type === 'core'){
					core.GetEl().setAttribute('text',{value: currText});
				} else {
					core.GetParentEl().setAttribute('text',{value: currText});
				}
			}
		}, 20);
	}
	//Blink
	const Blink = () => {
		AddToTimeIntEvtTracker({name: 'blinkDisplayInterval', type: 'interval', id: id});
		auxl.intervals[id+'blink'] = setInterval(() => {
			if(core.blinking){
				if(core.type === 'core'){
					core.GetEl().setAttribute('text',{value: core.blinkText1});
				} else {
					core.GetParentEl().setAttribute('text',{value: core.blinkText1});
				}
				core.blinking = false;
			} else {
				if(core.type === 'core'){
					core.GetEl().setAttribute('text',{value: core.blinkText0});
				} else {
//BUG - Issue here sometimes on idle speech
//core.GetParentEl() is null
					core.GetParentEl().setAttribute('text',{value: core.blinkText0});
				}
				core.blinking = true;
			}
		}, 1000);
	}
	//Add Textbubble Timeout, Interval, Interaction & Events to Tracker
	const AddToTimeIntEvtTracker = ({name,type,id,method,params}) => {
		let nameId = name+id;
		if(type === 'timeout'){
			auxl.running[nameId] = {type, name, id, nameId};
		} else if (type === 'interval'){
			auxl.running[nameId] = {type, name, id, nameId};
		} else if (type === 'interaction' || type === 'event'){
			auxl.running[nameId] = {type, name, id, nameId, method, params, event};
		}
	}
	//Remove Textbubble Timeout, Interval, Interaction & Events to Tracker
	const RemoveFromTimeIntEvtTracker = (name) => {
		delete auxl.running[name];
	}

	return {core, Start, Skip, KillStop, ChangeCore, DisplaySpeech};
}

//
//NPC
//Core Object w/ Book|Pages & Textbubble
const NPC = (auxl, id, object, bookData, textDisplay, special) => {
	let npc = {};
	npc.avatar = Object.assign({}, object);
	npc.avatarType;
	npc.parentId;
	if(object.SpawnCore){
		npc.avatarType = 'core';
		npc.parentId = object.core.id;
	} else if(object.SpawnLayer){
		npc.avatarType = 'layer';
		npc.parentId = object.layer.all.parent.core.core.id;
	}
	npc.id = id;
	npc.special = special || true;
	npc.inScene = false;
	npc.speaking = false;
	npc.bookEnd = false;
	npc.idle = false;
	npc.idleSpeech = false;
	npc.loadingTimeline = false;
	if(bookData.info.name){
		npc.name = bookData.info.name;
	} else {
		npc.name = npc.id;
	}
	//let bubble = Object.assign({}, textDisplay);
	npc.bubble = Object.assign({}, textDisplay);
	npc.bubble.blink = true;
	let book;
	let text = auxl.SpeechSystem(npc.bubble, npc);

	//Idle
	if(bookData.idle){
		npc.idleSpeech = true;
	}
	let spawnTimeout;
	let idleTimeout;
	let idleDelayTime = bookData.info.idleDelay || 7000;
	let idleInterval;
	let idleIntervalTime = bookData.info.idleInterval || 10000;
	let menuTimeout;

	//Get All NPC Elements
	const GetAllNPCEl = () => {
		let allEl;
		if(npc.avatarType === 'core'){
			allEl = npc.avatar.GetEl();
		} else {
			allEl = npc.avatar.GetAllEl();
		}
		return allEl;
	}
	//Get Main NPC Element
	const GetMainNPCEl = () => {
		let allEl;
		if(npc.avatarType === 'core'){
			allEl = npc.avatar.GetEl();
		} else {
			allEl = npc.avatar.GetParentEl();
		}
		return allEl;
	}
	//AddEventListener to Avatar
	const AddNPCEventsAll = (eventName, method) => {
		if(npc.avatarType === 'core'){
			npc.avatar.GetEl().addEventListener(eventName, method);
		} else {
			let all = npc.avatar.GetAllEl();
			for(let each in all){
				all[each].addEventListener(eventName, method);
			}
		}
	}
	//RemoveEventListener to Avatar
	const RemoveNPCEventsAll = (eventName, method) => {
		if(npc.avatarType === 'core'){
			npc.avatar.GetEl().removeEventListener(eventName, method);
		} else {
			let all = npc.avatar.GetAllEl();
			for(let each in all){
				all[each].removeEventListener(eventName, method);
			}
		}
	}
	//AddEventListener to Avatar
	const AddNPCEventsChildren = (eventName, method) => {
		if(npc.avatarType === 'core'){
			npc.avatar.GetEl().addEventListener(eventName, method);
		} else {
			let all = npc.avatar.GetAllChildEl();
			for(let each in all){
				all[each].addEventListener(eventName, method);
			}
		}
	}
	//RemoveEventListener to Avatar
	const RemoveNPCEventsChildren = (eventName, method) => {
		if(npc.avatarType === 'core'){
			npc.avatar.GetEl().removeEventListener(eventName, method);
		} else {
			let all = npc.avatar.GetAllChildEl();
			for(let each in all){
				all[each].removeEventListener(eventName, method);
			}
		}
	}
	//Spawn NPC, Reset Book & Start Speaking
	const SpawnNPC = (parent) => {
		if(npc.inScene){}else{
			let spawnParent = parent || false;
			//Reset book on each spawn
			book = auxl.Book(bookData, npc);
			//npc.SpawnCore();
			if(npc.avatarType === 'core'){
				npc.avatar.SpawnCore(spawnParent);
			} else {
				npc.avatar.SpawnLayer(spawnParent);
			}
			//Spawn Timeout fix for Companion if spawned at mouse location
			spawnTimeout = setTimeout(() => {
				if(npc.special){
					AddNPCEventsChildren('mouseenter', EnableSpeech);
				} else {
					AddNPCEventsAll('mouseenter', EnableSpeech);
				}
				clearTimeout(spawnTimeout);
			}, 25);
			if(npc.idleSpeech){
				idleTimeout = setTimeout(() => {
					EnableIdleSpeech()
					clearTimeout(idleTimeout);
				}, idleDelayTime);
			}
			npc.inScene = true;
		}
	}
	//Despawn NPC
	const DespawnNPC = () => {
		if(npc.inScene){
			ClearBookSpawn();
			clearTimeout(spawnTimeout);
			clearTimeout(idleTimeout);
			DisableSpeech();
			DisableIdleSpeech();
			if(npc.speaking){
				if(npc.special){
					RemoveNPCEventsChildren('mouseenter',NextTimeline);
					//RemoveNPCEventsChildren('click',ResetSpeech);
				} else {
					RemoveNPCEventsAll('mouseenter',NextTimeline);
					//RemoveNPCEventsAll('click',ResetSpeech);
				}
			} else {
				if(npc.special){
					RemoveNPCEventsChildren('mouseenter',EnableSpeech);
				} else {
					RemoveNPCEventsAll('mouseenter',EnableSpeech);
				}
			}
			if(npc.avatarType === 'core'){
				npc.avatar.DespawnCore();
			} else {
				npc.avatar.DespawnLayer();
			}
			auxl.RemoveFromTracker(npc.id);
			npc.inScene = false;
		}
	}
	//Toggle Spawn
	const ToggleSpawn = () => {
		if(npc.inScene){
			DespawnNPC();
		} else {
			SpawnNPC();
		}
	}
	//Clear Book Spawned Objects
	const ClearBookSpawn = () => {
		auxl.clearSpawned(auxl.bookSpawned[npc.id]);
		delete auxl.bookSpawned[npc.id];
	}
	//Prep & Start NPC Speaking
	const EnableSpeech = () => {
		if(npc.idle){
			DisableIdleSpeech();
		}
		clearTimeout(idleTimeout);
		npc.speaking = true;
		if(npc.special){
			RemoveNPCEventsChildren('mouseenter',EnableSpeech);
		} else {
			RemoveNPCEventsAll('mouseenter',EnableSpeech);
		}
		text.Start();
		book.Init()
		if(npc.special){
			AddNPCEventsChildren('mouseenter',NextTimeline);
			//AddNPCEventsChildren('click',ResetSpeech);
		} else {
			AddNPCEventsAll('mouseenter',NextTimeline);
			//AddNPCEventsAll('click',ResetSpeech);
		}

	}
	//Disable NPC Speaking
	const DisableSpeech = () => {
		text.KillStop();
		if(npc.special){
			RemoveNPCEventsChildren('mouseenter',NextTimeline);
			//RemoveNPCEventsChildren('click',ResetSpeech);
		} else {
			RemoveNPCEventsAll('mouseenter',NextTimeline);
			//RemoveNPCEventsAll('click',ResetSpeech);
		}
	}
	//NPC Speaking
	const Speak = ({role,speech}) => {
		if(role){
			if(role === 'self'){
				role = npc.name;
			}
		} else {
			role = npc.name;
		}
		text.DisplaySpeech({role, speech});
	}
	//NPC Book Next Item
	const NextTimeline = (timeline) => {
		//Prevent pushing next speech until current is over or skipped to end
		if(text.core.on){
			if(text.core.speaking){} else {
				if(npc.loadingTimeline){}else{
					npc.loadingTimeline = true;
					book.Next(timeline);
				}
			}
		} else {
			if(npc.loadingTimeline){}else{
				npc.loadingTimeline = true;
				book.Next(timeline);
			}
		}
	}
	//NPC Book New Page
	const NewPage = ({page,timeline}) => {
		//Prevent pushing next speech until current is over or skipped to end
		book.NewPage({page,timeline});
	}
	//Restart NPC Book
	const ResetSpeech = (force) => {
		DisableSpeech();
		ClearBookSpawn();
		book = auxl.Book(bookData, npc);
		if(npc.special){
			AddNPCEventsChildren('mouseenter',EnableSpeech);
		} else {
			AddNPCEventsAll('mouseenter',EnableSpeech);
		}
	}
	//Reset NPC Book
	const ResetBook = (force) => {
		if(book.book.done || force){
			ClearBookSpawn();
			book = auxl.Book(bookData, npc);
			book.Init()
		}
	}
	//Force Reset NPC Book
	const ForceResetBook = () => {
		ClearBookSpawn();
		book = auxl.Book(bookData, npc);
		book.Init()
		//book.Next()
	}
	//Reset NPC Book
	const ResetBookRandom = (force, timeline) => {
		if(book.book.done || force){
			ClearBookSpawn();
			book = auxl.Book(bookData, npc);
			book.Init();
			NextTimeline(timeline);
		}
	}
	//Prep & Start NPC Speaking
	const EnableIdleSpeech = () => {
		npc.idle = true;
		text.Start();
		//Jump over Info to Timeline0
		book.IdleInit();
		IdleNextTimeline();
		idleInterval = setInterval(() => {
			IdleNextTimeline();
		}, idleIntervalTime);
	}
	//Disable NPC Speaking
	const DisableIdleSpeech = () => {
		clearInterval(idleInterval);
		npc.idle = false;
	}
	//NPC Book Next Item
	const IdleNextTimeline = (timeline) => {
		//Prevent pushing next speech until current is over or skipped to end
		if(text.core.on){
			if(text.core.speaking){} else {
				if(npc.loadingTimeline){}else{
					npc.loadingTimeline = true;
					book.IdleNext(timeline);
				}
			}
		} else {
			if(npc.loadingTimeline){}else{
				npc.loadingTimeline = true;
				book.IdleNext(timeline);
			}
		}
	}
	//Reset NPC Book
	const IdleReset = (force) => {
		if(book.idleBook.done || force){
			ClearBookSpawn();
			book = auxl.Book(bookData, npc);
			book.IdleInit();
		}
	}
	//Reset NPC Idle
	const ResetIdleRandom = (force, timeline) => {
		if(book.idleBook.done || force){
			ClearBookSpawn();
			book = auxl.Book(bookData, npc);
			book.IdleInit();
			IdleNextTimeline(timeline);
		}
	}
	//Update Book
	const UpdateBook = () => {
		console.log(bookData)
		console.log(bookData.pages)
		console.log(bookData.idle)
	}
	//NPC Book Jump Menu Click
	const Click = (el) => {
		text.Skip();
		let result = el.getAttribute('result');
		Jump({timeline: result});
		book.Next();
		//Need to update after creating book control component
		if(npc.bubble.type === 'core'){
			npc.bubble.GetEl().classList.toggle('clickable', false);
		} else {
			npc.bubble.GetParentEl().classList.toggle('clickable', false);
		}
		if(npc.avatarType === 'core'){
			npc.avatar.GetEl().classList.toggle('clickable', true);
		} else {
			let all = npc.avatar.GetAllEl();
			for(let each in all){
				all[each].classList.toggle('clickable', true);
			}
		}
		menuTimeout = setTimeout(function () {
			npc.selectJumpMenu.DespawnMenu();
			npc.selectJumpMenu.RemoveMenuFromSceneTracker();
			clearTimeout(menuTimeout);
		}, 250);
	}
	//NPC Book Jump
	const Jump = ({timeline, page}) => {
		book.Jump({timeline, page})
	}
	//NPC Book Menu Jump
	const SelectJump = (jumpOptions) => {
		book.SelectJump(jumpOptions);
	}
	//Run NPC Methods
	const auxlObjMethod = (object, func, params) => {
		//Only used to run NPC methods
		if(object === 'self'){
			object = npc.id;
		}
		//console.log(object)
		//console.log(func)
		//console.log(params)
		auxl[object][func](params);
	}
	//If/Else for NPC Methods
	const IfElse = (obj) => {
		let objRef = Object.keys(obj)[0];
		let cond = obj[objRef].cond;
		let ifTrue = obj[objRef].ifTrue;
		let ifFalse = obj[objRef].ifFalse;
		if(objRef === 'self'){
			objRef = npc.id;
		}
		if(auxl[objRef].GetFlag){
			if(auxl[objRef].GetFlag(cond)) {
				for(let a in ifTrue){
					for(let b in ifTrue[a]){
						auxlObjMethod(a,b,ifTrue[a][b]);
					}
				}
			} else {
				for(let a in ifFalse){
					for(let b in ifFalse[a]){
						auxlObjMethod(a,b,ifFalse[a][b]);
					}
				}
			}
		} else if(auxl[objRef].GetFlagParent){
			if(auxl[objRef].GetFlagParent(cond)) {
				for(let a in ifTrue){
					for(let b in ifTrue[a]){
						auxlObjMethod(a,b,ifTrue[a][b]);
					}
				}
			} else {
				for(let a in ifFalse){
					for(let b in ifFalse[a]){
						auxlObjMethod(a,b,ifFalse[a][b]);
					}
				}
			}
		}
	}
	//Switch support to run auxlObjMethod()
	const Switch = (obj) => {
		let condObj = Object.keys(obj)[0]
		let switchInfo = obj[condObj];
		if(condObj === 'self'){
			condObj = npc.id;
		}
		let switchCases = [];
		for(let each in switchInfo){
			if(each === 'cond' || each === 'default'){}else{
				switchCases.push(each)
			}
		}
		if(auxl[condObj].GetFlag){
			//Core, Basic Objects
			let switchCondition = auxl[condObj].GetFlag(switchInfo.cond);
			//console.log(switchCondition);
			//Cases
			for(let each in switchCases){
				if(switchCondition === switchCases[each]){
					for(let a in switchInfo[switchCases[each]]){
						for(let b in switchInfo[switchCases[each]][a]){
							auxlObjMethod(a,b,switchInfo[switchCases[each]][a][b]);
						}
					}
					return;
				}
			}
			//Default
			for(let a in switchInfo.default){
				for(let b in switchInfo.default[a]){
					auxlObjMethod(a,b,switchInfo.default[a][b]);
				}
			}
		} else if(auxl[condObj].GetFlagParent){
			//Layer
			let switchCondition = auxl[condObj].GetFlagParent(switchInfo.cond);
			//console.log(switchCondition);
			//Cases
			for(let each in switchCases){
				if(switchCondition === switchCases[each]){
					for(let a in switchInfo[switchCases[each]]){
						for(let b in switchInfo[switchCases[each]][a]){
							auxlObjMethod(a,b,switchInfo[switchCases[each]][a][b]);
						}
					}
					return;
				}
			}
			//Default
			for(let a in switchInfo.default){
				for(let b in switchInfo.default[a]){
					auxlObjMethod(a,b,switchInfo.default[a][b]);
				}
			}
		} else {
			console.log(condObj);
			console.log('Unable to find value');
			console.log(switchInfo.cond);
		}
	}
	//Set Flag & Value to Object - Single or Array
	const SetFlag = (flagValue) => {
		if(Array.isArray(flagValue)){
			for(let each in flagValue){
				npc[flagValue[each].flag] = flagValue[each].value;
				auxl.saveToProfile({auxlObject: npc.id, type: 'npc', sub: false, name: flagValue[each].flag, data: flagValue[each].value});
			}
		} else {
			npc[flagValue.flag] = flagValue.value;
			auxl.saveToProfile({auxlObject: npc.id, type: 'npc', sub: false, name: flagValue.flag, data: flagValue.value});
		}
	}
	//Retreive Flag Value from Object - Single or Array
	const GetFlag = (flag) => {
		if(Array.isArray(flag)){
			let flagArray = [];
			for(let each in flag){
				flagArray.push(npc(flag[each]));
			}
			return flagArray;
		} else {
			return npc[flag];
		}
	}


return {npc, GetAllNPCEl, GetMainNPCEl, AddNPCEventsAll, RemoveNPCEventsAll, SpawnNPC, DespawnNPC, ToggleSpawn, EnableSpeech, DisableSpeech, EnableIdleSpeech, DisableIdleSpeech, Speak, NextTimeline, NewPage, ResetSpeech, ResetBook, ForceResetBook, ResetBookRandom, IdleNextTimeline, IdleReset, ResetIdleRandom, UpdateBook, Click, Jump, SelectJump, auxlObjMethod, IfElse, Switch, SetFlag, GetFlag}
}

//
//Info Bubble
//Display an Emote or Alert Bubble
const InfoBubble = (auxl, id, object, offset, color) => {
	//Not in Tracker as it is controlled via component
	//Set up for Core parent only at the moment
	let infoBubble = {};
	infoBubble.id = id;
	let bubbleId = infoBubble.id + 'bubble';
	let textId = infoBubble.id + 'text';
	infoBubble.parent = object;
	if(object.SpawnCore){
		infoBubble.parentType = 'core';
	} else if(object.SpawnLayer){
		infoBubble.parentType = 'layer';
	}
	infoBubble.custom = {};
	infoBubble.inScene = false;
	infoBubble.position = new THREE.Vector3(0,0.5,0);
	infoBubble.rotation = new THREE.Vector3(0,0,0);
	infoBubble.color = color || '#14d9a4';
	//Position
	if(offset){
		if(offset.x){
			infoBubble.position.x = offset.x;
			infoBubble.position.y = offset.y;
			infoBubble.position.z = offset.z;
		} else {
			infoBubble.position.y = offset;
		}
	}
	//Emoti Bubble
	infoBubble.infoBubbleData = {
	data:'infoBubbleData',
	id: bubbleId,
	sources:false,
	sounds: {
	maximize:{src: auxl.maximize6, autoplay: true, loop: false, volume: 1,},
	minimize:{src: auxl.minimize6, autoplay: false, loop: false, volume: 1, on: 'spawnOut'},
	},
	text: false,
	geometry: {primitive: 'circle', radius: 0.3, segments: 32, thetaStart: 0, thetaLength: 360},
	material: {shader: "standard", color: infoBubble.color, opacity: 1, metalness: 0.2, roughness: 0.8, emissive: infoBubble.color, emissiveIntensity: 0.6, side: 'double'},
	position: infoBubble.position,
	rotation: infoBubble.rotation,
	scale: new THREE.Vector3(0.01,0.01,0.01),
	animations:{
	spawnin:{property: 'scale', from: '0.01 0.01 0.01', to: '1 1 1', dur: 1500, delay: 500, loop: false, dir: 'normal', easing: 'easeOutElastic', elasticity: 400, autoplay: true, enabled: true},
	spawnout:{property: 'scale', from: '1 1 1', to: '0.01 0.01 0.01', dur: 1000, delay: 3000, loop: false, dir: 'normal', easing: 'easeInOutElastic', elasticity: 400, autoplay: true, enabled: true},
	},
	mixins: false,
	classes: ['a-ent'],
	components: {
	['stare']:{id: 'playerRig'},
	},
	};
	infoBubble[bubbleId] = auxl.Core(infoBubble.infoBubbleData);
	//Emoti Text
	infoBubble.emotiTextData = {
	data:'emotiTextData',
	id: textId,
	sources:false,
	text: {value:'!', wrapCount: 2, color: "#FFFFFF", font: "exo2bold", zOffset: 0, side: 'double', align: "center", baseline: 'center'},
	geometry: false,
	material: false,
	position: new THREE.Vector3(0.025,0.1,0.025),
	rotation: new THREE.Vector3(0,0,0),
	scale: new THREE.Vector3(1,1,1),
	animations: false,
	mixins: false,
	classes: ['a-ent'],
	components: false,
	};
	infoBubble[textId] = auxl.Core(infoBubble.emotiTextData);
	//Emoti Layer
	infoBubble.emotiLayerData = {
		parent: {core: infoBubble[bubbleId]},
		child0: {core: infoBubble[textId]},
	}
	infoBubble[infoBubble.id] = auxl.Layer(infoBubble.id, infoBubble.emotiLayerData);

	//Spawn Emote Bubble Layer
	const SpawnBubble = () => {
		if(infoBubble.inScene){}else{
			infoBubble[infoBubble.id].layer.all.parent.core.core.animations.spawnout = {property: 'scale', from: '1 1 1', to: '0.01 0.01 0.01', dur: 1000, delay: 3000, loop: false, dir: 'normal', easing: 'easeInOutElastic', elasticity: 400, autoplay: true, enabled: true,};

			infoBubble[infoBubble.id].SpawnLayer(infoBubble.parent);

			infoBubble.inScene = true;
			infoBubble.soundTimeout = setTimeout(() => {
				infoBubble[infoBubble.id].EmitEventParent('spawnOut');
				clearTimeout(infoBubble.soundTimeout);
			}, 3000);
			infoBubble.timeout = setTimeout(() => {
				DespawnBubble();
				clearTimeout(infoBubble.timeout);
			}, 4050);
		}
	}
	//Despawn Emote Bubble Layer
	const DespawnBubble = () => {
		if(infoBubble.inScene){
			infoBubble[infoBubble.id].DespawnLayer();
			infoBubble.inScene = false;
			auxl.RemoveFromTracker(infoBubble.id);
		}
	}
	//Spawn Alert Bubble Layer
	const SpawnAlert = () => {
		if(infoBubble.inScene){}else{
			infoBubble[infoBubble.id].layer.all.parent.core.core.animations.spawnout = {property: 'scale', from: '1 1 1', to: '0.01 0.01 0.01', dur: 1000, delay: 0, loop: false, dir: 'normal', easing: 'easeInOutElastic', elasticity: 400, autoplay: true, enabled: true, startEvents: 'spawnOut'};

			infoBubble[infoBubble.id].SpawnLayer(infoBubble.parent);
			infoBubble.inScene = true;
			AddEvent('mouseenter',DespawnAlert);

		}
	}
	//Despawn Emote Bubble Layer
	const DespawnAlert = () => {
		if(infoBubble.inScene){
			RemoveEvent('mouseenter',DespawnAlert);
			infoBubble[infoBubble.id].EmitEventParent('spawnOut');
			infoBubble.timeout = setTimeout(() => {
				DespawnBubble();
				auxl.RemoveFromTracker(infoBubble.id);
				clearTimeout(infoBubble.timeout);
			}, 1050);
		}
	}
	//Update Emote Text Core
	const UpdateText = (text, rotation, offset) => {
		//Take in xOffset, yOffset
		infoBubble[textId].core.text.value = text;
		infoBubble[textId].core.text.wrapCount = text.length+2;
		if(offset){
			if(offset.x){
				infoBubble[textId].core.text.xOffset = offset.x;
			} else {
				infoBubble[textId].core.text.xOffset = 0;
			}
			if(offset.x){
				infoBubble[textId].core.text.yOffset = offset.y;
			} else {
				infoBubble[textId].core.text.yOffset = 0;
			}
		} else {
			infoBubble[textId].core.text.xOffset = 0;
			infoBubble[textId].core.text.zOffset = 0;
		}
		if(rotation){
			infoBubble[textId].core.rotation.z = rotation;
		} else {
			infoBubble[textId].core.rotation.z = 0;
		}
	}
	//Add Event Listener
	const AddEvent = (event, action) => {
		if(infoBubble.parentType === 'core'){
			infoBubble.parent.GetEl().addEventListener(event,action);
		} else {
			infoBubble.parent.GetParentEl().addEventListener(event,action);
		}
	}
	//Remove Event Listener
	const RemoveEvent = (event, action) => {
		if(infoBubble.parentType === 'core'){
			infoBubble.parent.GetEl().removeEventListener(event,action);
		} else {
			infoBubble.parent.GetParentEl().removeEventListener(event,action);
		}
	}
	//Add Custom Emote
	const NewBubble = (details) => {
		infoBubble.custom[details.eventName] = details;
		//details.emote or alert
		//details.textValue
		//details.offset:{x:0.1,y:0.1}
		//details.eventName
		//details.rotation
	}
	//Spawn a Custom Emote
	const CustomBubble = (event) => {
		for(let emote in infoBubble.custom){
			if(event.type === emote){
				if(infoBubble.custom[emote].rotation){
					UpdateText(infoBubble.custom[emote].text,infoBubble.custom[emote].rotation, infoBubble.custom[emote].offset);
				} else {
					UpdateText(infoBubble.custom[emote].text);
				}
				if(infoBubble.custom[emote].alert){
					SpawnAlert();
				} else {
					SpawnBubble();
				}
				break;
			}
		}
	}
	//
	//Emotes
	//
	//Emote !
	const Emote1 = () => {
		UpdateText('!');
		SpawnBubble();
	}
	//Alert !
	const Alert1 = () => {
		UpdateText('!');
		SpawnAlert();
	}
	//Emote ?
	const Emote2 = () => {
		UpdateText('?');
		SpawnBubble();
	}
	//Alert ?
	const Alert2 = () => {
		UpdateText('?');
		SpawnAlert();
	}
	//Emote :)
	const Emote3 = () => {
		UpdateText(':)', -90);
		SpawnBubble();
	}
	//Emote ^-^
	const Emote4 = () => {
		UpdateText('^-^');
		SpawnBubble();
	}
	//Emote Casual @
	const EmoteCasual = () => {
		UpdateText('@');
		SpawnBubble();
	}
	//Emote Happy ^^
	const EmoteHappy = () => {
		UpdateText('^^');
		SpawnBubble();
	}
	//Emote Sad "
	const EmoteSad = () => {
		UpdateText('"');
		SpawnBubble();
	}
	//Emote Angry *
	const EmoteAngry = () => {
		UpdateText('*');
		SpawnBubble();
	}
	//Emote Confused ?
	const EmoteConfused = () => {
		UpdateText('?');
		SpawnBubble();
	}
	//Emote Tired %
	const EmoteTired = () => {
		UpdateText('%');
		SpawnBubble();
	}
	//Emote Asleep zzz
	const EmoteAsleep = () => {
		UpdateText('zzz');
		SpawnBubble();
	}
	//Emote Annoyed +
	const EmoteAnnoyed = () => {
		UpdateText('+');
		SpawnBubble();
	}
	//Emote Smug +
	const EmoteSmug = () => {
		UpdateText('~');
		SpawnBubble();
	}
	//Emote Shocked !
	const EmoteShocked = () => {
		UpdateText('!');
		SpawnBubble();
	}
	//Emote Scared =
	const EmoteScared = () => {
		UpdateText('=');
		SpawnBubble();
	}
	//Emote Confident $
	const EmoteConfident = () => {
		UpdateText('$');
		SpawnBubble();
	}
	//Emote Love <3
	const EmoteLove = () => {
		UpdateText('<3\n', 90, {x:-0.1});
		SpawnBubble();
	}
	//Emote Shy #
	const EmoteShy = () => {
		UpdateText('#');
		SpawnBubble();
	}

	//Add all Emotes to Element
	const AddEmotes = () => {
		AddEvent('alert1', Alert1);
		AddEvent('alert2', Alert2);
		AddEvent('emote1', Emote1);
		AddEvent('emote2', Emote2);
		AddEvent('emote3', Emote3);
		AddEvent('emote4', Emote4);

		AddEvent('casual', EmoteCasual);
		AddEvent('happy', EmoteHappy);
		AddEvent('sad', EmoteSad);
		AddEvent('angry', EmoteAngry);
		AddEvent('confused', EmoteConfused);
		AddEvent('tired', EmoteTired);
		AddEvent('asleep', EmoteAsleep);
		AddEvent('annoyed', EmoteAnnoyed);
		AddEvent('smug', EmoteSmug);
		AddEvent('shocked', EmoteShocked);
		AddEvent('scared', EmoteScared);
		AddEvent('confident', EmoteConfident);
		AddEvent('love', EmoteLove);
		AddEvent('shy', EmoteShy);

		for(let each in infoBubble.custom){
			AddEvent(each, CustomBubble);
		}
	}
	//Remove all Emotes to Element
	const RemoveEmotes = () => {
		if(infoBubble.inScene){
			clearTimeout(infoBubble.soundTimeout);
			clearTimeout(infoBubble.timeout);
			DespawnBubble();
		}
		RemoveEvent('alert1', Alert1);
		RemoveEvent('alert2', Alert2);
		RemoveEvent('emote1', Emote1);
		RemoveEvent('emote2', Emote2);
		RemoveEvent('emote3', Emote3);
		RemoveEvent('emote4', Emote4);

		RemoveEvent('casual', EmoteCasual);
		RemoveEvent('happy', EmoteHappy);
		RemoveEvent('sad', EmoteSad);
		RemoveEvent('angry', EmoteAngry);
		RemoveEvent('confused', EmoteConfused);
		RemoveEvent('tired', EmoteTired);
		RemoveEvent('asleep', EmoteAsleep);
		RemoveEvent('annoyed', EmoteAnnoyed);
		RemoveEvent('smug', EmoteSmug);
		RemoveEvent('shocked', EmoteShocked);
		RemoveEvent('scared', EmoteScared);
		RemoveEvent('confident', EmoteConfident);
		RemoveEvent('love', EmoteLove);
		RemoveEvent('shy', EmoteShy);

		for(let each in infoBubble.custom){
			RemoveEvent(each, CustomBubble);
		}
	}
	//On init, add required component methods to parent
	const Init = () => {
		if(infoBubble.parentType === 'core'){
			if(Object.keys(infoBubble.parent.core.components).length === 0){
				infoBubble.parent.core.components = {};
			}
			infoBubble.parent.core.components['onspawnrun__emote'] = {
				cursorObj: infoBubble.id,
				component: null,
				method: 'AddEmotes',
				params: null,
			};
			infoBubble.parent.core.components['ondespawnrun__emote'] = {
				cursorObj: infoBubble.id,
				component: null,
				method: 'RemoveEmotes',
				params: null,
			};
		} else {
			if(Object.keys(infoBubble.parent.layer.all.parent.core.core.components).length === 0){
				infoBubble.parent.layer.all.parent.core.core.components = {};
			}
			infoBubble.parent.layer.all.parent.core.core.components['onspawnrun__emote'] = {
				cursorObj: infoBubble.id,
				component: null,
				method: 'AddEmotes',
				params: null,
			};
			infoBubble.parent.layer.all.parent.core.core.components['ondespawnrun__emote'] = {
				cursorObj: infoBubble.id,
				component: null,
				method: 'RemoveEmotes',
				params: null,
			};
		}
	}
	Init();

return {infoBubble, AddEmotes, RemoveEmotes, NewBubble};

}

//
//CreatureGen
//Generate a creature object
const Creature = (auxl, id, attach, customizations) => {

//No longer will this be an creature, but a creature generator
//Weave in the ghost body and allow for legs/arms to be added
//Keep the current round head and cylinder body, but more shape combos to come

//Have creature types like animal (normal eye,pupil,iris), robot (single eye with no pupil or iris, but text character maybe) or celestial (special eyes)

//Seed generator

//A 'crystal' like object that on click spawns the creature and on hide goes into it

//Sounds

//Name Generator

//Wing/s (bird/butterfly/moth) and or Tail

//Accesories like crown, hat, bow, stick w/ leaves, etc...

//Ghost body
//Various body radius sizes

//Cone horn

//Curves with torus like curved horns or arms

//Partial Cones for Ears

//For triangles, do a cylinder with 3 side so it can have depth
//Diamond Pupils

//Bottom eye lid

//Nose, Mouth and/or beak

//Belly shape/color

//Feet, floaties, ball, wheels, etc...

//Skin textures with randomized repeat sizes

//Pupil Text Character or just match the same shape

//Instead of Accent use, infoBubble?

//Emotion Animation
/*
Eye 1/2 : Wide/Normal/Squint/Tired/Blink/Closed
Eyebrow 1/2 : Low/Mid/High
Ear : Slow Pulse/Quick Rattle
Pupil Direction : Forward/Right/Up/Left/Down
Mouth : Normal/Smile/Sad/Gasp/Shocked/Speaking
-
Emotions/Animations :
Casual
Happy
Sad
Angry
Confused
Tired
Asleep
Annoyed
Smug
Shocked
Scared
Confident
Star Struck
Shy
*/




let creature = {};
creature.id = id;
creature.auxlId = id+'layer';
creature.bubbleId = id+'bubble';
creature.parent = attach || false;

creature.inScene = false;

//Object IDs
let parentId = 'parent' + creature.id;
let headId = 'head' + creature.id;
let eye1SocketId = 'eye1Socket' + creature.id;
let eyebrow1Id = 'eyebrow1' + creature.id;
let eye1PupilId = 'eye1Pupil' + creature.id;
let eye1PupilAccentId = 'eye1PupilAccent' + creature.id;
let eye1BlinkId = 'eye1Blink' + creature.id;
let eye1LidOffsetId = 'eye1LidOffset' + creature.id;
let eye1LidId = 'eye1Lid' + creature.id;
let eye2SocketId = 'eye2Socket' + creature.id;
let eyebrow2Id = 'eyebrow2' + creature.id;
let eye2PupilId = 'eye2Pupil' + creature.id;
let eye2PupilAccentId = 'eye2PupilAccent' + creature.id;
let eye2BlinkId = 'eye2Blink' + creature.id;
let eye2LidOffsetId = 'eye2LidOffset' + creature.id;
let eye2LidId = 'eye2Lid' + creature.id;
let ear1OffsetId = 'ear1Offset' + creature.id;
let ear1Id = 'ear1' + creature.id;
let ear2OffsetId = 'ear2Offset' + creature.id;
let ear2Id = 'ear2' + creature.id;

let bodyId = 'body' + creature.id;
let tailId = 'tail' + creature.id;
let leg1Id = 'leg1' + creature.id;
let leg2Id = 'leg2' + creature.id;
let leg3Id = 'leg3' + creature.id;
let leg4Id = 'leg4' + creature.id;

let acc1Id = 'acc1' + creature.id;

//Custommizations
creature.custom = customizations || false;
let eye = false;
let eyeTypes = ['egg', 'circle', 'square', 'rectangle', 'triangle'];
let pupil = false;
let pupilTypes = ['egg', 'circle', 'square', 'rectangle', 'triangle'];
let pupilAccent = false;
let pupilAccentTypes = ['*', '!', 'x', '&', '<3', 'z'];
let ear = false;
let earTypes = ['bun', 'bunny', 'mouse', 'ant', 'horn'];
//Choose Specifics
if(creature.custom){
	if(creature.custom.eye){
		eye = creature.custom.eye;
	}
	if(creature.custom.pupil){
		pupil = creature.custom.pupil;
	}
	if(creature.custom.accent){
		pupilAccent = creature.custom.accent;
	}
	if(creature.custom.ear){
		ear = creature.custom.ear;
	}
}
if(!eye){
	eye = eyeTypes[Math.floor(Math.random()*eyeTypes.length)];
}
if(!pupil){
	pupil = pupilTypes[Math.floor(Math.random()*pupilTypes.length)];
}
if(!pupilAccent){
	pupilAccent = pupilAccentTypes[Math.floor(Math.random()*pupilAccentTypes.length)];
}
if(!ear){
	ear = earTypes[Math.floor(Math.random()*earTypes.length)];
}


//Position
//Rotation
//Scale
creature.position = new THREE.Vector3(0,3,-3);
creature.rotation = new THREE.Vector3(0,0,0);
creature.scale = new THREE.Vector3(1,1,1);
if(creature.custom){
	//Position
	if(customizations.offset){
		if(customizations.offset.x){
			creature.position.x = customizations.offset.x;
			creature.position.y = customizations.offset.y;
			creature.position.z = customizations.offset.z;
		} else {
			creature.position.z = customizations.offset;
		}
	}
	//Rotation
	if(customizations.rotation){
		if(customizations.rotation.x){
			creature.rotation.x = customizations.rotation.x;
			creature.rotation.y = customizations.rotation.y;
			creature.rotation.z = customizations.rotation.z;
		} else {
			creature.rotation.y = customizations.rotation;
		}
	}
	//Scale
	if(customizations.scale){
		if(customizations.scale.x){
			creature.scale.x = customizations.scale.x;
			creature.scale.y = customizations.scale.y;
			creature.scale.z = customizations.scale.z;
		} else {
			creature.scale.y = customizations.scale;
		}
	}
}
//Random All Below
creature.color = auxl.colorTheoryGen(false, true);
//Pupil Material
creature.pupilColor = creature.color.base;
creature.pupilMaterial = {shader: "standard", color: creature.pupilColor, emissive: creature.pupilColor, emissiveIntensity: 0.5, opacity: 1, side: 'double', metalness: 0.2, roughness: 0.8};
//Skin Material
creature.skinColor0 = creature.color.splitCompl[1];
creature.skinMaterial = {shader: "standard", color: creature.skinColor0, emissive: creature.skinColor0, emissiveIntensity: 0.5, opacity: 1, side: 'double', metalness: 0.2, roughness: 0.8};
//Brow Material
creature.skinColor1 = auxl.colorTheoryGen(creature.skinColor0).base;
creature.browMaterial = {shader: "standard", color: creature.skinColor1, emissive: creature.skinColor1, emissiveIntensity: 0.5, opacity: 1, side: 'double', metalness: 0.2, roughness: 0.8};
//Accent
//creature.accentColor = creature.color.compl;
creature.accentColor = 'white';
creature.accentText = {value:pupilAccent, wrapCount: 3, color: creature.accentColor, font: "exo2bold", side: 'double', align: "center", baseline: 'center', zOffset: 0.0175,};

//
//Eyebrow Thickness
let browSizeMod = Math.random();
if(creature.custom){
	if(customizations.browSize === 'small'){
		browSizeMod = 0;
	} else if(customizations.browSize === 'medium'){
		browSizeMod = 0.5;
	} else if(customizations.browSize === 'large'){
		browSizeMod = 1;
	}
}
creature.browThickness = (browSizeMod*0.04)+0.01;
//
//Eye
//eyeSize
let eyeSizeMod = Math.random();
if(creature.custom){
	if(customizations.eyeSize === 'small'){
		eyeSizeMod = 0;
	} else if(customizations.eyeSize === 'medium'){
		eyeSizeMod = 0.5;
	} else if(customizations.eyeSize === 'large'){
		eyeSizeMod = 1;
	}
}
//Eye Shape
//
//Egg
let eggSize = (eyeSizeMod*0.08)+0.125;
//Shape
let eggSocketShape = {primitive: 'cylinder', radius: eggSize, height: 0.0125, openEnded: false, segmentsHeight: 2, segmentsRadial: 32, thetaStart: 0, thetaLength: 360};
let eggSocketScale = new THREE.Vector3(0.75,1,1);
//Lid
let eggLidShape = {primitive: 'cylinder', radius: eggSize, height: 0.0125, openEnded: false, segmentsHeight: 2, segmentsRadial: 16, thetaStart: 90, thetaLength: 180};
let eggLidPosition = new THREE.Vector3(0,0,eggSize);
let eggLidOffsetPosition = new THREE.Vector3(0,0,eggSize*-1);
//Blink
let eggBlinkShape = {primitive: 'cylinder', radius: eggSize, height: 0.0125, openEnded: false, segmentsHeight: 2, segmentsRadial: 16, thetaStart: 0, thetaLength: 360};
//Anims
//Eye 1/2 : Wide/Normal/Squint/Tired/Blink/Closed
//Flux
let eggBlinkAnim = {property: 'object3D.scale.z', from: 0.65, to: 1.3, dur: 2000, delay: 0, loop: true, dir: 'alternate', easing: 'easeInOutSine', elasticity: 400, autoplay: false, enabled: true, startEvents: 'flux', pauseEvents: 'stopFlux'};
//Wide
let eggWideAnim = {property: 'object3D.scale.z', to: 0.5, dur: 1000, delay: 0, loop: false, dir: 'normal', easing: 'easeInOutSine', elasticity: 400, autoplay: false, enabled: true, startEvents: 'wide'};
//Normal
let eggNormalAnim = {property: 'object3D.scale.z', to: 0.65, dur: 1000, delay: 0, loop: false, dir: 'normal', easing: 'easeInOutSine', elasticity: 400, autoplay: false, enabled: true, startEvents: 'normal'};
//Squint
let eggSquintAnim = {property: 'object3D.scale.z', to: 1.3, dur: 1000, delay: 0, loop: false, dir: 'normal', easing: 'easeInOutSine', elasticity: 400, autoplay: false, enabled: true, startEvents: 'squint'};
//Tired
let eggTiredAnim = {property: 'object3D.scale.z', to: 1.1, dur: 1000, delay: 0, loop: false, dir: 'normal', easing: 'easeInOutSine', elasticity: 400, autoplay: false, enabled: true, startEvents: 'tired'};

//Pupil
let eggPupilShape = {primitive: 'cylinder', radius: eggSize/3, height: 0.025, openEnded: false, segmentsHeight: 2, segmentsRadial: 16, thetaStart: 0, thetaLength: 360};
//
//Circle
let circleSize = (eyeSizeMod*0.0575)+0.1;
//Shape
let circleSocketShape = {primitive: 'cylinder', radius: circleSize, height: 0.0125, openEnded: false, segmentsHeight: 2, segmentsRadial: 16, thetaStart: 0, thetaLength: 360};
let circleSocketScale = new THREE.Vector3(1,1,1);
//Lid
let circleLidShape = {primitive: 'cylinder', radius: circleSize, height: 0.0125, openEnded: false, segmentsHeight: 2, segmentsRadial: 16, thetaStart: 90, thetaLength: 180};
let circleLidPosition = new THREE.Vector3(0,0,circleSize);
let circleLidOffsetPosition = new THREE.Vector3(0,0,circleSize*-1);
//Blink
let circleBlinkShape = {primitive: 'cylinder', radius: circleSize, height: 0.0125, openEnded: false, segmentsHeight: 2, segmentsRadial: 16, thetaStart: 0, thetaLength: 360};
//Anims
let circleBlinkAnim = {property: 'object3D.scale.z', from: 0.65, to: 1.3, dur: 2000, delay: 0, loop: true, dir: 'alternate', easing: 'easeInOutSine', elasticity: 400, autoplay: true, enabled: true};
//Pupil
let circlePupilShape = {primitive: 'cylinder', radius: circleSize/3, height: 0.025, openEnded: false, segmentsHeight: 2, segmentsRadial: 16, thetaStart: 0, thetaLength: 360};
//
//Square
let squareSize = (eyeSizeMod*0.125)+0.175;
//Shape
let squareSocketShape = {primitive: 'box', depth: squareSize, width: squareSize, height: 0.015};
let squareSocketScale = new THREE.Vector3(1,1,1);
//Lid
let squareLidShape = {primitive: 'box', depth: squareSize, width: squareSize, height: 0.015};
let squareLidPosition = new THREE.Vector3(0,0,squareSize);
let squareLidOffsetPosition = new THREE.Vector3(0,0,squareSize*-1);
//Blink
let squareBlinkShape = {primitive: 'box', depth: squareSize, width: squareSize, height: 0.015};
let squareBlinkAnim = {property: 'object3D.scale.z', from: 0.45, to: 0.8, dur: 2000, delay: 0, loop: true, dir: 'alternate', easing: 'easeInOutSine', elasticity: 400, autoplay: true, enabled: true};
//Pupil
let squarePupilShape = {primitive: 'box', depth: squareSize/3, width: squareSize/3, height: 0.015};
//
//Rectangle
let rectSize1 = (eyeSizeMod*0.25)+0.225;
let rectSize2 = rectSize1*0.66;
//Shape
let rectSocketShape = {primitive: 'box', depth: rectSize1, width: rectSize2, height: 0.015};
let rectSocketScale = new THREE.Vector3(1,1,1);
//Lid
let rectLidShape = {primitive: 'box', depth: rectSize1, width: rectSize2, height: 0.015};
let rectLidPosition = new THREE.Vector3(0,0,rectSize2);
let rectLidOffsetPosition = new THREE.Vector3(0,0,rectSize2*-1);
//Blink
let rectBlinkShape = {primitive: 'box', depth: rectSize1, width: rectSize2, height: 0.015};
//Anims
let rectBlinkAnim = {property: 'object3D.scale.z', from: 0.35, to: 0.75, dur: 2000, delay: 0, loop: true, dir: 'alternate', easing: 'easeInOutSine', elasticity: 400, autoplay: true, enabled: true};
//Pupil
let rectPupilShape = {primitive: 'box', depth: rectSize1/3, width: rectSize2/3, height: 0.015};
//
//Triangle
let triSize = (eyeSizeMod*0.15)+0.1;
//Shape
let triSocketShape = {primitive: 'triangle', vertexA: new THREE.Vector3(0,0,triSize), vertexB: new THREE.Vector3(triSize*-1,0,triSize*-1), vertexC: new THREE.Vector3(triSize,0,triSize*-1)};
let triSocketScale = new THREE.Vector3(1,1.5,1);
//Lid
let triLidShape = {primitive: 'triangle', vertexA: new THREE.Vector3(0,0,triSize), vertexB: new THREE.Vector3(triSize*-1,0,triSize*-1), vertexC: new THREE.Vector3(triSize,0,triSize*-1)};
let triLidPosition = new THREE.Vector3(0,0.05,triSize);
let triLidOffsetPosition = new THREE.Vector3(0,0,triSize*-1);
//Blink
let triBlinkShape = {primitive: 'triangle', vertexA: new THREE.Vector3(0,0,triSize), vertexB: new THREE.Vector3(triSize*-1,0,triSize*-1), vertexC: new THREE.Vector3(triSize,0,triSize*-1)};
//Anims
let triBlinkAnim = {property: 'object3D.scale.z', from: 0.325, to: 0.6, dur: 2000, delay: 0, loop: true, dir: 'alternate', easing: 'easeInOutSine', elasticity: 400, autoplay: true, enabled: true};
//Pupil
let triPupilShape = {primitive: 'triangle', vertexA: new THREE.Vector3(0,0,triSize*0.33), vertexB: new THREE.Vector3(triSize*-0.33,0,triSize*-0.33), vertexC: new THREE.Vector3(triSize*0.33,0,triSize*-0.33)};

//Pupil Accent
let accentSize = (eyeSizeMod*0.05)+0.075;

//Eye & Pupil Shape : Egg, Circle, Square, Rectangle, Triangle
if(pupil === 'egg'){
	creature.pupilShape = eggPupilShape;
} else if(pupil === 'circle'){
	creature.pupilShape = circlePupilShape;
} else if(pupil === 'square'){
	creature.pupilShape = squarePupilShape;
} else if(pupil === 'rectangle'){
	creature.pupilShape = rectPupilShape;
} else if(pupil === 'triangle'){
	creature.pupilShape = triPupilShape;
}
if(eye === 'egg'){
	creature.socketShape = eggSocketShape;
	creature.socketScale = eggSocketScale;
	creature.lidShape = eggLidShape;
	creature.lidPosition = eggLidPosition;
	creature.lidOffsetPosition = eggLidOffsetPosition;
	creature.blinkShape = eggBlinkShape;
	creature.blinkAnim = eggBlinkAnim;

	creature.wideAnim = eggWideAnim;
	creature.normalAnim = eggNormalAnim;
	creature.squintAnim = eggSquintAnim;
	creature.tiredAnim = eggTiredAnim;

} else if(eye === 'circle'){
	creature.socketShape = circleSocketShape;
	creature.socketScale = circleSocketScale;
	creature.lidShape = circleLidShape;
	creature.lidPosition = circleLidPosition;
	creature.lidOffsetPosition = circleLidOffsetPosition;
	creature.blinkShape = circleBlinkShape;
	creature.blinkAnim = circleBlinkAnim;
} else if(eye === 'square'){
	creature.socketShape = squareSocketShape;
	creature.socketScale = squareSocketScale;
	creature.lidShape = squareLidShape;
	creature.lidPosition = squareLidPosition;
	creature.lidOffsetPosition = squareLidOffsetPosition;
	creature.blinkShape = squareBlinkShape;
	creature.blinkAnim = squareBlinkAnim;
} else if(eye === 'rectangle'){
	creature.socketShape = rectSocketShape;
	creature.socketScale = rectSocketScale;
	creature.lidShape = rectLidShape;
	creature.lidPosition = rectLidPosition;
	creature.lidOffsetPosition = rectLidOffsetPosition;
	creature.blinkShape = rectBlinkShape;
	creature.blinkAnim = rectBlinkAnim;
} else if(eye === 'triangle'){
	creature.socketShape = triSocketShape;
	creature.socketScale = triSocketScale;
	creature.lidShape = triLidShape;
	creature.lidPosition = triLidPosition;
	creature.lidOffsetPosition = triLidOffsetPosition;
	creature.blinkShape = triBlinkShape;
	creature.blinkAnim = triBlinkAnim;
}
//
//Ear
let earSizeMod = Math.random();
if(creature.custom){
	if(customizations.earSize === 'small'){
		earSizeMod = 0;
	} else if(customizations.earSize === 'medium'){
		earSizeMod = 0.5;
	} else if(customizations.earSize === 'large'){
		earSizeMod = 1;
	}
}
//Bun
let bunSize = (earSizeMod*0.15)+0.1;
let bunEar1OffsetPos = new THREE.Vector3(-0.25,0.5,0.4);
let bunEar2OffsetPos = new THREE.Vector3(0.25,0.5,0.4);
let bunEarOffsetScale = new THREE.Vector3(0.9,1,0.9);
let bunEarShape = {primitive: 'cylinder', radius: bunSize, height: 0.0125, openEnded: false, segmentsHeight: 2, segmentsRadial: 16, thetaStart: 90, thetaLength: 180};
let bunEarPos = new THREE.Vector3(0,0,0.175);
let bunEarScale = new THREE.Vector3(1,1,1);

//Bunny
let bunnySize = (earSizeMod*0.1)+0.15;
let bunnyEar1OffsetPos = new THREE.Vector3(-0.25,0.5,0.4);
let bunnyEar2OffsetPos = new THREE.Vector3(0.25,0.5,0.4);
let bunnyEarOffsetScale = new THREE.Vector3(0.5,1,0.5);
let bunnyEarShape = {primitive: 'cylinder', radius: bunnySize, height: 0.0125, openEnded: false, segmentsHeight: 2, segmentsRadial: 16, thetaStart: 90, thetaLength: 180};
let bunnyEarPos = new THREE.Vector3(0,0,0.175);
let bunnyEarScale = new THREE.Vector3(1,1,5);

//Antennae
let antSize = (earSizeMod*0.175)+0.075;
let antEar1OffsetPos = new THREE.Vector3(-0.125,0.51,0.4);
let antEar2OffsetPos = new THREE.Vector3(0.125,0.51,0.4);
let antEarOffsetScale = new THREE.Vector3(0.5,1,0.5);
let antEarShape = {primitive: 'cylinder', radius: antSize, height: 0.0125, openEnded: false, segmentsHeight: 2, segmentsRadial: 16, thetaStart: 90, thetaLength: 180};
let antEarPos = new THREE.Vector3(0,0,0.175);
let antEarScale = new THREE.Vector3(0.35,0.35,6);

//Horns
let hornSize = (earSizeMod*0.2)+0.125;
let hornEar1OffsetPos = new THREE.Vector3(-0.25,0.5,0.4);
let hornEar2OffsetPos = new THREE.Vector3(0.25,0.5,0.4);
let hornEarOffsetScale = new THREE.Vector3(0.5,1,0.5);
let hornEarShape = {primitive: 'cylinder', radius: hornSize, height: 0.0125, openEnded: false, segmentsHeight: 2, segmentsRadial: 16, thetaStart: 90, thetaLength: 180};
let hornEarPos = new THREE.Vector3(0,0,0.175);
let hornEarScale = new THREE.Vector3(0.4,0.4,2);

//Mouse
let mouseSize = (earSizeMod*0.15)+0.1;
let mouseEar1OffsetPos = new THREE.Vector3(-0.325,0.625,0.4);
let mouseEar2OffsetPos = new THREE.Vector3(0.325,0.625,0.4);
let mouseEarOffsetScale = new THREE.Vector3(1,1,1);
let mouseEarShape = {primitive: 'cylinder', radius: mouseSize, height: 0.0125, openEnded: false, segmentsHeight: 2, segmentsRadial: 16, thetaStart: 0, thetaLength: 360};
let mouseEarPos = new THREE.Vector3(0,0,0.175);
let mouseEarScale = new THREE.Vector3(1,1,1);

//Ear Type : Bun, Bunny, Antennae, Horns, Mouse
if(ear === 'bun'){
	creature.ear1OffsetPos = bunEar1OffsetPos;
	creature.ear2OffsetPos = bunEar2OffsetPos;
	creature.earOffsetScale = bunEarOffsetScale;
	creature.earShape = bunEarShape;
	creature.earPos = bunEarPos;
	creature.earScale = bunEarScale;
} else if(ear === 'bunny'){
	creature.ear1OffsetPos = bunnyEar1OffsetPos;
	creature.ear2OffsetPos = bunnyEar2OffsetPos;
	creature.earOffsetScale = bunnyEarOffsetScale;
	creature.earShape = bunnyEarShape;
	creature.earPos = bunnyEarPos;
	creature.earScale = bunnyEarScale;
} else if(ear === 'mouse'){
	creature.ear1OffsetPos = mouseEar1OffsetPos;
	creature.ear2OffsetPos = mouseEar2OffsetPos;
	creature.earOffsetScale = mouseEarOffsetScale;
	creature.earShape = mouseEarShape;
	creature.earPos = mouseEarPos;
	creature.earScale = mouseEarScale;
} else if(ear === 'ant'){
	creature.ear1OffsetPos = antEar1OffsetPos;
	creature.ear2OffsetPos = antEar2OffsetPos;
	creature.earOffsetScale = antEarOffsetScale;
	creature.earShape = antEarShape;
	creature.earPos = antEarPos;
	creature.earScale = antEarScale;
} else if(ear === 'horn'){
	creature.ear1OffsetPos = hornEar1OffsetPos;
	creature.ear2OffsetPos = hornEar2OffsetPos;
	creature.earOffsetScale = hornEarOffsetScale;
	creature.earShape = hornEarShape;
	creature.earPos = hornEarPos;
	creature.earScale = hornEarScale;
}

//
//Build

//Parent
creature.faceParentData = {
data:'faceParentData',
id: parentId,
sources: false,
text: false,
geometry: false,
material: false,
position: creature.position,
rotation: creature.rotation,
scale: creature.scale,
animations: false,
mixins: false,
classes: ['a-ent'],
components: {
['stare']:{id: 'playerRig'},
},
};
creature[parentId] = auxl.Core(creature.faceParentData);

//Head
creature.headData = {
data:'headData',
id:headId,
sources: false,
text: false,
geometry: {primitive: 'sphere', radius: 0.4, phiStart: 0, phiLength: 180, segmentsWidth: 16, segmentsHeight: 16, thetaStart: 0, thetaLength: 180},
material: {shader: "standard", color: "#C14B76", emissive: '#C14B76', emissiveIntensity: 0.25, opacity: 1, side: 'double', metalness: 0.2, roughness: 0.8},
position: new THREE.Vector3(0,0.15,0),
rotation: new THREE.Vector3(0,0,0),
scale: new THREE.Vector3(1,1,1),
animations: false,
mixins: false,
classes: ['clickable','a-ent'],
components: false,
};
creature[headId] = auxl.Core(creature.headData);

//
//Face

//EyeSocket
creature.faceEye1SocketData = {
data:'faceEye1SocketData',
id: eye1SocketId,
sources: false,
text: false,
geometry: creature.socketShape,
material: {shader: "standard", color: "#fcfafd", emissive: '#fcfafd', emissiveIntensity: 0.25, opacity: 1, side: 'double', metalness: 0.2, roughness: 0.8},
position: new THREE.Vector3(-0.15,0.1,0.4),
rotation: new THREE.Vector3(90,0,0),
scale: creature.socketScale,
animations: false,
mixins: false,
classes: ['a-ent'],
components: false,
};
creature[eye1SocketId] = auxl.Core(creature.faceEye1SocketData);
//Eye2Socket
creature.faceEye2SocketData = auxl.coreDataFromTemplate(creature.faceEye1SocketData, {id: eye2SocketId, position: new THREE.Vector3(0.15,0.1,0.4)}, true);
creature[eye2SocketId] = auxl.Core(creature.faceEye2SocketData);
//Eye1Pupil
creature.faceEye1PupilData = {
data:'faceEye1PupilData',
id: eye1PupilId,
sources: false,
text: false,
geometry: creature.pupilShape,
material: creature.pupilMaterial,
position: new THREE.Vector3(0,0.01,0),
rotation: new THREE.Vector3(0,0,0),
scale: new THREE.Vector3(1,1,1),
animations: {
lookdown: {property: 'position', to: new THREE.Vector3(0,0.01,0.07), dur: 100, delay: 0, loop: false, dir: 'normal', easing: 'easeInOutSine', elasticity: 400, autoplay: false, enabled: true, startEvents: 'lookDown'},
lookup: {property: 'position', to: new THREE.Vector3(0,0.01,-0.07), dur: 100, delay: 0, loop: false, dir: 'normal', easing: 'easeInOutSine', elasticity: 400, autoplay: false, enabled: true, startEvents: 'lookUp'},
lookright: {property: 'position', to: new THREE.Vector3(0.05,0.01,0), dur: 100, delay: 0, loop: false, dir: 'normal', easing: 'easeInOutSine', elasticity: 400, autoplay: false, enabled: true, startEvents: 'lookRight'},
lookleft: {property: 'position', to: new THREE.Vector3(-0.05,0.01,0), dur: 100, delay: 0, loop: false, dir: 'normal', easing: 'easeInOutSine', elasticity: 400, autoplay: false, enabled: true, startEvents: 'lookLeft'},
},
mixins: false,
classes: ['a-ent'],
components: false,
};
creature[eye1PupilId] = auxl.Core(creature.faceEye1PupilData);
//Eye2Pupil
creature.faceEye2PupilData = auxl.coreDataFromTemplate(creature.faceEye1PupilData, {id: eye2PupilId,}, true);
creature[eye2PupilId] = auxl.Core(creature.faceEye2PupilData);
//Eye1PupilAccent
creature.faceEye1PupilAccentData = {
data:'faceEye1PupilAccentData',
id: eye1PupilAccentId,
sources: false,
//text: creature.accentText,
text: false,
geometry: false,
material: false,
position: new THREE.Vector3(0,0,0),
rotation: new THREE.Vector3(-90,0,0),
scale: new THREE.Vector3(accentSize,accentSize,accentSize),
animations: false,
mixins: false,
classes: ['a-ent'],
components: false,
};
creature[eye1PupilAccentId] = auxl.Core(creature.faceEye1PupilAccentData);
//Eye2Pupil
creature.faceEye2PupilAccentData = auxl.coreDataFromTemplate(creature.faceEye1PupilAccentData, {id: eye2PupilAccentId,}, true);
creature[eye2PupilAccentId] = auxl.Core(creature.faceEye2PupilAccentData);

//Eyebrow
creature.faceEyebrow1Data = {
data:'faceEyebrow1Data',
id: eyebrow1Id,
sources: false,
text: false,
geometry: {primitive: 'box', depth: creature.browThickness, width: 0.25, height: 0.025, },
material: creature.browMaterial,
position: new THREE.Vector3(0,0,-0.25),
rotation: new THREE.Vector3(0,10,0),
scale: new THREE.Vector3(1,1,1),
animations: {
updown: {property: 'object3D.position.z', from: -0.3, to: -0.225, dur: 2000, delay: 0, loop: true, dir: 'alternate', easing: 'easeInOutSine', elasticity: 400, autoplay: true, enabled: true},
},
mixins: false,
classes: ['a-ent'],
components: false,
};
creature[eyebrow1Id] = auxl.Core(creature.faceEyebrow1Data);
creature.faceEyebrow2Data = auxl.coreDataFromTemplate(creature.faceEyebrow1Data, {id: eyebrow2Id, rotation: new THREE.Vector3(0,-10,0)}, true);
creature[eyebrow2Id] = auxl.Core(creature.faceEyebrow2Data);

//Eyelid Offset
creature.faceEye1LidOffsetData = {
data:'faceEye1LidOffsetData',
id: eye1LidOffsetId,
sources: false,
text: false,
geometry: false,
material: false,
position: creature.lidOffsetPosition,
rotation: new THREE.Vector3(0,0,0),
scale: new THREE.Vector3(1,1,1),
animations: {
flux: creature.blinkAnim,
wide: creature.wideAnim,
normal: creature.normalAnim,
squint: creature.squintAnim,
tired: creature.tiredAnim,
},
mixins: false,
classes: ['a-ent'],
components: false,
};
creature[eye1LidOffsetId] = auxl.Core(creature.faceEye1LidOffsetData);
creature.faceEye2LidOffsetData = auxl.coreDataFromTemplate(creature.faceEye1LidOffsetData, {id: eye2LidOffsetId}, true);
creature[eye2LidOffsetId] = auxl.Core(creature.faceEye2LidOffsetData);
//Eyelid
creature.faceEye1LidData = {
data:'faceEye1LidData',
id: eye1LidId,
sources: false,
text: false,
geometry: creature.lidShape,
material: creature.skinMaterial,
position: creature.lidPosition,
rotation: new THREE.Vector3(0,0,0),
scale: new THREE.Vector3(1.06,4,1.06),
animations: false,
mixins: false,
classes: ['a-ent'],
components: false,
};
creature[eye1LidId] = auxl.Core(creature.faceEye1LidData);
creature.faceEye2LidData = auxl.coreDataFromTemplate(creature.faceEye1LidData, {id: eye2LidId}, true);
creature[eye2LidId] = auxl.Core(creature.faceEye2LidData);
//Blink
creature.faceEye1BlinkData = {
data:'faceEye1BlinkData',
id: eye1BlinkId,
sources: false,
text: false,
geometry: creature.blinkShape,
material: creature.skinMaterial,
position: new THREE.Vector3(0,0.05,0),
rotation: new THREE.Vector3(0,0,0),
scale: new THREE.Vector3(1.05,1.05,1.05),
animations: {
blinkin: {property: 'visible', from: false, to: true, dur: 1, delay: 0, loop: false, dir: 'normal', easing: 'easeInOutSine', elasticity: 400, autoplay: false, enabled: true, startEvents: 'blink'},
blinkout: {property: 'visible', from: true, to: false, dur: 1, delay: 250, loop: false, dir: 'normal', easing: 'easeInOutSine', elasticity: 400, autoplay: false, enabled: true, startEvents: 'blink'},
close: {property: 'visible', from: false, to: true, dur: 1, delay: 0, loop: false, dir: 'normal', easing: 'easeInOutSine', elasticity: 400, autoplay: false, enabled: true, startEvents: 'close'},
open: {property: 'visible', from: true, to: false, dur: 1, delay: 0, loop: false, dir: 'normal', easing: 'easeInOutSine', elasticity: 400, autoplay: false, enabled: true, startEvents: 'open'},
},
mixins: false,
classes: ['a-ent'],
components: {
visible: false,
},
};
creature[eye1BlinkId] = auxl.Core(creature.faceEye1BlinkData);
creature.faceEye2BlinkData = auxl.coreDataFromTemplate(creature.faceEye1BlinkData, {id: eye2BlinkId}, true);
creature[eye2BlinkId] = auxl.Core(creature.faceEye2BlinkData);

//Ear Offset
creature.faceEar1OffsetData = {
data:'faceEar1OffsetData',
id: ear1OffsetId,
sources: false,
text: false,
geometry: false,
material: false,
position: creature.ear1OffsetPos,
rotation: new THREE.Vector3(90,0,0),
scale: creature.earOffsetScale,
animations: false,
mixins: false,
classes: ['a-ent'],
components: false,
};
creature[ear1OffsetId] = auxl.Core(creature.faceEar1OffsetData);
creature.faceEar2OffsetData = auxl.coreDataFromTemplate(creature.faceEar1OffsetData, {id: ear2OffsetId, position: creature.ear2OffsetPos}, true);
creature[ear2OffsetId] = auxl.Core(creature.faceEar2OffsetData);
//Ear
creature.faceEar1Data = {
data:'faceEar1Data',
id: ear1Id,
sources: false,
text: false,
geometry: creature.earShape,
material: creature.skinMaterial,
position: creature.earPos,
rotation: new THREE.Vector3(0,30,0),
scale: creature.earScale,
animations: {
twitch: {property: 'object3D.rotation.y', from: 25, to: 35, dur: 3000, delay: 0, loop: true, dir: 'alternate', easing: 'easeInOutSine', elasticity: 400, autoplay: true, enabled: true},
},
mixins: false,
classes: ['a-ent'],
components: false,
};
creature[ear1Id] = auxl.Core(creature.faceEar1Data);
creature.faceEar2Data = auxl.coreDataFromTemplate(creature.faceEar1Data, {id: ear2Id, rotation: new THREE.Vector3(0,-30,0), animations:{twitch: {property: 'object3D.rotation.y', from: -25, to: -35, dur: 3000, delay: 0, loop: true, dir: 'alternate', easing: 'easeInOutSine', elasticity: 400, autoplay: true, enabled: true},}}, true);
creature[ear2Id] = auxl.Core(creature.faceEar2Data);


//Body
creature.bodyData = {
data:'bodyData',
id: bodyId,
sources: false,
text: false,
geometry: {primitive: 'cylinder', radius: 0.4, height: 0.3, openEnded: false, segmentsHeight: 2, segmentsRadial: 32, thetaStart: 0, thetaLength: 360},
material: {shader: "standard", color: "#C14B76", emissive: '#C14B76', emissiveIntensity: 0.25, opacity: 1, side: 'double', metalness: 0.2, roughness: 0.8},
position: new THREE.Vector3(0,0,0),
rotation: new THREE.Vector3(0,0,0),
scale: new THREE.Vector3(1,1,1),
animations: false,
mixins: false,
classes: ['clickable','a-ent'],
components: false,
};
creature[bodyId] = auxl.Core(creature.bodyData);
//Legs
creature.legData = {
data:'legData',
id:'leg',
sources: false,
text: false,
geometry: {primitive: 'cone', radiusBottom: 0, radiusTop: 0.15, height: 0.2, openEnded: false, segmentsHeight: 4, segmentsRadial: 8, thetaStart: 0, thetaLength: 360},
material: {shader: "standard", color: "#C14B76", emissive: '#C14B76', emissiveIntensity: 0.25, opacity: 1, side: 'double', metalness: 0.2, roughness: 0.8},
position: new THREE.Vector3(-0.25,-0.25,0),
rotation: new THREE.Vector3(0,0,0),
scale: new THREE.Vector3(1,1,1),
animations: false,
mixins: false,
classes: ['a-ent'],
components: false,
};
//Leg 1
creature.leg1Data = auxl.coreDataFromTemplate(creature.legData, {id: leg1Id,}, true);
creature[leg1Id] = auxl.Core(creature.leg1Data);
//Leg 2
creature.leg2Data = auxl.coreDataFromTemplate(creature.legData, {id: leg2Id, position: new THREE.Vector3(0.25,-0.25,0)}, true);
creature[leg2Id] = auxl.Core(creature.leg2Data);
//Leg 3
creature.leg3Data = auxl.coreDataFromTemplate(creature.legData, {id: leg3Id, position: new THREE.Vector3(0,-0.25,-0.25)}, true);
creature[leg3Id] = auxl.Core(creature.leg3Data);
//Leg 4
creature.leg4Data = auxl.coreDataFromTemplate(creature.legData, {id: leg4Id, position: new THREE.Vector3(0,-0.25,0.25)}, true);
creature[leg4Id] = auxl.Core(creature.leg4Data);

//Layer
creature.faceLayerData = {
	parent: {core: creature[parentId]},
	child0: {
		parent: {core: creature[headId]},
		child0: {
			parent: {core: creature[eye1SocketId]}, 
			child0: {core: creature[eyebrow1Id]}, 
			child1: {
				parent: {core: creature[eye1PupilId]},
				child0: {core: creature[eye1PupilAccentId]},
			},
			child2: {core: creature[eye1BlinkId]}, 
			child3: {
				parent: {core: creature[eye1LidOffsetId]}, 
				child0: {core: creature[eye1LidId]}, 
			}, 
		},
		child1: {
			parent: {core: creature[eye2SocketId]}, 
			child0: {core: creature[eyebrow2Id]}, 
			child1: {
				parent: {core: creature[eye2PupilId]},
				child0: {core: creature[eye2PupilAccentId]},
			},
			child2: {core: creature[eye2BlinkId]}, 
			child3: {
				parent: {core: creature[eye2LidOffsetId]}, 
				child0: {core: creature[eye2LidId]}, 
			}, 
		},
		child2: {
			parent: {core: creature[ear1OffsetId]}, 
			child0: {core: creature[ear1Id]}, 
		},
		child3: {
			parent: {core: creature[ear2OffsetId]}, 
			child0: {core: creature[ear2Id]}, 
		},
	},
	child1: {
		parent: {core: creature[bodyId]}, 
		child0: {core: creature[leg1Id]}, 
		child1: {core: creature[leg2Id]}, 
		child2: {core: creature[leg3Id]}, 
		child3: {core: creature[leg4Id]},
	}, 


}
auxl[creature.auxlId] = auxl.Layer(creature.auxlId,creature.faceLayerData);

//Info Bubble
auxl[creature.bubbleId] = auxl.InfoBubble(creature.bubbleId, auxl[creature.auxlId], 0.75, creature.color.base);

//Spawn creature
const SpawnCreature = () => {
	if(creature.inScene){}else{
		auxl[creature.auxlId].SpawnLayer(creature.parent);
		Blinking();
		//testing();
		creature.inScene = true;
	}
}
//Despawn creature
const DespawnCreature = () => {
	if(creature.inScene){
		ClearEvents();
		auxl[creature.auxlId].DespawnLayer();
		creature.inScene = false;
	}
}

//Clear Timeouts & Intervals
const ClearEvents = () => {
	clearInterval(creature.blinkInterval);
	clearTimeout(creature.accentTimeout);
	clearTimeout(creature.emoteTimeout);
	clearInterval(creature.intervalTest);
	clearTimeout(creature.timeoutTest);
}

//Emote Testing
function testing(){
creature.timeoutTest = setTimeout(function () {
	let loopNum = 0;
	creature.intervalTest = setInterval(function() {
		if(loopNum === 0){
			Emote('love');
		} else if(loopNum === 1){
			Emote('shy');
		} else if(loopNum === 2){
			Emote('casual');
		} else if(loopNum === 3){
			Emote('confused');
		} else if(loopNum === 4){
			Emote('angry');
		} else if(loopNum === 5){
			Emote('shocked');
		} else if(loopNum === 6){
			Emote('tired');
		} else if(loopNum === 7){
			Emote('asleep');
		} else if(loopNum === 8){
			Emote('wakeUp');
		} else if(loopNum === 9){
			Emote('annoyed');
		} else if(loopNum === 10){
			Emote('scared');
		} else if(loopNum === 11){
			Emote('confident');
		} else if(loopNum === 12){
			Emote('sad');
		} else if(loopNum === 13){
			Emote('smug');
		} else if(loopNum === 14){
			Emote('happy');
			loopNum = -1;
		}
		loopNum++;
	}, 6000);
}, 2000);
}

//Blinking
const Blinking = () => {
	let blinkChance = 0.25;
	creature.blinkInterval = setInterval(() => {
		if(Math.random() >= blinkChance){
			creature[eye1BlinkId].EmitEvent('blink');
			creature[eye2BlinkId].EmitEvent('blink');
			blinkChance = 0.25;
		} else {
			blinkChance += 0.25;
		}
	}, 3000);
}

//Implement a Finite State Machine for Emotions

//Emote State
const Emote = (emote) => {
console.log(emote)
	//Anim
	if(emote === 'casual'){
		Casual();
	} else if(emote === 'happy'){
		Happy();
	} else if(emote === 'sad'){
		Sad();
	} else if(emote === 'angry'){
		Angry();
	} else if(emote === 'confused'){
		Confused();
	} else if(emote === 'tired'){
		Tired();
	} else if(emote === 'asleep'){
		Asleep();
	} else if(emote === 'wakeUp'){
		WakeUp();
	} else if(emote === 'annoyed'){
		Annoyed();
	} else if(emote === 'smug'){
		Smug();
	} else if(emote === 'shocked'){
		Shocked();
	} else if(emote === 'scared'){
		Scared();
	} else if(emote === 'confident'){
		Confident();
	} else if(emote === 'love'){
		Love();
	} else if(emote === 'shy'){
		Shy();
	}
}

//Casual
const Casual = () => {
	creature[eye1LidOffsetId].EmitEvent('normal');
	creature[eye2LidOffsetId].EmitEvent('normal');
	auxl[creature.auxlId].EmitEventParent('casual');
}

//Happy
const Happy = () => {
	creature[eye1LidOffsetId].EmitEvent('wide');
	creature[eye2LidOffsetId].EmitEvent('wide');
	auxl[creature.auxlId].EmitEventParent('happy');
}

//Sad
const Sad = () => {
	creature[eye1LidOffsetId].EmitEvent('squint');
	creature[eye2LidOffsetId].EmitEvent('squint');
	auxl[creature.auxlId].EmitEventParent('sad');
}

//Angry
const Angry = () => {
	creature[eye1LidOffsetId].EmitEvent('squint');
	creature[eye2LidOffsetId].EmitEvent('squint');
	auxl[creature.auxlId].EmitEventParent('angry');
}

//Confused
const Confused = () => {
	creature[eye1LidOffsetId].EmitEvent('wide');
	creature[eye2LidOffsetId].EmitEvent('squint');
	auxl[creature.auxlId].EmitEventParent('confused');
}

//Tired
const Tired = () => {
	creature[eye1LidOffsetId].EmitEvent('tired');
	creature[eye2LidOffsetId].EmitEvent('tired');
	auxl[creature.auxlId].EmitEventParent('tired');
}

//Asleep
const Asleep = () => {
	creature[eye1BlinkId].EmitEvent('close');
	creature[eye2BlinkId].EmitEvent('close');
	auxl[creature.auxlId].EmitEventParent('asleep');
}

//Wake Up
const WakeUp = () => {
	creature[eye1BlinkId].EmitEvent('open');
	creature[eye2BlinkId].EmitEvent('open');
	auxl[creature.auxlId].EmitEventParent('shocked');
}

//Annoyed
const Annoyed = () => {
	creature[eye1LidOffsetId].EmitEvent('normal');
	creature[eye2LidOffsetId].EmitEvent('normal');
	auxl[creature.auxlId].EmitEventParent('annoyed');
}

//Smug
const Smug = () => {
	creature[eye1LidOffsetId].EmitEvent('squint');
	creature[eye2LidOffsetId].EmitEvent('squint');
	auxl[creature.auxlId].EmitEventParent('smug');
}

//Shocked
const Shocked = () => {
	creature[eye1LidOffsetId].EmitEvent('wide');
	creature[eye2LidOffsetId].EmitEvent('wide');
	auxl[creature.auxlId].EmitEventParent('shocked');
}

//Scared
const Scared = () => {
	creature[eye1LidOffsetId].EmitEvent('wide');
	creature[eye2LidOffsetId].EmitEvent('wide');
	auxl[creature.auxlId].EmitEventParent('scared');
}

//Confident
const Confident = () => {
	creature[eye1LidOffsetId].EmitEvent('normal');
	creature[eye2LidOffsetId].EmitEvent('normal');
	auxl[creature.auxlId].EmitEventParent('confident');
}

//Love
const Love = () => {
	creature[eye1LidOffsetId].EmitEvent('wide');
	creature[eye2LidOffsetId].EmitEvent('wide');
	auxl[creature.auxlId].EmitEventParent('love');
}

//Shy
const Shy = () => {
	creature[eye1LidOffsetId].EmitEvent('squint');
	creature[eye2LidOffsetId].EmitEvent('squint');
	auxl[creature.auxlId].EmitEventParent('shy');
}

return {creature, SpawnCreature, DespawnCreature, Emote};

}

//
//Export


/***/ }),

/***/ "./src/system/player.js":
/*!******************************!*\
  !*** ./src/system/player.js ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Companion: () => (/* binding */ Companion),
/* harmony export */   Player: () => (/* binding */ Player)
/* harmony export */ });
//
//AUXL : A-Frame UX Library
//v0.3 Engine
//https://github.com/Minty-Crisp/AUXL
//
//Created by Minty-Crisp (mintycrisp.com)
//
//Player
//
//Player
//Companion

//
//Player
//User Controller, Settings and Actions
const Player = (auxl, id,layer) => {
	//Player Name
	layer.id = id;

	//Update Layer Copy
	//layer.layer.all.parent.core.core.id = id;

	//UI
	layer.vrUI = false;

	//Default Transition Type
	//instant
	//fade
	//sphere
	//blink
	layer.transition = {};
	layer.transition.id = '000000';
	layer.transition.scene = 'fade';
	layer.transition.teleport = 'fade';
	layer.teleporting = false;
	//Notifications
	let notificationTimeout;
	let displayTime;
	//Lock/Unlock Movement
	layer.move = false;
	//Locomotion Type
	layer.moveType = {pov : '1st', axis : 'posXYZ', style : 'free'}
	//Sitting or Standing Mode
	layer.stand = true;
	//Duck | Standing
	let crouchTimeout;
	layer.standing = true;
	layer.animating = false;
	//Snap Rotation
	layer.snapRotating = false;
	let snapTimeout;
	//Rotate 45
	let anim45Data = {
		name: 'anim45',
		property: 'object3D.rotation.y',
		from: '0',
		to: '45', 
		dur: 250,
		delay: 0, 
		loop: 'false', 
		dir: 'normal', 
		easing: 'easeInOutSine', 
		elasticity: 400, 
		autoplay: true, 
		enabled: true,
	};
	//Rotate 90
	let anim90Data = {
		name: 'anim90',
		property: 'object3D.rotation.y',
		from: '0',
		to: '90', 
		dur: 250,
		delay: 0, 
		loop: 'false', 
		dir: 'normal', 
		easing: 'easeInOutSine', 
		elasticity: 400, 
		autoplay: true, 
		enabled: true,
	};
	//Belt Inventory, Toggle & Text
	layer.beltDisplay = true;
	layer.beltDefaultText = 'Hello World!';
	layer.beltText = 'Hello World!';

	//Flashlight
	layer.flashlight = false;
	//Info Text
	layer.infoText = 'Player :\n'

	//Collision
	layer.gridPos = new THREE.Vector3(0,0,0);
	layer.gridDirection = 'still';
	//forwardRight
	//forwardLeft
	//reverseRight
	//reverseLeft
	//forward
	//reverse
	//right
	//left

	//Item|Tool|Key|Special Equipped
	layer.equipped = false;
	layer.equippedObject = 'none';

	//Menu Toggle
	layer.menuToggle = true;

	//Spawn Player
	layer.SpawnLayer();
	//Currently not tracking Player object as it should not be removed

	//Update Current Position
	layer.gridPos.copy(auxl.playerRig.GetEl().getAttribute('position'));

	//Reset to Defaults
	const Reset = () => {
		layer.transition = {};
		layer.transition.id = '000000';
		layer.transition.scene = 'fade';
		layer.transition.teleport = 'fade';
		layer.teleporting = false;
		//Sitting or Standing Mode
		layer.stand = true;
		//Duck | Standing
		layer.standing = true;
		layer.animating = false;
		//Snap Rotation
		layer.snapRotating = false;
		//Belt Inventory, Toggle & Text
		layer.beltDisplay = true;
		layer.beltDefaultText = 'Hello World!';
		layer.beltText = 'Hello World!';
		//Flashlight
		layer.flashlight = false;
		//Info Text
		layer.infoText = 'Player :\n'
	}
	//Scene Load Animation Support
	const PlayerSceneAnim = () => {
		//Minimum Anim Delay if assets don't need loading
		let animTimeout0 = setTimeout(function () {
			if(auxl.loadingScene){} else {
				auxl.loadingScene = true;
			}
			clearTimeout(animTimeout0);
		}, 800);
		if(layer.teleporting){} else {
			layer.teleporting = true;
			if(layer.transition.scene === 'blink'){
				DisableClick();
				layer.GetChild('blink1Screen').ChangeSelf({property: 'visible', value: 'true'});
				layer.GetChild('blink2Screen').ChangeSelf({property: 'visible', value: 'true'});
				layer.GetChild('blink1Screen').EmitEvent('blinkScene1');
				layer.GetChild('blink2Screen').EmitEvent('blinkScene1');
			} else if(layer.transition.scene === 'fade'){
				DisableClick();
				layer.GetChild('fadeScreen').ChangeSelf({property: 'visible', value: 'true'});
				layer.GetChild('fadeScreen').EmitEvent('fadeScene1');

			} else if(layer.transition.scene === 'sphere'){
				DisableClick();
					layer.GetChild('sphereScreen').ChangeSelf({property: 'visible', value: 'true'});
					layer.GetChild('sphereScreen').EmitEvent('sphereScene1');
			} else if(layer.transition.scene === 'instant'){
				DisableClick();
			}
		}
	}
	//Update Scene Transition Style
	const UpdateSceneTransitionStyle = (style) => {
		layer.transition.scene = style;
	}
	//Player Transition Animation
	const PlayerTeleportAnim = () => {
		let animTimeout;
		if(auxl.player.layer.teleporting){} else {
			auxl.player.layer.teleporting = true;
			if(auxl.player.layer.transition.teleport === 'blink'){
				auxl.player.TempDisableClick();
				auxl.blink1Screen.ChangeSelf({property: 'visible', value: 'true'});
				auxl.blink2Screen.ChangeSelf({property: 'visible', value: 'true'});
				auxl.blink1Screen.EmitEvent('blink');
				auxl.blink2Screen.EmitEvent('blink');
				animTimeout = setTimeout(function () {
					auxl.blink1Screen.ChangeSelf({property: 'visible', value: 'false'});
					auxl.blink2Screen.ChangeSelf({property: 'visible', value: 'false'});
					auxl.player.layer.teleporting = false;
					clearTimeout(animTimeout);
				}, 1200);
			} else if (auxl.player.layer.transition.teleport === 'fade'){
				auxl.player.TempDisableClick();
				auxl.fadeScreen.ChangeSelf({property: 'visible', value: 'true'});
				auxl.fadeScreen.EmitEvent('fade');
				animTimeout = setTimeout(function () {
					auxl.fadeScreen.ChangeSelf({property: 'visible', value: 'false'});
					auxl.player.layer.teleporting = false;
					clearTimeout(animTimeout);
				}, 1200);
			} else if (auxl.player.layer.transition.teleport === 'sphere'){
				auxl.player.TempDisableClick();
				auxl.sphereScreen.ChangeSelf({property: 'visible', value: 'true'});
				auxl.sphereScreen.EmitEvent('sphere');
				animTimeout = setTimeout(function () {
					auxl.sphereScreen.ChangeSelf({property: 'visible', value: 'false'});
					auxl.player.layer.teleporting = false;
					clearTimeout(animTimeout);
				}, 1200);
			} else if (auxl.player.layer.transition.teleport === 'instant'){
				animTimeout = setTimeout(function () {
					auxl.player.layer.teleporting = false;
					clearTimeout(animTimeout);
				}, 500);
			} else if (auxl.player.layer.transition.teleport === 'locomotion'){
				animTimeout = setTimeout(function () {
					auxl.player.layer.teleporting = false;
					clearTimeout(animTimeout);
				}, 500);
			}
		}
	}
	//Update Scene Transition Style
	const UpdateTeleportTransitionStyle = (style) => {
		layer.transition.teleport = style;
	}
	//Change Player Transition Color
	const UpdateTransitionColor = (newColor) => {
		auxl.fadeScreen.ChangeSelf({property: 'material', value:{color: newColor}});
		auxl.sphereScreen.ChangeSelf({property: 'material', value:{color: newColor}});
		auxl.blink1Screen.ChangeSelf({property: 'material', value:{color: newColor}});
		auxl.blink2Screen.ChangeSelf({property: 'material', value:{color: newColor}});
	}
	//Toggle Belt Text
	const ToggleBeltText = () => {
		if(layer.beltDisplay){
			auxl.playerBeltText.ChangeSelf({property: 'visible', value:false})
			layer.beltDisplay = false;
		} else {
			auxl.playerBeltText.ChangeSelf({property: 'visible', value:true})
			UpdateBeltText();
			layer.beltDisplay = true;
		}
	}
	//playerFloor.addEventListener('click',ToggleBeltText);
	//Update Belt Text
	const UpdateBeltText = (text) => {
		if(text){
			layer.beltText = text;
		}
		if(layer.beltDisplay){
			auxl.playerBeltText.ChangeSelf({property: 'text', value:{value: layer.beltText}})
		}

	}
	//Toggle UI Text
	const ToggleVRText = () => {
		layer.vrUI = !layer.vrUI;
		if(auxl.controls === 'VR'){
			if(auxl.vrHand === 'bothRight'){
				auxl.vrController2.ChangeSelf({property: 'visible', value: layer.vrUI});
			} else if(auxl.vrHand === 'bothLeft'){
				auxl.vrController1.ChangeSelf({property: 'visible', value: layer.vrUI});
			} else if(auxl.vrHand === 'both'){
				auxl.vrController1.ChangeSelf({property: 'visible', value: layer.vrUI});
				auxl.vrController2.ChangeSelf({property: 'visible', value: layer.vrUI});
			} else if(auxl.vrHand === 'right'){
				auxl.vrController2.ChangeSelf({property: 'visible', value: layer.vrUI});
			} else if(auxl.vrHand === 'left'){
				auxl.vrController1.ChangeSelf({property: 'visible', value: layer.vrUI});
			}
		}
	}
	//Update UI Text
	const UpdateUIText = (text) => {
		UpdateSystemText(text);
		if(auxl.controls === 'VR'){
			if(layer.vrUI){
				if(auxl.vrHand === 'bothRight'){
					auxl.vrController2.ChangeSelf({property: 'text', value: text});
				} else if(auxl.vrHand === 'bothLeft'){
					auxl.vrController1.ChangeSelf({property: 'text', value: text});
				} else if(auxl.vrHand === 'both'){
					auxl.vrController1.ChangeSelf({property: 'text', value: text});
					auxl.vrController2.ChangeSelf({property: 'text', value: text});
				} else if(auxl.vrHand === 'right'){
					auxl.vrController2.ChangeSelf({property: 'text', value: text});
				} else if(auxl.vrHand === 'left'){
					auxl.vrController1.ChangeSelf({property: 'text', value: text});
				}
			}
		}
	}
	//Display Camera UI Notification
	const Notification = (notificationInfo) => {
		displayTime = notificationInfo.time || 2750;
		TempDisableClick(displayTime);
		auxl.cameraUI.ChangeSelf({property: 'text', value: {value: notificationInfo.message, width: 0.5, color: "#FFFFFF", align: "center", font: "exo2bold", side: 'double', opacity: 0},});
		auxl.cameraUI.ChangeSelf({property: 'visible', value: 'true'});
		auxl.cameraUI.EmitEvent('cameraMsg');
		notificationTimeout = setTimeout(function () {
			auxl.cameraUI.ChangeSelf({property: 'visible', value: 'false'});
			clearTimeout(notificationTimeout);
		}, displayTime);
	}
	//Disable Player Selection for a Time
	const TempDisableClick = (time) => {
		let delayTime = time || 1000;
		DisableClick();
		let disableTimeout = setTimeout(function () {
			EnableClick();
			clearTimeout(disableTimeout);
		}, delayTime);
	}
	//Disable Player Selection
	const DisableClick = () => {
		if(auxl.controls === 'Desktop'){
			auxl.mouseController.ChangeSelf({property: 'raycaster',value: {enabled: true, autoRefresh: true, objects: '.disabled', far: 'Infinity', near: 0, interval: 0, lineColor: 'red', lineOpacity: 0.5, showLine: false, useWorldCoordinates: false}});
		} else if(auxl.controls === 'VR'){
			if(auxl.vrHand === 'bothRight'){
				auxl.vrController2.ChangeSelf({property: 'raycaster', value: {enabled: true, autoRefresh: true, objects: '.disabled', far: 'Infinity', near: 0, interval: 0, lineColor: 'red', lineOpacity: 0.5, showLine: true, useWorldCoordinates: false}});
			} else if(auxl.vrHand === 'bothLeft'){
				auxl.vrController1.ChangeSelf({property: 'raycaster', value: {enabled: true, autoRefresh: true, objects: '.disabled', far: 'Infinity', near: 0, interval: 0, lineColor: 'red', lineOpacity: 0.5, showLine: true, useWorldCoordinates: false}});
			} else if(auxl.vrHand === 'both'){
				auxl.vrController1.ChangeSelf({property: 'raycaster', value: {enabled: true, autoRefresh: true, objects: '.disabled', far: 'Infinity', near: 0, interval: 0, lineColor: 'red', lineOpacity: 0.5, showLine: true, useWorldCoordinates: false}});
				auxl.vrController2.ChangeSelf({property: 'raycaster', value: {enabled: true, autoRefresh: true, objects: '.disabled', far: 'Infinity', near: 0, interval: 0, lineColor: 'red', lineOpacity: 0.5, showLine: true, useWorldCoordinates: false}});
			} else if(auxl.vrHand === 'right'){
				auxl.vrController2.ChangeSelf({property: 'raycaster', value: {enabled: true, autoRefresh: true, objects: '.disabled', far: 'Infinity', near: 0, interval: 0, lineColor: 'red', lineOpacity: 0.5, showLine: true, useWorldCoordinates: false}});
			} else if(auxl.vrHand === 'left'){
				auxl.vrController1.ChangeSelf({property: 'raycaster', value: {enabled: true, autoRefresh: true, objects: '.disabled', far: 'Infinity', near: 0, interval: 0, lineColor: 'red', lineOpacity: 0.5, showLine: true, useWorldCoordinates: false}});
			}
		} else if(auxl.controls === 'Mobile'){
			auxl.mouseController.ChangeSelf({property: 'raycaster', value: {enabled: true, autoRefresh: true, objects: '.disabled', far: 'Infinity', near: 0, interval: 0, lineColor: 'red', lineOpacity: 0.5, showLine: false, useWorldCoordinates: false}});
		}
	}
	//Enable Player Selection
	const EnableClick = () => {
		if(auxl.controls === 'Desktop'){
			auxl.mouseController.ChangeSelf({property: 'raycaster',value: {enabled: true, autoRefresh: true, objects: '.clickable', far: 'Infinity', near: 0, interval: 0, lineColor: 'red', lineOpacity: 0.5, showLine: false, useWorldCoordinates: false}});
		} else if(auxl.controls === 'VR'){
			if(auxl.vrHand === 'bothRight'){
				auxl.vrController2.ChangeSelf({property: 'raycaster', value: {enabled: true, autoRefresh: true, objects: '.clickable', far: 'Infinity', near: 0, interval: 0, lineColor: 'red', lineOpacity: 0.5, showLine: true, useWorldCoordinates: false}});
			} else if(auxl.vrHand === 'bothLeft'){
				auxl.vrController1.ChangeSelf({property: 'raycaster', value: {enabled: true, autoRefresh: true, objects: '.clickable', far: 'Infinity', near: 0, interval: 0, lineColor: 'red', lineOpacity: 0.5, showLine: true, useWorldCoordinates: false}});
			} else if(auxl.vrHand === 'both'){
				auxl.vrController1.ChangeSelf({property: 'raycaster', value: {enabled: true, autoRefresh: true, objects: '.clickable', far: 'Infinity', near: 0, interval: 0, lineColor: 'red', lineOpacity: 0.5, showLine: true, useWorldCoordinates: false}});
				auxl.vrController2.ChangeSelf({property: 'raycaster', value: {enabled: true, autoRefresh: true, objects: '.clickable', far: 'Infinity', near: 0, interval: 0, lineColor: 'red', lineOpacity: 0.5, showLine: true, useWorldCoordinates: false}});
			} else if(auxl.vrHand === 'right'){
				auxl.vrController2.ChangeSelf({property: 'raycaster', value: {enabled: true, autoRefresh: true, objects: '.clickable', far: 'Infinity', near: 0, interval: 0, lineColor: 'red', lineOpacity: 0.5, showLine: true, useWorldCoordinates: false}});
			} else if(auxl.vrHand === 'left'){
				auxl.vrController1.ChangeSelf({property: 'raycaster', value: {enabled: true, autoRefresh: true, objects: '.clickable', far: 'Infinity', near: 0, interval: 0, lineColor: 'red', lineOpacity: 0.5, showLine: true, useWorldCoordinates: false}});
			}
		} else if(auxl.controls === 'Mobile'){
			auxl.mouseController.ChangeSelf({property: 'raycaster', value: {enabled: true, autoRefresh: true, objects: '.clickable', far: 'Infinity', near: 0, interval: 0, lineColor: 'red', lineOpacity: 0.5, showLine: false, useWorldCoordinates: false}});
		}
	}
	//Unlock Locomotion
	const UnlockLocomotion = () => {
		layer.move = true;
	}
	//Lock Locomotion
	const LockLocomotion = () => {
		layer.move = false;
	}
	//Enable VR Controller Joystick Locomotion
	const EnableVRLocomotion = () => {
		RemoveBelt();
		auxl.playerRig.GetEl().setAttribute('locomotion',{uiid: false, courserid: 'mouseController', movetype: 'vr'});
		//UnlockLocomotion();
	}
	//Enable VR Belt UI Locomotion
	const EnableVRHoverLocomotion = (vrHand) => {
		if(auxl.locomotionUILayer.GetParentEl()){} else{
			auxl.locomotionUILayer.SpawnLayer();
		}
		auxl.playerRig.GetEl().setAttribute('locomotion',{uiid: 'beltUIParent', courserid: 'mouseController', movetype: 'vrHover'});
		//UnlockLocomotion();
	}
	//Enable Desktop Locomotion
	const EnableDesktopLocomotion = () => {
		RemoveBelt();
		auxl.playerRig.GetEl().setAttribute('locomotion',{uiid: false, courserid: 'mouseController', movetype: 'desktop'});
		//UnlockLocomotion();
	}
	//Enable Mobile Locomotion
	const EnableMobileLocomotion = () => {
		RemoveBelt();
		auxl.playerRig.GetEl().setAttribute('locomotion',{uiid: false, courserid: 'mouseController', movetype: 'mobile'});
		//UnlockLocomotion();
	}
	//Change Locomotion Type
	const ChangeLocomotionType = (type) => {
		if(type.pov){
			layer.moveType.pov = type.pov;
		}
		if(type.axis){
			layer.moveType.axis = type.axis;
		}
		if(type.style){
			layer.moveType.style = type.style;
		}
		auxl.playerRig.GetEl().setAttribute('locomotion',{pov: layer.moveType.pov, axis: layer.moveType.axis, style: layer.moveType.style});
		/*
		pov :
		1st
		3rd

		style :
		free
		grid

		axis :
		posXZ
		posXZY
		posXY
		posXYZ
		posXYZWall
		angleXY
		angleXYZ
		*/
	}
	//Despawn VR Belt UI
	const RemoveBelt = () => {
		if(document.getElementById('beltUIParent')){
			auxl.locomotionUILayer.DespawnLayer();
		}
	}
	//Toggle Sitting|Standing View Mode
	const ToggleSittingMode = () => {
		if(layer.animating){} else {
			layer.animating = true;
			if(layer.stand){
				auxl.playerBody.EmitEvent('sit');
				layer.stand = false;
			} else {
				auxl.playerBody.EmitEvent('stand');
				layer.stand = true;
			}
			crouchTimeout = setTimeout(function () {
				layer.animating = false;
				clearTimeout(crouchTimeout);
			}, 775);
		}
	}
	//Toggle Player Crouch
	const ToggleCrouch = () => {
		if(layer.stand){
			if(layer.animating){} else {
				layer.animating = true;
				if(layer.standing){
					auxl.playerBody.EmitEvent('crouchDownStanding');
					layer.standing = false;
				} else {
					let standPos = new THREE.Vector3(0,0,0);
					standPos.copy(layer.gridPos);
					standPos.y += 1;
					if(auxl.map.CheckMapObstaclesDiagonal(standPos,layer.gridPos)){
						auxl.playerBody.EmitEvent('crouchUpStanding');
						layer.standing = true;
					}

				}
				crouchTimeout = setTimeout(function () {
					layer.animating = false;
					clearTimeout(crouchTimeout);
				}, 775);
			}
		} else {
			if(layer.animating){} else {
				layer.animating = true;
				if(layer.standing){
					auxl.playerBody.EmitEvent('crouchDownSitting');
					layer.standing = false;
				} else {
					let standPos = new THREE.Vector3(0,0,0);
					standPos.copy(layer.gridPos);
					standPos.y += 1;
					if(auxl.map.CheckMapObstaclesDiagonal(standPos,layer.gridPos)){
						auxl.playerBody.EmitEvent('crouchUpSitting');
						layer.standing = true;
					}
				}
				crouchTimeout = setTimeout(function () {
					layer.animating = false;
					clearTimeout(crouchTimeout);
				}, 775);
			}
		}
	}
	//Play Snap View Anim to the Right 45degrees
	const SnapRight45 = () => {
		if(layer.snapRotating){} else {
			layer.snapRotating = true;
			let rotY = auxl.playerBody.GetEl().getAttribute('rotation').y;
			anim45Data.from = rotY;
			anim45Data.to = rotY - 45;
			auxl.playerBody.Animate(anim45Data);
			snapTimeout = setTimeout(() => {
				layer.snapRotating = false;
				clearTimeout(snapTimeout);
			}, anim45Data.dur+10);
		}
	}
	//Play Snap View Anim to the Left 45degrees
	const SnapLeft45 = () => {
		if(layer.snapRotating){} else {
			layer.snapRotating = true;
			let rotY = auxl.playerBody.GetEl().getAttribute('rotation').y;
			anim45Data.from = rotY;
			anim45Data.to = rotY + 45;
			auxl.playerBody.Animate(anim45Data);
			snapTimeout = setTimeout(() => {
				layer.snapRotating = false;
				clearTimeout(snapTimeout);
			}, anim45Data.dur+10);
		}
	}
	//Play Snap View Anim to the Right 90degrees
	const SnapRight90 = () => {
		if(layer.snapRotating){} else {
			layer.snapRotating = true;
			let rotY = auxl.playerBody.GetEl().getAttribute('rotation').y;
			anim90Data.from = rotY;
			anim90Data.to = rotY - 90;
			auxl.playerBody.Animate(anim90Data);
			snapTimeout = setTimeout(() => {
				layer.snapRotating = false;
				clearTimeout(snapTimeout);
			}, anim90Data.dur+10);
		}
	}
	//Play Snap View Anim to the Left 90degrees
	const SnapLeft90 = () => {
		if(layer.snapRotating){} else {
			layer.snapRotating = true;
			let rotY = auxl.playerBody.GetEl().getAttribute('rotation').y;
			anim90Data.from = rotY;
			anim90Data.to = rotY + 90;
			auxl.playerBody.Animate(anim90Data);
			snapTimeout = setTimeout(() => {
				layer.snapRotating = false;
				clearTimeout(snapTimeout);
			}, anim90Data.dur+10);
		}
	}
	//Flashlight
	const ToggleFlashlight = () => {
		if(layer.flashlight){
			if(auxl.controls === 'Desktop' || auxl.controls === 'Mobile'){
				auxl.camera.RemoveComponent('light');
			} else if(auxl.controls === 'VR'){
				if(auxl.vrHand === 'bothRight' || auxl.vrHand === 'bothRightLoco' || auxl.vrHand === 'right'){
					auxl.vrController2.RemoveComponent('light');
				} else {
					auxl.vrController1.RemoveComponent('light');
				}
			}
			layer.flashlight = false;
		} else {
			if(auxl.controls === 'Desktop' || auxl.controls === 'Mobile'){
				auxl.camera.ChangeSelf({property: 'light', value:{type: 'spot', intensity: 0.5, distance: 15, decay: 0.3, penumbra: 0.15, angle: 25,}});
			} else if(auxl.controls === 'VR'){
				if(auxl.vrHand === 'bothRight' || auxl.vrHand === 'bothRightLoco' || auxl.vrHand === 'right'){
					auxl.vrController2.ChangeSelf({property: 'light', value:{type: 'spot', intensity: 0.5, distance: 15, decay: 0.3, penumbra: 0.15, angle: 25,}});
				} else {
					auxl.vrController1.ChangeSelf({property: 'light', value:{type: 'spot', intensity: 0.5, distance: 15, decay: 0.3, penumbra: 0.15, angle: 25,}});
				}
			}
			layer.flashlight = true;
		}
	}
	//Reset User Position/Rotation
	const ResetUserPosRot = () => {
		//Reset Rotation
		auxl.playerRig.ChangeSelf({property: 'position', value: new THREE.Vector3(0,0,1)});
		//Update Grid Position
		layer.gridPos.copy(auxl.playerRig.GetEl().getAttribute('position'));
		//Reset Rotation via playerBody
		let y = auxl.camera.GetEl().getAttribute('rotation').y;
		if(y > 0){
			if(y<360){
				y = y % 360;
			}
		} else if(y < 0){
			if(y < -360){
				y = y % 360;
			}
		}
		auxl.playerBody.ChangeSelf({property:'rotation',value:new THREE.Vector3(0,(y*-1)+1,0)});

	}
	//Get user current infomation
	const GetPlayerInfo = () => {

		return {layer, id: layer.layer.all.parent.core.core.id, pos: auxl.playerRig.GetEl().getAttribute('position'), bodyRot: auxl.playerBody.GetEl().getAttribute('rotation'), headRot: auxl.camera.GetEl().getAttribute('rotation'), grid:layer.gridPos};
	}
	//Attach to user
	const AttachToPlayer = (element,offset) => {
		let connectPos = new THREE.Vector3(0,0,0);
		if(offset){
			connectPos.x += offset.x;
			connectPos.y += offset.y;
			connectPos.z += offset.z;
		}
		element.setAttribute('sync-pos',{idname: layer.id, position: connectPos});
	}
	//Deattach from user
	const DetachFromPlayer = (element) => {
		element.removeAttribute('sync-pos');
	}
	//Equip Object|Tool
	const Equip = (object) => {
		let hold = false;
		if(layer.equipped){
			if(object === layer.equippedObject){
				Unequip();
			} else {
				hold = true;
			}
		} else {
			hold = true;
		}
		if(hold){
			layer.equipped = true;
			layer.equippedObject = object;
			let beltText = 'Equipped : ' + auxl[object].name;
			UpdateBeltText(beltText);
		}
	}
	//Unequip Object|Tool
	const Unequip = () => {
		layer.equipped = false;
		layer.equippedObject = 'none';
		UpdateBeltText(auxl.systemText);
	}
	//Toggle Companion | Menu Back
	const MainMenuAction = () => {
		//if comp is spawned
		if(layer.menuToggle){
			layer.menuToggle = false;
			let toggleTimeout = setTimeout(() => {
				layer.menuToggle = true;
				clearTimeout(toggleTimeout);
			}, 350);
			if(auxl.comp.comp.inScene){
				if(auxl.mainMenu.multiMenu.menuOpen){
					auxl.mainMenu.ToggleMenu();
				} else {
					auxl.comp.DespawnComp();
				}
			} else {
				auxl.comp.SpawnComp();
			}
		}
	}

	//Assign to each joystick, 
	//Player Rotation
	const UpdatePlayerRotation = (axisX,axisY,axisZ) => {

		let div = new THREE.Vector3(0,0,0);
		div.x = axisX;
		div.y = axisY;
		div.z = axisZ;

		auxl.playerBody.ChangeSelf({property: 'rotation', value: div});



		//auxl.playerRig.ChangeSelf({property: 'rotation', value: new THREE.Vector3(0,0,0)});

		//This technically works and sets it, but it doesn't actually change it. Look-Controls prevents this?
		//auxl.camera.ChangeSelf({property: 'rotation', value: new THREE.Vector3(0,0,0)});

		//For example
		/*
		let currentCameraRot = auxl.camera.GetEl().getAttribute('rotation');
		console.log(currentCameraRot);

		auxl.camera.ChangeSelf({property: 'rotation', value: new THREE.Vector3(0,0,0)});

		currentCameraRot = auxl.camera.GetEl().getAttribute('rotation');
		console.log(currentCameraRot);
		*/

		//Workaround could read current rotation and rotate playerRig to compensate




	}
	//Player Position
	const UpdatePlayerPosition = (position) => {
		let pos = new THREE.Vector3(0,0,0);
		pos.x = position.x || 0;
		pos.y = position.y || 0;
		pos.z = position.z || 0;
		//Configured to non-physics only currently
		auxl.playerRig.ChangeSelf({property: 'position', value: pos});
		layer.gridPos.copy(pos);
	}
	//Player Twist
	const TwistTo = (yRot) => {

		//Reset Rotation via playerBody
		let y = auxl.camera.GetEl().getAttribute('rotation').y;
		if(y > 0){
			if(y<360){
				y = y % 360;
			}
		} else if(y < 0){
			if(y < -360){
				y = y % 360;
			}
		}
		let rot = new THREE.Vector3(0,((y*-1)+1)+yRot,0);
		auxl.playerBody.ChangeSelf({property:'rotation',value:rot});
	}
	//Player Forward Position
	//going forward will be a trigger / grip action
	const Forward = (speed, div) => {
		return div += layer.speed;
	}
	//Speed
	const Speed = (velocity) => {
		layer.speed = velocity;

	}
	//Toggle Background Audio
	const ToggleBackgroundAudio = () => {
		auxl.backgroundAudio = !auxl.backgroundAudio;
		if(auxl.backgroundAudio){
			auxl.playerAudio.SpawnCore(auxl.playerRig);
		} else {
			auxl.playerAudio.DespawnCore();
		}
	}
	//Testing Function
	const TestFunc = (params) => {
		console.log(params);
	}

	return {layer, Reset, PlayerSceneAnim, UpdateSceneTransitionStyle, PlayerTeleportAnim, UpdateTeleportTransitionStyle, UpdateTransitionColor, ToggleVRText, UpdateUIText, ToggleBeltText, UpdateBeltText, Notification, TempDisableClick, DisableClick, EnableClick, UnlockLocomotion, LockLocomotion, EnableVRLocomotion, EnableVRHoverLocomotion, EnableDesktopLocomotion, EnableMobileLocomotion, ChangeLocomotionType, RemoveBelt, ToggleSittingMode, ToggleCrouch, SnapRight45, SnapLeft45, SnapRight90, SnapLeft90, ToggleFlashlight, ResetUserPosRot,GetPlayerInfo, AttachToPlayer, Equip, Unequip, MainMenuAction, DetachFromPlayer, UpdatePlayerPosition, TwistTo, ToggleBackgroundAudio, TestFunc};
}

//
//Companion
//System Menu & Inventory
const Companion = (auxl, id, object, inventory) => {

	let comp = {};
	comp.avatarType = '';
	comp.menuParentId;
	let defaultAvatar;
	if(object.SpawnCore){
		comp.avatarType = 'core';
		comp.menuParentId = object.core.id;
		defaultAvatar = object.core.id;
	} else if(object.SpawnLayer){
		comp.avatarType = 'layer';
		comp.menuParentId = object.layer.all.parent.core.core.id;
		defaultAvatar = object.layer.id;
	}
	comp.avatar = Object.assign({}, object);
	comp.shapes = {
		default: defaultAvatar,
		['Cube']: 'compCubeLayer',
		['Sphere']: 'compSphereLayer',
		//['Ghost']: 'ghost',
	};

	comp.id = id;
	comp.inScene = false;
	comp.infoDisplay = false;
	comp.pos = auxl.playerRig.GetEl().getAttribute('position');
	comp.height = 1.5;
	comp.distance = -2;
	comp.firstSpawn = true;

	comp.viewConfig = false;

	//NPC
	//auxl.compNPC = auxl.NPC('compNPC', comp.avatar, auxl.compBookData, auxl.compBubble, true);
	//Basic Book Data
	comp.bookData = auxl.compBookData;
	auxl.compNPC = auxl.NPC('compNPC', comp.avatar, comp.bookData, auxl.compBubbleLayer, true);

	//Inventory
	comp.enableInventory = inventory || false;
	comp.inventoryTimeouts = [];
	comp.items = {};
	comp.tools = {};
	comp.keys = {};
	comp.specials = {};

	//
	//Main Menu
	comp.mainMenuData = {
	info:{
		id: 'mainMenu',
		buttonData: auxl.menuCylinderData,
		hoverData: auxl.menuHoverData,
		title: 'Main Menu',
		description: 'Main menu for travel, system and settings.',
		layout:'circleUp',
		offset: -1,
		parent: comp.menuParentId,
		stare: false,
	},
	menu0:{
		button1:{
			id: 'subMenu2',
			style: false,
			title: 'Travel to',
			description: 'Select your next travel destination.',
			subMenu: 'travel1',
			action: false,
		},
		button2:{
			id: 'subMenu3',
			style: false,
			title: 'Settings',
			description: 'Configure system settings.',
			subMenu: 'menu3',
			action: false,
		},
		button3:{
			id: 'subMenu4',
			style: false,
			title: 'Controls',
			description: 'View current control configuration.',
			subMenu: false,
			action: {
				auxlObj: 'comp',
				component: false,
				method: 'ToggleControlView',
				params: null,
				menu: 'close',
			},
		},
	},
	travel1:{
		button0:{
			id: 'subMenu4',
			style: false,
			title: 'Sub Menu 4 Test',
			description: 'A test sub menu.',
			subMenu: 'menu4',
			action: false,
		},
		button1:{
			id: 'subMenu5',
			style: false,
			title: 'Sub Menu 5 Test',
			description: 'A test sub menu.',
			subMenu: 'menu5',
			action: false,
		},
	},
	menu2:{
		button0:{
			id: 'action1',
			style: false,
			title: 'Toggle Flashlight',
			description: 'Turn On/Off your flashlight.',
			subMenu: false,
			action: {
				auxlObj: 'player',
				component: false,
				method: 'ToggleFlashlight',
				params: null,
				menu: 'close',
			},
		},
	},
	menu3:{
		button0:{
			id: 'action1',
			style: false,
			title: 'Sit/Stand Toggle',
			description: 'Toggle between sitting or standing mode.',
			subMenu: false,
			action: {
				auxlObj: 'player',
				component: false,
				method: 'ToggleSittingMode',
				params: null,
				menu: 'stay',
			},
		},
		button1:{
			id: 'subMenu1',
			style: false,
			title: 'Companion Avatar',
			description: 'Change the companion avatar shape.',
			//subMenu: 'menu7',
			subMenu: 'compShape1',
			action: false,
		},
		button2:{
			id: 'subMenu2',
			style: false,
			title: 'Scene Transition Type',
			description: 'Change the scene transition animation style.',
			subMenu: 'menu4',
			action: false,
		},
		button3:{
			id: 'subMenu3',
			style: false,
			title: 'Teleport Transition Type',
			description: 'Change the teleport transition animation style.',
			subMenu: 'menu5',
			action: false,
		},
		button4:{
			id: 'subMenu4',
			style: false,
			title: 'Transition Color',
			description: 'Change the transition animation color.',
			subMenu: 'menu6',
			action: false,
		},
	},
	menu4:{
		button0:{
			id: 'action1',
			style: false,
			title: 'Instant',
			description: 'Disable animation.',
			subMenu: false,
			action: {
				auxlObj: 'player',
				component: false,
				method: 'UpdateSceneTransitionStyle',
				params: 'instant',
				menu: 'back',
			},
		},
		button1:{
			id: 'action2',
			style: false,
			title: 'Blink',
			description: 'Blink in and out in between scenes.',
			subMenu: false,
			action: {
				auxlObj: 'player',
				component: false,
				method: 'UpdateSceneTransitionStyle',
				params: 'blink',
				menu: 'back',
			},
		},
		button2:{
			id: 'action3',
			style: false,
			title: 'Fade',
			description: 'Fade in and out in between scenes.',
			subMenu: false,
			action: {
				auxlObj: 'player',
				component: false,
				method: 'UpdateSceneTransitionStyle',
				params: 'fade',
				menu: 'back',
			},
		},
		button3:{
			id: 'action4',
			style: false,
			title: 'Sphere',
			description: 'Close and open a sphere in between scenes.',
			subMenu: false,
			action: {
				auxlObj: 'player',
				component: false,
				method: 'UpdateSceneTransitionStyle',
				params: 'sphere',
				menu: 'back',
			},
		},
	},
	menu5:{
		button0:{
			id: 'action1',
			style: false,
			title: 'Instant',
			description: 'Disable animation.',
			subMenu: false,
			action: {
				auxlObj: 'player',
				component: false,
				method: 'UpdateTeleportTransitionStyle',
				params: 'instant',
				menu: 'back',
			},
		},
		button1:{
			id: 'action2',
			style: false,
			title: 'Locomotion',
			description: 'Slide to teleport position.',
			subMenu: false,
			action: {
				auxlObj: 'player',
				component: false,
				method: 'UpdateTeleportTransitionStyle',
				params: 'locomotion',
				menu: 'back',
			},
		},
		button2:{
			id: 'action3',
			style: false,
			title: 'Blink',
			description: 'Blink in and out in between teleports.',
			subMenu: false,
			action: {
				auxlObj: 'player',
				component: false,
				method: 'UpdateTeleportTransitionStyle',
				params: 'blink',
				menu: 'back',
			},
		},
		button3:{
			id: 'action4',
			style: false,
			title: 'Fade',
			description: 'Fade in and out in between teleports.',
			subMenu: false,
			action: {
				auxlObj: 'player',
				component: false,
				method: 'UpdateTeleportTransitionStyle',
				params: 'fade',
				menu: 'back',
			},
		},
		button4:{
			id: 'action5',
			style: false,
			title: 'Sphere',
			description: 'Close and open a sphere in between teleports.',
			subMenu: false,
			action: {
				auxlObj: 'player',
				component: false,
				method: 'UpdateTeleportTransitionStyle',
				params: 'sphere',
				menu: 'back',
			},
		},
	},
	menu6:{
		button0:{
			id: 'action1',
			style: false,
			title: 'Black',
			description: 'Change transition color.',
			subMenu: false,
			action: {
				auxlObj: 'player',
				component: false,
				method: 'UpdateTransitionColor',
				params: 'black',
				menu: 'back',
			},
		},
		button1:{
			id: 'action2',
			style: false,
			title: 'Grey',
			description: 'Change transition color.',
			subMenu: false,
			action: {
				auxlObj: 'player',
				component: false,
				method: 'UpdateTransitionColor',
				params: 'grey',
				menu: 'back',
			},
		},
		button2:{
			id: 'action3',
			style: false,
			title: 'White',
			description: 'Change transition color.',
			subMenu: false,
			action: {
				auxlObj: 'player',
				component: false,
				method: 'UpdateTransitionColor',
				params: 'white',
				menu: 'back',
			},
		},
		button3:{
			id: 'action4',
			style: false,
			title: 'Red',
			description: 'Change transition color.',
			subMenu: false,
			action: {
				auxlObj: 'player',
				component: false,
				method: 'UpdateTransitionColor',
				params: 'red',
				menu: 'back',
			},
		},
		button4:{
			id: 'action5',
			style: false,
			title: 'Green',
			description: 'Change transition color.',
			subMenu: false,
			action: {
				auxlObj: 'player',
				component: false,
				method: 'UpdateTransitionColor',
				params: 'green',
				menu: 'back',
			},
		},
		button5:{
			id: 'action6',
			style: false,
			title: 'Blue',
			description: 'Change transition color.',
			subMenu: false,
			action: {
				auxlObj: 'player',
				component: false,
				method: 'UpdateTransitionColor',
				params: 'blue',
				menu: 'back',
			},
		},
	},
	compShape1:{},
	inventory:{
		button0:{
			id: 'subMenu1',
			style: false,
			title: 'Items',
			description: 'View your items.',
			subMenu: 'items1',
			action: false,
		},
		button1:{
			id: 'subMenu2',
			style: false,
			title: 'Tools',
			description: 'View your tools.',
			subMenu: 'tools1',
			action: false,
		},
		button2:{
			id: 'subMenu3',
			style: false,
			title: 'Keys',
			description: 'View your keys.',
			subMenu: 'keys1',
			action: false,
		},
		button3:{
			id: 'subMenu4',
			style: false,
			title: 'Special',
			description: 'View your special objects.',
			subMenu: 'specials1',
			action: false,
		},
	},
	items1:{},
	tools1:{},
	keys1:{},
	specials1:{},
/*
	menu1:{
		button0:{
			id: 'subMenu4',
			style: false,
			title: 'Sub Menu 4 Test',
			description: 'A test sub menu.',
			subMenu: 'menu4',
			action: false,
		},
		button1:{
			id: 'subMenu5',
			style: false,
			title: 'Sub Menu 5 Test',
			description: 'A test sub menu.',
			subMenu: 'menu5',
			action: false,
		},
	},
*/
	};

	if(comp.enableInventory){
		comp.mainMenuData.menu0.button0 = {
			id: 'subMenu1',
			style: false,
			title: 'Inventory',
			description: 'View your inventory.',
			subMenu: 'inventory',
			action: false,
		};
		comp.mainMenuData.menu0.button4 = {
			id: 'subMenu5',
			style: false,
			title: 'Unequip',
			description: 'Unequip your held object.',
			subMenu: false,
			action: {
				auxlObj: 'player',
				component: false,
				method: 'Unequip',
				params: null,
				menu: 'stay',
			},
		};
	}

	auxl.mainMenu = auxl.MultiMenu(comp.mainMenuData);
	/*
	Main Menu

	Inventory
	- Items
	- Tools
	- - Toggle Flashlight
	- - Toggle Click to Teleport *
	- Keys
	- Specials

	Travel
	- Scenes

	Settings
	- Sit/Stand Mode Toggle
	- Scene Transition Type :
	- - Instant, Blink, Fade, Sphere
	- Teleport Transition Type : 
	- - Locomotion, Instant, Blink, Fade, Sphere
	- Transition Color :
	- - Colors
	- Theme Color *
	- Companion Style *
	- Toggle 1st <-> 3rd POV *
	- Control Configurations (VR) *
	- Scene Instructions *
	- Sound Settings *
	*/

	//Return Position Direction of Camera
	function cameraDirection(){
		//Get the direction vector in world space
		let direction = new THREE.Vector3();
		camera.object3D.getWorldDirection(direction);
		//Calculate the position based on the direction and distance
		let position = new THREE.Vector3();
		position.copy(camera.object3D.position).add(new THREE.Vector3(direction.x, 0, direction.z).normalize().multiplyScalar(comp.distance));
		position.y = comp.height;
		return position;
	}
	//Testing Function
	const TestFunc = (params) => {
		console.log(params);
	}
	//Emoti Prep
	let speechIntervalB;
	let speechTimeoutB;
	//Emoticon Loop Display
	const autoScriptEmoticon = () => {
		//Emoticons
		function* emotiSpeech() {
			yield '-_-';
			yield 'O_O';
			yield 'o_o';
			yield 'o_O';
			yield 'O_o';
			yield 'O_^';
			yield '^_o';
			yield '^_^';
			yield 'o_^';
			yield '^_O';
			yield '<_<';
			yield '>_>';
			yield '>_<';
			yield 'X_X';
			yield '*_*';
			yield '+_+';
			yield '0_0';
		}
		let emotiSpeechArray = [];
		for (speech of emotiSpeech()) {
			emotiSpeechArray.push(speech);
		}
		let buddy;
		let buddyFaceMaterial = {value:'^_^', color: "#FFFFFF", align: "center", font: "exo2bold", zOffset: 0.135, side: 'double',}
		let b;
		speechTimeoutB = setTimeout(function () {
			b = 0;
			buddy = auxl.compNPC.GetAllNPCEl();
			speechIntervalB = setInterval(function() {
				buddyFaceMaterial.value = emotiSpeechArray[b];
				buddy.setAttribute('text', buddyFaceMaterial);
				if(b === emotiSpeechArray.length){b = 0}else{b++}
			}, 2700);
		}, 250);
	}
	//Add Shape
	const AddAvatar = (name, auxlObj) => {
		comp.shapes[name] = auxlObj;
		BuildAvatarMenu();
	}
	//Build Shape Menu
	const BuildAvatarMenu = () => {
		comp.shapeButtons = {};
		let buttonTemplate = {};
		let moreTemplate = {};
		let currNum = 1;
		let currPage = 1;
		let total = Object.keys(comp.shapes).length;
		let pages = Math.ceil(total/8);
		let subMenuName = 'compShape' + currPage;
		for(let each in comp.shapes){
			buttonTemplate = {
				id: 'action'+currNum,
				style: false,
				title: each,
				description: 'Change to a '+each+' avatar.',
				subMenu: false,
				action: {
					auxlObj: 'comp',
					component: false,
					method: 'UpdateShape',
					params: comp.shapes[each],
					menu: 'close',
				},
			};
			moreTemplate = {
				id: 'action'+currNum,
				style: false,
				title: 'More',
				description: 'Next Page',
				subMenu: false,
				action: false,
			};
			comp.shapeButtons['button'+currNum] = buttonTemplate;
			if(currNum === total){
				auxl.mainMenu.UpdateSubMenu(subMenuName,comp.shapeButtons);
			} else {
				currNum++;
			}
			if(pages > 1){
				if(currNum % 7 === 0){
					currPage++;
					//build more button
					moreTemplate.id = 'action'+currNum;
					moreTemplate.subMenu = 'compShape' + currPage;
					comp.shapeButtons['button'+currNum] = moreTemplate;
					auxl.mainMenu.UpdateSubMenu(subMenuName,comp.shapeButtons);
					comp.shapeButtons = {};
					subMenuName = 'compShape' + currPage;
				}
			}
		}
	}
	//Update Shape - Strings Only
	const UpdateShape = (newObj) => {
		let respawn = false;
		if(comp.inScene){
			respawn = true;
			DespawnComp();
		}
		let rebuildTimeout = setTimeout(() => {
			if(auxl[newObj].SpawnCore){
				comp.avatarType = 'core';
				comp.menuParentId = auxl[newObj].core.id;
			} else if(auxl[newObj].SpawnLayer){
				comp.avatarType = 'layer';
				comp.menuParentId = auxl[newObj].layer.all.parent.core.core.id;
			} else {
				console.log(newObj);
				console.log('failed to detect type');
			}
			comp.avatar = Object.assign({}, auxl[newObj]);
			auxl.compNPC = auxl.NPC('compNPC', comp.avatar, auxl.compBookData, auxl.compBubbleLayer, true);
			if(respawn){
				SpawnComp();
			}
		clearTimeout(rebuildTimeout);
		}, 400);
	}
	//Update Book
	const UpdateBook = (bookData) => {
		let respawn = false;
		if(comp.inScene){
			respawn = true;
			DespawnComp();
		}
		comp.bookData = bookData;
		let rebuildTimeout = setTimeout(() => {
			auxl.compNPC = auxl.NPC('compNPC', comp.avatar, comp.bookData, auxl.compBubbleLayer, true);
			if(respawn){
				SpawnComp();
			}
		clearTimeout(rebuildTimeout);
		}, 400);
	}
	//Toggle playerFloor Clickable Class
	const ToggleSpawnClick = () => {
		auxl.playerFloor.GetEl().classList.toggle('clickable');
	}
	//Toggle Companion Display
	const ToggleComp = () => {
		if(comp.inScene){
			DespawnComp();
		} else {
			SpawnComp();
		}
	}
	//Attach Toggle to playerFloor
	auxl.playerFloor.GetEl().addEventListener('click',ToggleComp);
	//Update Position
	const UpdatePosition = () => {
		if(comp.avatarType === 'core'){
			comp.avatar.ChangeSelf({property: 'position', value: cameraDirection()});
		} else {
			comp.avatar.ChangeParent({property: 'position', value: cameraDirection()});
		}
	}
	//Spawn & Start Companion
	const SpawnComp = () => {
		if(comp.inScene){}else{
			ToggleSpawnClick();
			auxl.compNPC.SpawnNPC(auxl.playerRig.GetEl());
			if(comp.avatarType === 'core'){
				if(comp.firstSpawn){
					comp.firstSpawn = false;
				} else {
					comp.avatar.ChangeSelf({property: 'position', value: cameraDirection()});
				}
			} else {
				if(comp.firstSpawn){
					comp.firstSpawn = false;
				} else {
					comp.avatar.ChangeParent({property: 'position', value: cameraDirection()});
				}
			}
			//autoScriptEmoticon();
			let spawnTimeout = setTimeout(() => {
				//auxl.build.SpawnBuild();
				//Update Inventory
				if(comp.enableInventory){
					UpdateInventoryMenu();
				}
				//Update Main Menu Parent Shape ID
				auxl.mainMenu.multiMenu.parent = comp.menuParentId;
				auxl.mainMenu.SpawnMultiMenu();
				ToggleSpawnClick();
				comp.inScene = true;
				clearTimeout(spawnTimeout);
			}, 100);
		}
	}
	//Despawn & Stop Companion
	const DespawnComp = () => {
		if(comp.inScene){
			ToggleSpawnClick();
			//clearInterval(speechTimeoutB);
			//clearInterval(speechIntervalB);
			//auxl.build.DespawnBuild();
			auxl.mainMenu.DespawnMultiMenu();
			//Delay to let multi-menu complete it's despawn seq
			let despawnTimeout = setTimeout(() => {
				auxl.compNPC.DespawnNPC();
				auxl.RemoveFromTracker(comp.id);
				comp.inScene = false;
				ToggleSpawnClick();
				clearTimeout(despawnTimeout);
			}, 300);
		}
	}
	//Set Flag & Value to Object - Single or Array
	const SetFlag = (flagValue) => {
		if(Array.isArray(flagValue)){
			for(let each in flagValue){
				comp[flagValue[each].flag] = flagValue[each].value;
				auxl.saveToProfile({auxlObject: comp.id, type: 'comp', sub: false, name: flagValue[each].flag, data: flagValue[each].value});
			}
		} else {
			comp[flagValue.flag] = flagValue.value;
			auxl.saveToProfile({auxlObject: comp.id, type: 'comp', sub: false, name: flagValue.flag, data: flagValue.value});
		}
	}
	//Retreive Flag Value from Object - Single or Array
	const GetFlag = (flag) => {
		if(Array.isArray(flag)){
			let flagArray = [];
			for(let each in flag){
				flagArray.push(comp(flag[each]));
			}
			return flagArray;
		} else {
			return comp[flag];
		}
	}
	//Display Current Control Configuration
	const ToggleControlView = () => {
		if(comp.viewConfig){
			auxl.configurationView.DespawnCore();
			comp.viewConfig = false;
		} else {
			auxl.configurationView.SpawnCore(auxl.playerRig.GetEl());
			auxl.configurationView.ChangeSelf({property: 'text', value: {value: auxl.controlsText}});
			comp.viewConfig = true;
		}
	}
	//Update Main Menu
	const UpdateMainMenu = (updates) => {
		//Building New Menu Resets any Temp things like UpdateSubMenu
		let restart = false;
		if(auxl.mainMenu.inScene){
			auxl.mainMenu.DespawnMultiMenu();
			restart = true;
		}
		Object.keys(updates).forEach(section => {
			if(comp.mainMenuData[section]){
				comp.mainMenuData[section][updates[section].id] = updates[section];
			} else {
				comp.mainMenuData[section] = updates[section];
			}
		});
		auxl.mainMenu = auxl.MultiMenu(comp.mainMenuData);
		UpdateInventoryMenu();
		BuildAvatarMenu();
		if(restart){
			auxl.mainMenu.SpawnMultiMenu();
		}
	}
	//Update Main Menu Style
	const UpdateMainMenuStyle = (core) => {
		let restart = false;
		if(auxl.mainMenu.inScene){
			auxl.mainMenu.DespawnMultiMenu();
			restart = true;
		}
		comp.mainMenuData.info.buttonData = core;
		auxl.mainMenu = auxl.MultiMenu(comp.mainMenuData);
		UpdateInventoryMenu();
		BuildAvatarMenu();
		if(restart){
			auxl.mainMenu.SpawnMultiMenu();
		}
	}
	//Enable Inventory
	const EnableInventory = () => {
		comp.enableInventory = true;
		comp.mainMenuData.menu0 = {
		button0:{
			id: 'subMenu1',
			style: false,
			title: 'Inventory',
			description: 'View your inventory.',
			subMenu: 'inventory',
			action: false,
		},
		button4:{
			id: 'subMenu5',
			style: false,
			title: 'Unequip',
			description: 'Unequip your held object.',
			subMenu: false,
			action: {
				auxlObj: 'player',
				component: false,
				method: 'Unequip',
				params: null,
				menu: 'stay',
			},
		},
		button1:{
			id: 'subMenu2',
			style: false,
			title: 'Travel to',
			description: 'Select your next travel destination.',
			subMenu: 'menu1',
			action: false,
		},
		button2:{
			id: 'subMenu3',
			style: false,
			title: 'Settings',
			description: 'Configure system settings.',
			subMenu: 'menu3',
			action: false,
		},
		button3:{
			id: 'subMenu4',
			style: false,
			title: 'Controls',
			description: 'View current control configuration.',
			subMenu: false,
			action: {
				auxlObj: 'comp',
				component: false,
				method: 'ToggleControlView',
				params: null,
				menu: 'close',
			},
		},
	};
		auxl.mainMenu = auxl.MultiMenu(comp.mainMenuData);
		UpdateInventoryMenu();
	}
	//Add To Inventory
	const AddToInventory = ({item, hide}) => {
		function inventoryAdd(item){
			if(comp[item.category][item.name]){
				if(comp[item.category][item.name].persist === 'limited'){
					comp[item.category][item.name].amount += item.amount;
				}
			} else {
				comp[item.category][item.name] = item;
			}
			auxl.saveToProfile({auxlObject: comp.id, type: 'comp', sub: item.category, name: item.name, data: item});
		}
		if(Array.isArray(item)){
			for(let each in item){
				inventoryAdd(item[each]);
			}
		} else {
			inventoryAdd(item);
		}
		UpdateInventoryMenu();
		//Notifications
		ClearInventoryNotifications();
		if(hide){}else{
			if(Array.isArray(item)){
				for(let each in item){
					let delay = 3800;
					delay *= each;
					comp.inventoryTimeouts[each] = setTimeout(() => {
						auxl.player.Notification({message:'Acquired : ' + item[each].name});
						clearTimeout(comp.inventoryTimeouts[each]);
					}, delay);
				}
			} else {
				auxl.player.Notification({message:'Acquired : ' + item.name});
			}
		}
	}
	//Clear Inventory Notifications
	const ClearInventoryNotifications = () => {
		for(let each in comp.inventoryTimeouts){
			clearTimeout(comp.inventoryTimeouts[each])
		}
		comp.inventoryTimeouts = [];
	}
	//Remove Item/Key to Player Inventory - Single or Array
	const RemoveFromInventory = (item) => {
		function inventoryRemove(item){
			if(comp[item.category][item.name]){
				if(comp[item.category][item.name].persist === 'limited'){
					comp[item.category][item.name].amount--;
					if(comp[item.category][item.name].amount <= 0){
						delete comp[item.category][item.name];
					}
				}
			} else {
				delete comp[item.category][item.name];
			}
			auxl.saveToProfile({auxlObject: comp.id, type: 'comp', sub: item.category, name: item.name, data: item});
		}
		if(Array.isArray(item)){
			for(let each in item){
				inventoryRemove(item[each]);
			}
		} else {
			inventoryRemove(item);
		}
		UpdateInventoryMenu();
	}
	//Check if Item/Key is in Player Inventory - Single or Array
	const CheckInventory = (item) => {
		let returnValue;
		function inventoryCheck(item){
			if(comp[item.category][item.name]){
				return true;
			} else {
				return false;
			}
		}
		if(Array.isArray(item)){
			for(let each in item){
				returnValue.push(inventoryCheck(item[each]));
			}
		} else {
			returnValue = inventoryCheck(item);
		}
		return returnValue;
	}
	//Check for Key
	const CheckForKey = (name) => {
		let match = false;
		if(Object.keys(comp.keys).length === 0){
			match = false;
		} else {
			for(let each in comp.keys){
				if(comp.keys[each].id === name){
					match =  true;
					break;
				}
			}
		}
		return match;
	}
	//Update Inventory Menu Category
	const UpdateInventoryMenuCategory = (category) => {
		comp.inventoryButtons = {};
		let buttonTemplate = {};
		let moreTemplate = {};
		let currNum = 1;
		let currPage = 1;
		let total = Object.keys(comp[category]).length;
		let pages = Math.ceil(total/8);
		let subMenuName = category + currPage;
		let menuControl = 'stay';

		for(let each in comp[category]){
			let name;
			if(comp[category][each].persist === 'limited'){
				name = comp[category][each].name+' x'+comp[category][each].amount;
			} else {
				name = comp[category][each].name;
			}
			if(comp[category][each].menu){
				menuControl = comp[category][each].menu;
			} else {
				menuControl = 'stay';
			}
			buttonTemplate = {
				id: 'action'+currNum,
				style: comp[category][each].style,
				title: name,
				description: comp[category][each].description,
				subMenu: false,
				action: {
					auxlObj: comp[category][each].auxlObj,
					component: comp[category][each].component,
					method: comp[category][each].method,
					params: comp[category][each].params,
					menu: menuControl,
				},
			};
			if(comp[category][each].action){} else {
				buttonTemplate.action = false;
			}
			moreTemplate = {
				id: 'action'+currNum,
				style: false,
				title: 'More',
				description: 'Next Page',
				subMenu: false,
				action: false,
			};
			comp.inventoryButtons['button'+currNum] = buttonTemplate;
			if(currNum === total){
				auxl.mainMenu.UpdateSubMenu(subMenuName,comp.inventoryButtons);
			} else {
				currNum++;
			}
			if(pages > 1){
				if(currNum % 7 === 0){
					currPage++;
					//build more button
					moreTemplate.id = 'action'+currNum;
					moreTemplate.subMenu = category + currPage;
					comp.inventoryButtons['button'+currNum] = moreTemplate;
					auxl.mainMenu.UpdateSubMenu(subMenuName,comp.inventoryButtons);
					comp.inventoryButtons = {};
					subMenuName = category + currPage;
				}
			}

		}
	}
	//Update Inventory Menu
	const UpdateInventoryMenu = () => {
		UpdateInventoryMenuCategory('items');
		UpdateInventoryMenuCategory('tools');
		UpdateInventoryMenuCategory('keys');
		UpdateInventoryMenuCategory('specials');
	}

	return{comp, TestFunc, AddAvatar, UpdateShape, UpdateBook, SpawnComp, DespawnComp, SetFlag, GetFlag, UpdatePosition, ToggleControlView, UpdateMainMenu, UpdateMainMenuStyle, EnableInventory, AddToInventory, ClearInventoryNotifications, RemoveFromInventory, CheckInventory, CheckForKey, UpdateInventoryMenu};
}

//
//Export


/***/ }),

/***/ "./src/system/scenes.js":
/*!******************************!*\
  !*** ./src/system/scenes.js ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   MapZone: () => (/* binding */ MapZone),
/* harmony export */   Scenario: () => (/* binding */ Scenario),
/* harmony export */   SceneNode: () => (/* binding */ SceneNode),
/* harmony export */   World: () => (/* binding */ World)
/* harmony export */ });
//
//AUXL : A-Frame UX Library
//v0.3 Engine
//https://github.com/Minty-Crisp/AUXL
//
//Created by Minty-Crisp (mintycrisp.com)
//
//Scenes
//
//SceneNode
//MapZone
//Scenario
//World

//
//Scene Node ObjGen
//scenePlaceTownBuildingCastleLabrynthLevelAreaOfInterest
const SceneNode = (auxl, sceneData) => {
	let core = Object.assign({}, sceneData);
	//Scene Text Support
	let textBubble = auxl.Core(auxl.sceneTextData);
	let sceneText = auxl.SpeechSystem(textBubble);
	//Minimum Scene Loading Timeout
	let loadTimeout;
	let minLoadTime = 400;
	//If/Else support to run auxlObjMethod()
	const IfElse = (objRef, condObj,{cond, ifTrue, ifFalse}) => {
		if(auxl[condObj].GetFlag){
			//Core, Basic Objects
			if(auxl[condObj].GetFlag(cond)) {
				for(let a in ifTrue){
					for(let b in ifTrue[a]){
						auxlObjMethod(a,b,ifTrue[a][b]);
					}
				}
			} else {
				for(let a in ifFalse){
					for(let b in ifFalse[a]){
						auxlObjMethod(a,b,ifFalse[a][b]);
					}
				}
			}
		} else if(auxl[condObj].GetFlagParent){
			//Layer
			if(auxl[condObj].GetFlagParent(cond)) {
				for(let a in ifTrue){
					for(let b in ifTrue[a]){
						auxlObjMethod(a,b,ifTrue[a][b]);
					}
				}
			} else {
				for(let a in ifFalse){
					for(let b in ifFalse[a]){
						auxlObjMethod(a,b,ifFalse[a][b]);
					}
				}
			}
		}
	}
	//Switch support to run auxlObjMethod()
	const Switch = (objRef, condObj,switchInfo) => {
		let switchCases = [];
		for(let each in switchInfo){
			if(each === 'default'){}else{
				switchCases.push(each)
			}
		}
		if(auxl[condObj].GetFlag){
			//Core, Basic Objects
			let switchCondition = auxl[condObj].GetFlag(switchInfo.cond);
			//console.log(switchCondition);
			//Cases
			for(let each in switchCases){
				if(switchCondition === switchCases[each]){
					for(let a in switchInfo[switchCases[each]]){
						for(let b in switchInfo[switchCases[each]][a]){
							auxlObjMethod(a,b,switchInfo[switchCases[each]][a][b]);
						}
					}
					return;
				}
			}
			//Default
			for(let a in switchInfo.default){
				for(let b in switchInfo.default[a]){
					auxlObjMethod(a,b,switchInfo.default[a][b]);
				}
			}
		} else if(auxl[condObj].GetFlagParent){
			//Layer
			let switchCondition = auxl[condObj].GetFlagParent(switchInfo.cond);
			//console.log(switchCondition);
			//Cases
			for(let each in switchCases){
				if(switchCondition === switchCases[each]){
					for(let a in switchInfo[switchCases[each]]){
						for(let b in switchInfo[switchCases[each]][a]){
							auxlObjMethod(a,b,switchInfo[switchCases[each]][a][b]);
						}
					}
					return;
				}
			}
			//Default
			for(let a in switchInfo.default){
				for(let b in switchInfo.default[a]){
					auxlObjMethod(a,b,switchInfo.default[a][b]);
				}
			}
		} else {
			console.log(condObj);
			console.log('Unable to find value');
			console.log(switchInfo.cond);
		}
	}
	//Add Timeout, Interval, Interaction & Event listeners to NodeScene Tracker
	const AddToTimeIntEvtTracker = ({name,type,id,method,params,event}) => {
		let nameId = name+id;
		if(type === 'timeout'){
			auxl.running[nameId] = {type, name, id, nameId};
		} else if (type === 'interval'){
			auxl.running[nameId] = {type, name, id, nameId};
		} else if (type === 'interaction' || type === 'event'){
			auxl.running[nameId] = {type, name, id, nameId, method, params, event};
		}
	}
	//Remove Timeout, Interval, Interaction & Event listeners from NodeScene Tracker
	const RemoveFromTimeIntEvtTracker = (name) => {
		delete auxl.running[name];
	}
	//Clear All Timeout, Interval, Interaction & Event NodeScene Tracker Listeners
	const ClearSceneTimeIntEvt = () => {
		for(let ran in auxl.running){
			if(auxl.running[ran].type === 'timeout'){
				clearTimeout(auxl.timeouts[auxl.running[ran].nameId]);
				delete auxl.timeouts[auxl.running[ran].nameId];
			} else if (auxl.running[ran].type === 'interval'){
				clearInterval(auxl.intervals[auxl.running[ran].nameId]);
				delete auxl.intervals[auxl.running[ran].nameId];
			} else if (auxl.running[ran].type === 'interaction' || auxl.running[ran].type === 'event'){
if(auxl[auxl.running[ran].name].GetEl){
	auxl[auxl.running[ran].name].GetEl().removeEventListener(auxl.running[ran].event, function(){
	auxlObjMethod(auxl.running[ran].object,auxl.running[ran].method,auxl.running[ran].params);
	});
} else if(auxl[auxl.running[ran].name].GetParentEl){
	auxl[auxl.running[ran].name].GetParentEl().removeEventListener(auxl.running[ran].event, function(){
	auxlObjMethod(auxl.running[ran].object,auxl.running[ran].method,auxl.running[ran].params);
	});
}
			}
			RemoveFromTimeIntEvtTracker(ran);
		}
	}
	//Exit & Clear NodeScene
	const ClearScene = () => {
		Exit();
		ClearSceneTimeIntEvt();
		auxl.clearSpawned(auxl.nodeSpawned);
	}
	//Run Object Generator Function within NodeScene w/Scene Tracking
	const auxlObjMethod = (object, func, params) => {
		//Check if spawning to add to Tracker
		for (let types in auxl.objGenTracking) {
			if(func === auxl.objGenTracking[types].spawn || func === auxl.objGenTracking[types].altSpawn){
				auxl.spawnTracker(object, 'node');
			}
		}
		auxl[object][func](params);
	}
	//Read NodeScene Data Timeline
	function readTimeline(time){
		if(time === 'controls'){
			auxl.universalControls.updateAction(core[time]);
			return;
		}
		//Fog
		if(time === 'info'){
			if(core[time].fog){
				auxl.sceneEl.setAttribute('fog',core[time].fog);
			} else {
				auxl.sceneEl.setAttribute('fog',{type: "linear", near: 999, far: 1000, color: "#FFF" });
			}
		}
		for(let line in core[time]){
			//Check for special object support
			if(time === 'delay'){
				for(let a in core[time][line]){
					for(let b in core[time][line][a]){
						if(b === 'IfElse'){
							for(let c in core[time][line][a][b]){
								AddToTimeIntEvtTracker({name: line, type: 'timeout', id: a});
								auxl.timeouts[line+a] = setTimeout(function () {
									IfElse(a,c,core[time][line][a][b][c]);
									clearTimeout(auxl.timeouts[line+a]);
								}, line);
							}
						} else if(b === 'Switch'){
							for(let c in core[time][line][a][b]){
								AddToTimeIntEvtTracker({name: line, type: 'timeout', id: a});
								auxl.timeouts[line+a] = setTimeout(function () {
									Switch(a,c,core[time][line][a][b][c]);
									clearTimeout(auxl.timeouts[line+a]);
								}, line);
							}
						} else {
							AddToTimeIntEvtTracker({name: line, type: 'timeout', id: a});
							auxl.timeouts[line+a] = setTimeout(function () {
								auxlObjMethod(a,b,core[time][line][a][b]);
								clearTimeout(auxl.timeouts[line+a]);
							}, line);
						}
					}
				}
			} else if(time === 'interval'){
				for(let a in core[time][line]){
					let ranTotal = 0;
					let loopTotal = core[time][line]['loop'];
					let endCond;
					if(core[time][line]['end']){
						endCond = core[time][line]['end'];
					}
					if(a === 'run'){
						for(let b in core[time][line][a]){
							for(let c in core[time][line][a][b]){
								if(c === 'IfElse'){
									for(let d in core[time][line][a][b][c]){
										AddToTimeIntEvtTracker({name: line, type: 'interval', id: b});
										auxl.intervals[line+b] = setInterval(function() {
											if(auxl[b].GetFlag(endCond) === true){
												clearInterval(auxl.intervals[line+b]);
												RemoveFromTimeIntEvtTracker(line+b);
											}
											IfElse(b,d,core[time][line][a][b][c][d]);
											if(loopTotal === 'infinite'){} else {
												ranTotal++;
												if(ranTotal >= loopTotal){
													clearInterval(auxl.intervals[line+b]);
													RemoveFromTimeIntEvtTracker(line+b);
												}
											}
										}, line);
									}
								} else if(c === 'Switch'){
									for(let d in core[time][line][a][b][c]){
										AddToTimeIntEvtTracker({name: line, type: 'interval', id: b});
										auxl.intervals[line+b] = setInterval(function() {
											if(auxl[b].GetFlag(endCond) === true){
												clearInterval(auxl.intervals[line+b]);
												RemoveFromTimeIntEvtTracker(line+b);
											}
											Switch(b,d,core[time][line][a][b][c][d]);
											if(loopTotal === 'infinite'){} else {
												ranTotal++;
												if(ranTotal >= loopTotal){
													clearInterval(auxl.intervals[line+b]);
													RemoveFromTimeIntEvtTracker(line+b);
												}
											}
										}, line);
									}
								} else {
									let method = c;
									let params = core[time][line][a][b][c];
									AddToTimeIntEvtTracker({name: line, type: 'interval', id: b});
									auxl.intervals[line+b] = setInterval(function() {
										if(auxl[b].GetFlag(endCond) === true){
											clearInterval(auxl.intervals[line+b]);
											RemoveFromTimeIntEvtTracker(line+b);
										}
										auxlObjMethod(b,method,params);
										if(loopTotal === 'infinite'){} else {
											ranTotal++;
											if(ranTotal >= loopTotal){
												clearInterval(auxl.intervals[line+b]);
												RemoveFromTimeIntEvtTracker(line+b);
											}
										}
									}, line);
								}
							}
						}
					}
				}
			} else if(time === 'interaction'){
				for(let a in core[time][line]){
					for(let b in core[time][line][a]){
						let object;
						let method;
						let params;
						let relay;
						if(b === 'IfElse'){
							for(let c in core[time][line][a][b]){
								object = a;
								params = core[time][line][a][b][c];

								AddToTimeIntEvtTracker({name: object, type: 'interaction', id: a, method, params, event: line});
								if(auxl[object].GetEl){
									auxl[object].GetEl().addEventListener(line, function(){
										IfElse(object,c,params);
									});
								} else if(auxl[object].GetParentEl){
									auxl[object].GetParentEl().addEventListener(line, function(){
										IfElse(object,c,params);
									});
								}
							}
						} else if(b === 'Switch'){
							for(let c in core[time][line][a][b]){
								object = a;
								params = core[time][line][a][b][c];
								AddToTimeIntEvtTracker({name: object, type: 'interaction', id: a, method, params, event: line});
								if(auxl[object].GetEl){
									auxl[object].GetEl().addEventListener(line, function(){
										Switch(object,c,params);
									});
								} else if(auxl[object].GetParentEl){
									auxl[object].GetParentEl().addEventListener(line, function(){
										Switch(object,c,params);
									});
								}
							}
						} else if(b === 'relay'){
							for(let c in core[time][line][a][b]){
								for(let d in core[time][line][a][b][c]){
									object = a;
									relay = c;
									method = d;
									params = core[time][line][a][b][c][d];
									AddToTimeIntEvtTracker({name: object, type: 'interaction', id: a, method, params, event: line});
									if(auxl[object].GetEl){
										auxl[object].GetEl().addEventListener(line, function(){
											auxlObjMethod(relay,method,params);
										});
									} else if(auxl[object].GetParentEl){
										auxl[object].GetParentEl().addEventListener(line, function(){
											auxlObjMethod(relay,method,params);
										});
									}
								}
							}
						} else {
							object = a;
							method = b;
							params = core[time][line][a][b];
							AddToTimeIntEvtTracker({name: object, type: 'interaction', id: a, method, params, event: line});
							if(auxl[object].GetEl){
								auxl[object].GetEl().addEventListener(line, function(){
									auxlObjMethod(object,method,params);
								});
							} else if(auxl[object].GetParentEl){
								auxl[object].GetParentEl().addEventListener(line, function(){
									auxlObjMethod(object,method,params);
								});
							}
						}
					}
				}
			} else if(time === 'event'){
				for(let a in core[time][line]){
					for(let b in core[time][line][a]){
						let object;
						let method;
						let params;
						let relay;
						if(b === 'IfElse'){
							for(let c in core[time][line][a][b]){
								object = a;
								params = core[time][line][a][b][c];

								AddToTimeIntEvtTracker({name: object, type: 'event', id: a, method, params, event: line});
								if(auxl[object].GetEl){
									auxl[object].GetEl().addEventListener(line, function(){
										IfElse(object,c,params);
									});
								} else if(auxl[object].GetParentEl){
									auxl[object].GetParentEl().addEventListener(line, function(){
										IfElse(object,c,params);
									});
								}
							}
						} else if(b === 'Switch'){
							for(let c in core[time][line][a][b]){
								object = a;
								params = core[time][line][a][b][c];
								AddToTimeIntEvtTracker({name: object, type: 'event', id: a, method, params, event: line});
								if(auxl[object].GetEl){
									auxl[object].GetEl().addEventListener(line, function(){
										Switch(object,c,params);
									});
								} else if(auxl[object].GetParentEl){
									auxl[object].GetParentEl().addEventListener(line, function(){
										Switch(object,c,params);
									});
								}
							}
						} else if(b === 'relay'){
							for(let c in core[time][line][a][b]){
								for(let d in core[time][line][a][b][c]){
									object = a;
									relay = c;
									method = d;
									params = core[time][line][a][b][c][d];
									AddToTimeIntEvtTracker({name: object, type: 'event', id: a, method, params, event: line});
									if(auxl[object].GetEl){
										auxl[object].GetEl().addEventListener(line, function(){
											auxlObjMethod(relay,method,params);
										});
									} else if(auxl[object].GetParentEl){
										auxl[object].GetParentEl().addEventListener(line, function(){
											auxlObjMethod(relay,method,params);
										});
									}
								}
							}
						} else {
							object = a;
							method = b;
							params = core[time][line][a][b];
							AddToTimeIntEvtTracker({name: object, type: 'event', id: a, method, params, event: line});
							if(auxl[object].GetEl){
								auxl[object].GetEl().addEventListener(line, function(){
									auxlObjMethod(object,method,params);
								});
							} else if(auxl[object].GetParentEl){
								auxl[object].GetParentEl().addEventListener(line, function(){
									auxlObjMethod(object,method,params);
								});
							}
						}
					}
				}
			} else if(time === 'info'){} else {
				//Reading non-special timeline, read normally
				for(let a in core[time][line]){
					if(time === 'start'){
						if(a === 'IfElse'){
							for(let b in core[time][line][a]){
								IfElse(line,b,core[time][line][a][b]);
							}
						} else if(a === 'Switch'){
							for(let b in core[time][line][a]){
								Switch(line,b,core[time][line][a][b]);
							}
						} else {
							auxlObjMethod(line,a,core[time][line][a]);
						}
					} else if(time === 'exit'){
						if(a === 'IfElse'){
							for(let b in core[time][line][a]){
								IfElse(line,b,core[time][line][a][b]);
							}
						} else if(a === 'Switch'){
							for(let b in core[time][line][a]){
								Switch(line,b,core[time][line][a][b]);
							}
						} else {
							auxlObjMethod(line,a,core[time][line][a]);
						}
					} else {
						console.log(time)
						console.log(line)
						console.log(a)
						console.log('Hit Other Timeline, Please Investigate');
					}
				}
			}
		}
		return;
	}
	//Read NodeScene Info Section
	const Info = () => {
		readTimeline('info');
	}
	//Add Controls into NodeScene
	const AddControls = () => {
		readTimeline('controls');
		auxl.UpdateControlText();
	}
	//Remove NodeScene Controls
	const RemoveControls = () => {
		auxl.universalControls.disableAction(core['controls']);
	}
	//Read NodeScene Start Section
	const Start = () => {
		readTimeline('start');
	}
	//Read NodeScene Delay Section
	const Delay = () => {
		readTimeline('delay');
	}
	//Read NodeScene Interval Section
	const Interval = () => {
		readTimeline('interval');
	}
	//Read NodeScene Event Section
	const Event = () => {
		readTimeline('event');
	}
	//Read NodeScene Interaction Section
	const Interaction = () => {
		readTimeline('interaction');
	}
	//Read NodeScene Exit Section & Remove NodeScene Controls
	const Exit = () => {
		readTimeline('exit');
		RemoveControls();
		GridMapStop();
		if(core.info.sceneText){
			sceneText.KillStop();
		}
	}
	//Support to Connect NodeScenes
	const Map = () => {
		readTimeline('map');
	}
	//Grid Map Start
	const GridMapStart = () => {
		if(core.info.map){
			auxl.map.BuildMap(core.info.map.size, core.info.map.height);
			auxl.mapEdge = core.info.map.edge || false;
			if(auxl.mapEdge && core.info.map.spawnEdge){
				auxl.map.SpawnEdges(core.info.map.edgeUpdate);
			}
		}
	}
	//Grid Map Stop
	const GridMapStop = () => {
		if(auxl.map.grid.edgeSpawned){
			auxl.map.DespawnEdges();
		}
		auxl.map.ClearWaiting();
		auxl.map.ClearTriggers();
	}
	//Scene Text Support
	const SceneTextDisplay = () => {
		if(core.info.sceneText){
			sceneText.Start();
			sceneText.DisplaySpeech({role: core.info.name,speech: '... ... ...'});
			let sceneTextTimeout = setTimeout(() => {
				sceneText.DisplaySpeech({role: core.info.name,speech: core.info.description});
				clearTimeout(sceneTextTimeout);
			}, 1250);
		}
	}
	//Load Player Default Position
	const ScenePlayerPosition = () => {
		if(core.info.spawnPos === 'other'){} else if(core.info.spawnPos){
			auxl.player.UpdatePlayerPosition(core.info.spawnPos);
		} else {
			auxl.player.UpdatePlayerPosition(new THREE.Vector3(0,0,0));
		}
	}
	//NodeScene Start
	const StartScene = () => {
		auxl.sceneReading = true;
		auxl.SceneLoadTimeout();
		ScenePlayerPosition();
		Info();
		GridMapStart();
		Start();
		Delay();
		Interval();
		Event();
		Interaction();
		AddControls();
		SceneTextDisplay();
		loadTimeout = setTimeout(() => {
			auxl.sceneReading = false;
			clearTimeout(loadTimeout);
		}, minLoadTime);
		auxl.local.location.scene = core.info.id;
		auxl.saveToProfile();
		if(auxl.local.location.load){
			auxl.local.location.load = false;
		}
	}

	return {core, ClearScene, StartScene, ScenePlayerPosition}
}

//
//Map Zone Gen & reader
//mapRegionDistrictTerritoryZoneSection
const MapZone = (auxl, mapZoneData) => {
	let core = Object.assign({}, mapZoneData);
	core.mapMenuData = false;
	core.mapMainMenuData = false;
	core.mapMenu;
	core.nodes = {};
	//core.info;
	core.currentNode;
	core.zoneLoaded = false;
	core.displayBasicTravelMenu = core.info.travelMenu || false;
	//Map Movement Support
	let timeout;
	let timeout2;
	let newNode;

	//Prepare Zone Map
	const ReadMapData = () => {
		for(let key in core.map){
			core.nodes[key] = auxl[key];
		}
	}
	//ReadMapData();
	//Update Map
	const UpdateMap = (data) => {
		core.nodes = {};
		core.map = data;
		for(let key in data){
			core.nodes[key] = auxl[key];
		}
	}
	//If/Else support to run auxlObjMethod()
	const IfElse = (objRef, condObj,{cond, ifTrue, ifFalse}) => {
		if(auxl[condObj].GetFlag){
			//Core
			if(auxl[condObj].GetFlag(cond)) {
				for(let a in ifTrue){
					for(let b in ifTrue[a]){
						auxlObjMethod(a,b,ifTrue[a][b]);
					}
				}
			} else {
				for(let a in ifFalse){
					for(let b in ifFalse[a]){
						auxlObjMethod(a,b,ifFalse[a][b]);
					}
				}
			}
		} else if(auxl[condObj].GetFlagParent){
			//Layer
			if(auxl[condObj].GetFlagParent(cond)) {
				for(let a in ifTrue){
					for(let b in ifTrue[a]){
						auxlObjMethod(a,b,ifTrue[a][b]);
					}
				}
			} else {
				for(let a in ifFalse){
					for(let b in ifFalse[a]){
						auxlObjMethod(a,b,ifFalse[a][b]);
					}
				}
			}
		}
	}
	//Switch support to run auxlObjMethod()
	const Switch = (objRef, condObj,switchInfo) => {
		let switchCases = [];
		for(let each in switchInfo){
			if(each === 'default'){}else{
				switchCases.push(each)
			}
		}
		if(auxl[condObj].GetFlag){
			//Core, Basic Objects
			let switchCondition = auxl[condObj].GetFlag(switchInfo.cond);
			//console.log(switchCondition);
			//Cases
			for(let each in switchCases){
				if(switchCondition === switchCases[each]){
					for(let a in switchInfo[switchCases[each]]){
						for(let b in switchInfo[switchCases[each]][a]){
							auxlObjMethod(a,b,switchInfo[switchCases[each]][a][b]);
						}
					}
					return;
				}
			}
			//Default
			for(let a in switchInfo.default){
				for(let b in switchInfo.default[a]){
					auxlObjMethod(a,b,switchInfo.default[a][b]);
				}
			}
		} else if(auxl[condObj].GetFlagParent){
			//Layer
			let switchCondition = auxl[condObj].GetFlagParent(switchInfo.cond);
			//console.log(switchCondition);
			//Cases
			for(let each in switchCases){
				if(switchCondition === switchCases[each]){
					for(let a in switchInfo[switchCases[each]]){
						for(let b in switchInfo[switchCases[each]][a]){
							auxlObjMethod(a,b,switchInfo[switchCases[each]][a][b]);
						}
					}
					return;
				}
			}
			//Default
			for(let a in switchInfo.default){
				for(let b in switchInfo.default[a]){
					auxlObjMethod(a,b,switchInfo.default[a][b]);
				}
			}
		} else {
			console.log(condObj);
			console.log('Unable to find value');
			console.log(switchInfo.cond);
		}
	}
	//Run Object Generator Function within MapZone w/Scene Tracking
	const auxlObjMethod = (object, func, params) => {
		//Check if spawning to add to Tracker
		for (let types in auxl.objGenTracking) {
			if(func === auxl.objGenTracking[types].spawn || func === auxl.objGenTracking[types].altSpawn){
				auxl.spawnTracker(object, 'zone');
			}
		}
		auxl[object][func](params);
	}
	//Add Timeout, Interval, Interaction & Event listeners to MapZone Tracker
	const AddToZoneTimeIntEvtTracker = ({name,type,id,method,params,event}) => {
		let nameId = name+id;
		if(type === 'timeout'){
			auxl.zoneRunning[nameId] = {type, name, id, nameId};
		} else if (type === 'interval'){
			auxl.zoneRunning[nameId] = {type, name, id, nameId};
		} else if (type === 'interaction' || type === 'event'){
			auxl.zoneRunning[nameId] = {type, name, id, nameId, method, params, event};
		}
	}
	//Remove Timeout, Interval, Interaction & Event listeners from MapZone Tracker
	const RemoveFromZoneTimeIntEvtTracker = (name) => {
		delete auxl.zoneRunning[name];
	}
	//Clear All Timeout, Interval, Interaction & Event MapZone Tracker Listeners
	const ClearZoneTimeIntEvt = () => {
		for(let ran in auxl.zoneRunning){
			if(auxl.zoneRunning[ran].type === 'timeout'){
				clearTimeout(auxl.timeouts[auxl.zoneRunning[ran].nameId]);
				delete auxl.timeouts[auxl.zoneRunning[ran].nameId];
			} else if (auxl.zoneRunning[ran].type === 'interval'){
				clearInterval(auxl.intervals[auxl.zoneRunning[ran].nameId]);
				delete auxl.intervals[auxl.zoneRunning[ran].nameId];
			} else if (auxl.zoneRunning[ran].type === 'interaction' || auxl.zoneRunning[ran].type === 'event'){
auxl[auxl.zoneRunning[ran].name].GetEl().removeEventListener(auxl.zoneRunning[ran].event, function(){
auxlObjMethod(auxl.zoneRunning[ran].object,auxl.zoneRunning[ran].method,auxl.zoneRunning[ran].params);
});

			}
			RemoveFromZoneTimeIntEvtTracker(ran);
		}
	}
	//Read MapZone Data Timeline
	function readTimeline(time){
		if(time === 'controls'){
			auxl.universalControls.updateAction(core[time]);
			return;
		}
		for(let line in core[time]){
			//Check for special object support
			if(time === 'delay'){
				for(let a in core[time][line]){
					for(let b in core[time][line][a]){
						if(b === 'IfElse'){
							for(let c in core[time][line][a][b]){
								AddToZoneTimeIntEvtTracker({name: line, type: 'timeout', id: a});
								auxl.timeouts[line+a] = setTimeout(function () {
									IfElse(a,c,core[time][line][a][b][c]);
									clearTimeout(auxl.timeouts[line+a]);
								}, line);
							}
						} else if(b === 'Switch'){
							for(let c in core[time][line][a][b]){
								AddToZoneTimeIntEvtTracker({name: line, type: 'timeout', id: a});
								auxl.timeouts[line+a] = setTimeout(function () {
									Switch(a,c,core[time][line][a][b][c]);
									clearTimeout(auxl.timeouts[line+a]);
								}, line);
							}
						} else {
							AddToZoneTimeIntEvtTracker({name: line, type: 'timeout', id: a});
							auxl.timeouts[line+a] = setTimeout(function () {
								auxlObjMethod(a,b,core[time][line][a][b]);
								clearTimeout(auxl.timeouts[line+a]);
							}, line);
						}
					}
				}
			} else if(time === 'interval'){
				for(let a in core[time][line]){
					let ranTotal = 0;
					let loopTotal = core[time][line]['loop'];
					let endCond;
					if(core[time][line]['end']){
						endCond = core[time][line]['end'];
					}
					if(a === 'run'){
						for(let b in core[time][line][a]){
							for(let c in core[time][line][a][b]){
								if(c === 'IfElse'){
									for(let d in core[time][line][a][b][c]){
										AddToZoneTimeIntEvtTracker({name: line, type: 'interval', id: b});
										auxl.intervals[line+b] = setInterval(function() {
											if(auxl[b].GetFlag(endCond) === true){
												clearInterval(auxl.intervals[line+b]);
												RemoveFromZoneTimeIntEvtTracker(line+b);
											}
											IfElse(b,d,core[time][line][a][b][c][d]);
											if(loopTotal === 'infinite'){} else {
												ranTotal++;
												if(ranTotal >= loopTotal){
													clearInterval(auxl.intervals[line+b]);
													RemoveFromZoneTimeIntEvtTracker(line+b);
												}
											}
										}, line);
									}
								} else if(c === 'Switch'){
									for(let d in core[time][line][a][b][c]){
										AddToZoneTimeIntEvtTracker({name: line, type: 'interval', id: b});
										auxl.intervals[line+b] = setInterval(function() {
											if(auxl[b].GetFlag(endCond) === true){
												clearInterval(auxl.intervals[line+b]);
												RemoveFromZoneTimeIntEvtTracker(line+b);
											}
											Switch(b,d,core[time][line][a][b][c][d]);
											if(loopTotal === 'infinite'){} else {
												ranTotal++;
												if(ranTotal >= loopTotal){
													clearInterval(auxl.intervals[line+b]);
													RemoveFromZoneTimeIntEvtTracker(line+b);
												}
											}
										}, line);
									}
								} else {
									let method = c;
									let params = core[time][line][a][b][c];
									AddToZoneTimeIntEvtTracker({name: line, type: 'interval', id: b});
									auxl.intervals[line+b] = setInterval(function() {
										if(auxl[b].GetFlag(endCond) === true){
											clearInterval(auxl.intervals[line+b]);
											RemoveFromZoneTimeIntEvtTracker(line+b);
										}
										auxlObjMethod(b,method,params);
										if(loopTotal === 'infinite'){} else {
											ranTotal++;
											if(ranTotal >= loopTotal){
												clearInterval(auxl.intervals[line+b]);
												RemoveFromZoneTimeIntEvtTracker(line+b);
											}
										}
									}, line);
								}
							}
						}
					}
				}
			} else if(time === 'interaction'){
				for(let a in core[time][line]){
					for(let b in core[time][line][a]){
						let object;
						let method;
						let params;
						if(b === 'IfElse'){
							for(let c in core[time][line][a][b]){
								object = a;
								params = core[time][line][a][b][c];

								AddToZoneTimeIntEvtTracker({name: object, type: 'interaction', id: a, method, params, event: line});
								auxl[object].GetEl().addEventListener(line, function(){
									IfElse(object,c,params);
								});
							}
						} else if(b === 'Switch'){
							for(let c in core[time][line][a][b]){
								object = a;
								params = core[time][line][a][b][c];
								AddToZoneTimeIntEvtTracker({name: object, type: 'interaction', id: a, method, params, event: line});
								auxl[object].GetEl().addEventListener(line, function(){
									Switch(object,c,params);
								});
							}
						} else {
							object = a;
							method = b;
							params = core[time][line][a][b];
							AddToZoneTimeIntEvtTracker({name: object, type: 'interaction', id: a, method, params, event: line});
							auxl[object].GetEl().addEventListener(line, function(){
								auxlObjMethod(object,method,params);
							});
						}
					}
				}
			} else if(time === 'event'){
				for(let a in core[time][line]){
					for(let b in core[time][line][a]){
						let object;
						let method;
						let params;
						if(b === 'IfElse'){
							for(let c in core[time][line][a][b]){
								object = a;
								params = core[time][line][a][b][c];

								AddToZoneTimeIntEvtTracker({name: object, type: 'event', id: a, method, params, event: line});
								auxl[object].GetEl().addEventListener(line, function(){
									IfElse(object,c,params);
								});
							}
						} else if(b === 'Switch'){
							for(let c in core[time][line][a][b]){
								object = a;
								params = core[time][line][a][b][c];
								AddToZoneTimeIntEvtTracker({name: object, type: 'event', id: a, method, params, event: line});
								auxl[object].GetEl().addEventListener(line, function(){
									Switch(object,c,params);
								});
							}
						} else {
							object = a;
							method = b;
							params = core[time][line][a][b];
							AddToZoneTimeIntEvtTracker({name: object, type: 'event', id: a, method, params, event: line});
							auxl[object].GetEl().addEventListener(line, function(){
								auxlObjMethod(object,method,params);
							});
						}
					}
				}
			} else if(time === 'info'){} else {
				//Reading non-special timeline, read normally
				for(let a in core[time][line]){
					if(time === 'start'){
						if(a === 'IfElse'){
							for(let b in core[time][line][a]){
								IfElse(line,b,core[time][line][a][b]);
							}
						} else if(a === 'Switch'){
							for(let b in core[time][line][a]){
								Switch(line,b,core[time][line][a][b]);
							}
						} else {
							auxlObjMethod(line,a,core[time][line][a]);
						}
					} else if(time === 'exit'){
						if(a === 'IfElse'){
							for(let b in core[time][line][a]){
								IfElse(line,b,core[time][line][a][b]);
							}
						} else if(a === 'Switch'){
							for(let b in core[time][line][a]){
								Switch(line,b,core[time][line][a][b]);
							}
						} else {
							auxlObjMethod(line,a,core[time][line][a]);
						}
					} else {
						console.log('Hit Other Timeline, Please Investigate');
					}
				}
			}
		}
		return;
	}
	//Read MapZone Info Section
	const Info = () => {
		readTimeline('info');
	}
	//Add Controls into MapZone
	const AddControls = () => {
		readTimeline('controls');
		//UpdateControlText();
	}
	//Remove MapZone Controls
	const RemoveControls = () => {
		auxl.universalControls.disableAction(core['controls']);
	}
	//Read MapZone Start Section
	const Start = () => {
		readTimeline('start');
	}
	//Read MapZone Delay Section
	const Delay = () => {
		readTimeline('delay');
	}
	//Read MapZone Interval Section
	const Interval = () => {
		readTimeline('interval');
	}
	//Read MapZone Event Section
	const Event = () => {
		readTimeline('event');
	}
	//Read MapZone Interaction Section
	const Interaction = () => {
		readTimeline('interaction');
	}
	//Read MapZone Exit Section & Remove MapZone Controls
	const Exit = () => {
		readTimeline('exit');
		RemoveControls();
		core.zoneLoaded = false;
	}
	//MapZone Start
	const StartZone = () => {
		Start();
		Delay();
		Interval();
		Event();
		Interaction();
		AddControls();
	}
	//Start NodeScene within MapZone
	const StartScene = (nodeName) => {
		if(auxl.local.location.load){
			core.currentNode = auxl.local.location.scene;
		} else {
			core.currentNode = nodeName || core.info.start;
		}
		core.currentZone = core.info.id;
		auxl.currentZone = core.info.id;
		if(core.zoneLoaded){} else {
			StartZone();
			auxl.local.location.zone = core.info.id;
			core.zoneLoaded = true;
		}
		auxl[core.currentNode].StartScene();
		//Main Menu Travel Update
		MoveMainMenuUpdate();
		//Basic Zone Menu Travel Update
		if(core.displayBasicTravelMenu){
			MoveSpawnMenu();
		}
		auxl.player.UnlockLocomotion();
	}
	//Exit & Clear NodeScene
	const ClearScene = () => {
		auxl[core.currentNode].ClearScene();
	}
	//Generate & Spawn MapZone Map Menu
	const MoveSpawnMenu = () => {
		core.mapMenuData = {
			id: 'moveMenu',
			prompt: 'Move to...',
			options: {option0: '0'},
			actions: {action0: '0'},
			data: auxl.menuBaseData,
			cursorObj: core.currentZone,
			method: 'MenuMoveClick',
			pos: new THREE.Vector3(-1.5,1.5,-1),
		}
		let currNum = 0;
		let moveToNode;
		for(let connect in core.map[core.currentNode]){
			//In Zone Node or Out of Zone Node
			if(core.nodes[core.map[core.currentNode][connect].node]){
				moveToNode = core.nodes[core.map[core.currentNode][connect].node];
			} else {
				moveToNode = auxl[core.map[core.currentNode][connect].node];
			}
			//Open, Locked or Unlocked Travel
			if(core.map[core.currentNode][connect].locked && !auxl.comp.CheckForKey(core.map[core.currentNode][connect].keyId)){
				core.mapMenuData.options['option'+currNum] = moveToNode.core.info.name + ' [Locked]';
			} else if(core.map[core.currentNode][connect].locked && auxl.comp.CheckForKey(core.map[core.currentNode][connect].keyId)){
				core.mapMenuData.options['option'+currNum] = moveToNode.core.info.name + ' [Unlocked]';
			} else {
				core.mapMenuData.options['option'+currNum] = moveToNode.core.info.name;
			}
			core.mapMenuData.actions['action'+currNum] = connect;
			currNum++;
		}
		core.mapMenu = auxl.Menu(core.mapMenuData);
		core.mapMenu.SpawnMenu();
	}
	//Generate & Spawn MapZone Map Menu
	const MoveMainMenuUpdate = () => {
		core.mapMainMenuData = {};
		let buttonTemplate = {};
		let moreTemplate = {};
		//let currNum = 0;
		let currNum = 1;
		let currPage = 1;
		let moveToNode;
		let nodeName;
		let total = Object.keys(core.map[core.currentNode]).length;
		let pages = Math.ceil(total/7);
		let subMenuName = 'travel' + currPage;
		//scenario UpdateZoneMap
		if(auxl.local.location.load){}else{
			if(auxl.local.location.scenario === ''){}else{
				auxl[auxl.local.location.scenario].UpdateZoneMap();
			}
		}
		for(let connect in core.map[core.currentNode]){
			if(core.nodes[core.map[core.currentNode][connect].node]){
				moveToNode = core.nodes[core.map[core.currentNode][connect].node];
			} else {
				moveToNode = auxl[core.map[core.currentNode][connect].node];
			}
			//Open, Locked or Unlocked Travel
			if(core.map[core.currentNode][connect].locked && !auxl.comp.CheckForKey(core.map[core.currentNode][connect].keyId)){
				nodeName = moveToNode.core.info.name + ' [Locked]';
			} else if(core.map[core.currentNode][connect].locked && auxl.comp.CheckForKey(core.map[core.currentNode][connect].keyId)){
				nodeName = moveToNode.core.info.name + ' [Unlocked]';
			} else {
				nodeName = moveToNode.core.info.name;
			}
			//Update Button
			buttonTemplate = {
				id: 'action'+currNum,
				style: false,
				title: nodeName,
				description: 'Travel to '+nodeName,
				subMenu: false,
				action: {
					auxlObj: core.currentZone,
					component: false,
					method: 'Move',
					params: connect,
					menu: 'close',
				},
			};
			moreTemplate = {
				id: 'action'+currNum,
				style: false,
				title: 'More',
				description: 'Next Page',
				subMenu: false,
				action: false,
			};
			core.mapMainMenuData['button'+currNum] = buttonTemplate;
			if(currNum === total){
				//Update Companion main menu
				auxl.mainMenu.UpdateSubMenu(subMenuName,core.mapMainMenuData);
			} else {
				currNum++;
			}
			if(pages > 1){
				if(currNum % 7 === 0){
					currPage++;
					//build more button
					moreTemplate.id = 'action'+currNum;
					moreTemplate.subMenu = 'travel' + currPage;
					core.mapMainMenuData['button'+currNum] = moreTemplate;
					//Update Companion main menu
					auxl.mainMenu.UpdateSubMenu(subMenuName,core.mapMainMenuData);
					core.mapMainMenuData = {};
					subMenuName = 'travel' + currPage;
				}
			}
		}
	}
	//MapZone Menu Click
	const MenuMoveClick = (el) => {
		let result = el.getAttribute('result');
		Move(result);
	}
	//Move Scenes
	const Move = (connect) => {
		auxl.player.LockLocomotion();
		newNode = core.map[core.currentNode][connect];
		//Check for Lock & Keys
		if(newNode.locked && !auxl.comp.CheckForKey(newNode.keyId)){
			clearTimeout(timeout2);
			auxl.player.Notification({message:'Requires : ' + newNode.keyName});
		} else {
			if(newNode.locked && auxl.comp.CheckForKey(newNode.keyId) && !newNode.keepKey){
				auxl.comp.RemoveFromInventory(newNode.keyId);
			}
			//Move to NodeScene and/or MapZone
			timeout = setTimeout(() => {
				if(core.displayBasicTravelMenu){
					core.mapMenu.DespawnMenu();
				}
				ClearScene();
				if(core.nodes[newNode.node]){
					StartScene(newNode.node);
				} else {
					ClearZone();
					core.zoneLoaded = false;
					auxl[newNode.inZone].StartScene(newNode.node);
				}
				clearTimeout(timeout);
			}, 425);
			auxl.player.PlayerSceneAnim();
		}
	}
	//Change Scene
	//Not running Exit instructions correctly, possibly others
	const Change = (zone,scene) => {
		//No Key Checks
		timeout = setTimeout(() => {
			if(core.displayBasicTravelMenu){
				core.mapMenu.DespawnMenu();
			}
			ClearScene();
			if(core.id === zone){
				StartScene(scene);
			} else {
				ClearZone();
				core.zoneLoaded = false;
				auxl[zone].StartScene(scene);
			}
			clearTimeout(timeout);
		}, 425);
		auxl.player.PlayerSceneAnim();
	}
	//Clear Zone on Move
	const ClearZone = () => {
		Exit();
		ClearZoneTimeIntEvt();
		RemoveControls();
		auxl.clearSpawned(auxl.zoneSpawned);
		if(core.displayBasicTravelMenu){
			core.mapMenu.DespawnMenu();
		}
	}

	return {core, UpdateMap, StartScene, MoveSpawnMenu, MenuMoveClick, Move, Change, ClearZone};
}

//
//Scenario Gen
//entireScenarioSpawnLocationAlwaysDisplay
const Scenario = (auxl, scenarioData) => {
	let core = Object.assign({}, scenarioData);
	core.scenarioLoaded = false;
	let startTimeout;
	let zoneSpawn = core.info.startZone;
	let scenarioName = core.info.name;
	let scenarioInstructions = core.info.instructions;

	//If/Else support to run auxlObjMethod()
	const IfElse = (objRef, condObj,{cond, ifTrue, ifFalse}) => {
		if(auxl[condObj].GetFlag){
			//Core
			if(auxl[condObj].GetFlag(cond)) {
				for(let a in ifTrue){
					for(let b in ifTrue[a]){
						auxlObjMethod(a,b,ifTrue[a][b]);
					}
				}
			} else {
				for(let a in ifFalse){
					for(let b in ifFalse[a]){
						auxlObjMethod(a,b,ifFalse[a][b]);
					}
				}
			}
		} else if(auxl[condObj].GetFlagParent){
			//Layer
			if(auxl[condObj].GetFlagParent(cond)) {
				for(let a in ifTrue){
					for(let b in ifTrue[a]){
						auxlObjMethod(a,b,ifTrue[a][b]);
					}
				}
			} else {
				for(let a in ifFalse){
					for(let b in ifFalse[a]){
						auxlObjMethod(a,b,ifFalse[a][b]);
					}
				}
			}
		}
	}
	//Switch support to run auxlObjMethod()
	const Switch = (objRef, condObj,switchInfo) => {
		let switchCases = [];
		for(let each in switchInfo){
			if(each === 'default'){}else{
				switchCases.push(each)
			}
		}
		if(auxl[condObj].GetFlag){
			//Core, Basic Objects
			let switchCondition = auxl[condObj].GetFlag(switchInfo.cond);
			//console.log(switchCondition);
			//Cases
			for(let each in switchCases){
				if(switchCondition === switchCases[each]){
					for(let a in switchInfo[switchCases[each]]){
						for(let b in switchInfo[switchCases[each]][a]){
							auxlObjMethod(a,b,switchInfo[switchCases[each]][a][b]);
						}
					}
					return;
				}
			}
			//Default
			for(let a in switchInfo.default){
				for(let b in switchInfo.default[a]){
					auxlObjMethod(a,b,switchInfo.default[a][b]);
				}
			}
		} else if(auxl[condObj].GetFlagParent){
			//Layer
			let switchCondition = auxl[condObj].GetFlagParent(switchInfo.cond);
			//console.log(switchCondition);
			//Cases
			for(let each in switchCases){
				if(switchCondition === switchCases[each]){
					for(let a in switchInfo[switchCases[each]]){
						for(let b in switchInfo[switchCases[each]][a]){
							auxlObjMethod(a,b,switchInfo[switchCases[each]][a][b]);
						}
					}
					return;
				}
			}
			//Default
			for(let a in switchInfo.default){
				for(let b in switchInfo.default[a]){
					auxlObjMethod(a,b,switchInfo.default[a][b]);
				}
			}
		} else {
			console.log(condObj);
			console.log('Unable to find value');
			console.log(switchInfo.cond);
		}
	}
	//Run Object Generator Function within Scenario w/Scene Tracking
	const auxlObjMethod = (object, func, params) => {
		//Check if spawning to add to Tracker
		for (let types in auxl.objGenTracking) {
			if(func === auxl.objGenTracking[types].spawn || func === auxl.objGenTracking[types].altSpawn){
				auxl.spawnTracker(object, 'scenario');
			}
		}
		auxl[object][func](params);
	}
	//Remove Timeout, Interval, Interaction & Event listeners from Scenario Tracker
	const AddToScenarioTimeIntEvtTracker = ({name,type,id,method,params,event}) => {
		let nameId = name+id;
		if(type === 'timeout'){
			auxl.scenarioRunning[nameId] = {type, name, id, nameId};
		} else if(type === 'interval'){
			auxl.scenarioRunning[nameId] = {type, name, id, nameId};
		} else if(type === 'interaction' || type === 'event'){
			auxl.scenarioRunning[nameId] = {type, name, id, nameId, method, params, event};
		}
	}
	//Clear All Timeout, Interval, Interaction & Event Scenario Tracker Listeners
	const RemoveFromScenarioTimeIntEvtTracker = (name) => {
		delete auxl.scenarioRunning[name];
	}
	//Clear All Timeout, Interval, Interaction & Event Scenario Tracker Listeners
	const ClearScenarioTimeIntEvt = () => {
		for(let ran in auxl.scenarioRunning){
			if(auxl.scenarioRunning[ran].type === 'timeout'){
				clearTimeout(auxl.timeouts[auxl.scenarioRunning[ran].nameId]);
				delete auxl.timeouts[auxl.scenarioRunning[ran].nameId];
			} else if (auxl.scenarioRunning[ran].type === 'interval'){
				clearInterval(auxl.intervals[auxl.scenarioRunning[ran].nameId]);
				delete auxl.intervals[auxl.scenarioRunning[ran].nameId];
			} else if (auxl.scenarioRunning[ran].type === 'interaction' || auxl.scenarioRunning[ran].type === 'event'){
auxl[auxl.scenarioRunning[ran].name].GetEl().removeEventListener(auxl.scenarioRunning[ran].event, function(){
auxlObjMethod(auxl.scenarioRunning[ran].object,auxl.scenarioRunning[ran].method,auxl.scenarioRunning[ran].params);
});
			}
			RemoveFromScenarioTimeIntEvtTracker(ran);
		}
	}
	//Read Scenario Data Timeline
	function readTimeline(time){
		if(time === 'controls'){
			auxl.universalControls.updateAction(core[time]);
			return;
		}
		for(let line in core[time]){
			//Check for special object support
			if(time === 'delay'){
				for(let a in core[time][line]){
					for(let b in core[time][line][a]){
						if(b === 'IfElse'){
							for(let c in core[time][line][a][b]){
								AddToScenarioTimeIntEvtTracker({name: line, type: 'timeout', id: a});
								auxl.timeouts[line+a] = setTimeout(function () {
									IfElse(a,c,core[time][line][a][b][c]);
									clearTimeout(auxl.timeouts[line+a]);
								}, line);
							}
						} else if(b === 'Switch'){
							for(let c in core[time][line][a][b]){
								AddToScenarioTimeIntEvtTracker({name: line, type: 'timeout', id: a});
								auxl.timeouts[line+a] = setTimeout(function () {
									Switch(a,c,core[time][line][a][b][c]);
									clearTimeout(auxl.timeouts[line+a]);
								}, line);
							}
						} else {
							AddToScenarioTimeIntEvtTracker({name: line, type: 'timeout', id: a});
							auxl.timeouts[line+a] = setTimeout(function () {
								auxlObjMethod(a,b,core[time][line][a][b]);
								clearTimeout(auxl.timeouts[line+a]);
							}, line);
						}
					}
				}
			} else if(time === 'interval'){
				for(let a in core[time][line]){
					let ranTotal = 0;
					let loopTotal = core[time][line]['loop'];
					let endCond;
					if(core[time][line]['end']){
						endCond = core[time][line]['end'];
					}
					if(a === 'run'){
						for(let b in core[time][line][a]){
							for(let c in core[time][line][a][b]){
								if(c === 'IfElse'){
									for(let d in core[time][line][a][b][c]){
										AddToScenarioTimeIntEvtTracker({name: line, type: 'interval', id: b});
										auxl.intervals[line+b] = setInterval(function() {
											if(auxl[b].GetFlag(endCond) === true){
												clearInterval(auxl.intervals[line+b]);
												RemoveFromScenarioTimeIntEvtTracker(line+b);
											}
											IfElse(b,d,core[time][line][a][b][c][d]);
											if(loopTotal === 'infinite'){} else {
												ranTotal++;
												if(ranTotal >= loopTotal){
													clearInterval(auxl.intervals[line+b]);
													RemoveFromScenarioTimeIntEvtTracker(line+b);
												}
											}
										}, line);
									}
								} else if(c === 'Switch'){
									for(let d in core[time][line][a][b][c]){
										AddToScenarioTimeIntEvtTracker({name: line, type: 'interval', id: b});
										auxl.intervals[line+b] = setInterval(function() {
											if(auxl[b].GetFlag(endCond) === true){
												clearInterval(auxl.intervals[line+b]);
												RemoveFromScenarioTimeIntEvtTracker(line+b);
											}
											Switch(b,d,core[time][line][a][b][c][d]);
											if(loopTotal === 'infinite'){} else {
												ranTotal++;
												if(ranTotal >= loopTotal){
													clearInterval(auxl.intervals[line+b]);
													RemoveFromScenarioTimeIntEvtTracker(line+b);
												}
											}
										}, line);
									}
								} else {
									let method = c;
									let params = core[time][line][a][b][c];
									AddToScenarioTimeIntEvtTracker({name: line, type: 'interval', id: b});
									auxl.intervals[line+b] = setInterval(function() {
										if(auxl[b].GetFlag(endCond) === true){
											clearInterval(auxl.intervals[line+b]);
											RemoveFromScenarioTimeIntEvtTracker(line+b);
										}
										auxlObjMethod(b,method,params);
										if(loopTotal === 'infinite'){} else {
											ranTotal++;
											if(ranTotal >= loopTotal){
												clearInterval(auxl.intervals[line+b]);
												RemoveFromScenarioTimeIntEvtTracker(line+b);
											}
										}
									}, line);
								}
							}
						}
					}
				}
			} else if(time === 'interaction'){
				for(let a in core[time][line]){
					for(let b in core[time][line][a]){
						let object;
						let method;
						let params;
						if(b === 'IfElse'){
							for(let c in core[time][line][a][b]){
								object = a;
								params = core[time][line][a][b][c];

								AddToScenarioTimeIntEvtTracker({name: object, type: 'interaction', id: a, method, params, event: line});
								auxl[object].GetEl().addEventListener(line, function(){
									IfElse(object,c,params);
								});
							}
						} else if(b === 'Switch'){
							for(let c in core[time][line][a][b]){
								object = a;
								params = core[time][line][a][b][c];
								AddToScenarioTimeIntEvtTracker({name: object, type: 'interaction', id: a, method, params, event: line});
								auxl[object].GetEl().addEventListener(line, function(){
									Switch(object,c,params);
								});
							}
						} else {
							object = a;
							method = b;
							params = core[time][line][a][b];
							AddToScenarioTimeIntEvtTracker({name: object, type: 'interaction', id: a, method, params, event: line});
							auxl[object].GetEl().addEventListener(line, function(){
								auxlObjMethod(object,method,params);
							});
						}
					}
				}
			} else if(time === 'event'){
				for(let a in core[time][line]){
					for(let b in core[time][line][a]){
						let object;
						let method;
						let params;
						if(b === 'IfElse'){
							for(let c in core[time][line][a][b]){
								object = a;
								params = core[time][line][a][b][c];

								AddToScenarioTimeIntEvtTracker({name: object, type: 'event', id: a, method, params, event: line});
								auxl[object].GetEl().addEventListener(line, function(){
									IfElse(object,c,params);
								});
							}
						} else if(b === 'Switch'){
							for(let c in core[time][line][a][b]){
								object = a;
								params = core[time][line][a][b][c];
								AddToScenarioTimeIntEvtTracker({name: object, type: 'event', id: a, method, params, event: line});
								auxl[object].GetEl().addEventListener(line, function(){
									Switch(object,c,params);
								});
							}
						} else {
							object = a;
							method = b;
							params = core[time][line][a][b];
							AddToScenarioTimeIntEvtTracker({name: object, type: 'event', id: a, method, params, event: line});
							auxl[object].GetEl().addEventListener(line, function(){
								auxlObjMethod(object,method,params);
							});
						}
					}
				}
			} else if(time === 'info'){} else {
				//Reading non-special timeline, read normally
				for(let a in core[time][line]){
					if(time === 'start'){
						if(a === 'IfElse'){
							for(let b in core[time][line][a]){
								IfElse(line,b,core[time][line][a][b]);
							}
						} else if(a === 'Switch'){
							for(let b in core[time][line][a]){
								Switch(line,b,core[time][line][a][b]);
							}
						} else {
							auxlObjMethod(line,a,core[time][line][a]);
						}
					} else if(time === 'exit'){
						if(a === 'IfElse'){
							for(let b in core[time][line][a]){
								IfElse(line,b,core[time][line][a][b]);
							}
						} else if(a === 'Switch'){
							for(let b in core[time][line][a]){
								Switch(line,b,core[time][line][a][b]);
							}
						} else {
							auxlObjMethod(line,a,core[time][line][a]);
						}
					} else {
						console.log('Hit Other Timeline, Please Investigate');
					}
				}
			}
		}
		return;
	}
	//Update HTML w/Scenario Name
	function updateHTMLTitle(){
		scenarioHeaderTitle.innerHTML = scenarioName;
		scenarioMenuTitle.innerHTML = scenarioName;
	}
	//Update HTML w/Scenario Info
	function updateHTMLInstructions(){
		instructions.innerHTML = scenarioInstructions;
	}
	//Read Scenario Info Section
	const Info = () => {
		readTimeline('info');
	}
	//Add Controls into Scenario
	const AddControls = () => {
		readTimeline('controls');
		//UpdateControlText();
	}
	//Remove Scenario Controls
	const RemoveControls = () => {
		auxl.universalControls.disableAction(core['controls']);
	}
	//Read Scenario Start Section
	const Start = () => {
		readTimeline('start');
	}
	//Read Scenario Delay Section
	const Delay = () => {
		readTimeline('delay');
	}
	//Read Scenario Interval Section
	const Interval = () => {
		readTimeline('interval');
	}
	//Read Scenario Event Section
	const Event = () => {
		readTimeline('event');
	}
	//Read Scenario Interaction Section
	const Interaction = () => {
		readTimeline('interaction');
	}
	//Read Scenario Exit Section & Remove Scenario Controls
	const Exit = () => {
		readTimeline('exit');
		RemoveControls();
	}
	//Load all Scenario Items
	const Init = () => {
		Start();
		Delay();
		Interval();
		Event();
		Interaction();
		AddControls();
	}
	//Start Scenario
	const StartScenario = () => {
		if(core.scenarioLoaded){} else {
			auxl.player.PlayerSceneAnim();
			//Update Zone Map
			UpdateZoneMap();
			//Update HTML
			updateHTMLTitle();
			updateHTMLInstructions();
			//Get Universal Controls component
			auxl.universalControls = document.getElementById('playerRig').components['universal-controls'];
			//Start scene mid Player anim
			startTimeout = setTimeout(() => {
				//Load All Scenario Items
				Init();
				//zone to start in
				if(auxl.local.location.load){
					zoneSpawn = auxl.local.location.zone;
				} else {
					zoneSpawn = core.info.startZone;
				}
				auxl[zoneSpawn].StartScene();
				core.scenarioLoaded = true;
				auxl.local.location.scenario = core.info.id;
				clearTimeout(startTimeout);
			}, 425);
		}
	}
	//Exit & Clear Scenario
	const ClearScenario = () => {
		//unload current zone and scene
		auxl[auxl[auxl.currentZone].core.currentNode].ClearScene();
		auxl[auxl.currentZone].ClearZone();
		Exit();
		ClearScenarioTimeIntEvt();
		RemoveControls();
		auxl.clearSpawned(auxl.scenarioSpawned);

		core.scenarioLoaded = false;
	}
	//Update Zone Maps
	const UpdateZoneMap = () => {
		for(let key in core.map){
			//console.log(key)
			//console.log(core.map[key])
			auxl[key].UpdateMap(core.map[key]);
		}
	}

	return {core, StartScenario, ClearScenario, UpdateZoneMap};
}

//
//World Gen
//containAllScenarios
const World = (auxl, worldData) => {

	let world = {};
	world.data = Object.assign({}, worldData);
	world.id = world.data.info.id;
	world.name = world.data.info.name;
	world.scenarios = world.data.scenarios;
	world.current = 0;
	world.loaded = false;
	world.scenarioLoaded = false;

	//Set World as Default
	const SetAsDefault = () => {
		auxl.defaultWorld = auxl[world.id];
	}
	//Start World at Default Scenario
	const StartWorld = () => {
		WorldSettings();
		StartScenario(world.current);
		auxl.currentWorld = auxl[world.id];
		auxl.worldLoaded = true;
		auxl.local.location.world = world.id;
	}
	//Stop World
	const StopWorld = () => {
		ClearScenario(world.current);
		auxl.worldLoaded = false;
	}
	//World Settings
	const WorldSettings = () => {
		//Max Load Time
		if(world.data.info.maxLoadtime){
			auxl.maxLoadTime = world.data.info.maxLoadtime;
		} else {
			auxl.maxLoadTime = 5000;
		}
		//Day Time Length
		if(world.data.info.dayTime){
			auxl.timeInDay = world.data.info.dayTime;
		} else {
			auxl.timeInDay = 360000;
		}
		//Inventory
		if(world.data.info.inventory){
			auxl.comp.EnableInventory();
		} else {
			auxl.comp.enableInventory = false;
		}
		//Collision
		if(world.data.info.collision){
			auxl.collision = world.data.info.collision;
		} else {
			auxl.collision = false;
		}
		//Physics
		if(world.data.info.physics){
			world.data.info.physics = auxl.physics;
		} else {
			auxl.physics = false;
		}
		//Main Menu Style
		if(world.data.info.menuStyle){
			auxl.comp.UpdateMainMenuStyle(world.data.info.menuStyle);
		}
		//Main Menu Options
		if(world.data.info.menuOptions){
			auxl.comp.UpdateMainMenu(world.data.info.menuOptions);
		}
		//Background Audio
		if(world.data.info.backgroundAudio){
			auxl.playerAudio.core.sounds = {};
			auxl.playerAudio.core.sounds.background = {src: world.data.info.backgroundAudio, autoplay: true, loop: true, volume: 1,};
			auxl.playerAudio.SpawnCore(auxl.playerRig);
			auxl.backgroundAudio = true;
		}
		//Companion Book Update
		if(world.data.info.compBookUpdate){
			auxl.comp.UpdateBook(world.data.info.compBookUpdate);
		}
	}
	//Start a Scenario
	const StartScenario = (num) => {
		world.current = num;
		world.scenarios[num].StartScenario();
		world.scenarioLoaded = true;
	}
	//Clear a Scenario
	const ClearScenario = (num) => {
		world.scenarios[num].ClearScenario();
		world.scenarioLoaded = false;
	}
	//Next Scenario
	const NextScenario = () => {
		ClearScenario(world.current);
		world.current++;
		StartScenario(world.current);
	}
	//Load Scenario
	const LoadScenario = (num) => {
		ClearScenario(world.current);
		world.current = num;
		StartScenario(world.current);
	}

	return {world, SetAsDefault, StartWorld, StopWorld, StartScenario, ClearScenario, NextScenario, LoadScenario}
}

//
//Export


/***/ }),

/***/ "./src/system lazy recursive":
/*!*******************************************!*\
  !*** ./src/system/ lazy namespace object ***!
  \*******************************************/
/***/ ((module) => {

function webpackEmptyAsyncContext(req) {
	// Here Promise.resolve().then() is used instead of new Promise() to prevent
	// uncaught exception popping up in devtools
	return Promise.resolve().then(() => {
		var e = new Error("Cannot find module '" + req + "'");
		e.code = 'MODULE_NOT_FOUND';
		throw e;
	});
}
webpackEmptyAsyncContext.keys = () => ([]);
webpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;
webpackEmptyAsyncContext.id = "./src/system lazy recursive";
module.exports = webpackEmptyAsyncContext;

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be in strict mode.
(() => {
"use strict";
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _system_auxl_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./system/auxl.js */ "./src/system/auxl.js");
/* harmony import */ var _games_arcade_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./games/arcade.js */ "./src/games/arcade.js");
/* harmony import */ var _support_controls_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./support/controls.js */ "./src/support/controls.js");
/* harmony import */ var _support_movement_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./support/movement.js */ "./src/support/movement.js");
/* harmony import */ var _support_run_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./support/run.js */ "./src/support/run.js");
/* harmony import */ var _support_misc_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./support/misc.js */ "./src/support/misc.js");
/* harmony import */ var _support_material_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./support/material.js */ "./src/support/material.js");
/* harmony import */ var _support_menu_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./support/menu.js */ "./src/support/menu.js");
/* harmony import */ var _support_doors_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./support/doors.js */ "./src/support/doors.js");
/* harmony import */ var _support_inventory_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./support/inventory.js */ "./src/support/inventory.js");
/* harmony import */ var _support_physics_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./support/physics.js */ "./src/support/physics.js");
/* harmony import */ var _external_other_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./external/other.js */ "./src/external/other.js");
/* harmony import */ var _external_threeGradShader_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./external/threeGradShader.js */ "./src/external/threeGradShader.js");
/* harmony import */ var _load_library_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./load/library.js */ "./src/load/library.js");
//Import System & Components
//

//
//System
//
//Auxl


//
//Games
//
//Arcade

//
//Pet
//import pet from './games/pet.js';
//
//RPG
//import rpg from './games/rpg.js';

//
//Support
//
//Controls

//
//Movement

//
//Run

//
//Misc

//
//Material

//
//Menu

//
//Grid Doors

//
//Inventory

//
//Import Physics


//
//External
//
//Third Party ObjGen

//
//Three Grad Shader


//
//Load
//
//Import Library

})();

/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,